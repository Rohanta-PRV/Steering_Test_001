
Steering_Test_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bdc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08007cf0  08007cf0  00017cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008170  08008170  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  08008170  08008170  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008170  08008170  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08008178  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001f8  08008370  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  08008370  0002043c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009941  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bb3  00000000  00000000  00029ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008d0  00000000  00000000  0002b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b4  00000000  00000000  0002c028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018204  00000000  00000000  0002c6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b13f  00000000  00000000  000448e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087117  00000000  00000000  0004fa1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003778  00000000  00000000  000d6b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000da2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007cd4 	.word	0x08007cd4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08007cd4 	.word	0x08007cd4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2iz>:
 8000d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30f      	bcc.n	8000d6e <__aeabi_f2iz+0x2a>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d90d      	bls.n	8000d74 <__aeabi_f2iz+0x30>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d64:	fa23 f002 	lsr.w	r0, r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	4240      	negne	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2iz+0x3a>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d105      	bne.n	8000d8a <__aeabi_f2iz+0x46>
 8000d7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr

08000d90 <HC595write>:
char gear;

uint8_t currentVal = 0b00000000, currentVal1 = 0b00000000;

void HC595write()
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(MR1_PORT, MR1_PIN, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	4821      	ldr	r0, [pc, #132]	; (8000e24 <HC595write+0x94>)
 8000d9e:	f001 ffdd 	bl	8002d5c <HAL_GPIO_WritePin>
  HAL_Delay(1); // Ensure the register is cleared
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 fef6 	bl	8001b94 <HAL_Delay>
  HAL_GPIO_WritePin(MR1_PORT, MR1_PIN, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dae:	481d      	ldr	r0, [pc, #116]	; (8000e24 <HC595write+0x94>)
 8000db0:	f001 ffd4 	bl	8002d5c <HAL_GPIO_WritePin>

    for(int i=0; i<8; i++)
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	e023      	b.n	8000e02 <HC595write+0x72>
    {
        if(currentVal & (1<<i))
 8000dba:	4b1b      	ldr	r3, [pc, #108]	; (8000e28 <HC595write+0x98>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	fa42 f303 	asr.w	r3, r2, r3
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <HC595write+0x4a>
        {
            HAL_GPIO_WritePin(DS1_PORT, DS1_PIN, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4814      	ldr	r0, [pc, #80]	; (8000e24 <HC595write+0x94>)
 8000dd4:	f001 ffc2 	bl	8002d5c <HAL_GPIO_WritePin>
 8000dd8:	e004      	b.n	8000de4 <HC595write+0x54>
        }
        else
        {
            HAL_GPIO_WritePin(DS1_PORT, DS1_PIN, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2140      	movs	r1, #64	; 0x40
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <HC595write+0x94>)
 8000de0:	f001 ffbc 	bl	8002d5c <HAL_GPIO_WritePin>
        }
        HAL_GPIO_WritePin(SHCP1_PORT, SHCP1_PIN, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dea:	480e      	ldr	r0, [pc, #56]	; (8000e24 <HC595write+0x94>)
 8000dec:	f001 ffb6 	bl	8002d5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SHCP1_PORT, SHCP1_PIN, GPIO_PIN_RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df6:	480b      	ldr	r0, [pc, #44]	; (8000e24 <HC595write+0x94>)
 8000df8:	f001 ffb0 	bl	8002d5c <HAL_GPIO_WritePin>
    for(int i=0; i<8; i++)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b07      	cmp	r3, #7
 8000e06:	ddd8      	ble.n	8000dba <HC595write+0x2a>
    }
    HAL_GPIO_WritePin(STCP1_PORT, STCP1_PIN, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2180      	movs	r1, #128	; 0x80
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HC595write+0x94>)
 8000e0e:	f001 ffa5 	bl	8002d5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(STCP1_PORT, STCP1_PIN, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <HC595write+0x94>)
 8000e18:	f001 ffa0 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	20000288 	.word	0x20000288

08000e2c <HC595write1>:
void HC595write1()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(MR2_PORT, MR2_PIN, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2120      	movs	r1, #32
 8000e36:	4821      	ldr	r0, [pc, #132]	; (8000ebc <HC595write1+0x90>)
 8000e38:	f001 ff90 	bl	8002d5c <HAL_GPIO_WritePin>
  HAL_Delay(1); // Ensure the register is cleared
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f000 fea9 	bl	8001b94 <HAL_Delay>
  HAL_GPIO_WritePin(MR2_PORT, MR2_PIN, GPIO_PIN_SET);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2120      	movs	r1, #32
 8000e46:	481d      	ldr	r0, [pc, #116]	; (8000ebc <HC595write1+0x90>)
 8000e48:	f001 ff88 	bl	8002d5c <HAL_GPIO_WritePin>

    for(int i=0; i<8; i++)
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	e023      	b.n	8000e9a <HC595write1+0x6e>
    {
        if(currentVal1 & (1<<i))
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HC595write1+0x94>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	fa42 f303 	asr.w	r3, r2, r3
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <HC595write1+0x48>
        {
            HAL_GPIO_WritePin(DS2_PORT, DS2_PIN, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6c:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <HC595write1+0x98>)
 8000e6e:	f001 ff75 	bl	8002d5c <HAL_GPIO_WritePin>
 8000e72:	e005      	b.n	8000e80 <HC595write1+0x54>
        }
        else
        {
            HAL_GPIO_WritePin(DS2_PORT, DS2_PIN, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7a:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <HC595write1+0x98>)
 8000e7c:	f001 ff6e 	bl	8002d5c <HAL_GPIO_WritePin>
        }
        HAL_GPIO_WritePin(SHCP2_PORT, SHCP2_PIN, GPIO_PIN_SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2110      	movs	r1, #16
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <HC595write1+0x90>)
 8000e86:	f001 ff69 	bl	8002d5c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SHCP2_PORT, SHCP2_PIN, GPIO_PIN_RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2110      	movs	r1, #16
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <HC595write1+0x90>)
 8000e90:	f001 ff64 	bl	8002d5c <HAL_GPIO_WritePin>
    for(int i=0; i<8; i++)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3301      	adds	r3, #1
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b07      	cmp	r3, #7
 8000e9e:	ddd8      	ble.n	8000e52 <HC595write1+0x26>
    }
    HAL_GPIO_WritePin(STCP2_PORT, STCP2_PIN, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2108      	movs	r1, #8
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <HC595write1+0x90>)
 8000ea6:	f001 ff59 	bl	8002d5c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(STCP2_PORT, STCP2_PIN, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2108      	movs	r1, #8
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <HC595write1+0x90>)
 8000eb0:	f001 ff54 	bl	8002d5c <HAL_GPIO_WritePin>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	20000289 	.word	0x20000289
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <NXT_SendNum>:

uint8_t cmd_end[3] = {0xFF, 0xFF, 0xFF};
char msg[50]; int fl=0;

//	Predefined functions for sending different data to display
void NXT_SendNum(char *obj, int32_t num){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Enable onboard led to signify starting of transmission
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <NXT_SendNum+0x64>)
 8000eda:	f001 ff3f 	bl	8002d5c <HAL_GPIO_WritePin>
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000ede:	201e      	movs	r0, #30
 8000ee0:	f003 f97a 	bl	80041d8 <malloc>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *) buffer, "%s.val=%ld", obj, num); //change to %ld
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4910      	ldr	r1, [pc, #64]	; (8000f30 <NXT_SendNum+0x68>)
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f003 ff4e 	bl	8004d90 <siprintf>
 8000ef4:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart1, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	480c      	ldr	r0, [pc, #48]	; (8000f34 <NXT_SendNum+0x6c>)
 8000f02:	f002 fba3 	bl	800364c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
 8000f06:	2364      	movs	r3, #100	; 0x64
 8000f08:	2203      	movs	r2, #3
 8000f0a:	490b      	ldr	r1, [pc, #44]	; (8000f38 <NXT_SendNum+0x70>)
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <NXT_SendNum+0x6c>)
 8000f0e:	f002 fb9d 	bl	800364c <HAL_UART_Transmit>
	free(buffer);
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f003 f968 	bl	80041e8 <free>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1e:	4803      	ldr	r0, [pc, #12]	; (8000f2c <NXT_SendNum+0x64>)
 8000f20:	f001 ff1c 	bl	8002d5c <HAL_GPIO_WritePin>

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	08007cf0 	.word	0x08007cf0
 8000f34:	2000023c 	.word	0x2000023c
 8000f38:	2000000c 	.word	0x2000000c

08000f3c <NXT_SendFloat>:

void NXT_SendFloat(char *obj, float num, int dp){
 8000f3c:	b5b0      	push	{r4, r5, r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	482e      	ldr	r0, [pc, #184]	; (8001008 <NXT_SendFloat+0xcc>)
 8000f50:	f001 ff04 	bl	8002d5c <HAL_GPIO_WritePin>
	int32_t number = num * (pow(10,dp));
 8000f54:	68b8      	ldr	r0, [r7, #8]
 8000f56:	f7ff fa67 	bl	8000428 <__aeabi_f2d>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460d      	mov	r5, r1
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fa50 	bl	8000404 <__aeabi_i2d>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	f04f 0000 	mov.w	r0, #0
 8000f6c:	4927      	ldr	r1, [pc, #156]	; (800100c <NXT_SendFloat+0xd0>)
 8000f6e:	f005 ffa9 	bl	8006ec4 <pow>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4620      	mov	r0, r4
 8000f78:	4629      	mov	r1, r5
 8000f7a:	f7ff faad 	bl	80004d8 <__aeabi_dmul>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f7ff fd57 	bl	8000a38 <__aeabi_d2iz>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000f8e:	201e      	movs	r0, #30
 8000f90:	f003 f922 	bl	80041d8 <malloc>
 8000f94:	4603      	mov	r3, r0
 8000f96:	61bb      	str	r3, [r7, #24]
	int len = sprintf((char *)buffer, "%s.vvs1=%d", obj, dp);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	491c      	ldr	r1, [pc, #112]	; (8001010 <NXT_SendFloat+0xd4>)
 8000f9e:	69b8      	ldr	r0, [r7, #24]
 8000fa0:	f003 fef6 	bl	8004d90 <siprintf>
 8000fa4:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart1, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	69b9      	ldr	r1, [r7, #24]
 8000fb0:	4818      	ldr	r0, [pc, #96]	; (8001014 <NXT_SendFloat+0xd8>)
 8000fb2:	f002 fb4b 	bl	800364c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	2203      	movs	r2, #3
 8000fba:	4917      	ldr	r1, [pc, #92]	; (8001018 <NXT_SendFloat+0xdc>)
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <NXT_SendFloat+0xd8>)
 8000fbe:	f002 fb45 	bl	800364c <HAL_UART_Transmit>

	len = sprintf((char *)buffer, "%s.val=%ld", obj, number);
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	4915      	ldr	r1, [pc, #84]	; (800101c <NXT_SendFloat+0xe0>)
 8000fc8:	69b8      	ldr	r0, [r7, #24]
 8000fca:	f003 fee1 	bl	8004d90 <siprintf>
 8000fce:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart1, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd8:	69b9      	ldr	r1, [r7, #24]
 8000fda:	480e      	ldr	r0, [pc, #56]	; (8001014 <NXT_SendFloat+0xd8>)
 8000fdc:	f002 fb36 	bl	800364c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
 8000fe0:	2364      	movs	r3, #100	; 0x64
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <NXT_SendFloat+0xdc>)
 8000fe6:	480b      	ldr	r0, [pc, #44]	; (8001014 <NXT_SendFloat+0xd8>)
 8000fe8:	f002 fb30 	bl	800364c <HAL_UART_Transmit>
	free(buffer);
 8000fec:	69b8      	ldr	r0, [r7, #24]
 8000fee:	f003 f8fb 	bl	80041e8 <free>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <NXT_SendFloat+0xcc>)
 8000ffa:	f001 feaf 	bl	8002d5c <HAL_GPIO_WritePin>

}
 8000ffe:	bf00      	nop
 8001000:	3720      	adds	r7, #32
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	40011000 	.word	0x40011000
 800100c:	40240000 	.word	0x40240000
 8001010:	08007cfc 	.word	0x08007cfc
 8001014:	2000023c 	.word	0x2000023c
 8001018:	2000000c 	.word	0x2000000c
 800101c:	08007cf0 	.word	0x08007cf0

08001020 <NXT_SendTXT>:
	free(buffer);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

}

void NXT_SendTXT(char *obj, char val[]){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001030:	4814      	ldr	r0, [pc, #80]	; (8001084 <NXT_SendTXT+0x64>)
 8001032:	f001 fe93 	bl	8002d5c <HAL_GPIO_WritePin>
	uint8_t *buffer = malloc(30 * sizeof(char));
 8001036:	201e      	movs	r0, #30
 8001038:	f003 f8ce 	bl	80041d8 <malloc>
 800103c:	4603      	mov	r3, r0
 800103e:	60fb      	str	r3, [r7, #12]

	int len = sprintf((char *)buffer, "%s.txt=\"%s\"", obj, val);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4910      	ldr	r1, [pc, #64]	; (8001088 <NXT_SendTXT+0x68>)
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	f003 fea2 	bl	8004d90 <siprintf>
 800104c:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart1, buffer, len, 1000);
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	b29a      	uxth	r2, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001056:	68f9      	ldr	r1, [r7, #12]
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <NXT_SendTXT+0x6c>)
 800105a:	f002 faf7 	bl	800364c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
 800105e:	2364      	movs	r3, #100	; 0x64
 8001060:	2203      	movs	r2, #3
 8001062:	490b      	ldr	r1, [pc, #44]	; (8001090 <NXT_SendTXT+0x70>)
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <NXT_SendTXT+0x6c>)
 8001066:	f002 faf1 	bl	800364c <HAL_UART_Transmit>
	free(buffer);
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f003 f8bc 	bl	80041e8 <free>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <NXT_SendTXT+0x64>)
 8001078:	f001 fe70 	bl	8002d5c <HAL_GPIO_WritePin>

}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40011000 	.word	0x40011000
 8001088:	08007d10 	.word	0x08007d10
 800108c:	2000023c 	.word	0x2000023c
 8001090:	2000000c 	.word	0x2000000c

08001094 <CAN_Rx>:
	}
	HAL_GPIO_WritePin(stcp_port, stcp_pin, GPIO_PIN_SET);

}*/

void CAN_Rx(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	/* Waiting for the Message */

	while(! HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO1));
 8001098:	bf00      	nop
 800109a:	2101      	movs	r1, #1
 800109c:	4880      	ldr	r0, [pc, #512]	; (80012a0 <CAN_Rx+0x20c>)
 800109e:	f001 f8c6 	bl	800222e <HAL_CAN_GetRxFifoFillLevel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f8      	beq.n	800109a <CAN_Rx+0x6>

	if(HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO1, &RxHeader, canData)!= HAL_OK)
 80010a8:	4b7e      	ldr	r3, [pc, #504]	; (80012a4 <CAN_Rx+0x210>)
 80010aa:	4a7f      	ldr	r2, [pc, #508]	; (80012a8 <CAN_Rx+0x214>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	487c      	ldr	r0, [pc, #496]	; (80012a0 <CAN_Rx+0x20c>)
 80010b0:	f000 ff9c 	bl	8001fec <HAL_CAN_GetRxMessage>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <CAN_Rx+0x2a>
	{
		Error_Handler();
 80010ba:	f000 fb01 	bl	80016c0 <Error_Handler>
	}


	if(RxHeader.ExtId == 0x18F00400){
 80010be:	4b7a      	ldr	r3, [pc, #488]	; (80012a8 <CAN_Rx+0x214>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	4a7a      	ldr	r2, [pc, #488]	; (80012ac <CAN_Rx+0x218>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d123      	bne.n	8001110 <CAN_Rx+0x7c>
		// RPM (uint16_t)

		value1 = (float)(*z_value)*0.125;
 80010c8:	4b79      	ldr	r3, [pc, #484]	; (80012b0 <CAN_Rx+0x21c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fddf 	bl	8000c94 <__aeabi_ui2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f9a5 	bl	8000428 <__aeabi_f2d>
 80010de:	f04f 0200 	mov.w	r2, #0
 80010e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80010e6:	f7ff f9f7 	bl	80004d8 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fcc9 	bl	8000a88 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a6e      	ldr	r2, [pc, #440]	; (80012b4 <CAN_Rx+0x220>)
 80010fa:	6013      	str	r3, [r2, #0]
		NXT_SendNum("rpm", (int32_t)value1);
 80010fc:	4b6d      	ldr	r3, [pc, #436]	; (80012b4 <CAN_Rx+0x220>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fe1f 	bl	8000d44 <__aeabi_f2iz>
 8001106:	4603      	mov	r3, r0
 8001108:	4619      	mov	r1, r3
 800110a:	486b      	ldr	r0, [pc, #428]	; (80012b8 <CAN_Rx+0x224>)
 800110c:	f7ff fedc 	bl	8000ec8 <NXT_SendNum>
		NXT_SendNum("gear", (int32_t)gear);
		sprintf(msg,"Gear : %d \r\n",gear);
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg),1000);
	}*/

	if(RxHeader.ExtId == 0x0CF00301){
 8001110:	4b65      	ldr	r3, [pc, #404]	; (80012a8 <CAN_Rx+0x214>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4a69      	ldr	r2, [pc, #420]	; (80012bc <CAN_Rx+0x228>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d13d      	bne.n	8001196 <CAN_Rx+0x102>
			// tps
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001120:	4867      	ldr	r0, [pc, #412]	; (80012c0 <CAN_Rx+0x22c>)
 8001122:	f001 fe1b 	bl	8002d5c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800112a:	f000 fd33 	bl	8001b94 <HAL_Delay>
		value1 = (float)(*c_value)*1;
 800112e:	4b65      	ldr	r3, [pc, #404]	; (80012c4 <CAN_Rx+0x230>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fdad 	bl	8000c94 <__aeabi_ui2f>
 800113a:	4603      	mov	r3, r0
 800113c:	4a5d      	ldr	r2, [pc, #372]	; (80012b4 <CAN_Rx+0x220>)
 800113e:	6013      	str	r3, [r2, #0]
		NXT_SendNum("tpsbar", (int32_t)value1);
 8001140:	4b5c      	ldr	r3, [pc, #368]	; (80012b4 <CAN_Rx+0x220>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fdfd 	bl	8000d44 <__aeabi_f2iz>
 800114a:	4603      	mov	r3, r0
 800114c:	4619      	mov	r1, r3
 800114e:	485e      	ldr	r0, [pc, #376]	; (80012c8 <CAN_Rx+0x234>)
 8001150:	f7ff feba 	bl	8000ec8 <NXT_SendNum>
		sprintf(msg,"TPS : %0.2f per\r\n",value1);
 8001154:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <CAN_Rx+0x220>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f965 	bl	8000428 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	495a      	ldr	r1, [pc, #360]	; (80012cc <CAN_Rx+0x238>)
 8001164:	485a      	ldr	r0, [pc, #360]	; (80012d0 <CAN_Rx+0x23c>)
 8001166:	f003 fe13 	bl	8004d90 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 800116a:	4859      	ldr	r0, [pc, #356]	; (80012d0 <CAN_Rx+0x23c>)
 800116c:	f7fe fff0 	bl	8000150 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	4955      	ldr	r1, [pc, #340]	; (80012d0 <CAN_Rx+0x23c>)
 800117a:	4856      	ldr	r0, [pc, #344]	; (80012d4 <CAN_Rx+0x240>)
 800117c:	f002 fa66 	bl	800364c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001186:	484e      	ldr	r0, [pc, #312]	; (80012c0 <CAN_Rx+0x22c>)
 8001188:	f001 fde8 	bl	8002d5c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800118c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001190:	f000 fd00 	bl	8001b94 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
			sprintf(msg,"ID : %lu \r\n",RxHeader.ExtId);
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
	}

}
 8001194:	e081      	b.n	800129a <CAN_Rx+0x206>
	else if(RxHeader.ExtId == 0x18FEEE00){
 8001196:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <CAN_Rx+0x214>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4a4f      	ldr	r2, [pc, #316]	; (80012d8 <CAN_Rx+0x244>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d13a      	bne.n	8001216 <CAN_Rx+0x182>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a6:	4846      	ldr	r0, [pc, #280]	; (80012c0 <CAN_Rx+0x22c>)
 80011a8:	f001 fdd8 	bl	8002d5c <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 80011ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011b0:	f000 fcf0 	bl	8001b94 <HAL_Delay>
		value1 = (float)(*c_value)*1;
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <CAN_Rx+0x230>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fd6a 	bl	8000c94 <__aeabi_ui2f>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a3c      	ldr	r2, [pc, #240]	; (80012b4 <CAN_Rx+0x220>)
 80011c4:	6013      	str	r3, [r2, #0]
		NXT_SendFloat("oil_temp", value1, 2);
 80011c6:	4b3b      	ldr	r3, [pc, #236]	; (80012b4 <CAN_Rx+0x220>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2202      	movs	r2, #2
 80011cc:	4619      	mov	r1, r3
 80011ce:	4843      	ldr	r0, [pc, #268]	; (80012dc <CAN_Rx+0x248>)
 80011d0:	f7ff feb4 	bl	8000f3c <NXT_SendFloat>
		sprintf(msg,"Coolant : %0.2f per \r\n",value1);
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <CAN_Rx+0x220>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f925 	bl	8000428 <__aeabi_f2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	493f      	ldr	r1, [pc, #252]	; (80012e0 <CAN_Rx+0x24c>)
 80011e4:	483a      	ldr	r0, [pc, #232]	; (80012d0 <CAN_Rx+0x23c>)
 80011e6:	f003 fdd3 	bl	8004d90 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80011ea:	4839      	ldr	r0, [pc, #228]	; (80012d0 <CAN_Rx+0x23c>)
 80011ec:	f7fe ffb0 	bl	8000150 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <CAN_Rx+0x23c>)
 80011fa:	4836      	ldr	r0, [pc, #216]	; (80012d4 <CAN_Rx+0x240>)
 80011fc:	f002 fa26 	bl	800364c <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001206:	482e      	ldr	r0, [pc, #184]	; (80012c0 <CAN_Rx+0x22c>)
 8001208:	f001 fda8 	bl	8002d5c <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800120c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001210:	f000 fcc0 	bl	8001b94 <HAL_Delay>
}
 8001214:	e041      	b.n	800129a <CAN_Rx+0x206>
	else if(RxHeader.ExtId == 0x18FEF717){
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <CAN_Rx+0x214>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <CAN_Rx+0x250>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d124      	bne.n	800126a <CAN_Rx+0x1d6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001226:	4826      	ldr	r0, [pc, #152]	; (80012c0 <CAN_Rx+0x22c>)
 8001228:	f001 fd98 	bl	8002d5c <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 800122c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001230:	f000 fcb0 	bl	8001b94 <HAL_Delay>
		value1 = (float)(*e_value)*1;
 8001234:	4b2c      	ldr	r3, [pc, #176]	; (80012e8 <CAN_Rx+0x254>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fd2a 	bl	8000c94 <__aeabi_ui2f>
 8001240:	4603      	mov	r3, r0
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <CAN_Rx+0x220>)
 8001244:	6013      	str	r3, [r2, #0]
		NXT_SendFloat("bat_v", value1, 2);
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <CAN_Rx+0x220>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2202      	movs	r2, #2
 800124c:	4619      	mov	r1, r3
 800124e:	4827      	ldr	r0, [pc, #156]	; (80012ec <CAN_Rx+0x258>)
 8001250:	f7ff fe74 	bl	8000f3c <NXT_SendFloat>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800125a:	4819      	ldr	r0, [pc, #100]	; (80012c0 <CAN_Rx+0x22c>)
 800125c:	f001 fd7e 	bl	8002d5c <HAL_GPIO_WritePin>
			  HAL_Delay(1000);
 8001260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001264:	f000 fc96 	bl	8001b94 <HAL_Delay>
}
 8001268:	e017      	b.n	800129a <CAN_Rx+0x206>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001270:	4813      	ldr	r0, [pc, #76]	; (80012c0 <CAN_Rx+0x22c>)
 8001272:	f001 fd73 	bl	8002d5c <HAL_GPIO_WritePin>
			sprintf(msg,"ID : %lu \r\n",RxHeader.ExtId);
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <CAN_Rx+0x214>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	461a      	mov	r2, r3
 800127c:	491c      	ldr	r1, [pc, #112]	; (80012f0 <CAN_Rx+0x25c>)
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <CAN_Rx+0x23c>)
 8001280:	f003 fd86 	bl	8004d90 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <CAN_Rx+0x23c>)
 8001286:	f7fe ff63 	bl	8000150 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	490f      	ldr	r1, [pc, #60]	; (80012d0 <CAN_Rx+0x23c>)
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <CAN_Rx+0x240>)
 8001296:	f002 f9d9 	bl	800364c <HAL_UART_Transmit>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000214 	.word	0x20000214
 80012a4:	2000028c 	.word	0x2000028c
 80012a8:	20000294 	.word	0x20000294
 80012ac:	18f00400 	.word	0x18f00400
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000284 	.word	0x20000284
 80012b8:	08007d1c 	.word	0x08007d1c
 80012bc:	0cf00301 	.word	0x0cf00301
 80012c0:	40011000 	.word	0x40011000
 80012c4:	20000000 	.word	0x20000000
 80012c8:	08007d20 	.word	0x08007d20
 80012cc:	08007d28 	.word	0x08007d28
 80012d0:	200002b0 	.word	0x200002b0
 80012d4:	2000023c 	.word	0x2000023c
 80012d8:	18feee00 	.word	0x18feee00
 80012dc:	08007d3c 	.word	0x08007d3c
 80012e0:	08007d48 	.word	0x08007d48
 80012e4:	18fef717 	.word	0x18fef717
 80012e8:	20000004 	.word	0x20000004
 80012ec:	08007d60 	.word	0x08007d60
 80012f0:	08007d68 	.word	0x08007d68

080012f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f8:	f000 fbea 	bl	8001ad0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012fc:	f000 f890 	bl	8001420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001300:	f000 f954 	bl	80015ac <MX_GPIO_Init>
  MX_CAN_Init();
 8001304:	f000 f8d2 	bl	80014ac <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001308:	f000 f926 	bl	8001558 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_CAN_Start(&hcan) != HAL_OK)
 800130c:	4834      	ldr	r0, [pc, #208]	; (80013e0 <main+0xec>)
 800130e:	f000 fe29 	bl	8001f64 <HAL_CAN_Start>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <main+0x28>
    {
  	  Error_Handler();
 8001318:	f000 f9d2 	bl	80016c0 <Error_Handler>
    }

  currentVal1 = 0b00000000;
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <main+0xf0>)
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
  HC595write1();
 8001322:	f7ff fd83 	bl	8000e2c <HC595write1>
  currentVal =  0b00000000;
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <main+0xf4>)
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
  HC595write();
 800132c:	f7ff fd30 	bl	8000d90 <HC595write>
  HAL_Delay(1000);
 8001330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001334:	f000 fc2e 	bl	8001b94 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(fl==0){
 8001338:	4b2c      	ldr	r3, [pc, #176]	; (80013ec <main+0xf8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d14c      	bne.n	80013da <main+0xe6>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001346:	482a      	ldr	r0, [pc, #168]	; (80013f0 <main+0xfc>)
 8001348:	f001 fd08 	bl	8002d5c <HAL_GPIO_WritePin>
		    HAL_Delay(1000);
 800134c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001350:	f000 fc20 	bl	8001b94 <HAL_Delay>
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135a:	4825      	ldr	r0, [pc, #148]	; (80013f0 <main+0xfc>)
 800135c:	f001 fcfe 	bl	8002d5c <HAL_GPIO_WritePin>
		    NXT_SendNum("rpm", 0);
 8001360:	2100      	movs	r1, #0
 8001362:	4824      	ldr	r0, [pc, #144]	; (80013f4 <main+0x100>)
 8001364:	f7ff fdb0 	bl	8000ec8 <NXT_SendNum>
		    NXT_SendNum("speed", 0);
 8001368:	2100      	movs	r1, #0
 800136a:	4823      	ldr	r0, [pc, #140]	; (80013f8 <main+0x104>)
 800136c:	f7ff fdac 	bl	8000ec8 <NXT_SendNum>
		    NXT_SendNum("map", 0);
 8001370:	2100      	movs	r1, #0
 8001372:	4822      	ldr	r0, [pc, #136]	; (80013fc <main+0x108>)
 8001374:	f7ff fda8 	bl	8000ec8 <NXT_SendNum>

		    NXT_SendNum("bbar", 0);
 8001378:	2100      	movs	r1, #0
 800137a:	4821      	ldr	r0, [pc, #132]	; (8001400 <main+0x10c>)
 800137c:	f7ff fda4 	bl	8000ec8 <NXT_SendNum>
		    NXT_SendNum("tpsbar", 0);
 8001380:	2100      	movs	r1, #0
 8001382:	4820      	ldr	r0, [pc, #128]	; (8001404 <main+0x110>)
 8001384:	f7ff fda0 	bl	8000ec8 <NXT_SendNum>

		    NXT_SendTXT("gear", "");
 8001388:	491f      	ldr	r1, [pc, #124]	; (8001408 <main+0x114>)
 800138a:	4820      	ldr	r0, [pc, #128]	; (800140c <main+0x118>)
 800138c:	f7ff fe48 	bl	8001020 <NXT_SendTXT>
		    NXT_SendTXT("rad_state", "");
 8001390:	491d      	ldr	r1, [pc, #116]	; (8001408 <main+0x114>)
 8001392:	481f      	ldr	r0, [pc, #124]	; (8001410 <main+0x11c>)
 8001394:	f7ff fe44 	bl	8001020 <NXT_SendTXT>
		    NXT_SendFloat("afr", 1.00, 2);
 8001398:	2202      	movs	r2, #2
 800139a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800139e:	481d      	ldr	r0, [pc, #116]	; (8001414 <main+0x120>)
 80013a0:	f7ff fdcc 	bl	8000f3c <NXT_SendFloat>
		    NXT_SendFloat("bat_v", 1.00, 2);
 80013a4:	2202      	movs	r2, #2
 80013a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80013aa:	481b      	ldr	r0, [pc, #108]	; (8001418 <main+0x124>)
 80013ac:	f7ff fdc6 	bl	8000f3c <NXT_SendFloat>
		    NXT_SendFloat("oil_temp", 1.00, 2);
 80013b0:	2202      	movs	r2, #2
 80013b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80013b6:	4819      	ldr	r0, [pc, #100]	; (800141c <main+0x128>)
 80013b8:	f7ff fdc0 	bl	8000f3c <NXT_SendFloat>
		    fl++;
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <main+0xf8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <main+0xf8>)
 80013c4:	6013      	str	r3, [r2, #0]
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80013c6:	2201      	movs	r2, #1
 80013c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <main+0xfc>)
 80013ce:	f001 fcc5 	bl	8002d5c <HAL_GPIO_WritePin>
		    		    HAL_Delay(1000);
 80013d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d6:	f000 fbdd 	bl	8001b94 <HAL_Delay>
	  }
	  CAN_Rx();
 80013da:	f7ff fe5b 	bl	8001094 <CAN_Rx>
	  if(fl==0){
 80013de:	e7ab      	b.n	8001338 <main+0x44>
 80013e0:	20000214 	.word	0x20000214
 80013e4:	20000289 	.word	0x20000289
 80013e8:	20000288 	.word	0x20000288
 80013ec:	200002e4 	.word	0x200002e4
 80013f0:	40011000 	.word	0x40011000
 80013f4:	08007d1c 	.word	0x08007d1c
 80013f8:	08007d74 	.word	0x08007d74
 80013fc:	08007d7c 	.word	0x08007d7c
 8001400:	08007d80 	.word	0x08007d80
 8001404:	08007d20 	.word	0x08007d20
 8001408:	08007d88 	.word	0x08007d88
 800140c:	08007d8c 	.word	0x08007d8c
 8001410:	08007d94 	.word	0x08007d94
 8001414:	08007da0 	.word	0x08007da0
 8001418:	08007d60 	.word	0x08007d60
 800141c:	08007d3c 	.word	0x08007d3c

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	; 0x40
 8001424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	2228      	movs	r2, #40	; 0x28
 800142c:	2100      	movs	r1, #0
 800142e:	4618      	mov	r0, r3
 8001430:	f003 fd11 	bl	8004e56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001434:	1d3b      	adds	r3, r7, #4
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800144a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001458:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800145e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001462:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fc8f 	bl	8002d8c <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001474:	f000 f924 	bl	80016c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2302      	movs	r3, #2
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001484:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fefc 	bl	8003290 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800149e:	f000 f90f 	bl	80016c0 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3740      	adds	r7, #64	; 0x40
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80014b2:	4b27      	ldr	r3, [pc, #156]	; (8001550 <MX_CAN_Init+0xa4>)
 80014b4:	4a27      	ldr	r2, [pc, #156]	; (8001554 <MX_CAN_Init+0xa8>)
 80014b6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 72;
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <MX_CAN_Init+0xa4>)
 80014ba:	2248      	movs	r2, #72	; 0x48
 80014bc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <MX_CAN_Init+0xa4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_CAN_Init+0xa4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_CAN_Init+0xa4>)
 80014cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_CAN_Init+0xa4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_CAN_Init+0xa4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_CAN_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_CAN_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_CAN_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80014f0:	4b17      	ldr	r3, [pc, #92]	; (8001550 <MX_CAN_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_CAN_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80014fc:	4814      	ldr	r0, [pc, #80]	; (8001550 <MX_CAN_Init+0xa4>)
 80014fe:	f000 fb6d 	bl	8001bdc <HAL_CAN_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001508:	f000 f8da 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef can_filter_init;

  	can_filter_init.FilterActivation = CAN_FILTER_ENABLE;
 800150c:	2301      	movs	r3, #1
 800150e:	623b      	str	r3, [r7, #32]
  	can_filter_init.FilterBank = 10;  // Filter 0 (contains 2 32 bit Reg scans preferred ID)
 8001510:	230a      	movs	r3, #10
 8001512:	617b      	str	r3, [r7, #20]
  	can_filter_init.FilterFIFOAssignment = CAN_FILTER_FIFO1;  // FIFO1
 8001514:	2301      	movs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
  	can_filter_init.FilterIdHigh = 0x0000;
 8001518:	2300      	movs	r3, #0
 800151a:	603b      	str	r3, [r7, #0]
  	can_filter_init.FilterIdLow = 0x0000;
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
  	can_filter_init.FilterMaskIdHigh = 0x0000;
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
  	can_filter_init.FilterMaskIdLow = 0x0000;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  	can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  	can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800152c:	2301      	movs	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
  	can_filter_init.SlaveStartFilterBank = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	627b      	str	r3, [r7, #36]	; 0x24

  	if(HAL_CAN_ConfigFilter(&hcan, &can_filter_init) != HAL_OK)
 8001534:	463b      	mov	r3, r7
 8001536:	4619      	mov	r1, r3
 8001538:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_CAN_Init+0xa4>)
 800153a:	f000 fc4a 	bl	8001dd2 <HAL_CAN_ConfigFilter>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_CAN_Init+0x9c>
  	{
  		Error_Handler();
 8001544:	f000 f8bc 	bl	80016c0 <Error_Handler>
  	}
  /* USER CODE END CAN_Init 2 */

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000214 	.word	0x20000214
 8001554:	40006400 	.word	0x40006400

08001558 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <MX_USART1_UART_Init+0x50>)
 8001560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001564:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_USART1_UART_Init+0x4c>)
 8001590:	f002 f80c 	bl	80035ac <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800159a:	f000 f891 	bl	80016c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000023c 	.word	0x2000023c
 80015a8:	40013800 	.word	0x40013800

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a3a      	ldr	r2, [pc, #232]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0310 	and.w	r3, r3, #16
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a34      	ldr	r2, [pc, #208]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015de:	f043 0320 	orr.w	r3, r3, #32
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0320 	and.w	r3, r3, #32
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a2e      	ldr	r2, [pc, #184]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b2c      	ldr	r3, [pc, #176]	; (80016b0 <MX_GPIO_Init+0x104>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <MX_GPIO_Init+0x104>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a28      	ldr	r2, [pc, #160]	; (80016b0 <MX_GPIO_Init+0x104>)
 800160e:	f043 0308 	orr.w	r3, r3, #8
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <MX_GPIO_Init+0x104>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001626:	4823      	ldr	r0, [pc, #140]	; (80016b4 <MX_GPIO_Init+0x108>)
 8001628:	f001 fb98 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001632:	4821      	ldr	r0, [pc, #132]	; (80016b8 <MX_GPIO_Init+0x10c>)
 8001634:	f001 fb92 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_SET);
 8001638:	2201      	movs	r2, #1
 800163a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800163e:	481f      	ldr	r0, [pc, #124]	; (80016bc <MX_GPIO_Init+0x110>)
 8001640:	f001 fb8c 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	481c      	ldr	r0, [pc, #112]	; (80016bc <MX_GPIO_Init+0x110>)
 800164a:	f001 fb87 	bl	8002d5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2302      	movs	r3, #2
 800165e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4619      	mov	r1, r3
 8001666:	4813      	ldr	r0, [pc, #76]	; (80016b4 <MX_GPIO_Init+0x108>)
 8001668:	f001 f9f4 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800166c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2302      	movs	r3, #2
 800167c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167e:	f107 0310 	add.w	r3, r7, #16
 8001682:	4619      	mov	r1, r3
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <MX_GPIO_Init+0x10c>)
 8001686:	f001 f9e5 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB6 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 800168a:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 800168e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2302      	movs	r3, #2
 800169a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169c:	f107 0310 	add.w	r3, r7, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_GPIO_Init+0x110>)
 80016a4:	f001 f9d6 	bl	8002a54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000
 80016b4:	40011000 	.word	0x40011000
 80016b8:	40010800 	.word	0x40010800
 80016bc:	40010c00 	.word	0x40010c00

080016c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c4:	b672      	cpsid	i
}
 80016c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <Error_Handler+0x8>
	...

080016cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_MspInit+0x5c>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_MspInit+0x5c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_MspInit+0x5c>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x5c>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x5c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	61d3      	str	r3, [r2, #28]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x5c>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_MspInit+0x60>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_MspInit+0x60>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000

08001730 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a20      	ldr	r2, [pc, #128]	; (80017cc <HAL_CAN_MspInit+0x9c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d139      	bne.n	80017c4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001750:	4b1f      	ldr	r3, [pc, #124]	; (80017d0 <HAL_CAN_MspInit+0xa0>)
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <HAL_CAN_MspInit+0xa0>)
 8001756:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800175a:	61d3      	str	r3, [r2, #28]
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <HAL_CAN_MspInit+0xa0>)
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_CAN_MspInit+0xa0>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a18      	ldr	r2, [pc, #96]	; (80017d0 <HAL_CAN_MspInit+0xa0>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_CAN_MspInit+0xa0>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001784:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800178a:	2301      	movs	r3, #1
 800178c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	4619      	mov	r1, r3
 8001794:	480f      	ldr	r0, [pc, #60]	; (80017d4 <HAL_CAN_MspInit+0xa4>)
 8001796:	f001 f95d 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800179a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	4809      	ldr	r0, [pc, #36]	; (80017d4 <HAL_CAN_MspInit+0xa4>)
 80017b0:	f001 f950 	bl	8002a54 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2100      	movs	r1, #0
 80017b8:	2015      	movs	r0, #21
 80017ba:	f001 f862 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80017be:	2015      	movs	r0, #21
 80017c0:	f001 f87b 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40006400 	.word	0x40006400
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40010800 	.word	0x40010800

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a20      	ldr	r2, [pc, #128]	; (8001874 <HAL_UART_MspInit+0x9c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d139      	bne.n	800186c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f8:	4b1f      	ldr	r3, [pc, #124]	; (8001878 <HAL_UART_MspInit+0xa0>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_UART_MspInit+0xa0>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <HAL_UART_MspInit+0xa0>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001810:	4b19      	ldr	r3, [pc, #100]	; (8001878 <HAL_UART_MspInit+0xa0>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a18      	ldr	r2, [pc, #96]	; (8001878 <HAL_UART_MspInit+0xa0>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <HAL_UART_MspInit+0xa0>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800182c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f107 0310 	add.w	r3, r7, #16
 800183a:	4619      	mov	r1, r3
 800183c:	480f      	ldr	r0, [pc, #60]	; (800187c <HAL_UART_MspInit+0xa4>)
 800183e:	f001 f909 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f107 0310 	add.w	r3, r7, #16
 8001854:	4619      	mov	r1, r3
 8001856:	4809      	ldr	r0, [pc, #36]	; (800187c <HAL_UART_MspInit+0xa4>)
 8001858:	f001 f8fc 	bl	8002a54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	2025      	movs	r0, #37	; 0x25
 8001862:	f001 f80e 	bl	8002882 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001866:	2025      	movs	r0, #37	; 0x25
 8001868:	f001 f827 	bl	80028ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40013800 	.word	0x40013800
 8001878:	40021000 	.word	0x40021000
 800187c:	40010800 	.word	0x40010800

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c6:	f000 f949 	bl	8001b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80018d4:	4802      	ldr	r0, [pc, #8]	; (80018e0 <CAN1_RX1_IRQHandler+0x10>)
 80018d6:	f000 fcd1 	bl	800227c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000214 	.word	0x20000214

080018e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018e8:	4802      	ldr	r0, [pc, #8]	; (80018f4 <USART1_IRQHandler+0x10>)
 80018ea:	f001 ff3b 	bl	8003764 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000023c 	.word	0x2000023c

080018f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return 1;
 80018fc:	2301      	movs	r3, #1
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr

08001906 <_kill>:

int _kill(int pid, int sig)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001910:	f003 fb04 	bl	8004f1c <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	2216      	movs	r2, #22
 8001918:	601a      	str	r2, [r3, #0]
  return -1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_exit>:

void _exit (int status)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800192e:	f04f 31ff 	mov.w	r1, #4294967295
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7ff ffe7 	bl	8001906 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001938:	e7fe      	b.n	8001938 <_exit+0x12>

0800193a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	60f8      	str	r0, [r7, #12]
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	e00a      	b.n	8001962 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800194c:	f3af 8000 	nop.w
 8001950:	4601      	mov	r1, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	60ba      	str	r2, [r7, #8]
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	429a      	cmp	r2, r3
 8001968:	dbf0      	blt.n	800194c <_read+0x12>
  }

  return len;
 800196a:	687b      	ldr	r3, [r7, #4]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e009      	b.n	800199a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	60ba      	str	r2, [r7, #8]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbf1      	blt.n	8001986 <_write+0x12>
  }
  return len;
 80019a2:	687b      	ldr	r3, [r7, #4]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <_close>:

int _close(int file)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019d2:	605a      	str	r2, [r3, #4]
  return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <_isatty>:

int _isatty(int file)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e8:	2301      	movs	r3, #1
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <_sbrk+0x5c>)
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <_sbrk+0x60>)
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_sbrk+0x64>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d102      	bne.n	8001a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <_sbrk+0x64>)
 8001a2a:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <_sbrk+0x68>)
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d207      	bcs.n	8001a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a3c:	f003 fa6e 	bl	8004f1c <__errno>
 8001a40:	4603      	mov	r3, r0
 8001a42:	220c      	movs	r2, #12
 8001a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	e009      	b.n	8001a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	4a05      	ldr	r2, [pc, #20]	; (8001a70 <_sbrk+0x64>)
 8001a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3718      	adds	r7, #24
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20005000 	.word	0x20005000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	200002e8 	.word	0x200002e8
 8001a74:	20000440 	.word	0x20000440

08001a78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a7c:	bf00      	nop
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff fff8 	bl	8001a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a8a:	490c      	ldr	r1, [pc, #48]	; (8001abc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a09      	ldr	r2, [pc, #36]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001aa0:	4c09      	ldr	r4, [pc, #36]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f003 fa3b 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ab2:	f7ff fc1f 	bl	80012f4 <main>
  bx lr
 8001ab6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001abc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001ac0:	08008178 	.word	0x08008178
  ldr r2, =_sbss
 8001ac4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001ac8:	2000043c 	.word	0x2000043c

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>
	...

08001ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ad4:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <HAL_Init+0x28>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <HAL_Init+0x28>)
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 fec3 	bl	800286c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f000 f808 	bl	8001afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aec:	f7ff fdee 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40022000 	.word	0x40022000

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <HAL_InitTick+0x54>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <HAL_InitTick+0x58>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fedb 	bl	80028d6 <HAL_SYSTICK_Config>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00e      	b.n	8001b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b0f      	cmp	r3, #15
 8001b2e:	d80a      	bhi.n	8001b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b30:	2200      	movs	r2, #0
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f000 fea3 	bl	8002882 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b3c:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_InitTick+0x5c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	e000      	b.n	8001b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000010 	.word	0x20000010
 8001b54:	20000018 	.word	0x20000018
 8001b58:	20000014 	.word	0x20000014

08001b5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HAL_IncTick+0x1c>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <HAL_IncTick+0x20>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	4a03      	ldr	r2, [pc, #12]	; (8001b7c <HAL_IncTick+0x20>)
 8001b6e:	6013      	str	r3, [r2, #0]
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr
 8001b78:	20000018 	.word	0x20000018
 8001b7c:	200002ec 	.word	0x200002ec

08001b80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b02      	ldr	r3, [pc, #8]	; (8001b90 <HAL_GetTick+0x10>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	200002ec 	.word	0x200002ec

08001b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b9c:	f7ff fff0 	bl	8001b80 <HAL_GetTick>
 8001ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bac:	d005      	beq.n	8001bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_Delay+0x44>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bba:	bf00      	nop
 8001bbc:	f7ff ffe0 	bl	8001b80 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8f7      	bhi.n	8001bbc <HAL_Delay+0x28>
  {
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000018 	.word	0x20000018

08001bdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0ed      	b.n	8001dca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fd98 	bl	8001730 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0201 	orr.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c10:	f7ff ffb6 	bl	8001b80 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c16:	e012      	b.n	8001c3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c18:	f7ff ffb2 	bl	8001b80 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b0a      	cmp	r3, #10
 8001c24:	d90b      	bls.n	8001c3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2205      	movs	r2, #5
 8001c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e0c5      	b.n	8001dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0e5      	beq.n	8001c18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0202 	bic.w	r2, r2, #2
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c5c:	f7ff ff90 	bl	8001b80 <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c62:	e012      	b.n	8001c8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c64:	f7ff ff8c 	bl	8001b80 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b0a      	cmp	r3, #10
 8001c70:	d90b      	bls.n	8001c8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2205      	movs	r2, #5
 8001c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e09f      	b.n	8001dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e5      	bne.n	8001c64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7e1b      	ldrb	r3, [r3, #24]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	e007      	b.n	8001cc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7e5b      	ldrb	r3, [r3, #25]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d108      	bne.n	8001cdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	e007      	b.n	8001cec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7e9b      	ldrb	r3, [r3, #26]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0220 	orr.w	r2, r2, #32
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	e007      	b.n	8001d16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0220 	bic.w	r2, r2, #32
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7edb      	ldrb	r3, [r3, #27]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0210 	bic.w	r2, r2, #16
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e007      	b.n	8001d40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0210 	orr.w	r2, r2, #16
 8001d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	7f1b      	ldrb	r3, [r3, #28]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d108      	bne.n	8001d5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0208 	orr.w	r2, r2, #8
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e007      	b.n	8001d6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0208 	bic.w	r2, r2, #8
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	7f5b      	ldrb	r3, [r3, #29]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0204 	orr.w	r2, r2, #4
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	e007      	b.n	8001d94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0204 	bic.w	r2, r2, #4
 8001d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	ea42 0103 	orr.w	r1, r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	1e5a      	subs	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b087      	sub	sp, #28
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dea:	7cfb      	ldrb	r3, [r7, #19]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d003      	beq.n	8001df8 <HAL_CAN_ConfigFilter+0x26>
 8001df0:	7cfb      	ldrb	r3, [r7, #19]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	f040 80aa 	bne.w	8001f4c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001dfe:	f043 0201 	orr.w	r2, r3, #1
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	2201      	movs	r2, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d123      	bne.n	8001e7a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e54:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3248      	adds	r2, #72	; 0x48
 8001e5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e70:	6979      	ldr	r1, [r7, #20]
 8001e72:	3348      	adds	r3, #72	; 0x48
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	440b      	add	r3, r1
 8001e78:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d122      	bne.n	8001ec8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ea2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	3248      	adds	r2, #72	; 0x48
 8001ea8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ebc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ebe:	6979      	ldr	r1, [r7, #20]
 8001ec0:	3348      	adds	r3, #72	; 0x48
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d109      	bne.n	8001ee4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ee2:	e007      	b.n	8001ef4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f3e:	f023 0201 	bic.w	r2, r3, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e006      	b.n	8001f5a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
  }
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	371c      	adds	r7, #28
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr

08001f64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d12e      	bne.n	8001fd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0201 	bic.w	r2, r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f90:	f7ff fdf6 	bl	8001b80 <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f96:	e012      	b.n	8001fbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f98:	f7ff fdf2 	bl	8001b80 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b0a      	cmp	r3, #10
 8001fa4:	d90b      	bls.n	8001fbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001faa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2205      	movs	r2, #5
 8001fb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e012      	b.n	8001fe4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1e5      	bne.n	8001f98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e006      	b.n	8001fe4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
  }
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002000:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002002:	7dfb      	ldrb	r3, [r7, #23]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d003      	beq.n	8002010 <HAL_CAN_GetRxMessage+0x24>
 8002008:	7dfb      	ldrb	r3, [r7, #23]
 800200a:	2b02      	cmp	r3, #2
 800200c:	f040 8103 	bne.w	8002216 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10e      	bne.n	8002034 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d116      	bne.n	8002052 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e0f7      	b.n	8002224 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0303 	and.w	r3, r3, #3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0e8      	b.n	8002224 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	331b      	adds	r3, #27
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0204 	and.w	r2, r3, #4
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10c      	bne.n	800208a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	331b      	adds	r3, #27
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4413      	add	r3, r2
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0d5b      	lsrs	r3, r3, #21
 8002080:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e00b      	b.n	80020a2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	331b      	adds	r3, #27
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	4413      	add	r3, r2
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	331b      	adds	r3, #27
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	4413      	add	r3, r2
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0202 	and.w	r2, r3, #2
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	331b      	adds	r3, #27
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2208      	movs	r2, #8
 80020d4:	611a      	str	r2, [r3, #16]
 80020d6:	e00b      	b.n	80020f0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	331b      	adds	r3, #27
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	3304      	adds	r3, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 020f 	and.w	r2, r3, #15
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	331b      	adds	r3, #27
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4413      	add	r3, r2
 80020fc:	3304      	adds	r3, #4
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	0a1b      	lsrs	r3, r3, #8
 8002102:	b2da      	uxtb	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	331b      	adds	r3, #27
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	b29a      	uxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b2da      	uxtb	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4413      	add	r3, r2
 8002140:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0a1a      	lsrs	r2, r3, #8
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0c1a      	lsrs	r2, r3, #16
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	3302      	adds	r3, #2
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4413      	add	r3, r2
 8002174:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0e1a      	lsrs	r2, r3, #24
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	3303      	adds	r3, #3
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4413      	add	r3, r2
 800218e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	3304      	adds	r3, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0a1a      	lsrs	r2, r3, #8
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	3305      	adds	r3, #5
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	4413      	add	r3, r2
 80021c0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0c1a      	lsrs	r2, r3, #16
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	3306      	adds	r3, #6
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	4413      	add	r3, r2
 80021da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0e1a      	lsrs	r2, r3, #24
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	3307      	adds	r3, #7
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d108      	bne.n	8002202 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0220 	orr.w	r2, r2, #32
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	e007      	b.n	8002212 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0220 	orr.w	r2, r2, #32
 8002210:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e006      	b.n	8002224 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
  }
}
 8002224:	4618      	mov	r0, r3
 8002226:	371c      	adds	r7, #28
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800222e:	b480      	push	{r7}
 8002230:	b085      	sub	sp, #20
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002242:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002244:	7afb      	ldrb	r3, [r7, #11]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d002      	beq.n	8002250 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d10f      	bne.n	8002270 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	e005      	b.n	8002270 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002270:	68fb      	ldr	r3, [r7, #12]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d07c      	beq.n	80023bc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d023      	beq.n	8002314 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2201      	movs	r2, #1
 80022d2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f983 	bl	80025ea <HAL_CAN_TxMailbox0CompleteCallback>
 80022e4:	e016      	b.n	8002314 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d004      	beq.n	80022fa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
 80022f8:	e00c      	b.n	8002314 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f003 0308 	and.w	r3, r3, #8
 8002300:	2b00      	cmp	r3, #0
 8002302:	d004      	beq.n	800230e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e002      	b.n	8002314 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f986 	bl	8002620 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231a:	2b00      	cmp	r3, #0
 800231c:	d024      	beq.n	8002368 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002326:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f962 	bl	80025fc <HAL_CAN_TxMailbox1CompleteCallback>
 8002338:	e016      	b.n	8002368 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
 800234c:	e00c      	b.n	8002368 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
 8002360:	e002      	b.n	8002368 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f965 	bl	8002632 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d024      	beq.n	80023bc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800237a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f941 	bl	800260e <HAL_CAN_TxMailbox2CompleteCallback>
 800238c:	e016      	b.n	80023bc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
 80023a0:	e00c      	b.n	80023bc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
 80023b4:	e002      	b.n	80023bc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f944 	bl	8002644 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d00c      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0310 	and.w	r3, r3, #16
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2210      	movs	r2, #16
 80023de:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00b      	beq.n	8002402 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2208      	movs	r2, #8
 80023fa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f933 	bl	8002668 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f91b 	bl	8002656 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002420:	6a3b      	ldr	r3, [r7, #32]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00c      	beq.n	8002444 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d007      	beq.n	8002444 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2210      	movs	r2, #16
 8002442:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002444:	6a3b      	ldr	r3, [r7, #32]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2208      	movs	r2, #8
 800245e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f913 	bl	800268c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d009      	beq.n	8002484 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8fb 	bl	800267a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2210      	movs	r2, #16
 800249e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8fc 	bl	800269e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00b      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2208      	movs	r2, #8
 80024c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8f4 	bl	80026b0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d07b      	beq.n	80025ca <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d072      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024dc:	6a3b      	ldr	r3, [r7, #32]
 80024de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d008      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d008      	beq.n	8002514 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	f043 0302 	orr.w	r3, r3, #2
 8002512:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002514:	6a3b      	ldr	r3, [r7, #32]
 8002516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	f043 0304 	orr.w	r3, r3, #4
 800252e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002536:	2b00      	cmp	r3, #0
 8002538:	d043      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002540:	2b00      	cmp	r3, #0
 8002542:	d03e      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800254a:	2b60      	cmp	r3, #96	; 0x60
 800254c:	d02b      	beq.n	80025a6 <HAL_CAN_IRQHandler+0x32a>
 800254e:	2b60      	cmp	r3, #96	; 0x60
 8002550:	d82e      	bhi.n	80025b0 <HAL_CAN_IRQHandler+0x334>
 8002552:	2b50      	cmp	r3, #80	; 0x50
 8002554:	d022      	beq.n	800259c <HAL_CAN_IRQHandler+0x320>
 8002556:	2b50      	cmp	r3, #80	; 0x50
 8002558:	d82a      	bhi.n	80025b0 <HAL_CAN_IRQHandler+0x334>
 800255a:	2b40      	cmp	r3, #64	; 0x40
 800255c:	d019      	beq.n	8002592 <HAL_CAN_IRQHandler+0x316>
 800255e:	2b40      	cmp	r3, #64	; 0x40
 8002560:	d826      	bhi.n	80025b0 <HAL_CAN_IRQHandler+0x334>
 8002562:	2b30      	cmp	r3, #48	; 0x30
 8002564:	d010      	beq.n	8002588 <HAL_CAN_IRQHandler+0x30c>
 8002566:	2b30      	cmp	r3, #48	; 0x30
 8002568:	d822      	bhi.n	80025b0 <HAL_CAN_IRQHandler+0x334>
 800256a:	2b10      	cmp	r3, #16
 800256c:	d002      	beq.n	8002574 <HAL_CAN_IRQHandler+0x2f8>
 800256e:	2b20      	cmp	r3, #32
 8002570:	d005      	beq.n	800257e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002572:	e01d      	b.n	80025b0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800257c:	e019      	b.n	80025b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002586:	e014      	b.n	80025b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	f043 0320 	orr.w	r3, r3, #32
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002590:	e00f      	b.n	80025b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800259a:	e00a      	b.n	80025b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025a4:	e005      	b.n	80025b2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ae:	e000      	b.n	80025b2 <HAL_CAN_IRQHandler+0x336>
            break;
 80025b0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699a      	ldr	r2, [r3, #24]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2204      	movs	r2, #4
 80025c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f870 	bl	80026c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	; 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f0:	4013      	ands	r3, r2
 80026f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002706:	4a04      	ldr	r2, [pc, #16]	; (8002718 <__NVIC_SetPriorityGrouping+0x44>)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	60d3      	str	r3, [r2, #12]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	e000ed00 	.word	0xe000ed00

0800271c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <__NVIC_GetPriorityGrouping+0x18>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f003 0307 	and.w	r3, r3, #7
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	db0b      	blt.n	8002762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	f003 021f 	and.w	r2, r3, #31
 8002750:	4906      	ldr	r1, [pc, #24]	; (800276c <__NVIC_EnableIRQ+0x34>)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	095b      	lsrs	r3, r3, #5
 8002758:	2001      	movs	r0, #1
 800275a:	fa00 f202 	lsl.w	r2, r0, r2
 800275e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100

08002770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	db0a      	blt.n	800279a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	490c      	ldr	r1, [pc, #48]	; (80027bc <__NVIC_SetPriority+0x4c>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	440b      	add	r3, r1
 8002794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002798:	e00a      	b.n	80027b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_SetPriority+0x50>)
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	3b04      	subs	r3, #4
 80027a8:	0112      	lsls	r2, r2, #4
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	440b      	add	r3, r1
 80027ae:	761a      	strb	r2, [r3, #24]
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000e100 	.word	0xe000e100
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b089      	sub	sp, #36	; 0x24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f1c3 0307 	rsb	r3, r3, #7
 80027de:	2b04      	cmp	r3, #4
 80027e0:	bf28      	it	cs
 80027e2:	2304      	movcs	r3, #4
 80027e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d902      	bls.n	80027f4 <NVIC_EncodePriority+0x30>
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	3b03      	subs	r3, #3
 80027f2:	e000      	b.n	80027f6 <NVIC_EncodePriority+0x32>
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f8:	f04f 32ff 	mov.w	r2, #4294967295
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43da      	mvns	r2, r3
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	401a      	ands	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800280c:	f04f 31ff 	mov.w	r1, #4294967295
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	43d9      	mvns	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800281c:	4313      	orrs	r3, r2
         );
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002838:	d301      	bcc.n	800283e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800283a:	2301      	movs	r3, #1
 800283c:	e00f      	b.n	800285e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <SysTick_Config+0x40>)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002846:	210f      	movs	r1, #15
 8002848:	f04f 30ff 	mov.w	r0, #4294967295
 800284c:	f7ff ff90 	bl	8002770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <SysTick_Config+0x40>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002856:	4b04      	ldr	r3, [pc, #16]	; (8002868 <SysTick_Config+0x40>)
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	e000e010 	.word	0xe000e010

0800286c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff2d 	bl	80026d4 <__NVIC_SetPriorityGrouping>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002882:	b580      	push	{r7, lr}
 8002884:	b086      	sub	sp, #24
 8002886:	af00      	add	r7, sp, #0
 8002888:	4603      	mov	r3, r0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002894:	f7ff ff42 	bl	800271c <__NVIC_GetPriorityGrouping>
 8002898:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7ff ff90 	bl	80027c4 <NVIC_EncodePriority>
 80028a4:	4602      	mov	r2, r0
 80028a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028aa:	4611      	mov	r1, r2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff5f 	bl	8002770 <__NVIC_SetPriority>
}
 80028b2:	bf00      	nop
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	4603      	mov	r3, r0
 80028c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff ff35 	bl	8002738 <__NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b082      	sub	sp, #8
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff ffa2 	bl	8002828 <SysTick_Config>
 80028e4:	4603      	mov	r3, r0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d008      	beq.n	8002918 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2204      	movs	r2, #4
 800290a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e020      	b.n	800295a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020e 	bic.w	r2, r2, #14
 8002926:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f022 0201 	bic.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f202 	lsl.w	r2, r1, r2
 8002946:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d005      	beq.n	8002988 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	73fb      	strb	r3, [r7, #15]
 8002986:	e051      	b.n	8002a2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 020e 	bic.w	r2, r2, #14
 8002996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0201 	bic.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a22      	ldr	r2, [pc, #136]	; (8002a38 <HAL_DMA_Abort_IT+0xd4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d029      	beq.n	8002a06 <HAL_DMA_Abort_IT+0xa2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a21      	ldr	r2, [pc, #132]	; (8002a3c <HAL_DMA_Abort_IT+0xd8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d022      	beq.n	8002a02 <HAL_DMA_Abort_IT+0x9e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <HAL_DMA_Abort_IT+0xdc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d01a      	beq.n	80029fc <HAL_DMA_Abort_IT+0x98>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1e      	ldr	r2, [pc, #120]	; (8002a44 <HAL_DMA_Abort_IT+0xe0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d012      	beq.n	80029f6 <HAL_DMA_Abort_IT+0x92>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1c      	ldr	r2, [pc, #112]	; (8002a48 <HAL_DMA_Abort_IT+0xe4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00a      	beq.n	80029f0 <HAL_DMA_Abort_IT+0x8c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1b      	ldr	r2, [pc, #108]	; (8002a4c <HAL_DMA_Abort_IT+0xe8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d102      	bne.n	80029ea <HAL_DMA_Abort_IT+0x86>
 80029e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029e8:	e00e      	b.n	8002a08 <HAL_DMA_Abort_IT+0xa4>
 80029ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029ee:	e00b      	b.n	8002a08 <HAL_DMA_Abort_IT+0xa4>
 80029f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029f4:	e008      	b.n	8002a08 <HAL_DMA_Abort_IT+0xa4>
 80029f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029fa:	e005      	b.n	8002a08 <HAL_DMA_Abort_IT+0xa4>
 80029fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a00:	e002      	b.n	8002a08 <HAL_DMA_Abort_IT+0xa4>
 8002a02:	2310      	movs	r3, #16
 8002a04:	e000      	b.n	8002a08 <HAL_DMA_Abort_IT+0xa4>
 8002a06:	2301      	movs	r3, #1
 8002a08:	4a11      	ldr	r2, [pc, #68]	; (8002a50 <HAL_DMA_Abort_IT+0xec>)
 8002a0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
    } 
  }
  return status;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	40020008 	.word	0x40020008
 8002a3c:	4002001c 	.word	0x4002001c
 8002a40:	40020030 	.word	0x40020030
 8002a44:	40020044 	.word	0x40020044
 8002a48:	40020058 	.word	0x40020058
 8002a4c:	4002006c 	.word	0x4002006c
 8002a50:	40020000 	.word	0x40020000

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b08b      	sub	sp, #44	; 0x2c
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a66:	e169      	b.n	8002d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	f040 8158 	bne.w	8002d36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	4a9a      	ldr	r2, [pc, #616]	; (8002cf4 <HAL_GPIO_Init+0x2a0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d05e      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002a90:	4a98      	ldr	r2, [pc, #608]	; (8002cf4 <HAL_GPIO_Init+0x2a0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d875      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002a96:	4a98      	ldr	r2, [pc, #608]	; (8002cf8 <HAL_GPIO_Init+0x2a4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d058      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002a9c:	4a96      	ldr	r2, [pc, #600]	; (8002cf8 <HAL_GPIO_Init+0x2a4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d86f      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aa2:	4a96      	ldr	r2, [pc, #600]	; (8002cfc <HAL_GPIO_Init+0x2a8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d052      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002aa8:	4a94      	ldr	r2, [pc, #592]	; (8002cfc <HAL_GPIO_Init+0x2a8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d869      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aae:	4a94      	ldr	r2, [pc, #592]	; (8002d00 <HAL_GPIO_Init+0x2ac>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d04c      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002ab4:	4a92      	ldr	r2, [pc, #584]	; (8002d00 <HAL_GPIO_Init+0x2ac>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d863      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002aba:	4a92      	ldr	r2, [pc, #584]	; (8002d04 <HAL_GPIO_Init+0x2b0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d046      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
 8002ac0:	4a90      	ldr	r2, [pc, #576]	; (8002d04 <HAL_GPIO_Init+0x2b0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d85d      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002ac6:	2b12      	cmp	r3, #18
 8002ac8:	d82a      	bhi.n	8002b20 <HAL_GPIO_Init+0xcc>
 8002aca:	2b12      	cmp	r3, #18
 8002acc:	d859      	bhi.n	8002b82 <HAL_GPIO_Init+0x12e>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <HAL_GPIO_Init+0x80>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002b4f 	.word	0x08002b4f
 8002ad8:	08002b29 	.word	0x08002b29
 8002adc:	08002b3b 	.word	0x08002b3b
 8002ae0:	08002b7d 	.word	0x08002b7d
 8002ae4:	08002b83 	.word	0x08002b83
 8002ae8:	08002b83 	.word	0x08002b83
 8002aec:	08002b83 	.word	0x08002b83
 8002af0:	08002b83 	.word	0x08002b83
 8002af4:	08002b83 	.word	0x08002b83
 8002af8:	08002b83 	.word	0x08002b83
 8002afc:	08002b83 	.word	0x08002b83
 8002b00:	08002b83 	.word	0x08002b83
 8002b04:	08002b83 	.word	0x08002b83
 8002b08:	08002b83 	.word	0x08002b83
 8002b0c:	08002b83 	.word	0x08002b83
 8002b10:	08002b83 	.word	0x08002b83
 8002b14:	08002b83 	.word	0x08002b83
 8002b18:	08002b31 	.word	0x08002b31
 8002b1c:	08002b45 	.word	0x08002b45
 8002b20:	4a79      	ldr	r2, [pc, #484]	; (8002d08 <HAL_GPIO_Init+0x2b4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b26:	e02c      	b.n	8002b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	623b      	str	r3, [r7, #32]
          break;
 8002b2e:	e029      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	3304      	adds	r3, #4
 8002b36:	623b      	str	r3, [r7, #32]
          break;
 8002b38:	e024      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	3308      	adds	r3, #8
 8002b40:	623b      	str	r3, [r7, #32]
          break;
 8002b42:	e01f      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	623b      	str	r3, [r7, #32]
          break;
 8002b4c:	e01a      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b56:	2304      	movs	r3, #4
 8002b58:	623b      	str	r3, [r7, #32]
          break;
 8002b5a:	e013      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d105      	bne.n	8002b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b64:	2308      	movs	r3, #8
 8002b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69fa      	ldr	r2, [r7, #28]
 8002b6c:	611a      	str	r2, [r3, #16]
          break;
 8002b6e:	e009      	b.n	8002b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b70:	2308      	movs	r3, #8
 8002b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	615a      	str	r2, [r3, #20]
          break;
 8002b7a:	e003      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
          break;
 8002b80:	e000      	b.n	8002b84 <HAL_GPIO_Init+0x130>
          break;
 8002b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2bff      	cmp	r3, #255	; 0xff
 8002b88:	d801      	bhi.n	8002b8e <HAL_GPIO_Init+0x13a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	e001      	b.n	8002b92 <HAL_GPIO_Init+0x13e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3304      	adds	r3, #4
 8002b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2bff      	cmp	r3, #255	; 0xff
 8002b98:	d802      	bhi.n	8002ba0 <HAL_GPIO_Init+0x14c>
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	e002      	b.n	8002ba6 <HAL_GPIO_Init+0x152>
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	3b08      	subs	r3, #8
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	210f      	movs	r1, #15
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	401a      	ands	r2, r3
 8002bb8:	6a39      	ldr	r1, [r7, #32]
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80b1 	beq.w	8002d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002bd4:	4b4d      	ldr	r3, [pc, #308]	; (8002d0c <HAL_GPIO_Init+0x2b8>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	4a4c      	ldr	r2, [pc, #304]	; (8002d0c <HAL_GPIO_Init+0x2b8>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6193      	str	r3, [r2, #24]
 8002be0:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_GPIO_Init+0x2b8>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bec:	4a48      	ldr	r2, [pc, #288]	; (8002d10 <HAL_GPIO_Init+0x2bc>)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <HAL_GPIO_Init+0x2c0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d013      	beq.n	8002c40 <HAL_GPIO_Init+0x1ec>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a3f      	ldr	r2, [pc, #252]	; (8002d18 <HAL_GPIO_Init+0x2c4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d00d      	beq.n	8002c3c <HAL_GPIO_Init+0x1e8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a3e      	ldr	r2, [pc, #248]	; (8002d1c <HAL_GPIO_Init+0x2c8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d007      	beq.n	8002c38 <HAL_GPIO_Init+0x1e4>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <HAL_GPIO_Init+0x2cc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_GPIO_Init+0x1e0>
 8002c30:	2303      	movs	r3, #3
 8002c32:	e006      	b.n	8002c42 <HAL_GPIO_Init+0x1ee>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e004      	b.n	8002c42 <HAL_GPIO_Init+0x1ee>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e002      	b.n	8002c42 <HAL_GPIO_Init+0x1ee>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <HAL_GPIO_Init+0x1ee>
 8002c40:	2300      	movs	r3, #0
 8002c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c44:	f002 0203 	and.w	r2, r2, #3
 8002c48:	0092      	lsls	r2, r2, #2
 8002c4a:	4093      	lsls	r3, r2
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c52:	492f      	ldr	r1, [pc, #188]	; (8002d10 <HAL_GPIO_Init+0x2bc>)
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	3302      	adds	r3, #2
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d006      	beq.n	8002c7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	492c      	ldr	r1, [pc, #176]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	608b      	str	r3, [r1, #8]
 8002c78:	e006      	b.n	8002c88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	4928      	ldr	r1, [pc, #160]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c94:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	4922      	ldr	r1, [pc, #136]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60cb      	str	r3, [r1, #12]
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	491e      	ldr	r1, [pc, #120]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	4918      	ldr	r1, [pc, #96]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
 8002cc8:	e006      	b.n	8002cd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	4914      	ldr	r1, [pc, #80]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d021      	beq.n	8002d28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ce4:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	490e      	ldr	r1, [pc, #56]	; (8002d24 <HAL_GPIO_Init+0x2d0>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]
 8002cf0:	e021      	b.n	8002d36 <HAL_GPIO_Init+0x2e2>
 8002cf2:	bf00      	nop
 8002cf4:	10320000 	.word	0x10320000
 8002cf8:	10310000 	.word	0x10310000
 8002cfc:	10220000 	.word	0x10220000
 8002d00:	10210000 	.word	0x10210000
 8002d04:	10120000 	.word	0x10120000
 8002d08:	10110000 	.word	0x10110000
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40010000 	.word	0x40010000
 8002d14:	40010800 	.word	0x40010800
 8002d18:	40010c00 	.word	0x40010c00
 8002d1c:	40011000 	.word	0x40011000
 8002d20:	40011400 	.word	0x40011400
 8002d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	4909      	ldr	r1, [pc, #36]	; (8002d58 <HAL_GPIO_Init+0x304>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	3301      	adds	r3, #1
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f47f ae8e 	bne.w	8002a68 <HAL_GPIO_Init+0x14>
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	372c      	adds	r7, #44	; 0x2c
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	807b      	strh	r3, [r7, #2]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d6c:	787b      	ldrb	r3, [r7, #1]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d72:	887a      	ldrh	r2, [r7, #2]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d78:	e003      	b.n	8002d82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d7a:	887b      	ldrh	r3, [r7, #2]
 8002d7c:	041a      	lsls	r2, r3, #16
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e272      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8087 	beq.w	8002eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dac:	4b92      	ldr	r3, [pc, #584]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d00c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002db8:	4b8f      	ldr	r3, [pc, #572]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d112      	bne.n	8002dea <HAL_RCC_OscConfig+0x5e>
 8002dc4:	4b8c      	ldr	r3, [pc, #560]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd0:	d10b      	bne.n	8002dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd2:	4b89      	ldr	r3, [pc, #548]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d06c      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x12c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d168      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e24c      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x76>
 8002df4:	4b80      	ldr	r3, [pc, #512]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a7f      	ldr	r2, [pc, #508]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	e02e      	b.n	8002e60 <HAL_RCC_OscConfig+0xd4>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x98>
 8002e0a:	4b7b      	ldr	r3, [pc, #492]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7a      	ldr	r2, [pc, #488]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b78      	ldr	r3, [pc, #480]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a77      	ldr	r2, [pc, #476]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xd4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0xbc>
 8002e2e:	4b72      	ldr	r3, [pc, #456]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a71      	ldr	r2, [pc, #452]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b6f      	ldr	r3, [pc, #444]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6e      	ldr	r2, [pc, #440]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xd4>
 8002e48:	4b6b      	ldr	r3, [pc, #428]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a67      	ldr	r2, [pc, #412]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fe8a 	bl	8001b80 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe fe86 	bl	8001b80 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e200      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b5d      	ldr	r3, [pc, #372]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xe4>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fe76 	bl	8001b80 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fe72 	bl	8001b80 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	; 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1ec      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	4b53      	ldr	r3, [pc, #332]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x10c>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec6:	4b4c      	ldr	r3, [pc, #304]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ed2:	4b49      	ldr	r3, [pc, #292]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d11c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x18c>
 8002ede:	4b46      	ldr	r3, [pc, #280]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d116      	bne.n	8002f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	4b43      	ldr	r3, [pc, #268]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x176>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1c0      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4939      	ldr	r1, [pc, #228]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	e03a      	b.n	8002f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe fe2b 	bl	8001b80 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fe27 	bl	8001b80 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e1a1      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	4b2d      	ldr	r3, [pc, #180]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4927      	ldr	r1, [pc, #156]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f62:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fe0a 	bl	8001b80 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe fe06 	bl	8001b80 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e180      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	4b1d      	ldr	r3, [pc, #116]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03a      	beq.n	8003010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d019      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fdea 	bl	8001b80 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fde6 	bl	8001b80 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e160      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f000 face 	bl	8003570 <RCC_Delay>
 8002fd4:	e01c      	b.n	8003010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fdd0 	bl	8001b80 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe2:	e00f      	b.n	8003004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fdcc 	bl	8001b80 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d908      	bls.n	8003004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e146      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	42420000 	.word	0x42420000
 8003000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	4b92      	ldr	r3, [pc, #584]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e9      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a6 	beq.w	800316a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003022:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10d      	bne.n	800304a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4a87      	ldr	r2, [pc, #540]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003038:	61d3      	str	r3, [r2, #28]
 800303a:	4b85      	ldr	r3, [pc, #532]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003046:	2301      	movs	r3, #1
 8003048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b82      	ldr	r3, [pc, #520]	; (8003254 <HAL_RCC_OscConfig+0x4c8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d118      	bne.n	8003088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003056:	4b7f      	ldr	r3, [pc, #508]	; (8003254 <HAL_RCC_OscConfig+0x4c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7e      	ldr	r2, [pc, #504]	; (8003254 <HAL_RCC_OscConfig+0x4c8>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003062:	f7fe fd8d 	bl	8001b80 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306a:	f7fe fd89 	bl	8001b80 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	; 0x64
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e103      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	4b75      	ldr	r3, [pc, #468]	; (8003254 <HAL_RCC_OscConfig+0x4c8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x312>
 8003090:	4b6f      	ldr	r3, [pc, #444]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4a6e      	ldr	r2, [pc, #440]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6213      	str	r3, [r2, #32]
 800309c:	e02d      	b.n	80030fa <HAL_RCC_OscConfig+0x36e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x334>
 80030a6:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a69      	ldr	r2, [pc, #420]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6213      	str	r3, [r2, #32]
 80030b2:	4b67      	ldr	r3, [pc, #412]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a66      	ldr	r2, [pc, #408]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	6213      	str	r3, [r2, #32]
 80030be:	e01c      	b.n	80030fa <HAL_RCC_OscConfig+0x36e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCC_OscConfig+0x356>
 80030c8:	4b61      	ldr	r3, [pc, #388]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a60      	ldr	r2, [pc, #384]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	4b5e      	ldr	r3, [pc, #376]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a5d      	ldr	r2, [pc, #372]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	e00b      	b.n	80030fa <HAL_RCC_OscConfig+0x36e>
 80030e2:	4b5b      	ldr	r3, [pc, #364]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4a5a      	ldr	r2, [pc, #360]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6213      	str	r3, [r2, #32]
 80030ee:	4b58      	ldr	r3, [pc, #352]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a57      	ldr	r2, [pc, #348]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d015      	beq.n	800312e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe fd3d 	bl	8001b80 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fe fd39 	bl	8001b80 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0b1      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	4b4b      	ldr	r3, [pc, #300]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ee      	beq.n	800310a <HAL_RCC_OscConfig+0x37e>
 800312c:	e014      	b.n	8003158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312e:	f7fe fd27 	bl	8001b80 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fe fd23 	bl	8001b80 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e09b      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314c:	4b40      	ldr	r3, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ee      	bne.n	8003136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d105      	bne.n	800316a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315e:	4b3c      	ldr	r3, [pc, #240]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4a3b      	ldr	r2, [pc, #236]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8087 	beq.w	8003282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003174:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b08      	cmp	r3, #8
 800317e:	d061      	beq.n	8003244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d146      	bne.n	8003216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003188:	4b33      	ldr	r3, [pc, #204]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe fcf7 	bl	8001b80 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe fcf3 	bl	8001b80 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e06d      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a8:	4b29      	ldr	r3, [pc, #164]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d108      	bne.n	80031d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031be:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4921      	ldr	r1, [pc, #132]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d0:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a19      	ldr	r1, [r3, #32]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	430b      	orrs	r3, r1
 80031e2:	491b      	ldr	r1, [pc, #108]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	4b1b      	ldr	r3, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fcc7 	bl	8001b80 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fcc3 	bl	8001b80 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e03d      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x46a>
 8003214:	e035      	b.n	8003282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fcb0 	bl	8001b80 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe fcac 	bl	8001b80 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e026      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	4b06      	ldr	r3, [pc, #24]	; (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x498>
 8003242:	e01e      	b.n	8003282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e019      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
 8003250:	40021000 	.word	0x40021000
 8003254:	40007000 	.word	0x40007000
 8003258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x500>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	429a      	cmp	r2, r3
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000

08003290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0d0      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d910      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4965      	ldr	r1, [pc, #404]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b63      	ldr	r3, [pc, #396]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b8      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ec:	4b59      	ldr	r3, [pc, #356]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a58      	ldr	r2, [pc, #352]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003304:	4b53      	ldr	r3, [pc, #332]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a52      	ldr	r2, [pc, #328]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800330e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b50      	ldr	r3, [pc, #320]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	494d      	ldr	r1, [pc, #308]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d040      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d115      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b41      	ldr	r3, [pc, #260]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e073      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06b      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336e:	4b39      	ldr	r3, [pc, #228]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4936      	ldr	r1, [pc, #216]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003380:	f7fe fbfe 	bl	8001b80 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fe fbfa 	bl	8001b80 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e053      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 020c 	and.w	r2, r3, #12
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1eb      	bne.n	8003388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	4b27      	ldr	r3, [pc, #156]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d210      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b24      	ldr	r3, [pc, #144]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 0207 	bic.w	r2, r3, #7
 80033c6:	4922      	ldr	r1, [pc, #136]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b20      	ldr	r3, [pc, #128]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e032      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b19      	ldr	r3, [pc, #100]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4916      	ldr	r1, [pc, #88]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800340a:	4b12      	ldr	r3, [pc, #72]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490e      	ldr	r1, [pc, #56]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341e:	f000 f821 	bl	8003464 <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490a      	ldr	r1, [pc, #40]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <HAL_RCC_ClockConfig+0x1cc>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800343a:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_RCC_ClockConfig+0x1d0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fb5c 	bl	8001afc <HAL_InitTick>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40022000 	.word	0x40022000
 8003454:	40021000 	.word	0x40021000
 8003458:	08007da4 	.word	0x08007da4
 800345c:	20000010 	.word	0x20000010
 8003460:	20000014 	.word	0x20000014

08003464 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
 8003476:	2300      	movs	r3, #0
 8003478:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800347e:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b04      	cmp	r3, #4
 800348c:	d002      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x30>
 800348e:	2b08      	cmp	r3, #8
 8003490:	d003      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x36>
 8003492:	e027      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003496:	613b      	str	r3, [r7, #16]
      break;
 8003498:	e027      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	0c9b      	lsrs	r3, r3, #18
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	4a17      	ldr	r2, [pc, #92]	; (8003500 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034a4:	5cd3      	ldrb	r3, [r2, r3]
 80034a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d010      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034b2:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	0c5b      	lsrs	r3, r3, #17
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <HAL_RCC_GetSysClockFreq+0x98>)
 80034c6:	fb03 f202 	mul.w	r2, r3, r2
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e004      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034d8:	fb02 f303 	mul.w	r3, r2, r3
 80034dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	613b      	str	r3, [r7, #16]
      break;
 80034e2:	e002      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e4:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_RCC_GetSysClockFreq+0x98>)
 80034e6:	613b      	str	r3, [r7, #16]
      break;
 80034e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ea:	693b      	ldr	r3, [r7, #16]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	007a1200 	.word	0x007a1200
 8003500:	08007dbc 	.word	0x08007dbc
 8003504:	08007dcc 	.word	0x08007dcc
 8003508:	003d0900 	.word	0x003d0900

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b02      	ldr	r3, [pc, #8]	; (800351c <HAL_RCC_GetHCLKFreq+0x10>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	20000010 	.word	0x20000010

08003520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003524:	f7ff fff2 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003528:	4602      	mov	r2, r0
 800352a:	4b05      	ldr	r3, [pc, #20]	; (8003540 <HAL_RCC_GetPCLK1Freq+0x20>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	4903      	ldr	r1, [pc, #12]	; (8003544 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003536:	5ccb      	ldrb	r3, [r1, r3]
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40021000 	.word	0x40021000
 8003544:	08007db4 	.word	0x08007db4

08003548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800354c:	f7ff ffde 	bl	800350c <HAL_RCC_GetHCLKFreq>
 8003550:	4602      	mov	r2, r0
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	0adb      	lsrs	r3, r3, #11
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	4903      	ldr	r1, [pc, #12]	; (800356c <HAL_RCC_GetPCLK2Freq+0x24>)
 800355e:	5ccb      	ldrb	r3, [r1, r3]
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003564:	4618      	mov	r0, r3
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40021000 	.word	0x40021000
 800356c:	08007db4 	.word	0x08007db4

08003570 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <RCC_Delay+0x34>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <RCC_Delay+0x38>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	0a5b      	lsrs	r3, r3, #9
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	fb02 f303 	mul.w	r3, r2, r3
 800358a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800358c:	bf00      	nop
  }
  while (Delay --);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e5a      	subs	r2, r3, #1
 8003592:	60fa      	str	r2, [r7, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f9      	bne.n	800358c <RCC_Delay+0x1c>
}
 8003598:	bf00      	nop
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	20000010 	.word	0x20000010
 80035a8:	10624dd3 	.word	0x10624dd3

080035ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e042      	b.n	8003644 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d106      	bne.n	80035d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe f900 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2224      	movs	r2, #36	; 0x24
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 fd63 	bl	80040bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af02      	add	r7, sp, #8
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	4613      	mov	r3, r2
 800365a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b20      	cmp	r3, #32
 800366a:	d175      	bne.n	8003758 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <HAL_UART_Transmit+0x2c>
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e06e      	b.n	800375a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2221      	movs	r2, #33	; 0x21
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800368a:	f7fe fa79 	bl	8001b80 <HAL_GetTick>
 800368e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	88fa      	ldrh	r2, [r7, #6]
 800369a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036a4:	d108      	bne.n	80036b8 <HAL_UART_Transmit+0x6c>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d104      	bne.n	80036b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e003      	b.n	80036c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036c0:	e02e      	b.n	8003720 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2200      	movs	r2, #0
 80036ca:	2180      	movs	r1, #128	; 0x80
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fb01 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e03a      	b.n	800375a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10b      	bne.n	8003702 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	3302      	adds	r3, #2
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e007      	b.n	8003712 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	781a      	ldrb	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3301      	adds	r3, #1
 8003710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003716:	b29b      	uxth	r3, r3
 8003718:	3b01      	subs	r3, #1
 800371a:	b29a      	uxth	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1cb      	bne.n	80036c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2140      	movs	r1, #64	; 0x40
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 facd 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e006      	b.n	800375a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b0ba      	sub	sp, #232	; 0xe8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800378a:	2300      	movs	r3, #0
 800378c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003790:	2300      	movs	r3, #0
 8003792:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80037a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10f      	bne.n	80037ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d009      	beq.n	80037ca <HAL_UART_IRQHandler+0x66>
 80037b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ba:	f003 0320 	and.w	r3, r3, #32
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fbbc 	bl	8003f40 <UART_Receive_IT>
      return;
 80037c8:	e25b      	b.n	8003c82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80de 	beq.w	8003990 <HAL_UART_IRQHandler+0x22c>
 80037d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80d1 	beq.w	8003990 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_UART_IRQHandler+0xae>
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_UART_IRQHandler+0xd2>
 800381e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_UART_IRQHandler+0xf6>
 8003842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d005      	beq.n	800385a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f043 0204 	orr.w	r2, r3, #4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800385a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d011      	beq.n	800388a <HAL_UART_IRQHandler+0x126>
 8003866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386a:	f003 0320 	and.w	r3, r3, #32
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003882:	f043 0208 	orr.w	r2, r3, #8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 81f2 	beq.w	8003c78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <HAL_UART_IRQHandler+0x14e>
 80038a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d002      	beq.n	80038b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fb47 	bl	8003f40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_UART_IRQHandler+0x17a>
 80038d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d04f      	beq.n	800397e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 fa51 	bl	8003d86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d041      	beq.n	8003976 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3314      	adds	r3, #20
 80038f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003908:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800390c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3314      	adds	r3, #20
 800391a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800391e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003922:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800392a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1d9      	bne.n	80038f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	2b00      	cmp	r3, #0
 8003944:	d013      	beq.n	800396e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	4a7e      	ldr	r2, [pc, #504]	; (8003b44 <HAL_UART_IRQHandler+0x3e0>)
 800394c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f806 	bl	8002964 <HAL_DMA_Abort_IT>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d016      	beq.n	800398c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003968:	4610      	mov	r0, r2
 800396a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800396c:	e00e      	b.n	800398c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f99c 	bl	8003cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e00a      	b.n	800398c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f998 	bl	8003cac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	e006      	b.n	800398c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f994 	bl	8003cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800398a:	e175      	b.n	8003c78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	bf00      	nop
    return;
 800398e:	e173      	b.n	8003c78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	2b01      	cmp	r3, #1
 8003996:	f040 814f 	bne.w	8003c38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800399a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399e:	f003 0310 	and.w	r3, r3, #16
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8148 	beq.w	8003c38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8141 	beq.w	8003c38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 80b6 	beq.w	8003b48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8145 	beq.w	8003c7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039fa:	429a      	cmp	r2, r3
 80039fc:	f080 813e 	bcs.w	8003c7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a06:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	f000 8088 	beq.w	8003b24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003a40:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1d9      	bne.n	8003a14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3314      	adds	r3, #20
 8003a66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a6a:	e853 3f00 	ldrex	r3, [r3]
 8003a6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a72:	f023 0301 	bic.w	r3, r3, #1
 8003a76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a90:	e841 2300 	strex	r3, r2, [r1]
 8003a94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1e1      	bne.n	8003a60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	3314      	adds	r3, #20
 8003aa2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003aa6:	e853 3f00 	ldrex	r3, [r3]
 8003aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3314      	adds	r3, #20
 8003abc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ac0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ac2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ac6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e3      	bne.n	8003a9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003af4:	f023 0310 	bic.w	r3, r3, #16
 8003af8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b06:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b08:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b0e:	e841 2300 	strex	r3, r2, [r1]
 8003b12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1e3      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fe fee5 	bl	80028ee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	4619      	mov	r1, r3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f8bf 	bl	8003cbe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b40:	e09c      	b.n	8003c7c <HAL_UART_IRQHandler+0x518>
 8003b42:	bf00      	nop
 8003b44:	08003e4b 	.word	0x08003e4b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	f000 808e 	beq.w	8003c80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8089 	beq.w	8003c80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	330c      	adds	r3, #12
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	330c      	adds	r3, #12
 8003b8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b92:	647a      	str	r2, [r7, #68]	; 0x44
 8003b94:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e3      	bne.n	8003b6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3314      	adds	r3, #20
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3314      	adds	r3, #20
 8003bc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003bca:	633a      	str	r2, [r7, #48]	; 0x30
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e3      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	330c      	adds	r3, #12
 8003bf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0310 	bic.w	r3, r3, #16
 8003c02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c10:	61fa      	str	r2, [r7, #28]
 8003c12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	69b9      	ldr	r1, [r7, #24]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e3      	bne.n	8003bec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c2e:	4619      	mov	r1, r3
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f844 	bl	8003cbe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c36:	e023      	b.n	8003c80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d009      	beq.n	8003c58 <HAL_UART_IRQHandler+0x4f4>
 8003c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f90e 	bl	8003e72 <UART_Transmit_IT>
    return;
 8003c56:	e014      	b.n	8003c82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00e      	beq.n	8003c82 <HAL_UART_IRQHandler+0x51e>
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f94d 	bl	8003f10 <UART_EndTransmit_IT>
    return;
 8003c76:	e004      	b.n	8003c82 <HAL_UART_IRQHandler+0x51e>
    return;
 8003c78:	bf00      	nop
 8003c7a:	e002      	b.n	8003c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <HAL_UART_IRQHandler+0x51e>
      return;
 8003c80:	bf00      	nop
  }
}
 8003c82:	37e8      	adds	r7, #232	; 0xe8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr

08003cac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bc80      	pop	{r7}
 8003cbc:	4770      	bx	lr

08003cbe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr

08003cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce4:	e03b      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d037      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7fd ff47 	bl	8001b80 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	6a3a      	ldr	r2, [r7, #32]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e03a      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0304 	and.w	r3, r3, #4
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d023      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d020      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d01d      	beq.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0308 	and.w	r3, r3, #8
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d116      	bne.n	8003d5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f81d 	bl	8003d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2208      	movs	r2, #8
 8003d50:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e00f      	b.n	8003d7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4013      	ands	r3, r2
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	bf0c      	ite	eq
 8003d6e:	2301      	moveq	r3, #1
 8003d70:	2300      	movne	r3, #0
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	461a      	mov	r2, r3
 8003d76:	79fb      	ldrb	r3, [r7, #7]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d0b4      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b095      	sub	sp, #84	; 0x54
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	330c      	adds	r3, #12
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003da4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	330c      	adds	r3, #12
 8003dac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003dae:	643a      	str	r2, [r7, #64]	; 0x40
 8003db0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003db4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e5      	bne.n	8003d8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3314      	adds	r3, #20
 8003dc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3314      	adds	r3, #20
 8003de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1e5      	bne.n	8003dc2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d119      	bne.n	8003e32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	e853 3f00 	ldrex	r3, [r3]
 8003e0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f023 0310 	bic.w	r3, r3, #16
 8003e14:	647b      	str	r3, [r7, #68]	; 0x44
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e1e:	61ba      	str	r2, [r7, #24]
 8003e20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e22:	6979      	ldr	r1, [r7, #20]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	e841 2300 	strex	r3, r2, [r1]
 8003e2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1e5      	bne.n	8003dfe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e40:	bf00      	nop
 8003e42:	3754      	adds	r7, #84	; 0x54
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bc80      	pop	{r7}
 8003e48:	4770      	bx	lr

08003e4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f7ff ff21 	bl	8003cac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6a:	bf00      	nop
 8003e6c:	3710      	adds	r7, #16
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b21      	cmp	r3, #33	; 0x21
 8003e84:	d13e      	bne.n	8003f04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8e:	d114      	bne.n	8003eba <UART_Transmit_IT+0x48>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d110      	bne.n	8003eba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	621a      	str	r2, [r3, #32]
 8003eb8:	e008      	b.n	8003ecc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6211      	str	r1, [r2, #32]
 8003ec4:	781a      	ldrb	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	4619      	mov	r1, r3
 8003eda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10f      	bne.n	8003f00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68da      	ldr	r2, [r3, #12]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003efe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	e000      	b.n	8003f06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
  }
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff fea9 	bl	8003c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	2b22      	cmp	r3, #34	; 0x22
 8003f52:	f040 80ae 	bne.w	80040b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5e:	d117      	bne.n	8003f90 <UART_Receive_IT+0x50>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d113      	bne.n	8003f90 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8003f8e:	e026      	b.n	8003fde <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d007      	beq.n	8003fb4 <UART_Receive_IT+0x74>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <UART_Receive_IT+0x82>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	b2da      	uxtb	r2, r3
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	e008      	b.n	8003fd4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4619      	mov	r1, r3
 8003fec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d15d      	bne.n	80040ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0220 	bic.w	r2, r2, #32
 8004000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004010:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695a      	ldr	r2, [r3, #20]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f022 0201 	bic.w	r2, r2, #1
 8004020:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	2b01      	cmp	r3, #1
 8004036:	d135      	bne.n	80040a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	e853 3f00 	ldrex	r3, [r3]
 800404c:	613b      	str	r3, [r7, #16]
   return(result);
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f023 0310 	bic.w	r3, r3, #16
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	623a      	str	r2, [r7, #32]
 8004060:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004062:	69f9      	ldr	r1, [r7, #28]
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	e841 2300 	strex	r3, r2, [r1]
 800406a:	61bb      	str	r3, [r7, #24]
   return(result);
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e5      	bne.n	800403e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b10      	cmp	r3, #16
 800407e:	d10a      	bne.n	8004096 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7ff fe0e 	bl	8003cbe <HAL_UARTEx_RxEventCallback>
 80040a2:	e002      	b.n	80040aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fdf8 	bl	8003c9a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e002      	b.n	80040b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	e000      	b.n	80040b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
  }
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3730      	adds	r7, #48	; 0x30
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040f6:	f023 030c 	bic.w	r3, r3, #12
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	430b      	orrs	r3, r1
 8004102:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a2c      	ldr	r2, [pc, #176]	; (80041d0 <UART_SetConfig+0x114>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d103      	bne.n	800412c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004124:	f7ff fa10 	bl	8003548 <HAL_RCC_GetPCLK2Freq>
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	e002      	b.n	8004132 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800412c:	f7ff f9f8 	bl	8003520 <HAL_RCC_GetPCLK1Freq>
 8004130:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	009a      	lsls	r2, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	fbb2 f3f3 	udiv	r3, r2, r3
 8004148:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <UART_SetConfig+0x118>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	0119      	lsls	r1, r3, #4
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009a      	lsls	r2, r3, #2
 800415c:	441a      	add	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	fbb2 f2f3 	udiv	r2, r2, r3
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <UART_SetConfig+0x118>)
 800416a:	fba3 0302 	umull	r0, r3, r3, r2
 800416e:	095b      	lsrs	r3, r3, #5
 8004170:	2064      	movs	r0, #100	; 0x64
 8004172:	fb00 f303 	mul.w	r3, r0, r3
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	3332      	adds	r3, #50	; 0x32
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <UART_SetConfig+0x118>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	095b      	lsrs	r3, r3, #5
 8004184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004188:	4419      	add	r1, r3
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009a      	lsls	r2, r3, #2
 8004194:	441a      	add	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <UART_SetConfig+0x118>)
 80041a2:	fba3 0302 	umull	r0, r3, r3, r2
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2064      	movs	r0, #100	; 0x64
 80041aa:	fb00 f303 	mul.w	r3, r0, r3
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	3332      	adds	r3, #50	; 0x32
 80041b4:	4a07      	ldr	r2, [pc, #28]	; (80041d4 <UART_SetConfig+0x118>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	440a      	add	r2, r1
 80041c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40013800 	.word	0x40013800
 80041d4:	51eb851f 	.word	0x51eb851f

080041d8 <malloc>:
 80041d8:	4b02      	ldr	r3, [pc, #8]	; (80041e4 <malloc+0xc>)
 80041da:	4601      	mov	r1, r0
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	f000 b82b 	b.w	8004238 <_malloc_r>
 80041e2:	bf00      	nop
 80041e4:	20000074 	.word	0x20000074

080041e8 <free>:
 80041e8:	4b02      	ldr	r3, [pc, #8]	; (80041f4 <free+0xc>)
 80041ea:	4601      	mov	r1, r0
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	f001 bd3f 	b.w	8005c70 <_free_r>
 80041f2:	bf00      	nop
 80041f4:	20000074 	.word	0x20000074

080041f8 <sbrk_aligned>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4e0e      	ldr	r6, [pc, #56]	; (8004234 <sbrk_aligned+0x3c>)
 80041fc:	460c      	mov	r4, r1
 80041fe:	6831      	ldr	r1, [r6, #0]
 8004200:	4605      	mov	r5, r0
 8004202:	b911      	cbnz	r1, 800420a <sbrk_aligned+0x12>
 8004204:	f000 fe68 	bl	8004ed8 <_sbrk_r>
 8004208:	6030      	str	r0, [r6, #0]
 800420a:	4621      	mov	r1, r4
 800420c:	4628      	mov	r0, r5
 800420e:	f000 fe63 	bl	8004ed8 <_sbrk_r>
 8004212:	1c43      	adds	r3, r0, #1
 8004214:	d00a      	beq.n	800422c <sbrk_aligned+0x34>
 8004216:	1cc4      	adds	r4, r0, #3
 8004218:	f024 0403 	bic.w	r4, r4, #3
 800421c:	42a0      	cmp	r0, r4
 800421e:	d007      	beq.n	8004230 <sbrk_aligned+0x38>
 8004220:	1a21      	subs	r1, r4, r0
 8004222:	4628      	mov	r0, r5
 8004224:	f000 fe58 	bl	8004ed8 <_sbrk_r>
 8004228:	3001      	adds	r0, #1
 800422a:	d101      	bne.n	8004230 <sbrk_aligned+0x38>
 800422c:	f04f 34ff 	mov.w	r4, #4294967295
 8004230:	4620      	mov	r0, r4
 8004232:	bd70      	pop	{r4, r5, r6, pc}
 8004234:	200002f4 	.word	0x200002f4

08004238 <_malloc_r>:
 8004238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800423c:	1ccd      	adds	r5, r1, #3
 800423e:	f025 0503 	bic.w	r5, r5, #3
 8004242:	3508      	adds	r5, #8
 8004244:	2d0c      	cmp	r5, #12
 8004246:	bf38      	it	cc
 8004248:	250c      	movcc	r5, #12
 800424a:	2d00      	cmp	r5, #0
 800424c:	4607      	mov	r7, r0
 800424e:	db01      	blt.n	8004254 <_malloc_r+0x1c>
 8004250:	42a9      	cmp	r1, r5
 8004252:	d905      	bls.n	8004260 <_malloc_r+0x28>
 8004254:	230c      	movs	r3, #12
 8004256:	2600      	movs	r6, #0
 8004258:	603b      	str	r3, [r7, #0]
 800425a:	4630      	mov	r0, r6
 800425c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004260:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004334 <_malloc_r+0xfc>
 8004264:	f000 f868 	bl	8004338 <__malloc_lock>
 8004268:	f8d8 3000 	ldr.w	r3, [r8]
 800426c:	461c      	mov	r4, r3
 800426e:	bb5c      	cbnz	r4, 80042c8 <_malloc_r+0x90>
 8004270:	4629      	mov	r1, r5
 8004272:	4638      	mov	r0, r7
 8004274:	f7ff ffc0 	bl	80041f8 <sbrk_aligned>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	4604      	mov	r4, r0
 800427c:	d155      	bne.n	800432a <_malloc_r+0xf2>
 800427e:	f8d8 4000 	ldr.w	r4, [r8]
 8004282:	4626      	mov	r6, r4
 8004284:	2e00      	cmp	r6, #0
 8004286:	d145      	bne.n	8004314 <_malloc_r+0xdc>
 8004288:	2c00      	cmp	r4, #0
 800428a:	d048      	beq.n	800431e <_malloc_r+0xe6>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	4631      	mov	r1, r6
 8004290:	4638      	mov	r0, r7
 8004292:	eb04 0903 	add.w	r9, r4, r3
 8004296:	f000 fe1f 	bl	8004ed8 <_sbrk_r>
 800429a:	4581      	cmp	r9, r0
 800429c:	d13f      	bne.n	800431e <_malloc_r+0xe6>
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	4638      	mov	r0, r7
 80042a2:	1a6d      	subs	r5, r5, r1
 80042a4:	4629      	mov	r1, r5
 80042a6:	f7ff ffa7 	bl	80041f8 <sbrk_aligned>
 80042aa:	3001      	adds	r0, #1
 80042ac:	d037      	beq.n	800431e <_malloc_r+0xe6>
 80042ae:	6823      	ldr	r3, [r4, #0]
 80042b0:	442b      	add	r3, r5
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	f8d8 3000 	ldr.w	r3, [r8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d038      	beq.n	800432e <_malloc_r+0xf6>
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	42a2      	cmp	r2, r4
 80042c0:	d12b      	bne.n	800431a <_malloc_r+0xe2>
 80042c2:	2200      	movs	r2, #0
 80042c4:	605a      	str	r2, [r3, #4]
 80042c6:	e00f      	b.n	80042e8 <_malloc_r+0xb0>
 80042c8:	6822      	ldr	r2, [r4, #0]
 80042ca:	1b52      	subs	r2, r2, r5
 80042cc:	d41f      	bmi.n	800430e <_malloc_r+0xd6>
 80042ce:	2a0b      	cmp	r2, #11
 80042d0:	d917      	bls.n	8004302 <_malloc_r+0xca>
 80042d2:	1961      	adds	r1, r4, r5
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	6025      	str	r5, [r4, #0]
 80042d8:	bf18      	it	ne
 80042da:	6059      	strne	r1, [r3, #4]
 80042dc:	6863      	ldr	r3, [r4, #4]
 80042de:	bf08      	it	eq
 80042e0:	f8c8 1000 	streq.w	r1, [r8]
 80042e4:	5162      	str	r2, [r4, r5]
 80042e6:	604b      	str	r3, [r1, #4]
 80042e8:	4638      	mov	r0, r7
 80042ea:	f104 060b 	add.w	r6, r4, #11
 80042ee:	f000 f829 	bl	8004344 <__malloc_unlock>
 80042f2:	f026 0607 	bic.w	r6, r6, #7
 80042f6:	1d23      	adds	r3, r4, #4
 80042f8:	1af2      	subs	r2, r6, r3
 80042fa:	d0ae      	beq.n	800425a <_malloc_r+0x22>
 80042fc:	1b9b      	subs	r3, r3, r6
 80042fe:	50a3      	str	r3, [r4, r2]
 8004300:	e7ab      	b.n	800425a <_malloc_r+0x22>
 8004302:	42a3      	cmp	r3, r4
 8004304:	6862      	ldr	r2, [r4, #4]
 8004306:	d1dd      	bne.n	80042c4 <_malloc_r+0x8c>
 8004308:	f8c8 2000 	str.w	r2, [r8]
 800430c:	e7ec      	b.n	80042e8 <_malloc_r+0xb0>
 800430e:	4623      	mov	r3, r4
 8004310:	6864      	ldr	r4, [r4, #4]
 8004312:	e7ac      	b.n	800426e <_malloc_r+0x36>
 8004314:	4634      	mov	r4, r6
 8004316:	6876      	ldr	r6, [r6, #4]
 8004318:	e7b4      	b.n	8004284 <_malloc_r+0x4c>
 800431a:	4613      	mov	r3, r2
 800431c:	e7cc      	b.n	80042b8 <_malloc_r+0x80>
 800431e:	230c      	movs	r3, #12
 8004320:	4638      	mov	r0, r7
 8004322:	603b      	str	r3, [r7, #0]
 8004324:	f000 f80e 	bl	8004344 <__malloc_unlock>
 8004328:	e797      	b.n	800425a <_malloc_r+0x22>
 800432a:	6025      	str	r5, [r4, #0]
 800432c:	e7dc      	b.n	80042e8 <_malloc_r+0xb0>
 800432e:	605b      	str	r3, [r3, #4]
 8004330:	deff      	udf	#255	; 0xff
 8004332:	bf00      	nop
 8004334:	200002f0 	.word	0x200002f0

08004338 <__malloc_lock>:
 8004338:	4801      	ldr	r0, [pc, #4]	; (8004340 <__malloc_lock+0x8>)
 800433a:	f000 be1a 	b.w	8004f72 <__retarget_lock_acquire_recursive>
 800433e:	bf00      	nop
 8004340:	20000438 	.word	0x20000438

08004344 <__malloc_unlock>:
 8004344:	4801      	ldr	r0, [pc, #4]	; (800434c <__malloc_unlock+0x8>)
 8004346:	f000 be15 	b.w	8004f74 <__retarget_lock_release_recursive>
 800434a:	bf00      	nop
 800434c:	20000438 	.word	0x20000438

08004350 <__cvt>:
 8004350:	2b00      	cmp	r3, #0
 8004352:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004356:	461f      	mov	r7, r3
 8004358:	bfbb      	ittet	lt
 800435a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800435e:	461f      	movlt	r7, r3
 8004360:	2300      	movge	r3, #0
 8004362:	232d      	movlt	r3, #45	; 0x2d
 8004364:	b088      	sub	sp, #32
 8004366:	4614      	mov	r4, r2
 8004368:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800436a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800436c:	7013      	strb	r3, [r2, #0]
 800436e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004370:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004374:	f023 0820 	bic.w	r8, r3, #32
 8004378:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800437c:	d005      	beq.n	800438a <__cvt+0x3a>
 800437e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004382:	d100      	bne.n	8004386 <__cvt+0x36>
 8004384:	3501      	adds	r5, #1
 8004386:	2302      	movs	r3, #2
 8004388:	e000      	b.n	800438c <__cvt+0x3c>
 800438a:	2303      	movs	r3, #3
 800438c:	aa07      	add	r2, sp, #28
 800438e:	9204      	str	r2, [sp, #16]
 8004390:	aa06      	add	r2, sp, #24
 8004392:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004396:	e9cd 3500 	strd	r3, r5, [sp]
 800439a:	4622      	mov	r2, r4
 800439c:	463b      	mov	r3, r7
 800439e:	f000 fe83 	bl	80050a8 <_dtoa_r>
 80043a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043a6:	4606      	mov	r6, r0
 80043a8:	d102      	bne.n	80043b0 <__cvt+0x60>
 80043aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043ac:	07db      	lsls	r3, r3, #31
 80043ae:	d522      	bpl.n	80043f6 <__cvt+0xa6>
 80043b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043b4:	eb06 0905 	add.w	r9, r6, r5
 80043b8:	d110      	bne.n	80043dc <__cvt+0x8c>
 80043ba:	7833      	ldrb	r3, [r6, #0]
 80043bc:	2b30      	cmp	r3, #48	; 0x30
 80043be:	d10a      	bne.n	80043d6 <__cvt+0x86>
 80043c0:	2200      	movs	r2, #0
 80043c2:	2300      	movs	r3, #0
 80043c4:	4620      	mov	r0, r4
 80043c6:	4639      	mov	r1, r7
 80043c8:	f7fc faee 	bl	80009a8 <__aeabi_dcmpeq>
 80043cc:	b918      	cbnz	r0, 80043d6 <__cvt+0x86>
 80043ce:	f1c5 0501 	rsb	r5, r5, #1
 80043d2:	f8ca 5000 	str.w	r5, [sl]
 80043d6:	f8da 3000 	ldr.w	r3, [sl]
 80043da:	4499      	add	r9, r3
 80043dc:	2200      	movs	r2, #0
 80043de:	2300      	movs	r3, #0
 80043e0:	4620      	mov	r0, r4
 80043e2:	4639      	mov	r1, r7
 80043e4:	f7fc fae0 	bl	80009a8 <__aeabi_dcmpeq>
 80043e8:	b108      	cbz	r0, 80043ee <__cvt+0x9e>
 80043ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80043ee:	2230      	movs	r2, #48	; 0x30
 80043f0:	9b07      	ldr	r3, [sp, #28]
 80043f2:	454b      	cmp	r3, r9
 80043f4:	d307      	bcc.n	8004406 <__cvt+0xb6>
 80043f6:	4630      	mov	r0, r6
 80043f8:	9b07      	ldr	r3, [sp, #28]
 80043fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043fc:	1b9b      	subs	r3, r3, r6
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	b008      	add	sp, #32
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	9107      	str	r1, [sp, #28]
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	e7f0      	b.n	80043f0 <__cvt+0xa0>

0800440e <__exponent>:
 800440e:	4603      	mov	r3, r0
 8004410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004412:	2900      	cmp	r1, #0
 8004414:	f803 2b02 	strb.w	r2, [r3], #2
 8004418:	bfb6      	itet	lt
 800441a:	222d      	movlt	r2, #45	; 0x2d
 800441c:	222b      	movge	r2, #43	; 0x2b
 800441e:	4249      	neglt	r1, r1
 8004420:	2909      	cmp	r1, #9
 8004422:	7042      	strb	r2, [r0, #1]
 8004424:	dd2a      	ble.n	800447c <__exponent+0x6e>
 8004426:	f10d 0207 	add.w	r2, sp, #7
 800442a:	4617      	mov	r7, r2
 800442c:	260a      	movs	r6, #10
 800442e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004432:	4694      	mov	ip, r2
 8004434:	fb06 1415 	mls	r4, r6, r5, r1
 8004438:	3430      	adds	r4, #48	; 0x30
 800443a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800443e:	460c      	mov	r4, r1
 8004440:	2c63      	cmp	r4, #99	; 0x63
 8004442:	4629      	mov	r1, r5
 8004444:	f102 32ff 	add.w	r2, r2, #4294967295
 8004448:	dcf1      	bgt.n	800442e <__exponent+0x20>
 800444a:	3130      	adds	r1, #48	; 0x30
 800444c:	f1ac 0402 	sub.w	r4, ip, #2
 8004450:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004454:	4622      	mov	r2, r4
 8004456:	1c41      	adds	r1, r0, #1
 8004458:	42ba      	cmp	r2, r7
 800445a:	d30a      	bcc.n	8004472 <__exponent+0x64>
 800445c:	f10d 0209 	add.w	r2, sp, #9
 8004460:	eba2 020c 	sub.w	r2, r2, ip
 8004464:	42bc      	cmp	r4, r7
 8004466:	bf88      	it	hi
 8004468:	2200      	movhi	r2, #0
 800446a:	4413      	add	r3, r2
 800446c:	1a18      	subs	r0, r3, r0
 800446e:	b003      	add	sp, #12
 8004470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004472:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004476:	f801 5f01 	strb.w	r5, [r1, #1]!
 800447a:	e7ed      	b.n	8004458 <__exponent+0x4a>
 800447c:	2330      	movs	r3, #48	; 0x30
 800447e:	3130      	adds	r1, #48	; 0x30
 8004480:	7083      	strb	r3, [r0, #2]
 8004482:	70c1      	strb	r1, [r0, #3]
 8004484:	1d03      	adds	r3, r0, #4
 8004486:	e7f1      	b.n	800446c <__exponent+0x5e>

08004488 <_printf_float>:
 8004488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448c:	b091      	sub	sp, #68	; 0x44
 800448e:	460c      	mov	r4, r1
 8004490:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004494:	4616      	mov	r6, r2
 8004496:	461f      	mov	r7, r3
 8004498:	4605      	mov	r5, r0
 800449a:	f000 fce5 	bl	8004e68 <_localeconv_r>
 800449e:	6803      	ldr	r3, [r0, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	9309      	str	r3, [sp, #36]	; 0x24
 80044a4:	f7fb fe54 	bl	8000150 <strlen>
 80044a8:	2300      	movs	r3, #0
 80044aa:	930e      	str	r3, [sp, #56]	; 0x38
 80044ac:	f8d8 3000 	ldr.w	r3, [r8]
 80044b0:	900a      	str	r0, [sp, #40]	; 0x28
 80044b2:	3307      	adds	r3, #7
 80044b4:	f023 0307 	bic.w	r3, r3, #7
 80044b8:	f103 0208 	add.w	r2, r3, #8
 80044bc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044c0:	f8d4 b000 	ldr.w	fp, [r4]
 80044c4:	f8c8 2000 	str.w	r2, [r8]
 80044c8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80044cc:	4652      	mov	r2, sl
 80044ce:	4643      	mov	r3, r8
 80044d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044d4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80044d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80044da:	f04f 32ff 	mov.w	r2, #4294967295
 80044de:	4650      	mov	r0, sl
 80044e0:	4b9c      	ldr	r3, [pc, #624]	; (8004754 <_printf_float+0x2cc>)
 80044e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044e4:	f7fc fa92 	bl	8000a0c <__aeabi_dcmpun>
 80044e8:	bb70      	cbnz	r0, 8004548 <_printf_float+0xc0>
 80044ea:	f04f 32ff 	mov.w	r2, #4294967295
 80044ee:	4650      	mov	r0, sl
 80044f0:	4b98      	ldr	r3, [pc, #608]	; (8004754 <_printf_float+0x2cc>)
 80044f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044f4:	f7fc fa6c 	bl	80009d0 <__aeabi_dcmple>
 80044f8:	bb30      	cbnz	r0, 8004548 <_printf_float+0xc0>
 80044fa:	2200      	movs	r2, #0
 80044fc:	2300      	movs	r3, #0
 80044fe:	4650      	mov	r0, sl
 8004500:	4641      	mov	r1, r8
 8004502:	f7fc fa5b 	bl	80009bc <__aeabi_dcmplt>
 8004506:	b110      	cbz	r0, 800450e <_printf_float+0x86>
 8004508:	232d      	movs	r3, #45	; 0x2d
 800450a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800450e:	4a92      	ldr	r2, [pc, #584]	; (8004758 <_printf_float+0x2d0>)
 8004510:	4b92      	ldr	r3, [pc, #584]	; (800475c <_printf_float+0x2d4>)
 8004512:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004516:	bf94      	ite	ls
 8004518:	4690      	movls	r8, r2
 800451a:	4698      	movhi	r8, r3
 800451c:	2303      	movs	r3, #3
 800451e:	f04f 0a00 	mov.w	sl, #0
 8004522:	6123      	str	r3, [r4, #16]
 8004524:	f02b 0304 	bic.w	r3, fp, #4
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	4633      	mov	r3, r6
 800452c:	4621      	mov	r1, r4
 800452e:	4628      	mov	r0, r5
 8004530:	9700      	str	r7, [sp, #0]
 8004532:	aa0f      	add	r2, sp, #60	; 0x3c
 8004534:	f000 f9d6 	bl	80048e4 <_printf_common>
 8004538:	3001      	adds	r0, #1
 800453a:	f040 8090 	bne.w	800465e <_printf_float+0x1d6>
 800453e:	f04f 30ff 	mov.w	r0, #4294967295
 8004542:	b011      	add	sp, #68	; 0x44
 8004544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004548:	4652      	mov	r2, sl
 800454a:	4643      	mov	r3, r8
 800454c:	4650      	mov	r0, sl
 800454e:	4641      	mov	r1, r8
 8004550:	f7fc fa5c 	bl	8000a0c <__aeabi_dcmpun>
 8004554:	b148      	cbz	r0, 800456a <_printf_float+0xe2>
 8004556:	f1b8 0f00 	cmp.w	r8, #0
 800455a:	bfb8      	it	lt
 800455c:	232d      	movlt	r3, #45	; 0x2d
 800455e:	4a80      	ldr	r2, [pc, #512]	; (8004760 <_printf_float+0x2d8>)
 8004560:	bfb8      	it	lt
 8004562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004566:	4b7f      	ldr	r3, [pc, #508]	; (8004764 <_printf_float+0x2dc>)
 8004568:	e7d3      	b.n	8004512 <_printf_float+0x8a>
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	d142      	bne.n	80045fa <_printf_float+0x172>
 8004574:	2306      	movs	r3, #6
 8004576:	6063      	str	r3, [r4, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	9206      	str	r2, [sp, #24]
 800457c:	aa0e      	add	r2, sp, #56	; 0x38
 800457e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004582:	aa0d      	add	r2, sp, #52	; 0x34
 8004584:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004588:	9203      	str	r2, [sp, #12]
 800458a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800458e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	4652      	mov	r2, sl
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	4628      	mov	r0, r5
 800459c:	4643      	mov	r3, r8
 800459e:	910b      	str	r1, [sp, #44]	; 0x2c
 80045a0:	f7ff fed6 	bl	8004350 <__cvt>
 80045a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045a6:	4680      	mov	r8, r0
 80045a8:	2947      	cmp	r1, #71	; 0x47
 80045aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045ac:	d108      	bne.n	80045c0 <_printf_float+0x138>
 80045ae:	1cc8      	adds	r0, r1, #3
 80045b0:	db02      	blt.n	80045b8 <_printf_float+0x130>
 80045b2:	6863      	ldr	r3, [r4, #4]
 80045b4:	4299      	cmp	r1, r3
 80045b6:	dd40      	ble.n	800463a <_printf_float+0x1b2>
 80045b8:	f1a9 0902 	sub.w	r9, r9, #2
 80045bc:	fa5f f989 	uxtb.w	r9, r9
 80045c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045c4:	d81f      	bhi.n	8004606 <_printf_float+0x17e>
 80045c6:	464a      	mov	r2, r9
 80045c8:	3901      	subs	r1, #1
 80045ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045ce:	910d      	str	r1, [sp, #52]	; 0x34
 80045d0:	f7ff ff1d 	bl	800440e <__exponent>
 80045d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045d6:	4682      	mov	sl, r0
 80045d8:	1813      	adds	r3, r2, r0
 80045da:	2a01      	cmp	r2, #1
 80045dc:	6123      	str	r3, [r4, #16]
 80045de:	dc02      	bgt.n	80045e6 <_printf_float+0x15e>
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	07d2      	lsls	r2, r2, #31
 80045e4:	d501      	bpl.n	80045ea <_printf_float+0x162>
 80045e6:	3301      	adds	r3, #1
 80045e8:	6123      	str	r3, [r4, #16]
 80045ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d09b      	beq.n	800452a <_printf_float+0xa2>
 80045f2:	232d      	movs	r3, #45	; 0x2d
 80045f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045f8:	e797      	b.n	800452a <_printf_float+0xa2>
 80045fa:	2947      	cmp	r1, #71	; 0x47
 80045fc:	d1bc      	bne.n	8004578 <_printf_float+0xf0>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ba      	bne.n	8004578 <_printf_float+0xf0>
 8004602:	2301      	movs	r3, #1
 8004604:	e7b7      	b.n	8004576 <_printf_float+0xee>
 8004606:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800460a:	d118      	bne.n	800463e <_printf_float+0x1b6>
 800460c:	2900      	cmp	r1, #0
 800460e:	6863      	ldr	r3, [r4, #4]
 8004610:	dd0b      	ble.n	800462a <_printf_float+0x1a2>
 8004612:	6121      	str	r1, [r4, #16]
 8004614:	b913      	cbnz	r3, 800461c <_printf_float+0x194>
 8004616:	6822      	ldr	r2, [r4, #0]
 8004618:	07d0      	lsls	r0, r2, #31
 800461a:	d502      	bpl.n	8004622 <_printf_float+0x19a>
 800461c:	3301      	adds	r3, #1
 800461e:	440b      	add	r3, r1
 8004620:	6123      	str	r3, [r4, #16]
 8004622:	f04f 0a00 	mov.w	sl, #0
 8004626:	65a1      	str	r1, [r4, #88]	; 0x58
 8004628:	e7df      	b.n	80045ea <_printf_float+0x162>
 800462a:	b913      	cbnz	r3, 8004632 <_printf_float+0x1aa>
 800462c:	6822      	ldr	r2, [r4, #0]
 800462e:	07d2      	lsls	r2, r2, #31
 8004630:	d501      	bpl.n	8004636 <_printf_float+0x1ae>
 8004632:	3302      	adds	r3, #2
 8004634:	e7f4      	b.n	8004620 <_printf_float+0x198>
 8004636:	2301      	movs	r3, #1
 8004638:	e7f2      	b.n	8004620 <_printf_float+0x198>
 800463a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800463e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004640:	4299      	cmp	r1, r3
 8004642:	db05      	blt.n	8004650 <_printf_float+0x1c8>
 8004644:	6823      	ldr	r3, [r4, #0]
 8004646:	6121      	str	r1, [r4, #16]
 8004648:	07d8      	lsls	r0, r3, #31
 800464a:	d5ea      	bpl.n	8004622 <_printf_float+0x19a>
 800464c:	1c4b      	adds	r3, r1, #1
 800464e:	e7e7      	b.n	8004620 <_printf_float+0x198>
 8004650:	2900      	cmp	r1, #0
 8004652:	bfcc      	ite	gt
 8004654:	2201      	movgt	r2, #1
 8004656:	f1c1 0202 	rsble	r2, r1, #2
 800465a:	4413      	add	r3, r2
 800465c:	e7e0      	b.n	8004620 <_printf_float+0x198>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	055a      	lsls	r2, r3, #21
 8004662:	d407      	bmi.n	8004674 <_printf_float+0x1ec>
 8004664:	6923      	ldr	r3, [r4, #16]
 8004666:	4642      	mov	r2, r8
 8004668:	4631      	mov	r1, r6
 800466a:	4628      	mov	r0, r5
 800466c:	47b8      	blx	r7
 800466e:	3001      	adds	r0, #1
 8004670:	d12b      	bne.n	80046ca <_printf_float+0x242>
 8004672:	e764      	b.n	800453e <_printf_float+0xb6>
 8004674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004678:	f240 80dd 	bls.w	8004836 <_printf_float+0x3ae>
 800467c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004680:	2200      	movs	r2, #0
 8004682:	2300      	movs	r3, #0
 8004684:	f7fc f990 	bl	80009a8 <__aeabi_dcmpeq>
 8004688:	2800      	cmp	r0, #0
 800468a:	d033      	beq.n	80046f4 <_printf_float+0x26c>
 800468c:	2301      	movs	r3, #1
 800468e:	4631      	mov	r1, r6
 8004690:	4628      	mov	r0, r5
 8004692:	4a35      	ldr	r2, [pc, #212]	; (8004768 <_printf_float+0x2e0>)
 8004694:	47b8      	blx	r7
 8004696:	3001      	adds	r0, #1
 8004698:	f43f af51 	beq.w	800453e <_printf_float+0xb6>
 800469c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046a0:	429a      	cmp	r2, r3
 80046a2:	db02      	blt.n	80046aa <_printf_float+0x222>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	07d8      	lsls	r0, r3, #31
 80046a8:	d50f      	bpl.n	80046ca <_printf_float+0x242>
 80046aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ae:	4631      	mov	r1, r6
 80046b0:	4628      	mov	r0, r5
 80046b2:	47b8      	blx	r7
 80046b4:	3001      	adds	r0, #1
 80046b6:	f43f af42 	beq.w	800453e <_printf_float+0xb6>
 80046ba:	f04f 0800 	mov.w	r8, #0
 80046be:	f104 091a 	add.w	r9, r4, #26
 80046c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c4:	3b01      	subs	r3, #1
 80046c6:	4543      	cmp	r3, r8
 80046c8:	dc09      	bgt.n	80046de <_printf_float+0x256>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	079b      	lsls	r3, r3, #30
 80046ce:	f100 8104 	bmi.w	80048da <_printf_float+0x452>
 80046d2:	68e0      	ldr	r0, [r4, #12]
 80046d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046d6:	4298      	cmp	r0, r3
 80046d8:	bfb8      	it	lt
 80046da:	4618      	movlt	r0, r3
 80046dc:	e731      	b.n	8004542 <_printf_float+0xba>
 80046de:	2301      	movs	r3, #1
 80046e0:	464a      	mov	r2, r9
 80046e2:	4631      	mov	r1, r6
 80046e4:	4628      	mov	r0, r5
 80046e6:	47b8      	blx	r7
 80046e8:	3001      	adds	r0, #1
 80046ea:	f43f af28 	beq.w	800453e <_printf_float+0xb6>
 80046ee:	f108 0801 	add.w	r8, r8, #1
 80046f2:	e7e6      	b.n	80046c2 <_printf_float+0x23a>
 80046f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dc38      	bgt.n	800476c <_printf_float+0x2e4>
 80046fa:	2301      	movs	r3, #1
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	4a19      	ldr	r2, [pc, #100]	; (8004768 <_printf_float+0x2e0>)
 8004702:	47b8      	blx	r7
 8004704:	3001      	adds	r0, #1
 8004706:	f43f af1a 	beq.w	800453e <_printf_float+0xb6>
 800470a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800470e:	4313      	orrs	r3, r2
 8004710:	d102      	bne.n	8004718 <_printf_float+0x290>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	07d9      	lsls	r1, r3, #31
 8004716:	d5d8      	bpl.n	80046ca <_printf_float+0x242>
 8004718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	f43f af0b 	beq.w	800453e <_printf_float+0xb6>
 8004728:	f04f 0900 	mov.w	r9, #0
 800472c:	f104 0a1a 	add.w	sl, r4, #26
 8004730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004732:	425b      	negs	r3, r3
 8004734:	454b      	cmp	r3, r9
 8004736:	dc01      	bgt.n	800473c <_printf_float+0x2b4>
 8004738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800473a:	e794      	b.n	8004666 <_printf_float+0x1de>
 800473c:	2301      	movs	r3, #1
 800473e:	4652      	mov	r2, sl
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	f43f aef9 	beq.w	800453e <_printf_float+0xb6>
 800474c:	f109 0901 	add.w	r9, r9, #1
 8004750:	e7ee      	b.n	8004730 <_printf_float+0x2a8>
 8004752:	bf00      	nop
 8004754:	7fefffff 	.word	0x7fefffff
 8004758:	08007dce 	.word	0x08007dce
 800475c:	08007dd2 	.word	0x08007dd2
 8004760:	08007dd6 	.word	0x08007dd6
 8004764:	08007dda 	.word	0x08007dda
 8004768:	08007dde 	.word	0x08007dde
 800476c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800476e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004770:	429a      	cmp	r2, r3
 8004772:	bfa8      	it	ge
 8004774:	461a      	movge	r2, r3
 8004776:	2a00      	cmp	r2, #0
 8004778:	4691      	mov	r9, r2
 800477a:	dc37      	bgt.n	80047ec <_printf_float+0x364>
 800477c:	f04f 0b00 	mov.w	fp, #0
 8004780:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004784:	f104 021a 	add.w	r2, r4, #26
 8004788:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800478c:	ebaa 0309 	sub.w	r3, sl, r9
 8004790:	455b      	cmp	r3, fp
 8004792:	dc33      	bgt.n	80047fc <_printf_float+0x374>
 8004794:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004798:	429a      	cmp	r2, r3
 800479a:	db3b      	blt.n	8004814 <_printf_float+0x38c>
 800479c:	6823      	ldr	r3, [r4, #0]
 800479e:	07da      	lsls	r2, r3, #31
 80047a0:	d438      	bmi.n	8004814 <_printf_float+0x38c>
 80047a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80047a6:	eba2 0903 	sub.w	r9, r2, r3
 80047aa:	eba2 020a 	sub.w	r2, r2, sl
 80047ae:	4591      	cmp	r9, r2
 80047b0:	bfa8      	it	ge
 80047b2:	4691      	movge	r9, r2
 80047b4:	f1b9 0f00 	cmp.w	r9, #0
 80047b8:	dc34      	bgt.n	8004824 <_printf_float+0x39c>
 80047ba:	f04f 0800 	mov.w	r8, #0
 80047be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047c2:	f104 0a1a 	add.w	sl, r4, #26
 80047c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	eba3 0309 	sub.w	r3, r3, r9
 80047d0:	4543      	cmp	r3, r8
 80047d2:	f77f af7a 	ble.w	80046ca <_printf_float+0x242>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4652      	mov	r2, sl
 80047da:	4631      	mov	r1, r6
 80047dc:	4628      	mov	r0, r5
 80047de:	47b8      	blx	r7
 80047e0:	3001      	adds	r0, #1
 80047e2:	f43f aeac 	beq.w	800453e <_printf_float+0xb6>
 80047e6:	f108 0801 	add.w	r8, r8, #1
 80047ea:	e7ec      	b.n	80047c6 <_printf_float+0x33e>
 80047ec:	4613      	mov	r3, r2
 80047ee:	4631      	mov	r1, r6
 80047f0:	4642      	mov	r2, r8
 80047f2:	4628      	mov	r0, r5
 80047f4:	47b8      	blx	r7
 80047f6:	3001      	adds	r0, #1
 80047f8:	d1c0      	bne.n	800477c <_printf_float+0x2f4>
 80047fa:	e6a0      	b.n	800453e <_printf_float+0xb6>
 80047fc:	2301      	movs	r3, #1
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	920b      	str	r2, [sp, #44]	; 0x2c
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	f43f ae99 	beq.w	800453e <_printf_float+0xb6>
 800480c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800480e:	f10b 0b01 	add.w	fp, fp, #1
 8004812:	e7b9      	b.n	8004788 <_printf_float+0x300>
 8004814:	4631      	mov	r1, r6
 8004816:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800481a:	4628      	mov	r0, r5
 800481c:	47b8      	blx	r7
 800481e:	3001      	adds	r0, #1
 8004820:	d1bf      	bne.n	80047a2 <_printf_float+0x31a>
 8004822:	e68c      	b.n	800453e <_printf_float+0xb6>
 8004824:	464b      	mov	r3, r9
 8004826:	4631      	mov	r1, r6
 8004828:	4628      	mov	r0, r5
 800482a:	eb08 020a 	add.w	r2, r8, sl
 800482e:	47b8      	blx	r7
 8004830:	3001      	adds	r0, #1
 8004832:	d1c2      	bne.n	80047ba <_printf_float+0x332>
 8004834:	e683      	b.n	800453e <_printf_float+0xb6>
 8004836:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004838:	2a01      	cmp	r2, #1
 800483a:	dc01      	bgt.n	8004840 <_printf_float+0x3b8>
 800483c:	07db      	lsls	r3, r3, #31
 800483e:	d539      	bpl.n	80048b4 <_printf_float+0x42c>
 8004840:	2301      	movs	r3, #1
 8004842:	4642      	mov	r2, r8
 8004844:	4631      	mov	r1, r6
 8004846:	4628      	mov	r0, r5
 8004848:	47b8      	blx	r7
 800484a:	3001      	adds	r0, #1
 800484c:	f43f ae77 	beq.w	800453e <_printf_float+0xb6>
 8004850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004854:	4631      	mov	r1, r6
 8004856:	4628      	mov	r0, r5
 8004858:	47b8      	blx	r7
 800485a:	3001      	adds	r0, #1
 800485c:	f43f ae6f 	beq.w	800453e <_printf_float+0xb6>
 8004860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004864:	2200      	movs	r2, #0
 8004866:	2300      	movs	r3, #0
 8004868:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800486c:	f7fc f89c 	bl	80009a8 <__aeabi_dcmpeq>
 8004870:	b9d8      	cbnz	r0, 80048aa <_printf_float+0x422>
 8004872:	f109 33ff 	add.w	r3, r9, #4294967295
 8004876:	f108 0201 	add.w	r2, r8, #1
 800487a:	4631      	mov	r1, r6
 800487c:	4628      	mov	r0, r5
 800487e:	47b8      	blx	r7
 8004880:	3001      	adds	r0, #1
 8004882:	d10e      	bne.n	80048a2 <_printf_float+0x41a>
 8004884:	e65b      	b.n	800453e <_printf_float+0xb6>
 8004886:	2301      	movs	r3, #1
 8004888:	464a      	mov	r2, r9
 800488a:	4631      	mov	r1, r6
 800488c:	4628      	mov	r0, r5
 800488e:	47b8      	blx	r7
 8004890:	3001      	adds	r0, #1
 8004892:	f43f ae54 	beq.w	800453e <_printf_float+0xb6>
 8004896:	f108 0801 	add.w	r8, r8, #1
 800489a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800489c:	3b01      	subs	r3, #1
 800489e:	4543      	cmp	r3, r8
 80048a0:	dcf1      	bgt.n	8004886 <_printf_float+0x3fe>
 80048a2:	4653      	mov	r3, sl
 80048a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048a8:	e6de      	b.n	8004668 <_printf_float+0x1e0>
 80048aa:	f04f 0800 	mov.w	r8, #0
 80048ae:	f104 091a 	add.w	r9, r4, #26
 80048b2:	e7f2      	b.n	800489a <_printf_float+0x412>
 80048b4:	2301      	movs	r3, #1
 80048b6:	4642      	mov	r2, r8
 80048b8:	e7df      	b.n	800487a <_printf_float+0x3f2>
 80048ba:	2301      	movs	r3, #1
 80048bc:	464a      	mov	r2, r9
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b8      	blx	r7
 80048c4:	3001      	adds	r0, #1
 80048c6:	f43f ae3a 	beq.w	800453e <_printf_float+0xb6>
 80048ca:	f108 0801 	add.w	r8, r8, #1
 80048ce:	68e3      	ldr	r3, [r4, #12]
 80048d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048d2:	1a5b      	subs	r3, r3, r1
 80048d4:	4543      	cmp	r3, r8
 80048d6:	dcf0      	bgt.n	80048ba <_printf_float+0x432>
 80048d8:	e6fb      	b.n	80046d2 <_printf_float+0x24a>
 80048da:	f04f 0800 	mov.w	r8, #0
 80048de:	f104 0919 	add.w	r9, r4, #25
 80048e2:	e7f4      	b.n	80048ce <_printf_float+0x446>

080048e4 <_printf_common>:
 80048e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	4616      	mov	r6, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	688a      	ldr	r2, [r1, #8]
 80048ee:	690b      	ldr	r3, [r1, #16]
 80048f0:	4607      	mov	r7, r0
 80048f2:	4293      	cmp	r3, r2
 80048f4:	bfb8      	it	lt
 80048f6:	4613      	movlt	r3, r2
 80048f8:	6033      	str	r3, [r6, #0]
 80048fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048fe:	460c      	mov	r4, r1
 8004900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004904:	b10a      	cbz	r2, 800490a <_printf_common+0x26>
 8004906:	3301      	adds	r3, #1
 8004908:	6033      	str	r3, [r6, #0]
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	0699      	lsls	r1, r3, #26
 800490e:	bf42      	ittt	mi
 8004910:	6833      	ldrmi	r3, [r6, #0]
 8004912:	3302      	addmi	r3, #2
 8004914:	6033      	strmi	r3, [r6, #0]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	f015 0506 	ands.w	r5, r5, #6
 800491c:	d106      	bne.n	800492c <_printf_common+0x48>
 800491e:	f104 0a19 	add.w	sl, r4, #25
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	6832      	ldr	r2, [r6, #0]
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	42ab      	cmp	r3, r5
 800492a:	dc2b      	bgt.n	8004984 <_printf_common+0xa0>
 800492c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004930:	1e13      	subs	r3, r2, #0
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	bf18      	it	ne
 8004936:	2301      	movne	r3, #1
 8004938:	0692      	lsls	r2, r2, #26
 800493a:	d430      	bmi.n	800499e <_printf_common+0xba>
 800493c:	4649      	mov	r1, r9
 800493e:	4638      	mov	r0, r7
 8004940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d023      	beq.n	8004992 <_printf_common+0xae>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	6922      	ldr	r2, [r4, #16]
 800494e:	f003 0306 	and.w	r3, r3, #6
 8004952:	2b04      	cmp	r3, #4
 8004954:	bf14      	ite	ne
 8004956:	2500      	movne	r5, #0
 8004958:	6833      	ldreq	r3, [r6, #0]
 800495a:	f04f 0600 	mov.w	r6, #0
 800495e:	bf08      	it	eq
 8004960:	68e5      	ldreq	r5, [r4, #12]
 8004962:	f104 041a 	add.w	r4, r4, #26
 8004966:	bf08      	it	eq
 8004968:	1aed      	subeq	r5, r5, r3
 800496a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800496e:	bf08      	it	eq
 8004970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004974:	4293      	cmp	r3, r2
 8004976:	bfc4      	itt	gt
 8004978:	1a9b      	subgt	r3, r3, r2
 800497a:	18ed      	addgt	r5, r5, r3
 800497c:	42b5      	cmp	r5, r6
 800497e:	d11a      	bne.n	80049b6 <_printf_common+0xd2>
 8004980:	2000      	movs	r0, #0
 8004982:	e008      	b.n	8004996 <_printf_common+0xb2>
 8004984:	2301      	movs	r3, #1
 8004986:	4652      	mov	r2, sl
 8004988:	4649      	mov	r1, r9
 800498a:	4638      	mov	r0, r7
 800498c:	47c0      	blx	r8
 800498e:	3001      	adds	r0, #1
 8004990:	d103      	bne.n	800499a <_printf_common+0xb6>
 8004992:	f04f 30ff 	mov.w	r0, #4294967295
 8004996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800499a:	3501      	adds	r5, #1
 800499c:	e7c1      	b.n	8004922 <_printf_common+0x3e>
 800499e:	2030      	movs	r0, #48	; 0x30
 80049a0:	18e1      	adds	r1, r4, r3
 80049a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049ac:	4422      	add	r2, r4
 80049ae:	3302      	adds	r3, #2
 80049b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049b4:	e7c2      	b.n	800493c <_printf_common+0x58>
 80049b6:	2301      	movs	r3, #1
 80049b8:	4622      	mov	r2, r4
 80049ba:	4649      	mov	r1, r9
 80049bc:	4638      	mov	r0, r7
 80049be:	47c0      	blx	r8
 80049c0:	3001      	adds	r0, #1
 80049c2:	d0e6      	beq.n	8004992 <_printf_common+0xae>
 80049c4:	3601      	adds	r6, #1
 80049c6:	e7d9      	b.n	800497c <_printf_common+0x98>

080049c8 <_printf_i>:
 80049c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	7e0f      	ldrb	r7, [r1, #24]
 80049ce:	4691      	mov	r9, r2
 80049d0:	2f78      	cmp	r7, #120	; 0x78
 80049d2:	4680      	mov	r8, r0
 80049d4:	460c      	mov	r4, r1
 80049d6:	469a      	mov	sl, r3
 80049d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049de:	d807      	bhi.n	80049f0 <_printf_i+0x28>
 80049e0:	2f62      	cmp	r7, #98	; 0x62
 80049e2:	d80a      	bhi.n	80049fa <_printf_i+0x32>
 80049e4:	2f00      	cmp	r7, #0
 80049e6:	f000 80d5 	beq.w	8004b94 <_printf_i+0x1cc>
 80049ea:	2f58      	cmp	r7, #88	; 0x58
 80049ec:	f000 80c1 	beq.w	8004b72 <_printf_i+0x1aa>
 80049f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f8:	e03a      	b.n	8004a70 <_printf_i+0xa8>
 80049fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049fe:	2b15      	cmp	r3, #21
 8004a00:	d8f6      	bhi.n	80049f0 <_printf_i+0x28>
 8004a02:	a101      	add	r1, pc, #4	; (adr r1, 8004a08 <_printf_i+0x40>)
 8004a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a08:	08004a61 	.word	0x08004a61
 8004a0c:	08004a75 	.word	0x08004a75
 8004a10:	080049f1 	.word	0x080049f1
 8004a14:	080049f1 	.word	0x080049f1
 8004a18:	080049f1 	.word	0x080049f1
 8004a1c:	080049f1 	.word	0x080049f1
 8004a20:	08004a75 	.word	0x08004a75
 8004a24:	080049f1 	.word	0x080049f1
 8004a28:	080049f1 	.word	0x080049f1
 8004a2c:	080049f1 	.word	0x080049f1
 8004a30:	080049f1 	.word	0x080049f1
 8004a34:	08004b7b 	.word	0x08004b7b
 8004a38:	08004aa1 	.word	0x08004aa1
 8004a3c:	08004b35 	.word	0x08004b35
 8004a40:	080049f1 	.word	0x080049f1
 8004a44:	080049f1 	.word	0x080049f1
 8004a48:	08004b9d 	.word	0x08004b9d
 8004a4c:	080049f1 	.word	0x080049f1
 8004a50:	08004aa1 	.word	0x08004aa1
 8004a54:	080049f1 	.word	0x080049f1
 8004a58:	080049f1 	.word	0x080049f1
 8004a5c:	08004b3d 	.word	0x08004b3d
 8004a60:	682b      	ldr	r3, [r5, #0]
 8004a62:	1d1a      	adds	r2, r3, #4
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	602a      	str	r2, [r5, #0]
 8004a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0a0      	b.n	8004bb6 <_printf_i+0x1ee>
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	682b      	ldr	r3, [r5, #0]
 8004a78:	0607      	lsls	r7, r0, #24
 8004a7a:	f103 0104 	add.w	r1, r3, #4
 8004a7e:	6029      	str	r1, [r5, #0]
 8004a80:	d501      	bpl.n	8004a86 <_printf_i+0xbe>
 8004a82:	681e      	ldr	r6, [r3, #0]
 8004a84:	e003      	b.n	8004a8e <_printf_i+0xc6>
 8004a86:	0646      	lsls	r6, r0, #25
 8004a88:	d5fb      	bpl.n	8004a82 <_printf_i+0xba>
 8004a8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a8e:	2e00      	cmp	r6, #0
 8004a90:	da03      	bge.n	8004a9a <_printf_i+0xd2>
 8004a92:	232d      	movs	r3, #45	; 0x2d
 8004a94:	4276      	negs	r6, r6
 8004a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a9a:	230a      	movs	r3, #10
 8004a9c:	4859      	ldr	r0, [pc, #356]	; (8004c04 <_printf_i+0x23c>)
 8004a9e:	e012      	b.n	8004ac6 <_printf_i+0xfe>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	1d19      	adds	r1, r3, #4
 8004aa6:	6029      	str	r1, [r5, #0]
 8004aa8:	0605      	lsls	r5, r0, #24
 8004aaa:	d501      	bpl.n	8004ab0 <_printf_i+0xe8>
 8004aac:	681e      	ldr	r6, [r3, #0]
 8004aae:	e002      	b.n	8004ab6 <_printf_i+0xee>
 8004ab0:	0641      	lsls	r1, r0, #25
 8004ab2:	d5fb      	bpl.n	8004aac <_printf_i+0xe4>
 8004ab4:	881e      	ldrh	r6, [r3, #0]
 8004ab6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ab8:	bf0c      	ite	eq
 8004aba:	2308      	moveq	r3, #8
 8004abc:	230a      	movne	r3, #10
 8004abe:	4851      	ldr	r0, [pc, #324]	; (8004c04 <_printf_i+0x23c>)
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ac6:	6865      	ldr	r5, [r4, #4]
 8004ac8:	2d00      	cmp	r5, #0
 8004aca:	bfa8      	it	ge
 8004acc:	6821      	ldrge	r1, [r4, #0]
 8004ace:	60a5      	str	r5, [r4, #8]
 8004ad0:	bfa4      	itt	ge
 8004ad2:	f021 0104 	bicge.w	r1, r1, #4
 8004ad6:	6021      	strge	r1, [r4, #0]
 8004ad8:	b90e      	cbnz	r6, 8004ade <_printf_i+0x116>
 8004ada:	2d00      	cmp	r5, #0
 8004adc:	d04b      	beq.n	8004b76 <_printf_i+0x1ae>
 8004ade:	4615      	mov	r5, r2
 8004ae0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ae4:	fb03 6711 	mls	r7, r3, r1, r6
 8004ae8:	5dc7      	ldrb	r7, [r0, r7]
 8004aea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004aee:	4637      	mov	r7, r6
 8004af0:	42bb      	cmp	r3, r7
 8004af2:	460e      	mov	r6, r1
 8004af4:	d9f4      	bls.n	8004ae0 <_printf_i+0x118>
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d10b      	bne.n	8004b12 <_printf_i+0x14a>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	07de      	lsls	r6, r3, #31
 8004afe:	d508      	bpl.n	8004b12 <_printf_i+0x14a>
 8004b00:	6923      	ldr	r3, [r4, #16]
 8004b02:	6861      	ldr	r1, [r4, #4]
 8004b04:	4299      	cmp	r1, r3
 8004b06:	bfde      	ittt	le
 8004b08:	2330      	movle	r3, #48	; 0x30
 8004b0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b0e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b12:	1b52      	subs	r2, r2, r5
 8004b14:	6122      	str	r2, [r4, #16]
 8004b16:	464b      	mov	r3, r9
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	f8cd a000 	str.w	sl, [sp]
 8004b20:	aa03      	add	r2, sp, #12
 8004b22:	f7ff fedf 	bl	80048e4 <_printf_common>
 8004b26:	3001      	adds	r0, #1
 8004b28:	d14a      	bne.n	8004bc0 <_printf_i+0x1f8>
 8004b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b2e:	b004      	add	sp, #16
 8004b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b34:	6823      	ldr	r3, [r4, #0]
 8004b36:	f043 0320 	orr.w	r3, r3, #32
 8004b3a:	6023      	str	r3, [r4, #0]
 8004b3c:	2778      	movs	r7, #120	; 0x78
 8004b3e:	4832      	ldr	r0, [pc, #200]	; (8004c08 <_printf_i+0x240>)
 8004b40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	6829      	ldr	r1, [r5, #0]
 8004b48:	061f      	lsls	r7, r3, #24
 8004b4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b4e:	d402      	bmi.n	8004b56 <_printf_i+0x18e>
 8004b50:	065f      	lsls	r7, r3, #25
 8004b52:	bf48      	it	mi
 8004b54:	b2b6      	uxthmi	r6, r6
 8004b56:	07df      	lsls	r7, r3, #31
 8004b58:	bf48      	it	mi
 8004b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b5e:	6029      	str	r1, [r5, #0]
 8004b60:	bf48      	it	mi
 8004b62:	6023      	strmi	r3, [r4, #0]
 8004b64:	b91e      	cbnz	r6, 8004b6e <_printf_i+0x1a6>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	f023 0320 	bic.w	r3, r3, #32
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	2310      	movs	r3, #16
 8004b70:	e7a6      	b.n	8004ac0 <_printf_i+0xf8>
 8004b72:	4824      	ldr	r0, [pc, #144]	; (8004c04 <_printf_i+0x23c>)
 8004b74:	e7e4      	b.n	8004b40 <_printf_i+0x178>
 8004b76:	4615      	mov	r5, r2
 8004b78:	e7bd      	b.n	8004af6 <_printf_i+0x12e>
 8004b7a:	682b      	ldr	r3, [r5, #0]
 8004b7c:	6826      	ldr	r6, [r4, #0]
 8004b7e:	1d18      	adds	r0, r3, #4
 8004b80:	6961      	ldr	r1, [r4, #20]
 8004b82:	6028      	str	r0, [r5, #0]
 8004b84:	0635      	lsls	r5, r6, #24
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	d501      	bpl.n	8004b8e <_printf_i+0x1c6>
 8004b8a:	6019      	str	r1, [r3, #0]
 8004b8c:	e002      	b.n	8004b94 <_printf_i+0x1cc>
 8004b8e:	0670      	lsls	r0, r6, #25
 8004b90:	d5fb      	bpl.n	8004b8a <_printf_i+0x1c2>
 8004b92:	8019      	strh	r1, [r3, #0]
 8004b94:	2300      	movs	r3, #0
 8004b96:	4615      	mov	r5, r2
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	e7bc      	b.n	8004b16 <_printf_i+0x14e>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	1d1a      	adds	r2, r3, #4
 8004ba2:	602a      	str	r2, [r5, #0]
 8004ba4:	681d      	ldr	r5, [r3, #0]
 8004ba6:	6862      	ldr	r2, [r4, #4]
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f9e4 	bl	8004f76 <memchr>
 8004bae:	b108      	cbz	r0, 8004bb4 <_printf_i+0x1ec>
 8004bb0:	1b40      	subs	r0, r0, r5
 8004bb2:	6060      	str	r0, [r4, #4]
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	6123      	str	r3, [r4, #16]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bbe:	e7aa      	b.n	8004b16 <_printf_i+0x14e>
 8004bc0:	462a      	mov	r2, r5
 8004bc2:	4649      	mov	r1, r9
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	47d0      	blx	sl
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d0ad      	beq.n	8004b2a <_printf_i+0x162>
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	079b      	lsls	r3, r3, #30
 8004bd2:	d413      	bmi.n	8004bfc <_printf_i+0x234>
 8004bd4:	68e0      	ldr	r0, [r4, #12]
 8004bd6:	9b03      	ldr	r3, [sp, #12]
 8004bd8:	4298      	cmp	r0, r3
 8004bda:	bfb8      	it	lt
 8004bdc:	4618      	movlt	r0, r3
 8004bde:	e7a6      	b.n	8004b2e <_printf_i+0x166>
 8004be0:	2301      	movs	r3, #1
 8004be2:	4632      	mov	r2, r6
 8004be4:	4649      	mov	r1, r9
 8004be6:	4640      	mov	r0, r8
 8004be8:	47d0      	blx	sl
 8004bea:	3001      	adds	r0, #1
 8004bec:	d09d      	beq.n	8004b2a <_printf_i+0x162>
 8004bee:	3501      	adds	r5, #1
 8004bf0:	68e3      	ldr	r3, [r4, #12]
 8004bf2:	9903      	ldr	r1, [sp, #12]
 8004bf4:	1a5b      	subs	r3, r3, r1
 8004bf6:	42ab      	cmp	r3, r5
 8004bf8:	dcf2      	bgt.n	8004be0 <_printf_i+0x218>
 8004bfa:	e7eb      	b.n	8004bd4 <_printf_i+0x20c>
 8004bfc:	2500      	movs	r5, #0
 8004bfe:	f104 0619 	add.w	r6, r4, #25
 8004c02:	e7f5      	b.n	8004bf0 <_printf_i+0x228>
 8004c04:	08007de0 	.word	0x08007de0
 8004c08:	08007df1 	.word	0x08007df1

08004c0c <std>:
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	b510      	push	{r4, lr}
 8004c10:	4604      	mov	r4, r0
 8004c12:	e9c0 3300 	strd	r3, r3, [r0]
 8004c16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c1a:	6083      	str	r3, [r0, #8]
 8004c1c:	8181      	strh	r1, [r0, #12]
 8004c1e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c20:	81c2      	strh	r2, [r0, #14]
 8004c22:	6183      	str	r3, [r0, #24]
 8004c24:	4619      	mov	r1, r3
 8004c26:	2208      	movs	r2, #8
 8004c28:	305c      	adds	r0, #92	; 0x5c
 8004c2a:	f000 f914 	bl	8004e56 <memset>
 8004c2e:	4b0d      	ldr	r3, [pc, #52]	; (8004c64 <std+0x58>)
 8004c30:	6224      	str	r4, [r4, #32]
 8004c32:	6263      	str	r3, [r4, #36]	; 0x24
 8004c34:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <std+0x5c>)
 8004c36:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <std+0x60>)
 8004c3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <std+0x64>)
 8004c3e:	6323      	str	r3, [r4, #48]	; 0x30
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <std+0x68>)
 8004c42:	429c      	cmp	r4, r3
 8004c44:	d006      	beq.n	8004c54 <std+0x48>
 8004c46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c4a:	4294      	cmp	r4, r2
 8004c4c:	d002      	beq.n	8004c54 <std+0x48>
 8004c4e:	33d0      	adds	r3, #208	; 0xd0
 8004c50:	429c      	cmp	r4, r3
 8004c52:	d105      	bne.n	8004c60 <std+0x54>
 8004c54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c5c:	f000 b988 	b.w	8004f70 <__retarget_lock_init_recursive>
 8004c60:	bd10      	pop	{r4, pc}
 8004c62:	bf00      	nop
 8004c64:	08004dd1 	.word	0x08004dd1
 8004c68:	08004df3 	.word	0x08004df3
 8004c6c:	08004e2b 	.word	0x08004e2b
 8004c70:	08004e4f 	.word	0x08004e4f
 8004c74:	200002f8 	.word	0x200002f8

08004c78 <stdio_exit_handler>:
 8004c78:	4a02      	ldr	r2, [pc, #8]	; (8004c84 <stdio_exit_handler+0xc>)
 8004c7a:	4903      	ldr	r1, [pc, #12]	; (8004c88 <stdio_exit_handler+0x10>)
 8004c7c:	4803      	ldr	r0, [pc, #12]	; (8004c8c <stdio_exit_handler+0x14>)
 8004c7e:	f000 b869 	b.w	8004d54 <_fwalk_sglue>
 8004c82:	bf00      	nop
 8004c84:	2000001c 	.word	0x2000001c
 8004c88:	080067a5 	.word	0x080067a5
 8004c8c:	20000028 	.word	0x20000028

08004c90 <cleanup_stdio>:
 8004c90:	6841      	ldr	r1, [r0, #4]
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <cleanup_stdio+0x34>)
 8004c94:	b510      	push	{r4, lr}
 8004c96:	4299      	cmp	r1, r3
 8004c98:	4604      	mov	r4, r0
 8004c9a:	d001      	beq.n	8004ca0 <cleanup_stdio+0x10>
 8004c9c:	f001 fd82 	bl	80067a4 <_fflush_r>
 8004ca0:	68a1      	ldr	r1, [r4, #8]
 8004ca2:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <cleanup_stdio+0x38>)
 8004ca4:	4299      	cmp	r1, r3
 8004ca6:	d002      	beq.n	8004cae <cleanup_stdio+0x1e>
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f001 fd7b 	bl	80067a4 <_fflush_r>
 8004cae:	68e1      	ldr	r1, [r4, #12]
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <cleanup_stdio+0x3c>)
 8004cb2:	4299      	cmp	r1, r3
 8004cb4:	d004      	beq.n	8004cc0 <cleanup_stdio+0x30>
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cbc:	f001 bd72 	b.w	80067a4 <_fflush_r>
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	bf00      	nop
 8004cc4:	200002f8 	.word	0x200002f8
 8004cc8:	20000360 	.word	0x20000360
 8004ccc:	200003c8 	.word	0x200003c8

08004cd0 <global_stdio_init.part.0>:
 8004cd0:	b510      	push	{r4, lr}
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <global_stdio_init.part.0+0x30>)
 8004cd4:	4c0b      	ldr	r4, [pc, #44]	; (8004d04 <global_stdio_init.part.0+0x34>)
 8004cd6:	4a0c      	ldr	r2, [pc, #48]	; (8004d08 <global_stdio_init.part.0+0x38>)
 8004cd8:	4620      	mov	r0, r4
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	2104      	movs	r1, #4
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f7ff ff94 	bl	8004c0c <std>
 8004ce4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ce8:	2201      	movs	r2, #1
 8004cea:	2109      	movs	r1, #9
 8004cec:	f7ff ff8e 	bl	8004c0c <std>
 8004cf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cfa:	2112      	movs	r1, #18
 8004cfc:	f7ff bf86 	b.w	8004c0c <std>
 8004d00:	20000430 	.word	0x20000430
 8004d04:	200002f8 	.word	0x200002f8
 8004d08:	08004c79 	.word	0x08004c79

08004d0c <__sfp_lock_acquire>:
 8004d0c:	4801      	ldr	r0, [pc, #4]	; (8004d14 <__sfp_lock_acquire+0x8>)
 8004d0e:	f000 b930 	b.w	8004f72 <__retarget_lock_acquire_recursive>
 8004d12:	bf00      	nop
 8004d14:	20000439 	.word	0x20000439

08004d18 <__sfp_lock_release>:
 8004d18:	4801      	ldr	r0, [pc, #4]	; (8004d20 <__sfp_lock_release+0x8>)
 8004d1a:	f000 b92b 	b.w	8004f74 <__retarget_lock_release_recursive>
 8004d1e:	bf00      	nop
 8004d20:	20000439 	.word	0x20000439

08004d24 <__sinit>:
 8004d24:	b510      	push	{r4, lr}
 8004d26:	4604      	mov	r4, r0
 8004d28:	f7ff fff0 	bl	8004d0c <__sfp_lock_acquire>
 8004d2c:	6a23      	ldr	r3, [r4, #32]
 8004d2e:	b11b      	cbz	r3, 8004d38 <__sinit+0x14>
 8004d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d34:	f7ff bff0 	b.w	8004d18 <__sfp_lock_release>
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <__sinit+0x28>)
 8004d3a:	6223      	str	r3, [r4, #32]
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <__sinit+0x2c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1f5      	bne.n	8004d30 <__sinit+0xc>
 8004d44:	f7ff ffc4 	bl	8004cd0 <global_stdio_init.part.0>
 8004d48:	e7f2      	b.n	8004d30 <__sinit+0xc>
 8004d4a:	bf00      	nop
 8004d4c:	08004c91 	.word	0x08004c91
 8004d50:	20000430 	.word	0x20000430

08004d54 <_fwalk_sglue>:
 8004d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d58:	4607      	mov	r7, r0
 8004d5a:	4688      	mov	r8, r1
 8004d5c:	4614      	mov	r4, r2
 8004d5e:	2600      	movs	r6, #0
 8004d60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d64:	f1b9 0901 	subs.w	r9, r9, #1
 8004d68:	d505      	bpl.n	8004d76 <_fwalk_sglue+0x22>
 8004d6a:	6824      	ldr	r4, [r4, #0]
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	d1f7      	bne.n	8004d60 <_fwalk_sglue+0xc>
 8004d70:	4630      	mov	r0, r6
 8004d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d76:	89ab      	ldrh	r3, [r5, #12]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d907      	bls.n	8004d8c <_fwalk_sglue+0x38>
 8004d7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d80:	3301      	adds	r3, #1
 8004d82:	d003      	beq.n	8004d8c <_fwalk_sglue+0x38>
 8004d84:	4629      	mov	r1, r5
 8004d86:	4638      	mov	r0, r7
 8004d88:	47c0      	blx	r8
 8004d8a:	4306      	orrs	r6, r0
 8004d8c:	3568      	adds	r5, #104	; 0x68
 8004d8e:	e7e9      	b.n	8004d64 <_fwalk_sglue+0x10>

08004d90 <siprintf>:
 8004d90:	b40e      	push	{r1, r2, r3}
 8004d92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d96:	b500      	push	{lr}
 8004d98:	b09c      	sub	sp, #112	; 0x70
 8004d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d9c:	9002      	str	r0, [sp, #8]
 8004d9e:	9006      	str	r0, [sp, #24]
 8004da0:	9107      	str	r1, [sp, #28]
 8004da2:	9104      	str	r1, [sp, #16]
 8004da4:	4808      	ldr	r0, [pc, #32]	; (8004dc8 <siprintf+0x38>)
 8004da6:	4909      	ldr	r1, [pc, #36]	; (8004dcc <siprintf+0x3c>)
 8004da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dac:	9105      	str	r1, [sp, #20]
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	a902      	add	r1, sp, #8
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	f001 fb76 	bl	80064a4 <_svfiprintf_r>
 8004db8:	2200      	movs	r2, #0
 8004dba:	9b02      	ldr	r3, [sp, #8]
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	b01c      	add	sp, #112	; 0x70
 8004dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dc4:	b003      	add	sp, #12
 8004dc6:	4770      	bx	lr
 8004dc8:	20000074 	.word	0x20000074
 8004dcc:	ffff0208 	.word	0xffff0208

08004dd0 <__sread>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd8:	f000 f86c 	bl	8004eb4 <_read_r>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	bfab      	itete	ge
 8004de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004de2:	89a3      	ldrhlt	r3, [r4, #12]
 8004de4:	181b      	addge	r3, r3, r0
 8004de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dea:	bfac      	ite	ge
 8004dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8004dee:	81a3      	strhlt	r3, [r4, #12]
 8004df0:	bd10      	pop	{r4, pc}

08004df2 <__swrite>:
 8004df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	461f      	mov	r7, r3
 8004df8:	898b      	ldrh	r3, [r1, #12]
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	05db      	lsls	r3, r3, #23
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4616      	mov	r6, r2
 8004e02:	d505      	bpl.n	8004e10 <__swrite+0x1e>
 8004e04:	2302      	movs	r3, #2
 8004e06:	2200      	movs	r2, #0
 8004e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0c:	f000 f840 	bl	8004e90 <_lseek_r>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	4632      	mov	r2, r6
 8004e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e26:	f000 b867 	b.w	8004ef8 <_write_r>

08004e2a <__sseek>:
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e32:	f000 f82d 	bl	8004e90 <_lseek_r>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	bf15      	itete	ne
 8004e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e46:	81a3      	strheq	r3, [r4, #12]
 8004e48:	bf18      	it	ne
 8004e4a:	81a3      	strhne	r3, [r4, #12]
 8004e4c:	bd10      	pop	{r4, pc}

08004e4e <__sclose>:
 8004e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e52:	f000 b80d 	b.w	8004e70 <_close_r>

08004e56 <memset>:
 8004e56:	4603      	mov	r3, r0
 8004e58:	4402      	add	r2, r0
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d100      	bne.n	8004e60 <memset+0xa>
 8004e5e:	4770      	bx	lr
 8004e60:	f803 1b01 	strb.w	r1, [r3], #1
 8004e64:	e7f9      	b.n	8004e5a <memset+0x4>
	...

08004e68 <_localeconv_r>:
 8004e68:	4800      	ldr	r0, [pc, #0]	; (8004e6c <_localeconv_r+0x4>)
 8004e6a:	4770      	bx	lr
 8004e6c:	20000168 	.word	0x20000168

08004e70 <_close_r>:
 8004e70:	b538      	push	{r3, r4, r5, lr}
 8004e72:	2300      	movs	r3, #0
 8004e74:	4d05      	ldr	r5, [pc, #20]	; (8004e8c <_close_r+0x1c>)
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	602b      	str	r3, [r5, #0]
 8004e7c:	f7fc fd96 	bl	80019ac <_close>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_close_r+0x1a>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_close_r+0x1a>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	20000434 	.word	0x20000434

08004e90 <_lseek_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4604      	mov	r4, r0
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4d05      	ldr	r5, [pc, #20]	; (8004eb0 <_lseek_r+0x20>)
 8004e9c:	602a      	str	r2, [r5, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f7fc fda8 	bl	80019f4 <_lseek>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_lseek_r+0x1e>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_lseek_r+0x1e>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000434 	.word	0x20000434

08004eb4 <_read_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	4608      	mov	r0, r1
 8004eba:	4611      	mov	r1, r2
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4d05      	ldr	r5, [pc, #20]	; (8004ed4 <_read_r+0x20>)
 8004ec0:	602a      	str	r2, [r5, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f7fc fd39 	bl	800193a <_read>
 8004ec8:	1c43      	adds	r3, r0, #1
 8004eca:	d102      	bne.n	8004ed2 <_read_r+0x1e>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	b103      	cbz	r3, 8004ed2 <_read_r+0x1e>
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	bd38      	pop	{r3, r4, r5, pc}
 8004ed4:	20000434 	.word	0x20000434

08004ed8 <_sbrk_r>:
 8004ed8:	b538      	push	{r3, r4, r5, lr}
 8004eda:	2300      	movs	r3, #0
 8004edc:	4d05      	ldr	r5, [pc, #20]	; (8004ef4 <_sbrk_r+0x1c>)
 8004ede:	4604      	mov	r4, r0
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	602b      	str	r3, [r5, #0]
 8004ee4:	f7fc fd92 	bl	8001a0c <_sbrk>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_sbrk_r+0x1a>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_sbrk_r+0x1a>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20000434 	.word	0x20000434

08004ef8 <_write_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	4611      	mov	r1, r2
 8004f00:	2200      	movs	r2, #0
 8004f02:	4d05      	ldr	r5, [pc, #20]	; (8004f18 <_write_r+0x20>)
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fc fd34 	bl	8001974 <_write>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_write_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_write_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	20000434 	.word	0x20000434

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	; (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000074 	.word	0x20000074

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	4d0c      	ldr	r5, [pc, #48]	; (8004f60 <__libc_init_array+0x38>)
 8004f2e:	4c0d      	ldr	r4, [pc, #52]	; (8004f64 <__libc_init_array+0x3c>)
 8004f30:	1b64      	subs	r4, r4, r5
 8004f32:	10a4      	asrs	r4, r4, #2
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	f002 fecc 	bl	8007cd4 <_init>
 8004f3c:	2600      	movs	r6, #0
 8004f3e:	4d0a      	ldr	r5, [pc, #40]	; (8004f68 <__libc_init_array+0x40>)
 8004f40:	4c0a      	ldr	r4, [pc, #40]	; (8004f6c <__libc_init_array+0x44>)
 8004f42:	1b64      	subs	r4, r4, r5
 8004f44:	10a4      	asrs	r4, r4, #2
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	08008170 	.word	0x08008170
 8004f64:	08008170 	.word	0x08008170
 8004f68:	08008170 	.word	0x08008170
 8004f6c:	08008174 	.word	0x08008174

08004f70 <__retarget_lock_init_recursive>:
 8004f70:	4770      	bx	lr

08004f72 <__retarget_lock_acquire_recursive>:
 8004f72:	4770      	bx	lr

08004f74 <__retarget_lock_release_recursive>:
 8004f74:	4770      	bx	lr

08004f76 <memchr>:
 8004f76:	4603      	mov	r3, r0
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	b2c9      	uxtb	r1, r1
 8004f7c:	4402      	add	r2, r0
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	d101      	bne.n	8004f88 <memchr+0x12>
 8004f84:	2000      	movs	r0, #0
 8004f86:	e003      	b.n	8004f90 <memchr+0x1a>
 8004f88:	7804      	ldrb	r4, [r0, #0]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	428c      	cmp	r4, r1
 8004f8e:	d1f6      	bne.n	8004f7e <memchr+0x8>
 8004f90:	bd10      	pop	{r4, pc}

08004f92 <quorem>:
 8004f92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f96:	6903      	ldr	r3, [r0, #16]
 8004f98:	690c      	ldr	r4, [r1, #16]
 8004f9a:	4607      	mov	r7, r0
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	db7f      	blt.n	80050a0 <quorem+0x10e>
 8004fa0:	3c01      	subs	r4, #1
 8004fa2:	f100 0514 	add.w	r5, r0, #20
 8004fa6:	f101 0814 	add.w	r8, r1, #20
 8004faa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004fb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fb8:	3301      	adds	r3, #1
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004fc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004fc8:	d331      	bcc.n	800502e <quorem+0x9c>
 8004fca:	f04f 0e00 	mov.w	lr, #0
 8004fce:	4640      	mov	r0, r8
 8004fd0:	46ac      	mov	ip, r5
 8004fd2:	46f2      	mov	sl, lr
 8004fd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fd8:	b293      	uxth	r3, r2
 8004fda:	fb06 e303 	mla	r3, r6, r3, lr
 8004fde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fe2:	0c1a      	lsrs	r2, r3, #16
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	fb06 220e 	mla	r2, r6, lr, r2
 8004fea:	ebaa 0303 	sub.w	r3, sl, r3
 8004fee:	f8dc a000 	ldr.w	sl, [ip]
 8004ff2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ff6:	fa1f fa8a 	uxth.w	sl, sl
 8004ffa:	4453      	add	r3, sl
 8004ffc:	f8dc a000 	ldr.w	sl, [ip]
 8005000:	b292      	uxth	r2, r2
 8005002:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005006:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800500a:	b29b      	uxth	r3, r3
 800500c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005010:	4581      	cmp	r9, r0
 8005012:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005016:	f84c 3b04 	str.w	r3, [ip], #4
 800501a:	d2db      	bcs.n	8004fd4 <quorem+0x42>
 800501c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005020:	b92b      	cbnz	r3, 800502e <quorem+0x9c>
 8005022:	9b01      	ldr	r3, [sp, #4]
 8005024:	3b04      	subs	r3, #4
 8005026:	429d      	cmp	r5, r3
 8005028:	461a      	mov	r2, r3
 800502a:	d32d      	bcc.n	8005088 <quorem+0xf6>
 800502c:	613c      	str	r4, [r7, #16]
 800502e:	4638      	mov	r0, r7
 8005030:	f001 f8e0 	bl	80061f4 <__mcmp>
 8005034:	2800      	cmp	r0, #0
 8005036:	db23      	blt.n	8005080 <quorem+0xee>
 8005038:	4629      	mov	r1, r5
 800503a:	2000      	movs	r0, #0
 800503c:	3601      	adds	r6, #1
 800503e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005042:	f8d1 c000 	ldr.w	ip, [r1]
 8005046:	b293      	uxth	r3, r2
 8005048:	1ac3      	subs	r3, r0, r3
 800504a:	0c12      	lsrs	r2, r2, #16
 800504c:	fa1f f08c 	uxth.w	r0, ip
 8005050:	4403      	add	r3, r0
 8005052:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800505a:	b29b      	uxth	r3, r3
 800505c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005060:	45c1      	cmp	r9, r8
 8005062:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005066:	f841 3b04 	str.w	r3, [r1], #4
 800506a:	d2e8      	bcs.n	800503e <quorem+0xac>
 800506c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005070:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005074:	b922      	cbnz	r2, 8005080 <quorem+0xee>
 8005076:	3b04      	subs	r3, #4
 8005078:	429d      	cmp	r5, r3
 800507a:	461a      	mov	r2, r3
 800507c:	d30a      	bcc.n	8005094 <quorem+0x102>
 800507e:	613c      	str	r4, [r7, #16]
 8005080:	4630      	mov	r0, r6
 8005082:	b003      	add	sp, #12
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005088:	6812      	ldr	r2, [r2, #0]
 800508a:	3b04      	subs	r3, #4
 800508c:	2a00      	cmp	r2, #0
 800508e:	d1cd      	bne.n	800502c <quorem+0x9a>
 8005090:	3c01      	subs	r4, #1
 8005092:	e7c8      	b.n	8005026 <quorem+0x94>
 8005094:	6812      	ldr	r2, [r2, #0]
 8005096:	3b04      	subs	r3, #4
 8005098:	2a00      	cmp	r2, #0
 800509a:	d1f0      	bne.n	800507e <quorem+0xec>
 800509c:	3c01      	subs	r4, #1
 800509e:	e7eb      	b.n	8005078 <quorem+0xe6>
 80050a0:	2000      	movs	r0, #0
 80050a2:	e7ee      	b.n	8005082 <quorem+0xf0>
 80050a4:	0000      	movs	r0, r0
	...

080050a8 <_dtoa_r>:
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	4616      	mov	r6, r2
 80050ae:	461f      	mov	r7, r3
 80050b0:	69c4      	ldr	r4, [r0, #28]
 80050b2:	b099      	sub	sp, #100	; 0x64
 80050b4:	4605      	mov	r5, r0
 80050b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80050ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80050be:	b974      	cbnz	r4, 80050de <_dtoa_r+0x36>
 80050c0:	2010      	movs	r0, #16
 80050c2:	f7ff f889 	bl	80041d8 <malloc>
 80050c6:	4602      	mov	r2, r0
 80050c8:	61e8      	str	r0, [r5, #28]
 80050ca:	b920      	cbnz	r0, 80050d6 <_dtoa_r+0x2e>
 80050cc:	21ef      	movs	r1, #239	; 0xef
 80050ce:	4bac      	ldr	r3, [pc, #688]	; (8005380 <_dtoa_r+0x2d8>)
 80050d0:	48ac      	ldr	r0, [pc, #688]	; (8005384 <_dtoa_r+0x2dc>)
 80050d2:	f001 fbb7 	bl	8006844 <__assert_func>
 80050d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050da:	6004      	str	r4, [r0, #0]
 80050dc:	60c4      	str	r4, [r0, #12]
 80050de:	69eb      	ldr	r3, [r5, #28]
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	b151      	cbz	r1, 80050fa <_dtoa_r+0x52>
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	2301      	movs	r3, #1
 80050e8:	4093      	lsls	r3, r2
 80050ea:	604a      	str	r2, [r1, #4]
 80050ec:	608b      	str	r3, [r1, #8]
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 fe46 	bl	8005d80 <_Bfree>
 80050f4:	2200      	movs	r2, #0
 80050f6:	69eb      	ldr	r3, [r5, #28]
 80050f8:	601a      	str	r2, [r3, #0]
 80050fa:	1e3b      	subs	r3, r7, #0
 80050fc:	bfaf      	iteee	ge
 80050fe:	2300      	movge	r3, #0
 8005100:	2201      	movlt	r2, #1
 8005102:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005106:	9305      	strlt	r3, [sp, #20]
 8005108:	bfa8      	it	ge
 800510a:	f8c8 3000 	strge.w	r3, [r8]
 800510e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005112:	4b9d      	ldr	r3, [pc, #628]	; (8005388 <_dtoa_r+0x2e0>)
 8005114:	bfb8      	it	lt
 8005116:	f8c8 2000 	strlt.w	r2, [r8]
 800511a:	ea33 0309 	bics.w	r3, r3, r9
 800511e:	d119      	bne.n	8005154 <_dtoa_r+0xac>
 8005120:	f242 730f 	movw	r3, #9999	; 0x270f
 8005124:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800512c:	4333      	orrs	r3, r6
 800512e:	f000 8589 	beq.w	8005c44 <_dtoa_r+0xb9c>
 8005132:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005134:	b953      	cbnz	r3, 800514c <_dtoa_r+0xa4>
 8005136:	4b95      	ldr	r3, [pc, #596]	; (800538c <_dtoa_r+0x2e4>)
 8005138:	e023      	b.n	8005182 <_dtoa_r+0xda>
 800513a:	4b95      	ldr	r3, [pc, #596]	; (8005390 <_dtoa_r+0x2e8>)
 800513c:	9303      	str	r3, [sp, #12]
 800513e:	3308      	adds	r3, #8
 8005140:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	9803      	ldr	r0, [sp, #12]
 8005146:	b019      	add	sp, #100	; 0x64
 8005148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514c:	4b8f      	ldr	r3, [pc, #572]	; (800538c <_dtoa_r+0x2e4>)
 800514e:	9303      	str	r3, [sp, #12]
 8005150:	3303      	adds	r3, #3
 8005152:	e7f5      	b.n	8005140 <_dtoa_r+0x98>
 8005154:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005158:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800515c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005160:	2200      	movs	r2, #0
 8005162:	2300      	movs	r3, #0
 8005164:	f7fb fc20 	bl	80009a8 <__aeabi_dcmpeq>
 8005168:	4680      	mov	r8, r0
 800516a:	b160      	cbz	r0, 8005186 <_dtoa_r+0xde>
 800516c:	2301      	movs	r3, #1
 800516e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 8562 	beq.w	8005c3e <_dtoa_r+0xb96>
 800517a:	4b86      	ldr	r3, [pc, #536]	; (8005394 <_dtoa_r+0x2ec>)
 800517c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	3b01      	subs	r3, #1
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	e7de      	b.n	8005144 <_dtoa_r+0x9c>
 8005186:	ab16      	add	r3, sp, #88	; 0x58
 8005188:	9301      	str	r3, [sp, #4]
 800518a:	ab17      	add	r3, sp, #92	; 0x5c
 800518c:	9300      	str	r3, [sp, #0]
 800518e:	4628      	mov	r0, r5
 8005190:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005194:	f001 f8d6 	bl	8006344 <__d2b>
 8005198:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800519c:	4682      	mov	sl, r0
 800519e:	2c00      	cmp	r4, #0
 80051a0:	d07e      	beq.n	80052a0 <_dtoa_r+0x1f8>
 80051a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80051a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80051ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80051b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80051b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80051bc:	4619      	mov	r1, r3
 80051be:	2200      	movs	r2, #0
 80051c0:	4b75      	ldr	r3, [pc, #468]	; (8005398 <_dtoa_r+0x2f0>)
 80051c2:	f7fa ffd1 	bl	8000168 <__aeabi_dsub>
 80051c6:	a368      	add	r3, pc, #416	; (adr r3, 8005368 <_dtoa_r+0x2c0>)
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	f7fb f984 	bl	80004d8 <__aeabi_dmul>
 80051d0:	a367      	add	r3, pc, #412	; (adr r3, 8005370 <_dtoa_r+0x2c8>)
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f7fa ffc9 	bl	800016c <__adddf3>
 80051da:	4606      	mov	r6, r0
 80051dc:	4620      	mov	r0, r4
 80051de:	460f      	mov	r7, r1
 80051e0:	f7fb f910 	bl	8000404 <__aeabi_i2d>
 80051e4:	a364      	add	r3, pc, #400	; (adr r3, 8005378 <_dtoa_r+0x2d0>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fb f975 	bl	80004d8 <__aeabi_dmul>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4630      	mov	r0, r6
 80051f4:	4639      	mov	r1, r7
 80051f6:	f7fa ffb9 	bl	800016c <__adddf3>
 80051fa:	4606      	mov	r6, r0
 80051fc:	460f      	mov	r7, r1
 80051fe:	f7fb fc1b 	bl	8000a38 <__aeabi_d2iz>
 8005202:	2200      	movs	r2, #0
 8005204:	4683      	mov	fp, r0
 8005206:	2300      	movs	r3, #0
 8005208:	4630      	mov	r0, r6
 800520a:	4639      	mov	r1, r7
 800520c:	f7fb fbd6 	bl	80009bc <__aeabi_dcmplt>
 8005210:	b148      	cbz	r0, 8005226 <_dtoa_r+0x17e>
 8005212:	4658      	mov	r0, fp
 8005214:	f7fb f8f6 	bl	8000404 <__aeabi_i2d>
 8005218:	4632      	mov	r2, r6
 800521a:	463b      	mov	r3, r7
 800521c:	f7fb fbc4 	bl	80009a8 <__aeabi_dcmpeq>
 8005220:	b908      	cbnz	r0, 8005226 <_dtoa_r+0x17e>
 8005222:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005226:	f1bb 0f16 	cmp.w	fp, #22
 800522a:	d857      	bhi.n	80052dc <_dtoa_r+0x234>
 800522c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005230:	4b5a      	ldr	r3, [pc, #360]	; (800539c <_dtoa_r+0x2f4>)
 8005232:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fb fbbf 	bl	80009bc <__aeabi_dcmplt>
 800523e:	2800      	cmp	r0, #0
 8005240:	d04e      	beq.n	80052e0 <_dtoa_r+0x238>
 8005242:	2300      	movs	r3, #0
 8005244:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005248:	930f      	str	r3, [sp, #60]	; 0x3c
 800524a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800524c:	1b1b      	subs	r3, r3, r4
 800524e:	1e5a      	subs	r2, r3, #1
 8005250:	bf46      	itte	mi
 8005252:	f1c3 0901 	rsbmi	r9, r3, #1
 8005256:	2300      	movmi	r3, #0
 8005258:	f04f 0900 	movpl.w	r9, #0
 800525c:	9209      	str	r2, [sp, #36]	; 0x24
 800525e:	bf48      	it	mi
 8005260:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005262:	f1bb 0f00 	cmp.w	fp, #0
 8005266:	db3d      	blt.n	80052e4 <_dtoa_r+0x23c>
 8005268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800526e:	445b      	add	r3, fp
 8005270:	9309      	str	r3, [sp, #36]	; 0x24
 8005272:	2300      	movs	r3, #0
 8005274:	930a      	str	r3, [sp, #40]	; 0x28
 8005276:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005278:	2b09      	cmp	r3, #9
 800527a:	d867      	bhi.n	800534c <_dtoa_r+0x2a4>
 800527c:	2b05      	cmp	r3, #5
 800527e:	bfc4      	itt	gt
 8005280:	3b04      	subgt	r3, #4
 8005282:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005286:	bfc8      	it	gt
 8005288:	2400      	movgt	r4, #0
 800528a:	f1a3 0302 	sub.w	r3, r3, #2
 800528e:	bfd8      	it	le
 8005290:	2401      	movle	r4, #1
 8005292:	2b03      	cmp	r3, #3
 8005294:	f200 8086 	bhi.w	80053a4 <_dtoa_r+0x2fc>
 8005298:	e8df f003 	tbb	[pc, r3]
 800529c:	5637392c 	.word	0x5637392c
 80052a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80052a4:	441c      	add	r4, r3
 80052a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80052aa:	2b20      	cmp	r3, #32
 80052ac:	bfc1      	itttt	gt
 80052ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80052b2:	fa09 f903 	lslgt.w	r9, r9, r3
 80052b6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80052ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 80052be:	bfd6      	itet	le
 80052c0:	f1c3 0320 	rsble	r3, r3, #32
 80052c4:	ea49 0003 	orrgt.w	r0, r9, r3
 80052c8:	fa06 f003 	lslle.w	r0, r6, r3
 80052cc:	f7fb f88a 	bl	80003e4 <__aeabi_ui2d>
 80052d0:	2201      	movs	r2, #1
 80052d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80052d6:	3c01      	subs	r4, #1
 80052d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80052da:	e76f      	b.n	80051bc <_dtoa_r+0x114>
 80052dc:	2301      	movs	r3, #1
 80052de:	e7b3      	b.n	8005248 <_dtoa_r+0x1a0>
 80052e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80052e2:	e7b2      	b.n	800524a <_dtoa_r+0x1a2>
 80052e4:	f1cb 0300 	rsb	r3, fp, #0
 80052e8:	930a      	str	r3, [sp, #40]	; 0x28
 80052ea:	2300      	movs	r3, #0
 80052ec:	eba9 090b 	sub.w	r9, r9, fp
 80052f0:	930e      	str	r3, [sp, #56]	; 0x38
 80052f2:	e7c0      	b.n	8005276 <_dtoa_r+0x1ce>
 80052f4:	2300      	movs	r3, #0
 80052f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	dc55      	bgt.n	80053aa <_dtoa_r+0x302>
 80052fe:	2301      	movs	r3, #1
 8005300:	461a      	mov	r2, r3
 8005302:	9306      	str	r3, [sp, #24]
 8005304:	9308      	str	r3, [sp, #32]
 8005306:	9223      	str	r2, [sp, #140]	; 0x8c
 8005308:	e00b      	b.n	8005322 <_dtoa_r+0x27a>
 800530a:	2301      	movs	r3, #1
 800530c:	e7f3      	b.n	80052f6 <_dtoa_r+0x24e>
 800530e:	2300      	movs	r3, #0
 8005310:	930b      	str	r3, [sp, #44]	; 0x2c
 8005312:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005314:	445b      	add	r3, fp
 8005316:	9306      	str	r3, [sp, #24]
 8005318:	3301      	adds	r3, #1
 800531a:	2b01      	cmp	r3, #1
 800531c:	9308      	str	r3, [sp, #32]
 800531e:	bfb8      	it	lt
 8005320:	2301      	movlt	r3, #1
 8005322:	2100      	movs	r1, #0
 8005324:	2204      	movs	r2, #4
 8005326:	69e8      	ldr	r0, [r5, #28]
 8005328:	f102 0614 	add.w	r6, r2, #20
 800532c:	429e      	cmp	r6, r3
 800532e:	d940      	bls.n	80053b2 <_dtoa_r+0x30a>
 8005330:	6041      	str	r1, [r0, #4]
 8005332:	4628      	mov	r0, r5
 8005334:	f000 fce4 	bl	8005d00 <_Balloc>
 8005338:	9003      	str	r0, [sp, #12]
 800533a:	2800      	cmp	r0, #0
 800533c:	d13c      	bne.n	80053b8 <_dtoa_r+0x310>
 800533e:	4602      	mov	r2, r0
 8005340:	f240 11af 	movw	r1, #431	; 0x1af
 8005344:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <_dtoa_r+0x2f8>)
 8005346:	e6c3      	b.n	80050d0 <_dtoa_r+0x28>
 8005348:	2301      	movs	r3, #1
 800534a:	e7e1      	b.n	8005310 <_dtoa_r+0x268>
 800534c:	2401      	movs	r4, #1
 800534e:	2300      	movs	r3, #0
 8005350:	940b      	str	r4, [sp, #44]	; 0x2c
 8005352:	9322      	str	r3, [sp, #136]	; 0x88
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	2200      	movs	r2, #0
 800535a:	9306      	str	r3, [sp, #24]
 800535c:	9308      	str	r3, [sp, #32]
 800535e:	2312      	movs	r3, #18
 8005360:	e7d1      	b.n	8005306 <_dtoa_r+0x25e>
 8005362:	bf00      	nop
 8005364:	f3af 8000 	nop.w
 8005368:	636f4361 	.word	0x636f4361
 800536c:	3fd287a7 	.word	0x3fd287a7
 8005370:	8b60c8b3 	.word	0x8b60c8b3
 8005374:	3fc68a28 	.word	0x3fc68a28
 8005378:	509f79fb 	.word	0x509f79fb
 800537c:	3fd34413 	.word	0x3fd34413
 8005380:	08007e0f 	.word	0x08007e0f
 8005384:	08007e26 	.word	0x08007e26
 8005388:	7ff00000 	.word	0x7ff00000
 800538c:	08007e0b 	.word	0x08007e0b
 8005390:	08007e02 	.word	0x08007e02
 8005394:	08007ddf 	.word	0x08007ddf
 8005398:	3ff80000 	.word	0x3ff80000
 800539c:	08007f10 	.word	0x08007f10
 80053a0:	08007e7e 	.word	0x08007e7e
 80053a4:	2301      	movs	r3, #1
 80053a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80053a8:	e7d4      	b.n	8005354 <_dtoa_r+0x2ac>
 80053aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053ac:	9306      	str	r3, [sp, #24]
 80053ae:	9308      	str	r3, [sp, #32]
 80053b0:	e7b7      	b.n	8005322 <_dtoa_r+0x27a>
 80053b2:	3101      	adds	r1, #1
 80053b4:	0052      	lsls	r2, r2, #1
 80053b6:	e7b7      	b.n	8005328 <_dtoa_r+0x280>
 80053b8:	69eb      	ldr	r3, [r5, #28]
 80053ba:	9a03      	ldr	r2, [sp, #12]
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	9b08      	ldr	r3, [sp, #32]
 80053c0:	2b0e      	cmp	r3, #14
 80053c2:	f200 80a8 	bhi.w	8005516 <_dtoa_r+0x46e>
 80053c6:	2c00      	cmp	r4, #0
 80053c8:	f000 80a5 	beq.w	8005516 <_dtoa_r+0x46e>
 80053cc:	f1bb 0f00 	cmp.w	fp, #0
 80053d0:	dd34      	ble.n	800543c <_dtoa_r+0x394>
 80053d2:	4b9a      	ldr	r3, [pc, #616]	; (800563c <_dtoa_r+0x594>)
 80053d4:	f00b 020f 	and.w	r2, fp, #15
 80053d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80053e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80053ec:	d016      	beq.n	800541c <_dtoa_r+0x374>
 80053ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053f2:	4b93      	ldr	r3, [pc, #588]	; (8005640 <_dtoa_r+0x598>)
 80053f4:	2703      	movs	r7, #3
 80053f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053fa:	f7fb f997 	bl	800072c <__aeabi_ddiv>
 80053fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005402:	f004 040f 	and.w	r4, r4, #15
 8005406:	4e8e      	ldr	r6, [pc, #568]	; (8005640 <_dtoa_r+0x598>)
 8005408:	b954      	cbnz	r4, 8005420 <_dtoa_r+0x378>
 800540a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800540e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005412:	f7fb f98b 	bl	800072c <__aeabi_ddiv>
 8005416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800541a:	e029      	b.n	8005470 <_dtoa_r+0x3c8>
 800541c:	2702      	movs	r7, #2
 800541e:	e7f2      	b.n	8005406 <_dtoa_r+0x35e>
 8005420:	07e1      	lsls	r1, r4, #31
 8005422:	d508      	bpl.n	8005436 <_dtoa_r+0x38e>
 8005424:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005428:	e9d6 2300 	ldrd	r2, r3, [r6]
 800542c:	f7fb f854 	bl	80004d8 <__aeabi_dmul>
 8005430:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005434:	3701      	adds	r7, #1
 8005436:	1064      	asrs	r4, r4, #1
 8005438:	3608      	adds	r6, #8
 800543a:	e7e5      	b.n	8005408 <_dtoa_r+0x360>
 800543c:	f000 80a5 	beq.w	800558a <_dtoa_r+0x4e2>
 8005440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005444:	f1cb 0400 	rsb	r4, fp, #0
 8005448:	4b7c      	ldr	r3, [pc, #496]	; (800563c <_dtoa_r+0x594>)
 800544a:	f004 020f 	and.w	r2, r4, #15
 800544e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005456:	f7fb f83f 	bl	80004d8 <__aeabi_dmul>
 800545a:	2702      	movs	r7, #2
 800545c:	2300      	movs	r3, #0
 800545e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005462:	4e77      	ldr	r6, [pc, #476]	; (8005640 <_dtoa_r+0x598>)
 8005464:	1124      	asrs	r4, r4, #4
 8005466:	2c00      	cmp	r4, #0
 8005468:	f040 8084 	bne.w	8005574 <_dtoa_r+0x4cc>
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1d2      	bne.n	8005416 <_dtoa_r+0x36e>
 8005470:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005474:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8087 	beq.w	800558e <_dtoa_r+0x4e6>
 8005480:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005484:	2200      	movs	r2, #0
 8005486:	4b6f      	ldr	r3, [pc, #444]	; (8005644 <_dtoa_r+0x59c>)
 8005488:	f7fb fa98 	bl	80009bc <__aeabi_dcmplt>
 800548c:	2800      	cmp	r0, #0
 800548e:	d07e      	beq.n	800558e <_dtoa_r+0x4e6>
 8005490:	9b08      	ldr	r3, [sp, #32]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d07b      	beq.n	800558e <_dtoa_r+0x4e6>
 8005496:	9b06      	ldr	r3, [sp, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dd38      	ble.n	800550e <_dtoa_r+0x466>
 800549c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80054a0:	2200      	movs	r2, #0
 80054a2:	4b69      	ldr	r3, [pc, #420]	; (8005648 <_dtoa_r+0x5a0>)
 80054a4:	f7fb f818 	bl	80004d8 <__aeabi_dmul>
 80054a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054ac:	9c06      	ldr	r4, [sp, #24]
 80054ae:	f10b 38ff 	add.w	r8, fp, #4294967295
 80054b2:	3701      	adds	r7, #1
 80054b4:	4638      	mov	r0, r7
 80054b6:	f7fa ffa5 	bl	8000404 <__aeabi_i2d>
 80054ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054be:	f7fb f80b 	bl	80004d8 <__aeabi_dmul>
 80054c2:	2200      	movs	r2, #0
 80054c4:	4b61      	ldr	r3, [pc, #388]	; (800564c <_dtoa_r+0x5a4>)
 80054c6:	f7fa fe51 	bl	800016c <__adddf3>
 80054ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80054ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054d2:	9611      	str	r6, [sp, #68]	; 0x44
 80054d4:	2c00      	cmp	r4, #0
 80054d6:	d15d      	bne.n	8005594 <_dtoa_r+0x4ec>
 80054d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054dc:	2200      	movs	r2, #0
 80054de:	4b5c      	ldr	r3, [pc, #368]	; (8005650 <_dtoa_r+0x5a8>)
 80054e0:	f7fa fe42 	bl	8000168 <__aeabi_dsub>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ec:	4633      	mov	r3, r6
 80054ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054f0:	f7fb fa82 	bl	80009f8 <__aeabi_dcmpgt>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f040 8295 	bne.w	8005a24 <_dtoa_r+0x97c>
 80054fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005500:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005504:	f7fb fa5a 	bl	80009bc <__aeabi_dcmplt>
 8005508:	2800      	cmp	r0, #0
 800550a:	f040 8289 	bne.w	8005a20 <_dtoa_r+0x978>
 800550e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005512:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005516:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005518:	2b00      	cmp	r3, #0
 800551a:	f2c0 8151 	blt.w	80057c0 <_dtoa_r+0x718>
 800551e:	f1bb 0f0e 	cmp.w	fp, #14
 8005522:	f300 814d 	bgt.w	80057c0 <_dtoa_r+0x718>
 8005526:	4b45      	ldr	r3, [pc, #276]	; (800563c <_dtoa_r+0x594>)
 8005528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800552c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005530:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005536:	2b00      	cmp	r3, #0
 8005538:	f280 80da 	bge.w	80056f0 <_dtoa_r+0x648>
 800553c:	9b08      	ldr	r3, [sp, #32]
 800553e:	2b00      	cmp	r3, #0
 8005540:	f300 80d6 	bgt.w	80056f0 <_dtoa_r+0x648>
 8005544:	f040 826b 	bne.w	8005a1e <_dtoa_r+0x976>
 8005548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800554c:	2200      	movs	r2, #0
 800554e:	4b40      	ldr	r3, [pc, #256]	; (8005650 <_dtoa_r+0x5a8>)
 8005550:	f7fa ffc2 	bl	80004d8 <__aeabi_dmul>
 8005554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005558:	f7fb fa44 	bl	80009e4 <__aeabi_dcmpge>
 800555c:	9c08      	ldr	r4, [sp, #32]
 800555e:	4626      	mov	r6, r4
 8005560:	2800      	cmp	r0, #0
 8005562:	f040 8241 	bne.w	80059e8 <_dtoa_r+0x940>
 8005566:	2331      	movs	r3, #49	; 0x31
 8005568:	9f03      	ldr	r7, [sp, #12]
 800556a:	f10b 0b01 	add.w	fp, fp, #1
 800556e:	f807 3b01 	strb.w	r3, [r7], #1
 8005572:	e23d      	b.n	80059f0 <_dtoa_r+0x948>
 8005574:	07e2      	lsls	r2, r4, #31
 8005576:	d505      	bpl.n	8005584 <_dtoa_r+0x4dc>
 8005578:	e9d6 2300 	ldrd	r2, r3, [r6]
 800557c:	f7fa ffac 	bl	80004d8 <__aeabi_dmul>
 8005580:	2301      	movs	r3, #1
 8005582:	3701      	adds	r7, #1
 8005584:	1064      	asrs	r4, r4, #1
 8005586:	3608      	adds	r6, #8
 8005588:	e76d      	b.n	8005466 <_dtoa_r+0x3be>
 800558a:	2702      	movs	r7, #2
 800558c:	e770      	b.n	8005470 <_dtoa_r+0x3c8>
 800558e:	46d8      	mov	r8, fp
 8005590:	9c08      	ldr	r4, [sp, #32]
 8005592:	e78f      	b.n	80054b4 <_dtoa_r+0x40c>
 8005594:	9903      	ldr	r1, [sp, #12]
 8005596:	4b29      	ldr	r3, [pc, #164]	; (800563c <_dtoa_r+0x594>)
 8005598:	4421      	add	r1, r4
 800559a:	9112      	str	r1, [sp, #72]	; 0x48
 800559c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800559e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80055a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80055a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80055aa:	2900      	cmp	r1, #0
 80055ac:	d054      	beq.n	8005658 <_dtoa_r+0x5b0>
 80055ae:	2000      	movs	r0, #0
 80055b0:	4928      	ldr	r1, [pc, #160]	; (8005654 <_dtoa_r+0x5ac>)
 80055b2:	f7fb f8bb 	bl	800072c <__aeabi_ddiv>
 80055b6:	463b      	mov	r3, r7
 80055b8:	4632      	mov	r2, r6
 80055ba:	f7fa fdd5 	bl	8000168 <__aeabi_dsub>
 80055be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055c2:	9f03      	ldr	r7, [sp, #12]
 80055c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055c8:	f7fb fa36 	bl	8000a38 <__aeabi_d2iz>
 80055cc:	4604      	mov	r4, r0
 80055ce:	f7fa ff19 	bl	8000404 <__aeabi_i2d>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055da:	f7fa fdc5 	bl	8000168 <__aeabi_dsub>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	3430      	adds	r4, #48	; 0x30
 80055e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055ec:	f807 4b01 	strb.w	r4, [r7], #1
 80055f0:	f7fb f9e4 	bl	80009bc <__aeabi_dcmplt>
 80055f4:	2800      	cmp	r0, #0
 80055f6:	d173      	bne.n	80056e0 <_dtoa_r+0x638>
 80055f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055fc:	2000      	movs	r0, #0
 80055fe:	4911      	ldr	r1, [pc, #68]	; (8005644 <_dtoa_r+0x59c>)
 8005600:	f7fa fdb2 	bl	8000168 <__aeabi_dsub>
 8005604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005608:	f7fb f9d8 	bl	80009bc <__aeabi_dcmplt>
 800560c:	2800      	cmp	r0, #0
 800560e:	f040 80b6 	bne.w	800577e <_dtoa_r+0x6d6>
 8005612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005614:	429f      	cmp	r7, r3
 8005616:	f43f af7a 	beq.w	800550e <_dtoa_r+0x466>
 800561a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800561e:	2200      	movs	r2, #0
 8005620:	4b09      	ldr	r3, [pc, #36]	; (8005648 <_dtoa_r+0x5a0>)
 8005622:	f7fa ff59 	bl	80004d8 <__aeabi_dmul>
 8005626:	2200      	movs	r2, #0
 8005628:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800562c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <_dtoa_r+0x5a0>)
 8005632:	f7fa ff51 	bl	80004d8 <__aeabi_dmul>
 8005636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800563a:	e7c3      	b.n	80055c4 <_dtoa_r+0x51c>
 800563c:	08007f10 	.word	0x08007f10
 8005640:	08007ee8 	.word	0x08007ee8
 8005644:	3ff00000 	.word	0x3ff00000
 8005648:	40240000 	.word	0x40240000
 800564c:	401c0000 	.word	0x401c0000
 8005650:	40140000 	.word	0x40140000
 8005654:	3fe00000 	.word	0x3fe00000
 8005658:	4630      	mov	r0, r6
 800565a:	4639      	mov	r1, r7
 800565c:	f7fa ff3c 	bl	80004d8 <__aeabi_dmul>
 8005660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005662:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005666:	9c03      	ldr	r4, [sp, #12]
 8005668:	9314      	str	r3, [sp, #80]	; 0x50
 800566a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800566e:	f7fb f9e3 	bl	8000a38 <__aeabi_d2iz>
 8005672:	9015      	str	r0, [sp, #84]	; 0x54
 8005674:	f7fa fec6 	bl	8000404 <__aeabi_i2d>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005680:	f7fa fd72 	bl	8000168 <__aeabi_dsub>
 8005684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005686:	4606      	mov	r6, r0
 8005688:	3330      	adds	r3, #48	; 0x30
 800568a:	f804 3b01 	strb.w	r3, [r4], #1
 800568e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005690:	460f      	mov	r7, r1
 8005692:	429c      	cmp	r4, r3
 8005694:	f04f 0200 	mov.w	r2, #0
 8005698:	d124      	bne.n	80056e4 <_dtoa_r+0x63c>
 800569a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800569e:	4baf      	ldr	r3, [pc, #700]	; (800595c <_dtoa_r+0x8b4>)
 80056a0:	f7fa fd64 	bl	800016c <__adddf3>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4630      	mov	r0, r6
 80056aa:	4639      	mov	r1, r7
 80056ac:	f7fb f9a4 	bl	80009f8 <__aeabi_dcmpgt>
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d163      	bne.n	800577c <_dtoa_r+0x6d4>
 80056b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80056b8:	2000      	movs	r0, #0
 80056ba:	49a8      	ldr	r1, [pc, #672]	; (800595c <_dtoa_r+0x8b4>)
 80056bc:	f7fa fd54 	bl	8000168 <__aeabi_dsub>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4630      	mov	r0, r6
 80056c6:	4639      	mov	r1, r7
 80056c8:	f7fb f978 	bl	80009bc <__aeabi_dcmplt>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f43f af1e 	beq.w	800550e <_dtoa_r+0x466>
 80056d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80056d4:	1e7b      	subs	r3, r7, #1
 80056d6:	9314      	str	r3, [sp, #80]	; 0x50
 80056d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80056dc:	2b30      	cmp	r3, #48	; 0x30
 80056de:	d0f8      	beq.n	80056d2 <_dtoa_r+0x62a>
 80056e0:	46c3      	mov	fp, r8
 80056e2:	e03b      	b.n	800575c <_dtoa_r+0x6b4>
 80056e4:	4b9e      	ldr	r3, [pc, #632]	; (8005960 <_dtoa_r+0x8b8>)
 80056e6:	f7fa fef7 	bl	80004d8 <__aeabi_dmul>
 80056ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056ee:	e7bc      	b.n	800566a <_dtoa_r+0x5c2>
 80056f0:	9f03      	ldr	r7, [sp, #12]
 80056f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80056f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056fa:	4640      	mov	r0, r8
 80056fc:	4649      	mov	r1, r9
 80056fe:	f7fb f815 	bl	800072c <__aeabi_ddiv>
 8005702:	f7fb f999 	bl	8000a38 <__aeabi_d2iz>
 8005706:	4604      	mov	r4, r0
 8005708:	f7fa fe7c 	bl	8000404 <__aeabi_i2d>
 800570c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005710:	f7fa fee2 	bl	80004d8 <__aeabi_dmul>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4640      	mov	r0, r8
 800571a:	4649      	mov	r1, r9
 800571c:	f7fa fd24 	bl	8000168 <__aeabi_dsub>
 8005720:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005724:	f807 6b01 	strb.w	r6, [r7], #1
 8005728:	9e03      	ldr	r6, [sp, #12]
 800572a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800572e:	1bbe      	subs	r6, r7, r6
 8005730:	45b4      	cmp	ip, r6
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	d136      	bne.n	80057a6 <_dtoa_r+0x6fe>
 8005738:	f7fa fd18 	bl	800016c <__adddf3>
 800573c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005740:	4680      	mov	r8, r0
 8005742:	4689      	mov	r9, r1
 8005744:	f7fb f958 	bl	80009f8 <__aeabi_dcmpgt>
 8005748:	bb58      	cbnz	r0, 80057a2 <_dtoa_r+0x6fa>
 800574a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800574e:	4640      	mov	r0, r8
 8005750:	4649      	mov	r1, r9
 8005752:	f7fb f929 	bl	80009a8 <__aeabi_dcmpeq>
 8005756:	b108      	cbz	r0, 800575c <_dtoa_r+0x6b4>
 8005758:	07e3      	lsls	r3, r4, #31
 800575a:	d422      	bmi.n	80057a2 <_dtoa_r+0x6fa>
 800575c:	4651      	mov	r1, sl
 800575e:	4628      	mov	r0, r5
 8005760:	f000 fb0e 	bl	8005d80 <_Bfree>
 8005764:	2300      	movs	r3, #0
 8005766:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005768:	703b      	strb	r3, [r7, #0]
 800576a:	f10b 0301 	add.w	r3, fp, #1
 800576e:	6013      	str	r3, [r2, #0]
 8005770:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005772:	2b00      	cmp	r3, #0
 8005774:	f43f ace6 	beq.w	8005144 <_dtoa_r+0x9c>
 8005778:	601f      	str	r7, [r3, #0]
 800577a:	e4e3      	b.n	8005144 <_dtoa_r+0x9c>
 800577c:	4627      	mov	r7, r4
 800577e:	463b      	mov	r3, r7
 8005780:	461f      	mov	r7, r3
 8005782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005786:	2a39      	cmp	r2, #57	; 0x39
 8005788:	d107      	bne.n	800579a <_dtoa_r+0x6f2>
 800578a:	9a03      	ldr	r2, [sp, #12]
 800578c:	429a      	cmp	r2, r3
 800578e:	d1f7      	bne.n	8005780 <_dtoa_r+0x6d8>
 8005790:	2230      	movs	r2, #48	; 0x30
 8005792:	9903      	ldr	r1, [sp, #12]
 8005794:	f108 0801 	add.w	r8, r8, #1
 8005798:	700a      	strb	r2, [r1, #0]
 800579a:	781a      	ldrb	r2, [r3, #0]
 800579c:	3201      	adds	r2, #1
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e79e      	b.n	80056e0 <_dtoa_r+0x638>
 80057a2:	46d8      	mov	r8, fp
 80057a4:	e7eb      	b.n	800577e <_dtoa_r+0x6d6>
 80057a6:	2200      	movs	r2, #0
 80057a8:	4b6d      	ldr	r3, [pc, #436]	; (8005960 <_dtoa_r+0x8b8>)
 80057aa:	f7fa fe95 	bl	80004d8 <__aeabi_dmul>
 80057ae:	2200      	movs	r2, #0
 80057b0:	2300      	movs	r3, #0
 80057b2:	4680      	mov	r8, r0
 80057b4:	4689      	mov	r9, r1
 80057b6:	f7fb f8f7 	bl	80009a8 <__aeabi_dcmpeq>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d09b      	beq.n	80056f6 <_dtoa_r+0x64e>
 80057be:	e7cd      	b.n	800575c <_dtoa_r+0x6b4>
 80057c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057c2:	2a00      	cmp	r2, #0
 80057c4:	f000 80c4 	beq.w	8005950 <_dtoa_r+0x8a8>
 80057c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80057ca:	2a01      	cmp	r2, #1
 80057cc:	f300 80a8 	bgt.w	8005920 <_dtoa_r+0x878>
 80057d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	f000 80a0 	beq.w	8005918 <_dtoa_r+0x870>
 80057d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057dc:	464f      	mov	r7, r9
 80057de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80057e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057e2:	2101      	movs	r1, #1
 80057e4:	441a      	add	r2, r3
 80057e6:	4628      	mov	r0, r5
 80057e8:	4499      	add	r9, r3
 80057ea:	9209      	str	r2, [sp, #36]	; 0x24
 80057ec:	f000 fb7e 	bl	8005eec <__i2b>
 80057f0:	4606      	mov	r6, r0
 80057f2:	b15f      	cbz	r7, 800580c <_dtoa_r+0x764>
 80057f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	dd08      	ble.n	800580c <_dtoa_r+0x764>
 80057fa:	42bb      	cmp	r3, r7
 80057fc:	bfa8      	it	ge
 80057fe:	463b      	movge	r3, r7
 8005800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005802:	eba9 0903 	sub.w	r9, r9, r3
 8005806:	1aff      	subs	r7, r7, r3
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	9309      	str	r3, [sp, #36]	; 0x24
 800580c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800580e:	b1f3      	cbz	r3, 800584e <_dtoa_r+0x7a6>
 8005810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005812:	2b00      	cmp	r3, #0
 8005814:	f000 80a0 	beq.w	8005958 <_dtoa_r+0x8b0>
 8005818:	2c00      	cmp	r4, #0
 800581a:	dd10      	ble.n	800583e <_dtoa_r+0x796>
 800581c:	4631      	mov	r1, r6
 800581e:	4622      	mov	r2, r4
 8005820:	4628      	mov	r0, r5
 8005822:	f000 fc21 	bl	8006068 <__pow5mult>
 8005826:	4652      	mov	r2, sl
 8005828:	4601      	mov	r1, r0
 800582a:	4606      	mov	r6, r0
 800582c:	4628      	mov	r0, r5
 800582e:	f000 fb73 	bl	8005f18 <__multiply>
 8005832:	4680      	mov	r8, r0
 8005834:	4651      	mov	r1, sl
 8005836:	4628      	mov	r0, r5
 8005838:	f000 faa2 	bl	8005d80 <_Bfree>
 800583c:	46c2      	mov	sl, r8
 800583e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005840:	1b1a      	subs	r2, r3, r4
 8005842:	d004      	beq.n	800584e <_dtoa_r+0x7a6>
 8005844:	4651      	mov	r1, sl
 8005846:	4628      	mov	r0, r5
 8005848:	f000 fc0e 	bl	8006068 <__pow5mult>
 800584c:	4682      	mov	sl, r0
 800584e:	2101      	movs	r1, #1
 8005850:	4628      	mov	r0, r5
 8005852:	f000 fb4b 	bl	8005eec <__i2b>
 8005856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005858:	4604      	mov	r4, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	f340 8082 	ble.w	8005964 <_dtoa_r+0x8bc>
 8005860:	461a      	mov	r2, r3
 8005862:	4601      	mov	r1, r0
 8005864:	4628      	mov	r0, r5
 8005866:	f000 fbff 	bl	8006068 <__pow5mult>
 800586a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800586c:	4604      	mov	r4, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	dd7b      	ble.n	800596a <_dtoa_r+0x8c2>
 8005872:	f04f 0800 	mov.w	r8, #0
 8005876:	6923      	ldr	r3, [r4, #16]
 8005878:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800587c:	6918      	ldr	r0, [r3, #16]
 800587e:	f000 fae7 	bl	8005e50 <__hi0bits>
 8005882:	f1c0 0020 	rsb	r0, r0, #32
 8005886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005888:	4418      	add	r0, r3
 800588a:	f010 001f 	ands.w	r0, r0, #31
 800588e:	f000 8092 	beq.w	80059b6 <_dtoa_r+0x90e>
 8005892:	f1c0 0320 	rsb	r3, r0, #32
 8005896:	2b04      	cmp	r3, #4
 8005898:	f340 8085 	ble.w	80059a6 <_dtoa_r+0x8fe>
 800589c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589e:	f1c0 001c 	rsb	r0, r0, #28
 80058a2:	4403      	add	r3, r0
 80058a4:	4481      	add	r9, r0
 80058a6:	4407      	add	r7, r0
 80058a8:	9309      	str	r3, [sp, #36]	; 0x24
 80058aa:	f1b9 0f00 	cmp.w	r9, #0
 80058ae:	dd05      	ble.n	80058bc <_dtoa_r+0x814>
 80058b0:	4651      	mov	r1, sl
 80058b2:	464a      	mov	r2, r9
 80058b4:	4628      	mov	r0, r5
 80058b6:	f000 fc31 	bl	800611c <__lshift>
 80058ba:	4682      	mov	sl, r0
 80058bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dd05      	ble.n	80058ce <_dtoa_r+0x826>
 80058c2:	4621      	mov	r1, r4
 80058c4:	461a      	mov	r2, r3
 80058c6:	4628      	mov	r0, r5
 80058c8:	f000 fc28 	bl	800611c <__lshift>
 80058cc:	4604      	mov	r4, r0
 80058ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d072      	beq.n	80059ba <_dtoa_r+0x912>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4650      	mov	r0, sl
 80058d8:	f000 fc8c 	bl	80061f4 <__mcmp>
 80058dc:	2800      	cmp	r0, #0
 80058de:	da6c      	bge.n	80059ba <_dtoa_r+0x912>
 80058e0:	2300      	movs	r3, #0
 80058e2:	4651      	mov	r1, sl
 80058e4:	220a      	movs	r2, #10
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 fa6c 	bl	8005dc4 <__multadd>
 80058ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ee:	4682      	mov	sl, r0
 80058f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 81ac 	beq.w	8005c52 <_dtoa_r+0xbaa>
 80058fa:	2300      	movs	r3, #0
 80058fc:	4631      	mov	r1, r6
 80058fe:	220a      	movs	r2, #10
 8005900:	4628      	mov	r0, r5
 8005902:	f000 fa5f 	bl	8005dc4 <__multadd>
 8005906:	9b06      	ldr	r3, [sp, #24]
 8005908:	4606      	mov	r6, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	f300 8093 	bgt.w	8005a36 <_dtoa_r+0x98e>
 8005910:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005912:	2b02      	cmp	r3, #2
 8005914:	dc59      	bgt.n	80059ca <_dtoa_r+0x922>
 8005916:	e08e      	b.n	8005a36 <_dtoa_r+0x98e>
 8005918:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800591a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800591e:	e75d      	b.n	80057dc <_dtoa_r+0x734>
 8005920:	9b08      	ldr	r3, [sp, #32]
 8005922:	1e5c      	subs	r4, r3, #1
 8005924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005926:	42a3      	cmp	r3, r4
 8005928:	bfbf      	itttt	lt
 800592a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800592c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800592e:	1ae3      	sublt	r3, r4, r3
 8005930:	18d2      	addlt	r2, r2, r3
 8005932:	bfa8      	it	ge
 8005934:	1b1c      	subge	r4, r3, r4
 8005936:	9b08      	ldr	r3, [sp, #32]
 8005938:	bfbe      	ittt	lt
 800593a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800593c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800593e:	2400      	movlt	r4, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	bfb5      	itete	lt
 8005944:	eba9 0703 	sublt.w	r7, r9, r3
 8005948:	464f      	movge	r7, r9
 800594a:	2300      	movlt	r3, #0
 800594c:	9b08      	ldrge	r3, [sp, #32]
 800594e:	e747      	b.n	80057e0 <_dtoa_r+0x738>
 8005950:	464f      	mov	r7, r9
 8005952:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005954:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005956:	e74c      	b.n	80057f2 <_dtoa_r+0x74a>
 8005958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800595a:	e773      	b.n	8005844 <_dtoa_r+0x79c>
 800595c:	3fe00000 	.word	0x3fe00000
 8005960:	40240000 	.word	0x40240000
 8005964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005966:	2b01      	cmp	r3, #1
 8005968:	dc18      	bgt.n	800599c <_dtoa_r+0x8f4>
 800596a:	9b04      	ldr	r3, [sp, #16]
 800596c:	b9b3      	cbnz	r3, 800599c <_dtoa_r+0x8f4>
 800596e:	9b05      	ldr	r3, [sp, #20]
 8005970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005974:	b993      	cbnz	r3, 800599c <_dtoa_r+0x8f4>
 8005976:	9b05      	ldr	r3, [sp, #20]
 8005978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800597c:	0d1b      	lsrs	r3, r3, #20
 800597e:	051b      	lsls	r3, r3, #20
 8005980:	b17b      	cbz	r3, 80059a2 <_dtoa_r+0x8fa>
 8005982:	f04f 0801 	mov.w	r8, #1
 8005986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005988:	f109 0901 	add.w	r9, r9, #1
 800598c:	3301      	adds	r3, #1
 800598e:	9309      	str	r3, [sp, #36]	; 0x24
 8005990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005992:	2b00      	cmp	r3, #0
 8005994:	f47f af6f 	bne.w	8005876 <_dtoa_r+0x7ce>
 8005998:	2001      	movs	r0, #1
 800599a:	e774      	b.n	8005886 <_dtoa_r+0x7de>
 800599c:	f04f 0800 	mov.w	r8, #0
 80059a0:	e7f6      	b.n	8005990 <_dtoa_r+0x8e8>
 80059a2:	4698      	mov	r8, r3
 80059a4:	e7f4      	b.n	8005990 <_dtoa_r+0x8e8>
 80059a6:	d080      	beq.n	80058aa <_dtoa_r+0x802>
 80059a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059aa:	331c      	adds	r3, #28
 80059ac:	441a      	add	r2, r3
 80059ae:	4499      	add	r9, r3
 80059b0:	441f      	add	r7, r3
 80059b2:	9209      	str	r2, [sp, #36]	; 0x24
 80059b4:	e779      	b.n	80058aa <_dtoa_r+0x802>
 80059b6:	4603      	mov	r3, r0
 80059b8:	e7f6      	b.n	80059a8 <_dtoa_r+0x900>
 80059ba:	9b08      	ldr	r3, [sp, #32]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dc34      	bgt.n	8005a2a <_dtoa_r+0x982>
 80059c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059c2:	2b02      	cmp	r3, #2
 80059c4:	dd31      	ble.n	8005a2a <_dtoa_r+0x982>
 80059c6:	9b08      	ldr	r3, [sp, #32]
 80059c8:	9306      	str	r3, [sp, #24]
 80059ca:	9b06      	ldr	r3, [sp, #24]
 80059cc:	b963      	cbnz	r3, 80059e8 <_dtoa_r+0x940>
 80059ce:	4621      	mov	r1, r4
 80059d0:	2205      	movs	r2, #5
 80059d2:	4628      	mov	r0, r5
 80059d4:	f000 f9f6 	bl	8005dc4 <__multadd>
 80059d8:	4601      	mov	r1, r0
 80059da:	4604      	mov	r4, r0
 80059dc:	4650      	mov	r0, sl
 80059de:	f000 fc09 	bl	80061f4 <__mcmp>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	f73f adbf 	bgt.w	8005566 <_dtoa_r+0x4be>
 80059e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059ea:	9f03      	ldr	r7, [sp, #12]
 80059ec:	ea6f 0b03 	mvn.w	fp, r3
 80059f0:	f04f 0800 	mov.w	r8, #0
 80059f4:	4621      	mov	r1, r4
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 f9c2 	bl	8005d80 <_Bfree>
 80059fc:	2e00      	cmp	r6, #0
 80059fe:	f43f aead 	beq.w	800575c <_dtoa_r+0x6b4>
 8005a02:	f1b8 0f00 	cmp.w	r8, #0
 8005a06:	d005      	beq.n	8005a14 <_dtoa_r+0x96c>
 8005a08:	45b0      	cmp	r8, r6
 8005a0a:	d003      	beq.n	8005a14 <_dtoa_r+0x96c>
 8005a0c:	4641      	mov	r1, r8
 8005a0e:	4628      	mov	r0, r5
 8005a10:	f000 f9b6 	bl	8005d80 <_Bfree>
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 f9b2 	bl	8005d80 <_Bfree>
 8005a1c:	e69e      	b.n	800575c <_dtoa_r+0x6b4>
 8005a1e:	2400      	movs	r4, #0
 8005a20:	4626      	mov	r6, r4
 8005a22:	e7e1      	b.n	80059e8 <_dtoa_r+0x940>
 8005a24:	46c3      	mov	fp, r8
 8005a26:	4626      	mov	r6, r4
 8005a28:	e59d      	b.n	8005566 <_dtoa_r+0x4be>
 8005a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80c8 	beq.w	8005bc2 <_dtoa_r+0xb1a>
 8005a32:	9b08      	ldr	r3, [sp, #32]
 8005a34:	9306      	str	r3, [sp, #24]
 8005a36:	2f00      	cmp	r7, #0
 8005a38:	dd05      	ble.n	8005a46 <_dtoa_r+0x99e>
 8005a3a:	4631      	mov	r1, r6
 8005a3c:	463a      	mov	r2, r7
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 fb6c 	bl	800611c <__lshift>
 8005a44:	4606      	mov	r6, r0
 8005a46:	f1b8 0f00 	cmp.w	r8, #0
 8005a4a:	d05b      	beq.n	8005b04 <_dtoa_r+0xa5c>
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	6871      	ldr	r1, [r6, #4]
 8005a50:	f000 f956 	bl	8005d00 <_Balloc>
 8005a54:	4607      	mov	r7, r0
 8005a56:	b928      	cbnz	r0, 8005a64 <_dtoa_r+0x9bc>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005a5e:	4b81      	ldr	r3, [pc, #516]	; (8005c64 <_dtoa_r+0xbbc>)
 8005a60:	f7ff bb36 	b.w	80050d0 <_dtoa_r+0x28>
 8005a64:	6932      	ldr	r2, [r6, #16]
 8005a66:	f106 010c 	add.w	r1, r6, #12
 8005a6a:	3202      	adds	r2, #2
 8005a6c:	0092      	lsls	r2, r2, #2
 8005a6e:	300c      	adds	r0, #12
 8005a70:	f000 feda 	bl	8006828 <memcpy>
 8005a74:	2201      	movs	r2, #1
 8005a76:	4639      	mov	r1, r7
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 fb4f 	bl	800611c <__lshift>
 8005a7e:	46b0      	mov	r8, r6
 8005a80:	4606      	mov	r6, r0
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	9a03      	ldr	r2, [sp, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	9308      	str	r3, [sp, #32]
 8005a8a:	9b06      	ldr	r3, [sp, #24]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a90:	9b04      	ldr	r3, [sp, #16]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	930a      	str	r3, [sp, #40]	; 0x28
 8005a98:	9b08      	ldr	r3, [sp, #32]
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	4650      	mov	r0, sl
 8005aa0:	9304      	str	r3, [sp, #16]
 8005aa2:	f7ff fa76 	bl	8004f92 <quorem>
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	9006      	str	r0, [sp, #24]
 8005aaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005aae:	4650      	mov	r0, sl
 8005ab0:	f000 fba0 	bl	80061f4 <__mcmp>
 8005ab4:	4632      	mov	r2, r6
 8005ab6:	9009      	str	r0, [sp, #36]	; 0x24
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4628      	mov	r0, r5
 8005abc:	f000 fbb6 	bl	800622c <__mdiff>
 8005ac0:	68c2      	ldr	r2, [r0, #12]
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	bb02      	cbnz	r2, 8005b08 <_dtoa_r+0xa60>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4650      	mov	r0, sl
 8005aca:	f000 fb93 	bl	80061f4 <__mcmp>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	920c      	str	r2, [sp, #48]	; 0x30
 8005ad6:	f000 f953 	bl	8005d80 <_Bfree>
 8005ada:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005adc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ade:	9f08      	ldr	r7, [sp, #32]
 8005ae0:	ea43 0102 	orr.w	r1, r3, r2
 8005ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ae6:	4319      	orrs	r1, r3
 8005ae8:	d110      	bne.n	8005b0c <_dtoa_r+0xa64>
 8005aea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005aee:	d029      	beq.n	8005b44 <_dtoa_r+0xa9c>
 8005af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dd02      	ble.n	8005afc <_dtoa_r+0xa54>
 8005af6:	9b06      	ldr	r3, [sp, #24]
 8005af8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005afc:	9b04      	ldr	r3, [sp, #16]
 8005afe:	f883 9000 	strb.w	r9, [r3]
 8005b02:	e777      	b.n	80059f4 <_dtoa_r+0x94c>
 8005b04:	4630      	mov	r0, r6
 8005b06:	e7ba      	b.n	8005a7e <_dtoa_r+0x9d6>
 8005b08:	2201      	movs	r2, #1
 8005b0a:	e7e1      	b.n	8005ad0 <_dtoa_r+0xa28>
 8005b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	db04      	blt.n	8005b1c <_dtoa_r+0xa74>
 8005b12:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005b14:	430b      	orrs	r3, r1
 8005b16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	d120      	bne.n	8005b5e <_dtoa_r+0xab6>
 8005b1c:	2a00      	cmp	r2, #0
 8005b1e:	dded      	ble.n	8005afc <_dtoa_r+0xa54>
 8005b20:	4651      	mov	r1, sl
 8005b22:	2201      	movs	r2, #1
 8005b24:	4628      	mov	r0, r5
 8005b26:	f000 faf9 	bl	800611c <__lshift>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4682      	mov	sl, r0
 8005b2e:	f000 fb61 	bl	80061f4 <__mcmp>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	dc03      	bgt.n	8005b3e <_dtoa_r+0xa96>
 8005b36:	d1e1      	bne.n	8005afc <_dtoa_r+0xa54>
 8005b38:	f019 0f01 	tst.w	r9, #1
 8005b3c:	d0de      	beq.n	8005afc <_dtoa_r+0xa54>
 8005b3e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b42:	d1d8      	bne.n	8005af6 <_dtoa_r+0xa4e>
 8005b44:	2339      	movs	r3, #57	; 0x39
 8005b46:	9a04      	ldr	r2, [sp, #16]
 8005b48:	7013      	strb	r3, [r2, #0]
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	461f      	mov	r7, r3
 8005b4e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	2a39      	cmp	r2, #57	; 0x39
 8005b56:	d06b      	beq.n	8005c30 <_dtoa_r+0xb88>
 8005b58:	3201      	adds	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e74a      	b.n	80059f4 <_dtoa_r+0x94c>
 8005b5e:	2a00      	cmp	r2, #0
 8005b60:	dd07      	ble.n	8005b72 <_dtoa_r+0xaca>
 8005b62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b66:	d0ed      	beq.n	8005b44 <_dtoa_r+0xa9c>
 8005b68:	9a04      	ldr	r2, [sp, #16]
 8005b6a:	f109 0301 	add.w	r3, r9, #1
 8005b6e:	7013      	strb	r3, [r2, #0]
 8005b70:	e740      	b.n	80059f4 <_dtoa_r+0x94c>
 8005b72:	9b08      	ldr	r3, [sp, #32]
 8005b74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b76:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d042      	beq.n	8005c04 <_dtoa_r+0xb5c>
 8005b7e:	4651      	mov	r1, sl
 8005b80:	2300      	movs	r3, #0
 8005b82:	220a      	movs	r2, #10
 8005b84:	4628      	mov	r0, r5
 8005b86:	f000 f91d 	bl	8005dc4 <__multadd>
 8005b8a:	45b0      	cmp	r8, r6
 8005b8c:	4682      	mov	sl, r0
 8005b8e:	f04f 0300 	mov.w	r3, #0
 8005b92:	f04f 020a 	mov.w	r2, #10
 8005b96:	4641      	mov	r1, r8
 8005b98:	4628      	mov	r0, r5
 8005b9a:	d107      	bne.n	8005bac <_dtoa_r+0xb04>
 8005b9c:	f000 f912 	bl	8005dc4 <__multadd>
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	9b08      	ldr	r3, [sp, #32]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	9308      	str	r3, [sp, #32]
 8005baa:	e775      	b.n	8005a98 <_dtoa_r+0x9f0>
 8005bac:	f000 f90a 	bl	8005dc4 <__multadd>
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4680      	mov	r8, r0
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	220a      	movs	r2, #10
 8005bb8:	4628      	mov	r0, r5
 8005bba:	f000 f903 	bl	8005dc4 <__multadd>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	e7f0      	b.n	8005ba4 <_dtoa_r+0xafc>
 8005bc2:	9b08      	ldr	r3, [sp, #32]
 8005bc4:	9306      	str	r3, [sp, #24]
 8005bc6:	9f03      	ldr	r7, [sp, #12]
 8005bc8:	4621      	mov	r1, r4
 8005bca:	4650      	mov	r0, sl
 8005bcc:	f7ff f9e1 	bl	8004f92 <quorem>
 8005bd0:	9b03      	ldr	r3, [sp, #12]
 8005bd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005bd6:	f807 9b01 	strb.w	r9, [r7], #1
 8005bda:	1afa      	subs	r2, r7, r3
 8005bdc:	9b06      	ldr	r3, [sp, #24]
 8005bde:	4293      	cmp	r3, r2
 8005be0:	dd07      	ble.n	8005bf2 <_dtoa_r+0xb4a>
 8005be2:	4651      	mov	r1, sl
 8005be4:	2300      	movs	r3, #0
 8005be6:	220a      	movs	r2, #10
 8005be8:	4628      	mov	r0, r5
 8005bea:	f000 f8eb 	bl	8005dc4 <__multadd>
 8005bee:	4682      	mov	sl, r0
 8005bf0:	e7ea      	b.n	8005bc8 <_dtoa_r+0xb20>
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	f04f 0800 	mov.w	r8, #0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bfcc      	ite	gt
 8005bfc:	461f      	movgt	r7, r3
 8005bfe:	2701      	movle	r7, #1
 8005c00:	9b03      	ldr	r3, [sp, #12]
 8005c02:	441f      	add	r7, r3
 8005c04:	4651      	mov	r1, sl
 8005c06:	2201      	movs	r2, #1
 8005c08:	4628      	mov	r0, r5
 8005c0a:	f000 fa87 	bl	800611c <__lshift>
 8005c0e:	4621      	mov	r1, r4
 8005c10:	4682      	mov	sl, r0
 8005c12:	f000 faef 	bl	80061f4 <__mcmp>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	dc97      	bgt.n	8005b4a <_dtoa_r+0xaa2>
 8005c1a:	d102      	bne.n	8005c22 <_dtoa_r+0xb7a>
 8005c1c:	f019 0f01 	tst.w	r9, #1
 8005c20:	d193      	bne.n	8005b4a <_dtoa_r+0xaa2>
 8005c22:	463b      	mov	r3, r7
 8005c24:	461f      	mov	r7, r3
 8005c26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c2a:	2a30      	cmp	r2, #48	; 0x30
 8005c2c:	d0fa      	beq.n	8005c24 <_dtoa_r+0xb7c>
 8005c2e:	e6e1      	b.n	80059f4 <_dtoa_r+0x94c>
 8005c30:	9a03      	ldr	r2, [sp, #12]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d18a      	bne.n	8005b4c <_dtoa_r+0xaa4>
 8005c36:	2331      	movs	r3, #49	; 0x31
 8005c38:	f10b 0b01 	add.w	fp, fp, #1
 8005c3c:	e797      	b.n	8005b6e <_dtoa_r+0xac6>
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <_dtoa_r+0xbc0>)
 8005c40:	f7ff ba9f 	b.w	8005182 <_dtoa_r+0xda>
 8005c44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f47f aa77 	bne.w	800513a <_dtoa_r+0x92>
 8005c4c:	4b07      	ldr	r3, [pc, #28]	; (8005c6c <_dtoa_r+0xbc4>)
 8005c4e:	f7ff ba98 	b.w	8005182 <_dtoa_r+0xda>
 8005c52:	9b06      	ldr	r3, [sp, #24]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	dcb6      	bgt.n	8005bc6 <_dtoa_r+0xb1e>
 8005c58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	f73f aeb5 	bgt.w	80059ca <_dtoa_r+0x922>
 8005c60:	e7b1      	b.n	8005bc6 <_dtoa_r+0xb1e>
 8005c62:	bf00      	nop
 8005c64:	08007e7e 	.word	0x08007e7e
 8005c68:	08007dde 	.word	0x08007dde
 8005c6c:	08007e02 	.word	0x08007e02

08005c70 <_free_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	4605      	mov	r5, r0
 8005c74:	2900      	cmp	r1, #0
 8005c76:	d040      	beq.n	8005cfa <_free_r+0x8a>
 8005c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c7c:	1f0c      	subs	r4, r1, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfb8      	it	lt
 8005c82:	18e4      	addlt	r4, r4, r3
 8005c84:	f7fe fb58 	bl	8004338 <__malloc_lock>
 8005c88:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <_free_r+0x8c>)
 8005c8a:	6813      	ldr	r3, [r2, #0]
 8005c8c:	b933      	cbnz	r3, 8005c9c <_free_r+0x2c>
 8005c8e:	6063      	str	r3, [r4, #4]
 8005c90:	6014      	str	r4, [r2, #0]
 8005c92:	4628      	mov	r0, r5
 8005c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c98:	f7fe bb54 	b.w	8004344 <__malloc_unlock>
 8005c9c:	42a3      	cmp	r3, r4
 8005c9e:	d908      	bls.n	8005cb2 <_free_r+0x42>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	1821      	adds	r1, r4, r0
 8005ca4:	428b      	cmp	r3, r1
 8005ca6:	bf01      	itttt	eq
 8005ca8:	6819      	ldreq	r1, [r3, #0]
 8005caa:	685b      	ldreq	r3, [r3, #4]
 8005cac:	1809      	addeq	r1, r1, r0
 8005cae:	6021      	streq	r1, [r4, #0]
 8005cb0:	e7ed      	b.n	8005c8e <_free_r+0x1e>
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	b10b      	cbz	r3, 8005cbc <_free_r+0x4c>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d9fa      	bls.n	8005cb2 <_free_r+0x42>
 8005cbc:	6811      	ldr	r1, [r2, #0]
 8005cbe:	1850      	adds	r0, r2, r1
 8005cc0:	42a0      	cmp	r0, r4
 8005cc2:	d10b      	bne.n	8005cdc <_free_r+0x6c>
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4401      	add	r1, r0
 8005cc8:	1850      	adds	r0, r2, r1
 8005cca:	4283      	cmp	r3, r0
 8005ccc:	6011      	str	r1, [r2, #0]
 8005cce:	d1e0      	bne.n	8005c92 <_free_r+0x22>
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4408      	add	r0, r1
 8005cd6:	6010      	str	r0, [r2, #0]
 8005cd8:	6053      	str	r3, [r2, #4]
 8005cda:	e7da      	b.n	8005c92 <_free_r+0x22>
 8005cdc:	d902      	bls.n	8005ce4 <_free_r+0x74>
 8005cde:	230c      	movs	r3, #12
 8005ce0:	602b      	str	r3, [r5, #0]
 8005ce2:	e7d6      	b.n	8005c92 <_free_r+0x22>
 8005ce4:	6820      	ldr	r0, [r4, #0]
 8005ce6:	1821      	adds	r1, r4, r0
 8005ce8:	428b      	cmp	r3, r1
 8005cea:	bf01      	itttt	eq
 8005cec:	6819      	ldreq	r1, [r3, #0]
 8005cee:	685b      	ldreq	r3, [r3, #4]
 8005cf0:	1809      	addeq	r1, r1, r0
 8005cf2:	6021      	streq	r1, [r4, #0]
 8005cf4:	6063      	str	r3, [r4, #4]
 8005cf6:	6054      	str	r4, [r2, #4]
 8005cf8:	e7cb      	b.n	8005c92 <_free_r+0x22>
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	200002f0 	.word	0x200002f0

08005d00 <_Balloc>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	69c6      	ldr	r6, [r0, #28]
 8005d04:	4604      	mov	r4, r0
 8005d06:	460d      	mov	r5, r1
 8005d08:	b976      	cbnz	r6, 8005d28 <_Balloc+0x28>
 8005d0a:	2010      	movs	r0, #16
 8005d0c:	f7fe fa64 	bl	80041d8 <malloc>
 8005d10:	4602      	mov	r2, r0
 8005d12:	61e0      	str	r0, [r4, #28]
 8005d14:	b920      	cbnz	r0, 8005d20 <_Balloc+0x20>
 8005d16:	216b      	movs	r1, #107	; 0x6b
 8005d18:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <_Balloc+0x78>)
 8005d1a:	4818      	ldr	r0, [pc, #96]	; (8005d7c <_Balloc+0x7c>)
 8005d1c:	f000 fd92 	bl	8006844 <__assert_func>
 8005d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d24:	6006      	str	r6, [r0, #0]
 8005d26:	60c6      	str	r6, [r0, #12]
 8005d28:	69e6      	ldr	r6, [r4, #28]
 8005d2a:	68f3      	ldr	r3, [r6, #12]
 8005d2c:	b183      	cbz	r3, 8005d50 <_Balloc+0x50>
 8005d2e:	69e3      	ldr	r3, [r4, #28]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d36:	b9b8      	cbnz	r0, 8005d68 <_Balloc+0x68>
 8005d38:	2101      	movs	r1, #1
 8005d3a:	fa01 f605 	lsl.w	r6, r1, r5
 8005d3e:	1d72      	adds	r2, r6, #5
 8005d40:	4620      	mov	r0, r4
 8005d42:	0092      	lsls	r2, r2, #2
 8005d44:	f000 fd9c 	bl	8006880 <_calloc_r>
 8005d48:	b160      	cbz	r0, 8005d64 <_Balloc+0x64>
 8005d4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d4e:	e00e      	b.n	8005d6e <_Balloc+0x6e>
 8005d50:	2221      	movs	r2, #33	; 0x21
 8005d52:	2104      	movs	r1, #4
 8005d54:	4620      	mov	r0, r4
 8005d56:	f000 fd93 	bl	8006880 <_calloc_r>
 8005d5a:	69e3      	ldr	r3, [r4, #28]
 8005d5c:	60f0      	str	r0, [r6, #12]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e4      	bne.n	8005d2e <_Balloc+0x2e>
 8005d64:	2000      	movs	r0, #0
 8005d66:	bd70      	pop	{r4, r5, r6, pc}
 8005d68:	6802      	ldr	r2, [r0, #0]
 8005d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d6e:	2300      	movs	r3, #0
 8005d70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d74:	e7f7      	b.n	8005d66 <_Balloc+0x66>
 8005d76:	bf00      	nop
 8005d78:	08007e0f 	.word	0x08007e0f
 8005d7c:	08007e8f 	.word	0x08007e8f

08005d80 <_Bfree>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	69c6      	ldr	r6, [r0, #28]
 8005d84:	4605      	mov	r5, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b976      	cbnz	r6, 8005da8 <_Bfree+0x28>
 8005d8a:	2010      	movs	r0, #16
 8005d8c:	f7fe fa24 	bl	80041d8 <malloc>
 8005d90:	4602      	mov	r2, r0
 8005d92:	61e8      	str	r0, [r5, #28]
 8005d94:	b920      	cbnz	r0, 8005da0 <_Bfree+0x20>
 8005d96:	218f      	movs	r1, #143	; 0x8f
 8005d98:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <_Bfree+0x3c>)
 8005d9a:	4809      	ldr	r0, [pc, #36]	; (8005dc0 <_Bfree+0x40>)
 8005d9c:	f000 fd52 	bl	8006844 <__assert_func>
 8005da0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005da4:	6006      	str	r6, [r0, #0]
 8005da6:	60c6      	str	r6, [r0, #12]
 8005da8:	b13c      	cbz	r4, 8005dba <_Bfree+0x3a>
 8005daa:	69eb      	ldr	r3, [r5, #28]
 8005dac:	6862      	ldr	r2, [r4, #4]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005db4:	6021      	str	r1, [r4, #0]
 8005db6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005dba:	bd70      	pop	{r4, r5, r6, pc}
 8005dbc:	08007e0f 	.word	0x08007e0f
 8005dc0:	08007e8f 	.word	0x08007e8f

08005dc4 <__multadd>:
 8005dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005dc8:	4607      	mov	r7, r0
 8005dca:	460c      	mov	r4, r1
 8005dcc:	461e      	mov	r6, r3
 8005dce:	2000      	movs	r0, #0
 8005dd0:	690d      	ldr	r5, [r1, #16]
 8005dd2:	f101 0c14 	add.w	ip, r1, #20
 8005dd6:	f8dc 3000 	ldr.w	r3, [ip]
 8005dda:	3001      	adds	r0, #1
 8005ddc:	b299      	uxth	r1, r3
 8005dde:	fb02 6101 	mla	r1, r2, r1, r6
 8005de2:	0c1e      	lsrs	r6, r3, #16
 8005de4:	0c0b      	lsrs	r3, r1, #16
 8005de6:	fb02 3306 	mla	r3, r2, r6, r3
 8005dea:	b289      	uxth	r1, r1
 8005dec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005df0:	4285      	cmp	r5, r0
 8005df2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005df6:	f84c 1b04 	str.w	r1, [ip], #4
 8005dfa:	dcec      	bgt.n	8005dd6 <__multadd+0x12>
 8005dfc:	b30e      	cbz	r6, 8005e42 <__multadd+0x7e>
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	42ab      	cmp	r3, r5
 8005e02:	dc19      	bgt.n	8005e38 <__multadd+0x74>
 8005e04:	6861      	ldr	r1, [r4, #4]
 8005e06:	4638      	mov	r0, r7
 8005e08:	3101      	adds	r1, #1
 8005e0a:	f7ff ff79 	bl	8005d00 <_Balloc>
 8005e0e:	4680      	mov	r8, r0
 8005e10:	b928      	cbnz	r0, 8005e1e <__multadd+0x5a>
 8005e12:	4602      	mov	r2, r0
 8005e14:	21ba      	movs	r1, #186	; 0xba
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <__multadd+0x84>)
 8005e18:	480c      	ldr	r0, [pc, #48]	; (8005e4c <__multadd+0x88>)
 8005e1a:	f000 fd13 	bl	8006844 <__assert_func>
 8005e1e:	6922      	ldr	r2, [r4, #16]
 8005e20:	f104 010c 	add.w	r1, r4, #12
 8005e24:	3202      	adds	r2, #2
 8005e26:	0092      	lsls	r2, r2, #2
 8005e28:	300c      	adds	r0, #12
 8005e2a:	f000 fcfd 	bl	8006828 <memcpy>
 8005e2e:	4621      	mov	r1, r4
 8005e30:	4638      	mov	r0, r7
 8005e32:	f7ff ffa5 	bl	8005d80 <_Bfree>
 8005e36:	4644      	mov	r4, r8
 8005e38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e3c:	3501      	adds	r5, #1
 8005e3e:	615e      	str	r6, [r3, #20]
 8005e40:	6125      	str	r5, [r4, #16]
 8005e42:	4620      	mov	r0, r4
 8005e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e48:	08007e7e 	.word	0x08007e7e
 8005e4c:	08007e8f 	.word	0x08007e8f

08005e50 <__hi0bits>:
 8005e50:	0c02      	lsrs	r2, r0, #16
 8005e52:	0412      	lsls	r2, r2, #16
 8005e54:	4603      	mov	r3, r0
 8005e56:	b9ca      	cbnz	r2, 8005e8c <__hi0bits+0x3c>
 8005e58:	0403      	lsls	r3, r0, #16
 8005e5a:	2010      	movs	r0, #16
 8005e5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e60:	bf04      	itt	eq
 8005e62:	021b      	lsleq	r3, r3, #8
 8005e64:	3008      	addeq	r0, #8
 8005e66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e6a:	bf04      	itt	eq
 8005e6c:	011b      	lsleq	r3, r3, #4
 8005e6e:	3004      	addeq	r0, #4
 8005e70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e74:	bf04      	itt	eq
 8005e76:	009b      	lsleq	r3, r3, #2
 8005e78:	3002      	addeq	r0, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	db05      	blt.n	8005e8a <__hi0bits+0x3a>
 8005e7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e82:	f100 0001 	add.w	r0, r0, #1
 8005e86:	bf08      	it	eq
 8005e88:	2020      	moveq	r0, #32
 8005e8a:	4770      	bx	lr
 8005e8c:	2000      	movs	r0, #0
 8005e8e:	e7e5      	b.n	8005e5c <__hi0bits+0xc>

08005e90 <__lo0bits>:
 8005e90:	6803      	ldr	r3, [r0, #0]
 8005e92:	4602      	mov	r2, r0
 8005e94:	f013 0007 	ands.w	r0, r3, #7
 8005e98:	d00b      	beq.n	8005eb2 <__lo0bits+0x22>
 8005e9a:	07d9      	lsls	r1, r3, #31
 8005e9c:	d421      	bmi.n	8005ee2 <__lo0bits+0x52>
 8005e9e:	0798      	lsls	r0, r3, #30
 8005ea0:	bf49      	itett	mi
 8005ea2:	085b      	lsrmi	r3, r3, #1
 8005ea4:	089b      	lsrpl	r3, r3, #2
 8005ea6:	2001      	movmi	r0, #1
 8005ea8:	6013      	strmi	r3, [r2, #0]
 8005eaa:	bf5c      	itt	pl
 8005eac:	2002      	movpl	r0, #2
 8005eae:	6013      	strpl	r3, [r2, #0]
 8005eb0:	4770      	bx	lr
 8005eb2:	b299      	uxth	r1, r3
 8005eb4:	b909      	cbnz	r1, 8005eba <__lo0bits+0x2a>
 8005eb6:	2010      	movs	r0, #16
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	b2d9      	uxtb	r1, r3
 8005ebc:	b909      	cbnz	r1, 8005ec2 <__lo0bits+0x32>
 8005ebe:	3008      	adds	r0, #8
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	0719      	lsls	r1, r3, #28
 8005ec4:	bf04      	itt	eq
 8005ec6:	091b      	lsreq	r3, r3, #4
 8005ec8:	3004      	addeq	r0, #4
 8005eca:	0799      	lsls	r1, r3, #30
 8005ecc:	bf04      	itt	eq
 8005ece:	089b      	lsreq	r3, r3, #2
 8005ed0:	3002      	addeq	r0, #2
 8005ed2:	07d9      	lsls	r1, r3, #31
 8005ed4:	d403      	bmi.n	8005ede <__lo0bits+0x4e>
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	f100 0001 	add.w	r0, r0, #1
 8005edc:	d003      	beq.n	8005ee6 <__lo0bits+0x56>
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	4770      	bx	lr
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	4770      	bx	lr
 8005ee6:	2020      	movs	r0, #32
 8005ee8:	4770      	bx	lr
	...

08005eec <__i2b>:
 8005eec:	b510      	push	{r4, lr}
 8005eee:	460c      	mov	r4, r1
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	f7ff ff05 	bl	8005d00 <_Balloc>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	b928      	cbnz	r0, 8005f06 <__i2b+0x1a>
 8005efa:	f240 1145 	movw	r1, #325	; 0x145
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <__i2b+0x24>)
 8005f00:	4804      	ldr	r0, [pc, #16]	; (8005f14 <__i2b+0x28>)
 8005f02:	f000 fc9f 	bl	8006844 <__assert_func>
 8005f06:	2301      	movs	r3, #1
 8005f08:	6144      	str	r4, [r0, #20]
 8005f0a:	6103      	str	r3, [r0, #16]
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	bf00      	nop
 8005f10:	08007e7e 	.word	0x08007e7e
 8005f14:	08007e8f 	.word	0x08007e8f

08005f18 <__multiply>:
 8005f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1c:	4691      	mov	r9, r2
 8005f1e:	690a      	ldr	r2, [r1, #16]
 8005f20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005f24:	460c      	mov	r4, r1
 8005f26:	429a      	cmp	r2, r3
 8005f28:	bfbe      	ittt	lt
 8005f2a:	460b      	movlt	r3, r1
 8005f2c:	464c      	movlt	r4, r9
 8005f2e:	4699      	movlt	r9, r3
 8005f30:	6927      	ldr	r7, [r4, #16]
 8005f32:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005f36:	68a3      	ldr	r3, [r4, #8]
 8005f38:	6861      	ldr	r1, [r4, #4]
 8005f3a:	eb07 060a 	add.w	r6, r7, sl
 8005f3e:	42b3      	cmp	r3, r6
 8005f40:	b085      	sub	sp, #20
 8005f42:	bfb8      	it	lt
 8005f44:	3101      	addlt	r1, #1
 8005f46:	f7ff fedb 	bl	8005d00 <_Balloc>
 8005f4a:	b930      	cbnz	r0, 8005f5a <__multiply+0x42>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f52:	4b43      	ldr	r3, [pc, #268]	; (8006060 <__multiply+0x148>)
 8005f54:	4843      	ldr	r0, [pc, #268]	; (8006064 <__multiply+0x14c>)
 8005f56:	f000 fc75 	bl	8006844 <__assert_func>
 8005f5a:	f100 0514 	add.w	r5, r0, #20
 8005f5e:	462b      	mov	r3, r5
 8005f60:	2200      	movs	r2, #0
 8005f62:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f66:	4543      	cmp	r3, r8
 8005f68:	d321      	bcc.n	8005fae <__multiply+0x96>
 8005f6a:	f104 0314 	add.w	r3, r4, #20
 8005f6e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f72:	f109 0314 	add.w	r3, r9, #20
 8005f76:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f7a:	9202      	str	r2, [sp, #8]
 8005f7c:	1b3a      	subs	r2, r7, r4
 8005f7e:	3a15      	subs	r2, #21
 8005f80:	f022 0203 	bic.w	r2, r2, #3
 8005f84:	3204      	adds	r2, #4
 8005f86:	f104 0115 	add.w	r1, r4, #21
 8005f8a:	428f      	cmp	r7, r1
 8005f8c:	bf38      	it	cc
 8005f8e:	2204      	movcc	r2, #4
 8005f90:	9201      	str	r2, [sp, #4]
 8005f92:	9a02      	ldr	r2, [sp, #8]
 8005f94:	9303      	str	r3, [sp, #12]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d80c      	bhi.n	8005fb4 <__multiply+0x9c>
 8005f9a:	2e00      	cmp	r6, #0
 8005f9c:	dd03      	ble.n	8005fa6 <__multiply+0x8e>
 8005f9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d05a      	beq.n	800605c <__multiply+0x144>
 8005fa6:	6106      	str	r6, [r0, #16]
 8005fa8:	b005      	add	sp, #20
 8005faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fae:	f843 2b04 	str.w	r2, [r3], #4
 8005fb2:	e7d8      	b.n	8005f66 <__multiply+0x4e>
 8005fb4:	f8b3 a000 	ldrh.w	sl, [r3]
 8005fb8:	f1ba 0f00 	cmp.w	sl, #0
 8005fbc:	d023      	beq.n	8006006 <__multiply+0xee>
 8005fbe:	46a9      	mov	r9, r5
 8005fc0:	f04f 0c00 	mov.w	ip, #0
 8005fc4:	f104 0e14 	add.w	lr, r4, #20
 8005fc8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005fcc:	f8d9 1000 	ldr.w	r1, [r9]
 8005fd0:	fa1f fb82 	uxth.w	fp, r2
 8005fd4:	b289      	uxth	r1, r1
 8005fd6:	fb0a 110b 	mla	r1, sl, fp, r1
 8005fda:	4461      	add	r1, ip
 8005fdc:	f8d9 c000 	ldr.w	ip, [r9]
 8005fe0:	0c12      	lsrs	r2, r2, #16
 8005fe2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005fe6:	fb0a c202 	mla	r2, sl, r2, ip
 8005fea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fee:	b289      	uxth	r1, r1
 8005ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ff4:	4577      	cmp	r7, lr
 8005ff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ffa:	f849 1b04 	str.w	r1, [r9], #4
 8005ffe:	d8e3      	bhi.n	8005fc8 <__multiply+0xb0>
 8006000:	9a01      	ldr	r2, [sp, #4]
 8006002:	f845 c002 	str.w	ip, [r5, r2]
 8006006:	9a03      	ldr	r2, [sp, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800600e:	f1b9 0f00 	cmp.w	r9, #0
 8006012:	d021      	beq.n	8006058 <__multiply+0x140>
 8006014:	46ae      	mov	lr, r5
 8006016:	f04f 0a00 	mov.w	sl, #0
 800601a:	6829      	ldr	r1, [r5, #0]
 800601c:	f104 0c14 	add.w	ip, r4, #20
 8006020:	f8bc b000 	ldrh.w	fp, [ip]
 8006024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006028:	b289      	uxth	r1, r1
 800602a:	fb09 220b 	mla	r2, r9, fp, r2
 800602e:	4452      	add	r2, sl
 8006030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006034:	f84e 1b04 	str.w	r1, [lr], #4
 8006038:	f85c 1b04 	ldr.w	r1, [ip], #4
 800603c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006040:	f8be 1000 	ldrh.w	r1, [lr]
 8006044:	4567      	cmp	r7, ip
 8006046:	fb09 110a 	mla	r1, r9, sl, r1
 800604a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800604e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006052:	d8e5      	bhi.n	8006020 <__multiply+0x108>
 8006054:	9a01      	ldr	r2, [sp, #4]
 8006056:	50a9      	str	r1, [r5, r2]
 8006058:	3504      	adds	r5, #4
 800605a:	e79a      	b.n	8005f92 <__multiply+0x7a>
 800605c:	3e01      	subs	r6, #1
 800605e:	e79c      	b.n	8005f9a <__multiply+0x82>
 8006060:	08007e7e 	.word	0x08007e7e
 8006064:	08007e8f 	.word	0x08007e8f

08006068 <__pow5mult>:
 8006068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800606c:	4615      	mov	r5, r2
 800606e:	f012 0203 	ands.w	r2, r2, #3
 8006072:	4606      	mov	r6, r0
 8006074:	460f      	mov	r7, r1
 8006076:	d007      	beq.n	8006088 <__pow5mult+0x20>
 8006078:	4c25      	ldr	r4, [pc, #148]	; (8006110 <__pow5mult+0xa8>)
 800607a:	3a01      	subs	r2, #1
 800607c:	2300      	movs	r3, #0
 800607e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006082:	f7ff fe9f 	bl	8005dc4 <__multadd>
 8006086:	4607      	mov	r7, r0
 8006088:	10ad      	asrs	r5, r5, #2
 800608a:	d03d      	beq.n	8006108 <__pow5mult+0xa0>
 800608c:	69f4      	ldr	r4, [r6, #28]
 800608e:	b97c      	cbnz	r4, 80060b0 <__pow5mult+0x48>
 8006090:	2010      	movs	r0, #16
 8006092:	f7fe f8a1 	bl	80041d8 <malloc>
 8006096:	4602      	mov	r2, r0
 8006098:	61f0      	str	r0, [r6, #28]
 800609a:	b928      	cbnz	r0, 80060a8 <__pow5mult+0x40>
 800609c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80060a0:	4b1c      	ldr	r3, [pc, #112]	; (8006114 <__pow5mult+0xac>)
 80060a2:	481d      	ldr	r0, [pc, #116]	; (8006118 <__pow5mult+0xb0>)
 80060a4:	f000 fbce 	bl	8006844 <__assert_func>
 80060a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060ac:	6004      	str	r4, [r0, #0]
 80060ae:	60c4      	str	r4, [r0, #12]
 80060b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80060b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060b8:	b94c      	cbnz	r4, 80060ce <__pow5mult+0x66>
 80060ba:	f240 2171 	movw	r1, #625	; 0x271
 80060be:	4630      	mov	r0, r6
 80060c0:	f7ff ff14 	bl	8005eec <__i2b>
 80060c4:	2300      	movs	r3, #0
 80060c6:	4604      	mov	r4, r0
 80060c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80060cc:	6003      	str	r3, [r0, #0]
 80060ce:	f04f 0900 	mov.w	r9, #0
 80060d2:	07eb      	lsls	r3, r5, #31
 80060d4:	d50a      	bpl.n	80060ec <__pow5mult+0x84>
 80060d6:	4639      	mov	r1, r7
 80060d8:	4622      	mov	r2, r4
 80060da:	4630      	mov	r0, r6
 80060dc:	f7ff ff1c 	bl	8005f18 <__multiply>
 80060e0:	4680      	mov	r8, r0
 80060e2:	4639      	mov	r1, r7
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff fe4b 	bl	8005d80 <_Bfree>
 80060ea:	4647      	mov	r7, r8
 80060ec:	106d      	asrs	r5, r5, #1
 80060ee:	d00b      	beq.n	8006108 <__pow5mult+0xa0>
 80060f0:	6820      	ldr	r0, [r4, #0]
 80060f2:	b938      	cbnz	r0, 8006104 <__pow5mult+0x9c>
 80060f4:	4622      	mov	r2, r4
 80060f6:	4621      	mov	r1, r4
 80060f8:	4630      	mov	r0, r6
 80060fa:	f7ff ff0d 	bl	8005f18 <__multiply>
 80060fe:	6020      	str	r0, [r4, #0]
 8006100:	f8c0 9000 	str.w	r9, [r0]
 8006104:	4604      	mov	r4, r0
 8006106:	e7e4      	b.n	80060d2 <__pow5mult+0x6a>
 8006108:	4638      	mov	r0, r7
 800610a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800610e:	bf00      	nop
 8006110:	08007fd8 	.word	0x08007fd8
 8006114:	08007e0f 	.word	0x08007e0f
 8006118:	08007e8f 	.word	0x08007e8f

0800611c <__lshift>:
 800611c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006120:	460c      	mov	r4, r1
 8006122:	4607      	mov	r7, r0
 8006124:	4691      	mov	r9, r2
 8006126:	6923      	ldr	r3, [r4, #16]
 8006128:	6849      	ldr	r1, [r1, #4]
 800612a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800612e:	68a3      	ldr	r3, [r4, #8]
 8006130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006134:	f108 0601 	add.w	r6, r8, #1
 8006138:	42b3      	cmp	r3, r6
 800613a:	db0b      	blt.n	8006154 <__lshift+0x38>
 800613c:	4638      	mov	r0, r7
 800613e:	f7ff fddf 	bl	8005d00 <_Balloc>
 8006142:	4605      	mov	r5, r0
 8006144:	b948      	cbnz	r0, 800615a <__lshift+0x3e>
 8006146:	4602      	mov	r2, r0
 8006148:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800614c:	4b27      	ldr	r3, [pc, #156]	; (80061ec <__lshift+0xd0>)
 800614e:	4828      	ldr	r0, [pc, #160]	; (80061f0 <__lshift+0xd4>)
 8006150:	f000 fb78 	bl	8006844 <__assert_func>
 8006154:	3101      	adds	r1, #1
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	e7ee      	b.n	8006138 <__lshift+0x1c>
 800615a:	2300      	movs	r3, #0
 800615c:	f100 0114 	add.w	r1, r0, #20
 8006160:	f100 0210 	add.w	r2, r0, #16
 8006164:	4618      	mov	r0, r3
 8006166:	4553      	cmp	r3, sl
 8006168:	db33      	blt.n	80061d2 <__lshift+0xb6>
 800616a:	6920      	ldr	r0, [r4, #16]
 800616c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006170:	f104 0314 	add.w	r3, r4, #20
 8006174:	f019 091f 	ands.w	r9, r9, #31
 8006178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800617c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006180:	d02b      	beq.n	80061da <__lshift+0xbe>
 8006182:	468a      	mov	sl, r1
 8006184:	2200      	movs	r2, #0
 8006186:	f1c9 0e20 	rsb	lr, r9, #32
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	fa00 f009 	lsl.w	r0, r0, r9
 8006190:	4310      	orrs	r0, r2
 8006192:	f84a 0b04 	str.w	r0, [sl], #4
 8006196:	f853 2b04 	ldr.w	r2, [r3], #4
 800619a:	459c      	cmp	ip, r3
 800619c:	fa22 f20e 	lsr.w	r2, r2, lr
 80061a0:	d8f3      	bhi.n	800618a <__lshift+0x6e>
 80061a2:	ebac 0304 	sub.w	r3, ip, r4
 80061a6:	3b15      	subs	r3, #21
 80061a8:	f023 0303 	bic.w	r3, r3, #3
 80061ac:	3304      	adds	r3, #4
 80061ae:	f104 0015 	add.w	r0, r4, #21
 80061b2:	4584      	cmp	ip, r0
 80061b4:	bf38      	it	cc
 80061b6:	2304      	movcc	r3, #4
 80061b8:	50ca      	str	r2, [r1, r3]
 80061ba:	b10a      	cbz	r2, 80061c0 <__lshift+0xa4>
 80061bc:	f108 0602 	add.w	r6, r8, #2
 80061c0:	3e01      	subs	r6, #1
 80061c2:	4638      	mov	r0, r7
 80061c4:	4621      	mov	r1, r4
 80061c6:	612e      	str	r6, [r5, #16]
 80061c8:	f7ff fdda 	bl	8005d80 <_Bfree>
 80061cc:	4628      	mov	r0, r5
 80061ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80061d6:	3301      	adds	r3, #1
 80061d8:	e7c5      	b.n	8006166 <__lshift+0x4a>
 80061da:	3904      	subs	r1, #4
 80061dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e0:	459c      	cmp	ip, r3
 80061e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80061e6:	d8f9      	bhi.n	80061dc <__lshift+0xc0>
 80061e8:	e7ea      	b.n	80061c0 <__lshift+0xa4>
 80061ea:	bf00      	nop
 80061ec:	08007e7e 	.word	0x08007e7e
 80061f0:	08007e8f 	.word	0x08007e8f

080061f4 <__mcmp>:
 80061f4:	4603      	mov	r3, r0
 80061f6:	690a      	ldr	r2, [r1, #16]
 80061f8:	6900      	ldr	r0, [r0, #16]
 80061fa:	b530      	push	{r4, r5, lr}
 80061fc:	1a80      	subs	r0, r0, r2
 80061fe:	d10d      	bne.n	800621c <__mcmp+0x28>
 8006200:	3314      	adds	r3, #20
 8006202:	3114      	adds	r1, #20
 8006204:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006208:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800620c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006210:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006214:	4295      	cmp	r5, r2
 8006216:	d002      	beq.n	800621e <__mcmp+0x2a>
 8006218:	d304      	bcc.n	8006224 <__mcmp+0x30>
 800621a:	2001      	movs	r0, #1
 800621c:	bd30      	pop	{r4, r5, pc}
 800621e:	42a3      	cmp	r3, r4
 8006220:	d3f4      	bcc.n	800620c <__mcmp+0x18>
 8006222:	e7fb      	b.n	800621c <__mcmp+0x28>
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	e7f8      	b.n	800621c <__mcmp+0x28>
	...

0800622c <__mdiff>:
 800622c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006230:	460d      	mov	r5, r1
 8006232:	4607      	mov	r7, r0
 8006234:	4611      	mov	r1, r2
 8006236:	4628      	mov	r0, r5
 8006238:	4614      	mov	r4, r2
 800623a:	f7ff ffdb 	bl	80061f4 <__mcmp>
 800623e:	1e06      	subs	r6, r0, #0
 8006240:	d111      	bne.n	8006266 <__mdiff+0x3a>
 8006242:	4631      	mov	r1, r6
 8006244:	4638      	mov	r0, r7
 8006246:	f7ff fd5b 	bl	8005d00 <_Balloc>
 800624a:	4602      	mov	r2, r0
 800624c:	b928      	cbnz	r0, 800625a <__mdiff+0x2e>
 800624e:	f240 2137 	movw	r1, #567	; 0x237
 8006252:	4b3a      	ldr	r3, [pc, #232]	; (800633c <__mdiff+0x110>)
 8006254:	483a      	ldr	r0, [pc, #232]	; (8006340 <__mdiff+0x114>)
 8006256:	f000 faf5 	bl	8006844 <__assert_func>
 800625a:	2301      	movs	r3, #1
 800625c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006260:	4610      	mov	r0, r2
 8006262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006266:	bfa4      	itt	ge
 8006268:	4623      	movge	r3, r4
 800626a:	462c      	movge	r4, r5
 800626c:	4638      	mov	r0, r7
 800626e:	6861      	ldr	r1, [r4, #4]
 8006270:	bfa6      	itte	ge
 8006272:	461d      	movge	r5, r3
 8006274:	2600      	movge	r6, #0
 8006276:	2601      	movlt	r6, #1
 8006278:	f7ff fd42 	bl	8005d00 <_Balloc>
 800627c:	4602      	mov	r2, r0
 800627e:	b918      	cbnz	r0, 8006288 <__mdiff+0x5c>
 8006280:	f240 2145 	movw	r1, #581	; 0x245
 8006284:	4b2d      	ldr	r3, [pc, #180]	; (800633c <__mdiff+0x110>)
 8006286:	e7e5      	b.n	8006254 <__mdiff+0x28>
 8006288:	f102 0814 	add.w	r8, r2, #20
 800628c:	46c2      	mov	sl, r8
 800628e:	f04f 0c00 	mov.w	ip, #0
 8006292:	6927      	ldr	r7, [r4, #16]
 8006294:	60c6      	str	r6, [r0, #12]
 8006296:	692e      	ldr	r6, [r5, #16]
 8006298:	f104 0014 	add.w	r0, r4, #20
 800629c:	f105 0914 	add.w	r9, r5, #20
 80062a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80062a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80062a8:	3410      	adds	r4, #16
 80062aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80062ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80062b2:	fa1f f18b 	uxth.w	r1, fp
 80062b6:	4461      	add	r1, ip
 80062b8:	fa1f fc83 	uxth.w	ip, r3
 80062bc:	0c1b      	lsrs	r3, r3, #16
 80062be:	eba1 010c 	sub.w	r1, r1, ip
 80062c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80062c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80062ca:	b289      	uxth	r1, r1
 80062cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80062d0:	454e      	cmp	r6, r9
 80062d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80062d6:	f84a 1b04 	str.w	r1, [sl], #4
 80062da:	d8e6      	bhi.n	80062aa <__mdiff+0x7e>
 80062dc:	1b73      	subs	r3, r6, r5
 80062de:	3b15      	subs	r3, #21
 80062e0:	f023 0303 	bic.w	r3, r3, #3
 80062e4:	3515      	adds	r5, #21
 80062e6:	3304      	adds	r3, #4
 80062e8:	42ae      	cmp	r6, r5
 80062ea:	bf38      	it	cc
 80062ec:	2304      	movcc	r3, #4
 80062ee:	4418      	add	r0, r3
 80062f0:	4443      	add	r3, r8
 80062f2:	461e      	mov	r6, r3
 80062f4:	4605      	mov	r5, r0
 80062f6:	4575      	cmp	r5, lr
 80062f8:	d30e      	bcc.n	8006318 <__mdiff+0xec>
 80062fa:	f10e 0103 	add.w	r1, lr, #3
 80062fe:	1a09      	subs	r1, r1, r0
 8006300:	f021 0103 	bic.w	r1, r1, #3
 8006304:	3803      	subs	r0, #3
 8006306:	4586      	cmp	lr, r0
 8006308:	bf38      	it	cc
 800630a:	2100      	movcc	r1, #0
 800630c:	440b      	add	r3, r1
 800630e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006312:	b189      	cbz	r1, 8006338 <__mdiff+0x10c>
 8006314:	6117      	str	r7, [r2, #16]
 8006316:	e7a3      	b.n	8006260 <__mdiff+0x34>
 8006318:	f855 8b04 	ldr.w	r8, [r5], #4
 800631c:	fa1f f188 	uxth.w	r1, r8
 8006320:	4461      	add	r1, ip
 8006322:	140c      	asrs	r4, r1, #16
 8006324:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006328:	b289      	uxth	r1, r1
 800632a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800632e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006332:	f846 1b04 	str.w	r1, [r6], #4
 8006336:	e7de      	b.n	80062f6 <__mdiff+0xca>
 8006338:	3f01      	subs	r7, #1
 800633a:	e7e8      	b.n	800630e <__mdiff+0xe2>
 800633c:	08007e7e 	.word	0x08007e7e
 8006340:	08007e8f 	.word	0x08007e8f

08006344 <__d2b>:
 8006344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006346:	2101      	movs	r1, #1
 8006348:	4617      	mov	r7, r2
 800634a:	461c      	mov	r4, r3
 800634c:	9e08      	ldr	r6, [sp, #32]
 800634e:	f7ff fcd7 	bl	8005d00 <_Balloc>
 8006352:	4605      	mov	r5, r0
 8006354:	b930      	cbnz	r0, 8006364 <__d2b+0x20>
 8006356:	4602      	mov	r2, r0
 8006358:	f240 310f 	movw	r1, #783	; 0x30f
 800635c:	4b22      	ldr	r3, [pc, #136]	; (80063e8 <__d2b+0xa4>)
 800635e:	4823      	ldr	r0, [pc, #140]	; (80063ec <__d2b+0xa8>)
 8006360:	f000 fa70 	bl	8006844 <__assert_func>
 8006364:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006368:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800636c:	bb24      	cbnz	r4, 80063b8 <__d2b+0x74>
 800636e:	2f00      	cmp	r7, #0
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	d026      	beq.n	80063c2 <__d2b+0x7e>
 8006374:	4668      	mov	r0, sp
 8006376:	9700      	str	r7, [sp, #0]
 8006378:	f7ff fd8a 	bl	8005e90 <__lo0bits>
 800637c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006380:	b1e8      	cbz	r0, 80063be <__d2b+0x7a>
 8006382:	f1c0 0320 	rsb	r3, r0, #32
 8006386:	fa02 f303 	lsl.w	r3, r2, r3
 800638a:	430b      	orrs	r3, r1
 800638c:	40c2      	lsrs	r2, r0
 800638e:	616b      	str	r3, [r5, #20]
 8006390:	9201      	str	r2, [sp, #4]
 8006392:	9b01      	ldr	r3, [sp, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf14      	ite	ne
 8006398:	2102      	movne	r1, #2
 800639a:	2101      	moveq	r1, #1
 800639c:	61ab      	str	r3, [r5, #24]
 800639e:	6129      	str	r1, [r5, #16]
 80063a0:	b1bc      	cbz	r4, 80063d2 <__d2b+0x8e>
 80063a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80063a6:	4404      	add	r4, r0
 80063a8:	6034      	str	r4, [r6, #0]
 80063aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b0:	6018      	str	r0, [r3, #0]
 80063b2:	4628      	mov	r0, r5
 80063b4:	b003      	add	sp, #12
 80063b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063bc:	e7d7      	b.n	800636e <__d2b+0x2a>
 80063be:	6169      	str	r1, [r5, #20]
 80063c0:	e7e7      	b.n	8006392 <__d2b+0x4e>
 80063c2:	a801      	add	r0, sp, #4
 80063c4:	f7ff fd64 	bl	8005e90 <__lo0bits>
 80063c8:	9b01      	ldr	r3, [sp, #4]
 80063ca:	2101      	movs	r1, #1
 80063cc:	616b      	str	r3, [r5, #20]
 80063ce:	3020      	adds	r0, #32
 80063d0:	e7e5      	b.n	800639e <__d2b+0x5a>
 80063d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063d6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80063da:	6030      	str	r0, [r6, #0]
 80063dc:	6918      	ldr	r0, [r3, #16]
 80063de:	f7ff fd37 	bl	8005e50 <__hi0bits>
 80063e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80063e6:	e7e2      	b.n	80063ae <__d2b+0x6a>
 80063e8:	08007e7e 	.word	0x08007e7e
 80063ec:	08007e8f 	.word	0x08007e8f

080063f0 <__ssputs_r>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	461f      	mov	r7, r3
 80063f6:	688e      	ldr	r6, [r1, #8]
 80063f8:	4682      	mov	sl, r0
 80063fa:	42be      	cmp	r6, r7
 80063fc:	460c      	mov	r4, r1
 80063fe:	4690      	mov	r8, r2
 8006400:	680b      	ldr	r3, [r1, #0]
 8006402:	d82c      	bhi.n	800645e <__ssputs_r+0x6e>
 8006404:	898a      	ldrh	r2, [r1, #12]
 8006406:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800640a:	d026      	beq.n	800645a <__ssputs_r+0x6a>
 800640c:	6965      	ldr	r5, [r4, #20]
 800640e:	6909      	ldr	r1, [r1, #16]
 8006410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006414:	eba3 0901 	sub.w	r9, r3, r1
 8006418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800641c:	1c7b      	adds	r3, r7, #1
 800641e:	444b      	add	r3, r9
 8006420:	106d      	asrs	r5, r5, #1
 8006422:	429d      	cmp	r5, r3
 8006424:	bf38      	it	cc
 8006426:	461d      	movcc	r5, r3
 8006428:	0553      	lsls	r3, r2, #21
 800642a:	d527      	bpl.n	800647c <__ssputs_r+0x8c>
 800642c:	4629      	mov	r1, r5
 800642e:	f7fd ff03 	bl	8004238 <_malloc_r>
 8006432:	4606      	mov	r6, r0
 8006434:	b360      	cbz	r0, 8006490 <__ssputs_r+0xa0>
 8006436:	464a      	mov	r2, r9
 8006438:	6921      	ldr	r1, [r4, #16]
 800643a:	f000 f9f5 	bl	8006828 <memcpy>
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	6126      	str	r6, [r4, #16]
 800644c:	444e      	add	r6, r9
 800644e:	6026      	str	r6, [r4, #0]
 8006450:	463e      	mov	r6, r7
 8006452:	6165      	str	r5, [r4, #20]
 8006454:	eba5 0509 	sub.w	r5, r5, r9
 8006458:	60a5      	str	r5, [r4, #8]
 800645a:	42be      	cmp	r6, r7
 800645c:	d900      	bls.n	8006460 <__ssputs_r+0x70>
 800645e:	463e      	mov	r6, r7
 8006460:	4632      	mov	r2, r6
 8006462:	4641      	mov	r1, r8
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	f000 f9c5 	bl	80067f4 <memmove>
 800646a:	2000      	movs	r0, #0
 800646c:	68a3      	ldr	r3, [r4, #8]
 800646e:	1b9b      	subs	r3, r3, r6
 8006470:	60a3      	str	r3, [r4, #8]
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	4433      	add	r3, r6
 8006476:	6023      	str	r3, [r4, #0]
 8006478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800647c:	462a      	mov	r2, r5
 800647e:	f000 fa25 	bl	80068cc <_realloc_r>
 8006482:	4606      	mov	r6, r0
 8006484:	2800      	cmp	r0, #0
 8006486:	d1e0      	bne.n	800644a <__ssputs_r+0x5a>
 8006488:	4650      	mov	r0, sl
 800648a:	6921      	ldr	r1, [r4, #16]
 800648c:	f7ff fbf0 	bl	8005c70 <_free_r>
 8006490:	230c      	movs	r3, #12
 8006492:	f8ca 3000 	str.w	r3, [sl]
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	f04f 30ff 	mov.w	r0, #4294967295
 800649c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	e7e9      	b.n	8006478 <__ssputs_r+0x88>

080064a4 <_svfiprintf_r>:
 80064a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a8:	4698      	mov	r8, r3
 80064aa:	898b      	ldrh	r3, [r1, #12]
 80064ac:	4607      	mov	r7, r0
 80064ae:	061b      	lsls	r3, r3, #24
 80064b0:	460d      	mov	r5, r1
 80064b2:	4614      	mov	r4, r2
 80064b4:	b09d      	sub	sp, #116	; 0x74
 80064b6:	d50e      	bpl.n	80064d6 <_svfiprintf_r+0x32>
 80064b8:	690b      	ldr	r3, [r1, #16]
 80064ba:	b963      	cbnz	r3, 80064d6 <_svfiprintf_r+0x32>
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	f7fd febb 	bl	8004238 <_malloc_r>
 80064c2:	6028      	str	r0, [r5, #0]
 80064c4:	6128      	str	r0, [r5, #16]
 80064c6:	b920      	cbnz	r0, 80064d2 <_svfiprintf_r+0x2e>
 80064c8:	230c      	movs	r3, #12
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	f04f 30ff 	mov.w	r0, #4294967295
 80064d0:	e0d0      	b.n	8006674 <_svfiprintf_r+0x1d0>
 80064d2:	2340      	movs	r3, #64	; 0x40
 80064d4:	616b      	str	r3, [r5, #20]
 80064d6:	2300      	movs	r3, #0
 80064d8:	9309      	str	r3, [sp, #36]	; 0x24
 80064da:	2320      	movs	r3, #32
 80064dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064e0:	2330      	movs	r3, #48	; 0x30
 80064e2:	f04f 0901 	mov.w	r9, #1
 80064e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80064ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800668c <_svfiprintf_r+0x1e8>
 80064ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064f2:	4623      	mov	r3, r4
 80064f4:	469a      	mov	sl, r3
 80064f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064fa:	b10a      	cbz	r2, 8006500 <_svfiprintf_r+0x5c>
 80064fc:	2a25      	cmp	r2, #37	; 0x25
 80064fe:	d1f9      	bne.n	80064f4 <_svfiprintf_r+0x50>
 8006500:	ebba 0b04 	subs.w	fp, sl, r4
 8006504:	d00b      	beq.n	800651e <_svfiprintf_r+0x7a>
 8006506:	465b      	mov	r3, fp
 8006508:	4622      	mov	r2, r4
 800650a:	4629      	mov	r1, r5
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff ff6f 	bl	80063f0 <__ssputs_r>
 8006512:	3001      	adds	r0, #1
 8006514:	f000 80a9 	beq.w	800666a <_svfiprintf_r+0x1c6>
 8006518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800651a:	445a      	add	r2, fp
 800651c:	9209      	str	r2, [sp, #36]	; 0x24
 800651e:	f89a 3000 	ldrb.w	r3, [sl]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80a1 	beq.w	800666a <_svfiprintf_r+0x1c6>
 8006528:	2300      	movs	r3, #0
 800652a:	f04f 32ff 	mov.w	r2, #4294967295
 800652e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006532:	f10a 0a01 	add.w	sl, sl, #1
 8006536:	9304      	str	r3, [sp, #16]
 8006538:	9307      	str	r3, [sp, #28]
 800653a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800653e:	931a      	str	r3, [sp, #104]	; 0x68
 8006540:	4654      	mov	r4, sl
 8006542:	2205      	movs	r2, #5
 8006544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006548:	4850      	ldr	r0, [pc, #320]	; (800668c <_svfiprintf_r+0x1e8>)
 800654a:	f7fe fd14 	bl	8004f76 <memchr>
 800654e:	9a04      	ldr	r2, [sp, #16]
 8006550:	b9d8      	cbnz	r0, 800658a <_svfiprintf_r+0xe6>
 8006552:	06d0      	lsls	r0, r2, #27
 8006554:	bf44      	itt	mi
 8006556:	2320      	movmi	r3, #32
 8006558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800655c:	0711      	lsls	r1, r2, #28
 800655e:	bf44      	itt	mi
 8006560:	232b      	movmi	r3, #43	; 0x2b
 8006562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006566:	f89a 3000 	ldrb.w	r3, [sl]
 800656a:	2b2a      	cmp	r3, #42	; 0x2a
 800656c:	d015      	beq.n	800659a <_svfiprintf_r+0xf6>
 800656e:	4654      	mov	r4, sl
 8006570:	2000      	movs	r0, #0
 8006572:	f04f 0c0a 	mov.w	ip, #10
 8006576:	9a07      	ldr	r2, [sp, #28]
 8006578:	4621      	mov	r1, r4
 800657a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800657e:	3b30      	subs	r3, #48	; 0x30
 8006580:	2b09      	cmp	r3, #9
 8006582:	d94d      	bls.n	8006620 <_svfiprintf_r+0x17c>
 8006584:	b1b0      	cbz	r0, 80065b4 <_svfiprintf_r+0x110>
 8006586:	9207      	str	r2, [sp, #28]
 8006588:	e014      	b.n	80065b4 <_svfiprintf_r+0x110>
 800658a:	eba0 0308 	sub.w	r3, r0, r8
 800658e:	fa09 f303 	lsl.w	r3, r9, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	46a2      	mov	sl, r4
 8006596:	9304      	str	r3, [sp, #16]
 8006598:	e7d2      	b.n	8006540 <_svfiprintf_r+0x9c>
 800659a:	9b03      	ldr	r3, [sp, #12]
 800659c:	1d19      	adds	r1, r3, #4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	9103      	str	r1, [sp, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	bfbb      	ittet	lt
 80065a6:	425b      	neglt	r3, r3
 80065a8:	f042 0202 	orrlt.w	r2, r2, #2
 80065ac:	9307      	strge	r3, [sp, #28]
 80065ae:	9307      	strlt	r3, [sp, #28]
 80065b0:	bfb8      	it	lt
 80065b2:	9204      	strlt	r2, [sp, #16]
 80065b4:	7823      	ldrb	r3, [r4, #0]
 80065b6:	2b2e      	cmp	r3, #46	; 0x2e
 80065b8:	d10c      	bne.n	80065d4 <_svfiprintf_r+0x130>
 80065ba:	7863      	ldrb	r3, [r4, #1]
 80065bc:	2b2a      	cmp	r3, #42	; 0x2a
 80065be:	d134      	bne.n	800662a <_svfiprintf_r+0x186>
 80065c0:	9b03      	ldr	r3, [sp, #12]
 80065c2:	3402      	adds	r4, #2
 80065c4:	1d1a      	adds	r2, r3, #4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	9203      	str	r2, [sp, #12]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bfb8      	it	lt
 80065ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80065d2:	9305      	str	r3, [sp, #20]
 80065d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006690 <_svfiprintf_r+0x1ec>
 80065d8:	2203      	movs	r2, #3
 80065da:	4650      	mov	r0, sl
 80065dc:	7821      	ldrb	r1, [r4, #0]
 80065de:	f7fe fcca 	bl	8004f76 <memchr>
 80065e2:	b138      	cbz	r0, 80065f4 <_svfiprintf_r+0x150>
 80065e4:	2240      	movs	r2, #64	; 0x40
 80065e6:	9b04      	ldr	r3, [sp, #16]
 80065e8:	eba0 000a 	sub.w	r0, r0, sl
 80065ec:	4082      	lsls	r2, r0
 80065ee:	4313      	orrs	r3, r2
 80065f0:	3401      	adds	r4, #1
 80065f2:	9304      	str	r3, [sp, #16]
 80065f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065f8:	2206      	movs	r2, #6
 80065fa:	4826      	ldr	r0, [pc, #152]	; (8006694 <_svfiprintf_r+0x1f0>)
 80065fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006600:	f7fe fcb9 	bl	8004f76 <memchr>
 8006604:	2800      	cmp	r0, #0
 8006606:	d038      	beq.n	800667a <_svfiprintf_r+0x1d6>
 8006608:	4b23      	ldr	r3, [pc, #140]	; (8006698 <_svfiprintf_r+0x1f4>)
 800660a:	bb1b      	cbnz	r3, 8006654 <_svfiprintf_r+0x1b0>
 800660c:	9b03      	ldr	r3, [sp, #12]
 800660e:	3307      	adds	r3, #7
 8006610:	f023 0307 	bic.w	r3, r3, #7
 8006614:	3308      	adds	r3, #8
 8006616:	9303      	str	r3, [sp, #12]
 8006618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661a:	4433      	add	r3, r6
 800661c:	9309      	str	r3, [sp, #36]	; 0x24
 800661e:	e768      	b.n	80064f2 <_svfiprintf_r+0x4e>
 8006620:	460c      	mov	r4, r1
 8006622:	2001      	movs	r0, #1
 8006624:	fb0c 3202 	mla	r2, ip, r2, r3
 8006628:	e7a6      	b.n	8006578 <_svfiprintf_r+0xd4>
 800662a:	2300      	movs	r3, #0
 800662c:	f04f 0c0a 	mov.w	ip, #10
 8006630:	4619      	mov	r1, r3
 8006632:	3401      	adds	r4, #1
 8006634:	9305      	str	r3, [sp, #20]
 8006636:	4620      	mov	r0, r4
 8006638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800663c:	3a30      	subs	r2, #48	; 0x30
 800663e:	2a09      	cmp	r2, #9
 8006640:	d903      	bls.n	800664a <_svfiprintf_r+0x1a6>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0c6      	beq.n	80065d4 <_svfiprintf_r+0x130>
 8006646:	9105      	str	r1, [sp, #20]
 8006648:	e7c4      	b.n	80065d4 <_svfiprintf_r+0x130>
 800664a:	4604      	mov	r4, r0
 800664c:	2301      	movs	r3, #1
 800664e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006652:	e7f0      	b.n	8006636 <_svfiprintf_r+0x192>
 8006654:	ab03      	add	r3, sp, #12
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	462a      	mov	r2, r5
 800665a:	4638      	mov	r0, r7
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <_svfiprintf_r+0x1f8>)
 800665e:	a904      	add	r1, sp, #16
 8006660:	f7fd ff12 	bl	8004488 <_printf_float>
 8006664:	1c42      	adds	r2, r0, #1
 8006666:	4606      	mov	r6, r0
 8006668:	d1d6      	bne.n	8006618 <_svfiprintf_r+0x174>
 800666a:	89ab      	ldrh	r3, [r5, #12]
 800666c:	065b      	lsls	r3, r3, #25
 800666e:	f53f af2d 	bmi.w	80064cc <_svfiprintf_r+0x28>
 8006672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006674:	b01d      	add	sp, #116	; 0x74
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667a:	ab03      	add	r3, sp, #12
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	462a      	mov	r2, r5
 8006680:	4638      	mov	r0, r7
 8006682:	4b06      	ldr	r3, [pc, #24]	; (800669c <_svfiprintf_r+0x1f8>)
 8006684:	a904      	add	r1, sp, #16
 8006686:	f7fe f99f 	bl	80049c8 <_printf_i>
 800668a:	e7eb      	b.n	8006664 <_svfiprintf_r+0x1c0>
 800668c:	08007fe4 	.word	0x08007fe4
 8006690:	08007fea 	.word	0x08007fea
 8006694:	08007fee 	.word	0x08007fee
 8006698:	08004489 	.word	0x08004489
 800669c:	080063f1 	.word	0x080063f1

080066a0 <__sflush_r>:
 80066a0:	898a      	ldrh	r2, [r1, #12]
 80066a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066a4:	4605      	mov	r5, r0
 80066a6:	0710      	lsls	r0, r2, #28
 80066a8:	460c      	mov	r4, r1
 80066aa:	d457      	bmi.n	800675c <__sflush_r+0xbc>
 80066ac:	684b      	ldr	r3, [r1, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dc04      	bgt.n	80066bc <__sflush_r+0x1c>
 80066b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	dc01      	bgt.n	80066bc <__sflush_r+0x1c>
 80066b8:	2000      	movs	r0, #0
 80066ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066be:	2e00      	cmp	r6, #0
 80066c0:	d0fa      	beq.n	80066b8 <__sflush_r+0x18>
 80066c2:	2300      	movs	r3, #0
 80066c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066c8:	682f      	ldr	r7, [r5, #0]
 80066ca:	6a21      	ldr	r1, [r4, #32]
 80066cc:	602b      	str	r3, [r5, #0]
 80066ce:	d032      	beq.n	8006736 <__sflush_r+0x96>
 80066d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	075a      	lsls	r2, r3, #29
 80066d6:	d505      	bpl.n	80066e4 <__sflush_r+0x44>
 80066d8:	6863      	ldr	r3, [r4, #4]
 80066da:	1ac0      	subs	r0, r0, r3
 80066dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066de:	b10b      	cbz	r3, 80066e4 <__sflush_r+0x44>
 80066e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066e2:	1ac0      	subs	r0, r0, r3
 80066e4:	2300      	movs	r3, #0
 80066e6:	4602      	mov	r2, r0
 80066e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ea:	4628      	mov	r0, r5
 80066ec:	6a21      	ldr	r1, [r4, #32]
 80066ee:	47b0      	blx	r6
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	89a3      	ldrh	r3, [r4, #12]
 80066f4:	d106      	bne.n	8006704 <__sflush_r+0x64>
 80066f6:	6829      	ldr	r1, [r5, #0]
 80066f8:	291d      	cmp	r1, #29
 80066fa:	d82b      	bhi.n	8006754 <__sflush_r+0xb4>
 80066fc:	4a28      	ldr	r2, [pc, #160]	; (80067a0 <__sflush_r+0x100>)
 80066fe:	410a      	asrs	r2, r1
 8006700:	07d6      	lsls	r6, r2, #31
 8006702:	d427      	bmi.n	8006754 <__sflush_r+0xb4>
 8006704:	2200      	movs	r2, #0
 8006706:	6062      	str	r2, [r4, #4]
 8006708:	6922      	ldr	r2, [r4, #16]
 800670a:	04d9      	lsls	r1, r3, #19
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	d504      	bpl.n	800671a <__sflush_r+0x7a>
 8006710:	1c42      	adds	r2, r0, #1
 8006712:	d101      	bne.n	8006718 <__sflush_r+0x78>
 8006714:	682b      	ldr	r3, [r5, #0]
 8006716:	b903      	cbnz	r3, 800671a <__sflush_r+0x7a>
 8006718:	6560      	str	r0, [r4, #84]	; 0x54
 800671a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800671c:	602f      	str	r7, [r5, #0]
 800671e:	2900      	cmp	r1, #0
 8006720:	d0ca      	beq.n	80066b8 <__sflush_r+0x18>
 8006722:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006726:	4299      	cmp	r1, r3
 8006728:	d002      	beq.n	8006730 <__sflush_r+0x90>
 800672a:	4628      	mov	r0, r5
 800672c:	f7ff faa0 	bl	8005c70 <_free_r>
 8006730:	2000      	movs	r0, #0
 8006732:	6360      	str	r0, [r4, #52]	; 0x34
 8006734:	e7c1      	b.n	80066ba <__sflush_r+0x1a>
 8006736:	2301      	movs	r3, #1
 8006738:	4628      	mov	r0, r5
 800673a:	47b0      	blx	r6
 800673c:	1c41      	adds	r1, r0, #1
 800673e:	d1c8      	bne.n	80066d2 <__sflush_r+0x32>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0c5      	beq.n	80066d2 <__sflush_r+0x32>
 8006746:	2b1d      	cmp	r3, #29
 8006748:	d001      	beq.n	800674e <__sflush_r+0xae>
 800674a:	2b16      	cmp	r3, #22
 800674c:	d101      	bne.n	8006752 <__sflush_r+0xb2>
 800674e:	602f      	str	r7, [r5, #0]
 8006750:	e7b2      	b.n	80066b8 <__sflush_r+0x18>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	e7ae      	b.n	80066ba <__sflush_r+0x1a>
 800675c:	690f      	ldr	r7, [r1, #16]
 800675e:	2f00      	cmp	r7, #0
 8006760:	d0aa      	beq.n	80066b8 <__sflush_r+0x18>
 8006762:	0793      	lsls	r3, r2, #30
 8006764:	bf18      	it	ne
 8006766:	2300      	movne	r3, #0
 8006768:	680e      	ldr	r6, [r1, #0]
 800676a:	bf08      	it	eq
 800676c:	694b      	ldreq	r3, [r1, #20]
 800676e:	1bf6      	subs	r6, r6, r7
 8006770:	600f      	str	r7, [r1, #0]
 8006772:	608b      	str	r3, [r1, #8]
 8006774:	2e00      	cmp	r6, #0
 8006776:	dd9f      	ble.n	80066b8 <__sflush_r+0x18>
 8006778:	4633      	mov	r3, r6
 800677a:	463a      	mov	r2, r7
 800677c:	4628      	mov	r0, r5
 800677e:	6a21      	ldr	r1, [r4, #32]
 8006780:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006784:	47e0      	blx	ip
 8006786:	2800      	cmp	r0, #0
 8006788:	dc06      	bgt.n	8006798 <__sflush_r+0xf8>
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006794:	81a3      	strh	r3, [r4, #12]
 8006796:	e790      	b.n	80066ba <__sflush_r+0x1a>
 8006798:	4407      	add	r7, r0
 800679a:	1a36      	subs	r6, r6, r0
 800679c:	e7ea      	b.n	8006774 <__sflush_r+0xd4>
 800679e:	bf00      	nop
 80067a0:	dfbffffe 	.word	0xdfbffffe

080067a4 <_fflush_r>:
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	690b      	ldr	r3, [r1, #16]
 80067a8:	4605      	mov	r5, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	b913      	cbnz	r3, 80067b4 <_fflush_r+0x10>
 80067ae:	2500      	movs	r5, #0
 80067b0:	4628      	mov	r0, r5
 80067b2:	bd38      	pop	{r3, r4, r5, pc}
 80067b4:	b118      	cbz	r0, 80067be <_fflush_r+0x1a>
 80067b6:	6a03      	ldr	r3, [r0, #32]
 80067b8:	b90b      	cbnz	r3, 80067be <_fflush_r+0x1a>
 80067ba:	f7fe fab3 	bl	8004d24 <__sinit>
 80067be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f3      	beq.n	80067ae <_fflush_r+0xa>
 80067c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c8:	07d0      	lsls	r0, r2, #31
 80067ca:	d404      	bmi.n	80067d6 <_fflush_r+0x32>
 80067cc:	0599      	lsls	r1, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_fflush_r+0x32>
 80067d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067d2:	f7fe fbce 	bl	8004f72 <__retarget_lock_acquire_recursive>
 80067d6:	4628      	mov	r0, r5
 80067d8:	4621      	mov	r1, r4
 80067da:	f7ff ff61 	bl	80066a0 <__sflush_r>
 80067de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067e0:	4605      	mov	r5, r0
 80067e2:	07da      	lsls	r2, r3, #31
 80067e4:	d4e4      	bmi.n	80067b0 <_fflush_r+0xc>
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	059b      	lsls	r3, r3, #22
 80067ea:	d4e1      	bmi.n	80067b0 <_fflush_r+0xc>
 80067ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ee:	f7fe fbc1 	bl	8004f74 <__retarget_lock_release_recursive>
 80067f2:	e7dd      	b.n	80067b0 <_fflush_r+0xc>

080067f4 <memmove>:
 80067f4:	4288      	cmp	r0, r1
 80067f6:	b510      	push	{r4, lr}
 80067f8:	eb01 0402 	add.w	r4, r1, r2
 80067fc:	d902      	bls.n	8006804 <memmove+0x10>
 80067fe:	4284      	cmp	r4, r0
 8006800:	4623      	mov	r3, r4
 8006802:	d807      	bhi.n	8006814 <memmove+0x20>
 8006804:	1e43      	subs	r3, r0, #1
 8006806:	42a1      	cmp	r1, r4
 8006808:	d008      	beq.n	800681c <memmove+0x28>
 800680a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800680e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006812:	e7f8      	b.n	8006806 <memmove+0x12>
 8006814:	4601      	mov	r1, r0
 8006816:	4402      	add	r2, r0
 8006818:	428a      	cmp	r2, r1
 800681a:	d100      	bne.n	800681e <memmove+0x2a>
 800681c:	bd10      	pop	{r4, pc}
 800681e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006822:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006826:	e7f7      	b.n	8006818 <memmove+0x24>

08006828 <memcpy>:
 8006828:	440a      	add	r2, r1
 800682a:	4291      	cmp	r1, r2
 800682c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006830:	d100      	bne.n	8006834 <memcpy+0xc>
 8006832:	4770      	bx	lr
 8006834:	b510      	push	{r4, lr}
 8006836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800683a:	4291      	cmp	r1, r2
 800683c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006840:	d1f9      	bne.n	8006836 <memcpy+0xe>
 8006842:	bd10      	pop	{r4, pc}

08006844 <__assert_func>:
 8006844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006846:	4614      	mov	r4, r2
 8006848:	461a      	mov	r2, r3
 800684a:	4b09      	ldr	r3, [pc, #36]	; (8006870 <__assert_func+0x2c>)
 800684c:	4605      	mov	r5, r0
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68d8      	ldr	r0, [r3, #12]
 8006852:	b14c      	cbz	r4, 8006868 <__assert_func+0x24>
 8006854:	4b07      	ldr	r3, [pc, #28]	; (8006874 <__assert_func+0x30>)
 8006856:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800685a:	9100      	str	r1, [sp, #0]
 800685c:	462b      	mov	r3, r5
 800685e:	4906      	ldr	r1, [pc, #24]	; (8006878 <__assert_func+0x34>)
 8006860:	f000 f870 	bl	8006944 <fiprintf>
 8006864:	f000 f880 	bl	8006968 <abort>
 8006868:	4b04      	ldr	r3, [pc, #16]	; (800687c <__assert_func+0x38>)
 800686a:	461c      	mov	r4, r3
 800686c:	e7f3      	b.n	8006856 <__assert_func+0x12>
 800686e:	bf00      	nop
 8006870:	20000074 	.word	0x20000074
 8006874:	08007fff 	.word	0x08007fff
 8006878:	0800800c 	.word	0x0800800c
 800687c:	0800803a 	.word	0x0800803a

08006880 <_calloc_r>:
 8006880:	b570      	push	{r4, r5, r6, lr}
 8006882:	fba1 5402 	umull	r5, r4, r1, r2
 8006886:	b934      	cbnz	r4, 8006896 <_calloc_r+0x16>
 8006888:	4629      	mov	r1, r5
 800688a:	f7fd fcd5 	bl	8004238 <_malloc_r>
 800688e:	4606      	mov	r6, r0
 8006890:	b928      	cbnz	r0, 800689e <_calloc_r+0x1e>
 8006892:	4630      	mov	r0, r6
 8006894:	bd70      	pop	{r4, r5, r6, pc}
 8006896:	220c      	movs	r2, #12
 8006898:	2600      	movs	r6, #0
 800689a:	6002      	str	r2, [r0, #0]
 800689c:	e7f9      	b.n	8006892 <_calloc_r+0x12>
 800689e:	462a      	mov	r2, r5
 80068a0:	4621      	mov	r1, r4
 80068a2:	f7fe fad8 	bl	8004e56 <memset>
 80068a6:	e7f4      	b.n	8006892 <_calloc_r+0x12>

080068a8 <__ascii_mbtowc>:
 80068a8:	b082      	sub	sp, #8
 80068aa:	b901      	cbnz	r1, 80068ae <__ascii_mbtowc+0x6>
 80068ac:	a901      	add	r1, sp, #4
 80068ae:	b142      	cbz	r2, 80068c2 <__ascii_mbtowc+0x1a>
 80068b0:	b14b      	cbz	r3, 80068c6 <__ascii_mbtowc+0x1e>
 80068b2:	7813      	ldrb	r3, [r2, #0]
 80068b4:	600b      	str	r3, [r1, #0]
 80068b6:	7812      	ldrb	r2, [r2, #0]
 80068b8:	1e10      	subs	r0, r2, #0
 80068ba:	bf18      	it	ne
 80068bc:	2001      	movne	r0, #1
 80068be:	b002      	add	sp, #8
 80068c0:	4770      	bx	lr
 80068c2:	4610      	mov	r0, r2
 80068c4:	e7fb      	b.n	80068be <__ascii_mbtowc+0x16>
 80068c6:	f06f 0001 	mvn.w	r0, #1
 80068ca:	e7f8      	b.n	80068be <__ascii_mbtowc+0x16>

080068cc <_realloc_r>:
 80068cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d0:	4680      	mov	r8, r0
 80068d2:	4614      	mov	r4, r2
 80068d4:	460e      	mov	r6, r1
 80068d6:	b921      	cbnz	r1, 80068e2 <_realloc_r+0x16>
 80068d8:	4611      	mov	r1, r2
 80068da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068de:	f7fd bcab 	b.w	8004238 <_malloc_r>
 80068e2:	b92a      	cbnz	r2, 80068f0 <_realloc_r+0x24>
 80068e4:	f7ff f9c4 	bl	8005c70 <_free_r>
 80068e8:	4625      	mov	r5, r4
 80068ea:	4628      	mov	r0, r5
 80068ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f0:	f000 f841 	bl	8006976 <_malloc_usable_size_r>
 80068f4:	4284      	cmp	r4, r0
 80068f6:	4607      	mov	r7, r0
 80068f8:	d802      	bhi.n	8006900 <_realloc_r+0x34>
 80068fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068fe:	d812      	bhi.n	8006926 <_realloc_r+0x5a>
 8006900:	4621      	mov	r1, r4
 8006902:	4640      	mov	r0, r8
 8006904:	f7fd fc98 	bl	8004238 <_malloc_r>
 8006908:	4605      	mov	r5, r0
 800690a:	2800      	cmp	r0, #0
 800690c:	d0ed      	beq.n	80068ea <_realloc_r+0x1e>
 800690e:	42bc      	cmp	r4, r7
 8006910:	4622      	mov	r2, r4
 8006912:	4631      	mov	r1, r6
 8006914:	bf28      	it	cs
 8006916:	463a      	movcs	r2, r7
 8006918:	f7ff ff86 	bl	8006828 <memcpy>
 800691c:	4631      	mov	r1, r6
 800691e:	4640      	mov	r0, r8
 8006920:	f7ff f9a6 	bl	8005c70 <_free_r>
 8006924:	e7e1      	b.n	80068ea <_realloc_r+0x1e>
 8006926:	4635      	mov	r5, r6
 8006928:	e7df      	b.n	80068ea <_realloc_r+0x1e>

0800692a <__ascii_wctomb>:
 800692a:	4603      	mov	r3, r0
 800692c:	4608      	mov	r0, r1
 800692e:	b141      	cbz	r1, 8006942 <__ascii_wctomb+0x18>
 8006930:	2aff      	cmp	r2, #255	; 0xff
 8006932:	d904      	bls.n	800693e <__ascii_wctomb+0x14>
 8006934:	228a      	movs	r2, #138	; 0x8a
 8006936:	f04f 30ff 	mov.w	r0, #4294967295
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	4770      	bx	lr
 800693e:	2001      	movs	r0, #1
 8006940:	700a      	strb	r2, [r1, #0]
 8006942:	4770      	bx	lr

08006944 <fiprintf>:
 8006944:	b40e      	push	{r1, r2, r3}
 8006946:	b503      	push	{r0, r1, lr}
 8006948:	4601      	mov	r1, r0
 800694a:	ab03      	add	r3, sp, #12
 800694c:	4805      	ldr	r0, [pc, #20]	; (8006964 <fiprintf+0x20>)
 800694e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006952:	6800      	ldr	r0, [r0, #0]
 8006954:	9301      	str	r3, [sp, #4]
 8006956:	f000 f83d 	bl	80069d4 <_vfiprintf_r>
 800695a:	b002      	add	sp, #8
 800695c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006960:	b003      	add	sp, #12
 8006962:	4770      	bx	lr
 8006964:	20000074 	.word	0x20000074

08006968 <abort>:
 8006968:	2006      	movs	r0, #6
 800696a:	b508      	push	{r3, lr}
 800696c:	f000 fa0a 	bl	8006d84 <raise>
 8006970:	2001      	movs	r0, #1
 8006972:	f7fa ffd8 	bl	8001926 <_exit>

08006976 <_malloc_usable_size_r>:
 8006976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697a:	1f18      	subs	r0, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfbc      	itt	lt
 8006980:	580b      	ldrlt	r3, [r1, r0]
 8006982:	18c0      	addlt	r0, r0, r3
 8006984:	4770      	bx	lr

08006986 <__sfputc_r>:
 8006986:	6893      	ldr	r3, [r2, #8]
 8006988:	b410      	push	{r4}
 800698a:	3b01      	subs	r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	6093      	str	r3, [r2, #8]
 8006990:	da07      	bge.n	80069a2 <__sfputc_r+0x1c>
 8006992:	6994      	ldr	r4, [r2, #24]
 8006994:	42a3      	cmp	r3, r4
 8006996:	db01      	blt.n	800699c <__sfputc_r+0x16>
 8006998:	290a      	cmp	r1, #10
 800699a:	d102      	bne.n	80069a2 <__sfputc_r+0x1c>
 800699c:	bc10      	pop	{r4}
 800699e:	f000 b933 	b.w	8006c08 <__swbuf_r>
 80069a2:	6813      	ldr	r3, [r2, #0]
 80069a4:	1c58      	adds	r0, r3, #1
 80069a6:	6010      	str	r0, [r2, #0]
 80069a8:	7019      	strb	r1, [r3, #0]
 80069aa:	4608      	mov	r0, r1
 80069ac:	bc10      	pop	{r4}
 80069ae:	4770      	bx	lr

080069b0 <__sfputs_r>:
 80069b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b2:	4606      	mov	r6, r0
 80069b4:	460f      	mov	r7, r1
 80069b6:	4614      	mov	r4, r2
 80069b8:	18d5      	adds	r5, r2, r3
 80069ba:	42ac      	cmp	r4, r5
 80069bc:	d101      	bne.n	80069c2 <__sfputs_r+0x12>
 80069be:	2000      	movs	r0, #0
 80069c0:	e007      	b.n	80069d2 <__sfputs_r+0x22>
 80069c2:	463a      	mov	r2, r7
 80069c4:	4630      	mov	r0, r6
 80069c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ca:	f7ff ffdc 	bl	8006986 <__sfputc_r>
 80069ce:	1c43      	adds	r3, r0, #1
 80069d0:	d1f3      	bne.n	80069ba <__sfputs_r+0xa>
 80069d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069d4 <_vfiprintf_r>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	460d      	mov	r5, r1
 80069da:	4614      	mov	r4, r2
 80069dc:	4698      	mov	r8, r3
 80069de:	4606      	mov	r6, r0
 80069e0:	b09d      	sub	sp, #116	; 0x74
 80069e2:	b118      	cbz	r0, 80069ec <_vfiprintf_r+0x18>
 80069e4:	6a03      	ldr	r3, [r0, #32]
 80069e6:	b90b      	cbnz	r3, 80069ec <_vfiprintf_r+0x18>
 80069e8:	f7fe f99c 	bl	8004d24 <__sinit>
 80069ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069ee:	07d9      	lsls	r1, r3, #31
 80069f0:	d405      	bmi.n	80069fe <_vfiprintf_r+0x2a>
 80069f2:	89ab      	ldrh	r3, [r5, #12]
 80069f4:	059a      	lsls	r2, r3, #22
 80069f6:	d402      	bmi.n	80069fe <_vfiprintf_r+0x2a>
 80069f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069fa:	f7fe faba 	bl	8004f72 <__retarget_lock_acquire_recursive>
 80069fe:	89ab      	ldrh	r3, [r5, #12]
 8006a00:	071b      	lsls	r3, r3, #28
 8006a02:	d501      	bpl.n	8006a08 <_vfiprintf_r+0x34>
 8006a04:	692b      	ldr	r3, [r5, #16]
 8006a06:	b99b      	cbnz	r3, 8006a30 <_vfiprintf_r+0x5c>
 8006a08:	4629      	mov	r1, r5
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f000 f93a 	bl	8006c84 <__swsetup_r>
 8006a10:	b170      	cbz	r0, 8006a30 <_vfiprintf_r+0x5c>
 8006a12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a14:	07dc      	lsls	r4, r3, #31
 8006a16:	d504      	bpl.n	8006a22 <_vfiprintf_r+0x4e>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	b01d      	add	sp, #116	; 0x74
 8006a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a22:	89ab      	ldrh	r3, [r5, #12]
 8006a24:	0598      	lsls	r0, r3, #22
 8006a26:	d4f7      	bmi.n	8006a18 <_vfiprintf_r+0x44>
 8006a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a2a:	f7fe faa3 	bl	8004f74 <__retarget_lock_release_recursive>
 8006a2e:	e7f3      	b.n	8006a18 <_vfiprintf_r+0x44>
 8006a30:	2300      	movs	r3, #0
 8006a32:	9309      	str	r3, [sp, #36]	; 0x24
 8006a34:	2320      	movs	r3, #32
 8006a36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a3a:	2330      	movs	r3, #48	; 0x30
 8006a3c:	f04f 0901 	mov.w	r9, #1
 8006a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a44:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006bf4 <_vfiprintf_r+0x220>
 8006a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a4c:	4623      	mov	r3, r4
 8006a4e:	469a      	mov	sl, r3
 8006a50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a54:	b10a      	cbz	r2, 8006a5a <_vfiprintf_r+0x86>
 8006a56:	2a25      	cmp	r2, #37	; 0x25
 8006a58:	d1f9      	bne.n	8006a4e <_vfiprintf_r+0x7a>
 8006a5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006a5e:	d00b      	beq.n	8006a78 <_vfiprintf_r+0xa4>
 8006a60:	465b      	mov	r3, fp
 8006a62:	4622      	mov	r2, r4
 8006a64:	4629      	mov	r1, r5
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff ffa2 	bl	80069b0 <__sfputs_r>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	f000 80a9 	beq.w	8006bc4 <_vfiprintf_r+0x1f0>
 8006a72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a74:	445a      	add	r2, fp
 8006a76:	9209      	str	r2, [sp, #36]	; 0x24
 8006a78:	f89a 3000 	ldrb.w	r3, [sl]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f000 80a1 	beq.w	8006bc4 <_vfiprintf_r+0x1f0>
 8006a82:	2300      	movs	r3, #0
 8006a84:	f04f 32ff 	mov.w	r2, #4294967295
 8006a88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a8c:	f10a 0a01 	add.w	sl, sl, #1
 8006a90:	9304      	str	r3, [sp, #16]
 8006a92:	9307      	str	r3, [sp, #28]
 8006a94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a98:	931a      	str	r3, [sp, #104]	; 0x68
 8006a9a:	4654      	mov	r4, sl
 8006a9c:	2205      	movs	r2, #5
 8006a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa2:	4854      	ldr	r0, [pc, #336]	; (8006bf4 <_vfiprintf_r+0x220>)
 8006aa4:	f7fe fa67 	bl	8004f76 <memchr>
 8006aa8:	9a04      	ldr	r2, [sp, #16]
 8006aaa:	b9d8      	cbnz	r0, 8006ae4 <_vfiprintf_r+0x110>
 8006aac:	06d1      	lsls	r1, r2, #27
 8006aae:	bf44      	itt	mi
 8006ab0:	2320      	movmi	r3, #32
 8006ab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ab6:	0713      	lsls	r3, r2, #28
 8006ab8:	bf44      	itt	mi
 8006aba:	232b      	movmi	r3, #43	; 0x2b
 8006abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8006ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ac6:	d015      	beq.n	8006af4 <_vfiprintf_r+0x120>
 8006ac8:	4654      	mov	r4, sl
 8006aca:	2000      	movs	r0, #0
 8006acc:	f04f 0c0a 	mov.w	ip, #10
 8006ad0:	9a07      	ldr	r2, [sp, #28]
 8006ad2:	4621      	mov	r1, r4
 8006ad4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ad8:	3b30      	subs	r3, #48	; 0x30
 8006ada:	2b09      	cmp	r3, #9
 8006adc:	d94d      	bls.n	8006b7a <_vfiprintf_r+0x1a6>
 8006ade:	b1b0      	cbz	r0, 8006b0e <_vfiprintf_r+0x13a>
 8006ae0:	9207      	str	r2, [sp, #28]
 8006ae2:	e014      	b.n	8006b0e <_vfiprintf_r+0x13a>
 8006ae4:	eba0 0308 	sub.w	r3, r0, r8
 8006ae8:	fa09 f303 	lsl.w	r3, r9, r3
 8006aec:	4313      	orrs	r3, r2
 8006aee:	46a2      	mov	sl, r4
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	e7d2      	b.n	8006a9a <_vfiprintf_r+0xc6>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	1d19      	adds	r1, r3, #4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	9103      	str	r1, [sp, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bfbb      	ittet	lt
 8006b00:	425b      	neglt	r3, r3
 8006b02:	f042 0202 	orrlt.w	r2, r2, #2
 8006b06:	9307      	strge	r3, [sp, #28]
 8006b08:	9307      	strlt	r3, [sp, #28]
 8006b0a:	bfb8      	it	lt
 8006b0c:	9204      	strlt	r2, [sp, #16]
 8006b0e:	7823      	ldrb	r3, [r4, #0]
 8006b10:	2b2e      	cmp	r3, #46	; 0x2e
 8006b12:	d10c      	bne.n	8006b2e <_vfiprintf_r+0x15a>
 8006b14:	7863      	ldrb	r3, [r4, #1]
 8006b16:	2b2a      	cmp	r3, #42	; 0x2a
 8006b18:	d134      	bne.n	8006b84 <_vfiprintf_r+0x1b0>
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	3402      	adds	r4, #2
 8006b1e:	1d1a      	adds	r2, r3, #4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	9203      	str	r2, [sp, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfb8      	it	lt
 8006b28:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b2c:	9305      	str	r3, [sp, #20]
 8006b2e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006bf8 <_vfiprintf_r+0x224>
 8006b32:	2203      	movs	r2, #3
 8006b34:	4650      	mov	r0, sl
 8006b36:	7821      	ldrb	r1, [r4, #0]
 8006b38:	f7fe fa1d 	bl	8004f76 <memchr>
 8006b3c:	b138      	cbz	r0, 8006b4e <_vfiprintf_r+0x17a>
 8006b3e:	2240      	movs	r2, #64	; 0x40
 8006b40:	9b04      	ldr	r3, [sp, #16]
 8006b42:	eba0 000a 	sub.w	r0, r0, sl
 8006b46:	4082      	lsls	r2, r0
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	3401      	adds	r4, #1
 8006b4c:	9304      	str	r3, [sp, #16]
 8006b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b52:	2206      	movs	r2, #6
 8006b54:	4829      	ldr	r0, [pc, #164]	; (8006bfc <_vfiprintf_r+0x228>)
 8006b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b5a:	f7fe fa0c 	bl	8004f76 <memchr>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d03f      	beq.n	8006be2 <_vfiprintf_r+0x20e>
 8006b62:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <_vfiprintf_r+0x22c>)
 8006b64:	bb1b      	cbnz	r3, 8006bae <_vfiprintf_r+0x1da>
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	3307      	adds	r3, #7
 8006b6a:	f023 0307 	bic.w	r3, r3, #7
 8006b6e:	3308      	adds	r3, #8
 8006b70:	9303      	str	r3, [sp, #12]
 8006b72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b74:	443b      	add	r3, r7
 8006b76:	9309      	str	r3, [sp, #36]	; 0x24
 8006b78:	e768      	b.n	8006a4c <_vfiprintf_r+0x78>
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b82:	e7a6      	b.n	8006ad2 <_vfiprintf_r+0xfe>
 8006b84:	2300      	movs	r3, #0
 8006b86:	f04f 0c0a 	mov.w	ip, #10
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	3401      	adds	r4, #1
 8006b8e:	9305      	str	r3, [sp, #20]
 8006b90:	4620      	mov	r0, r4
 8006b92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b96:	3a30      	subs	r2, #48	; 0x30
 8006b98:	2a09      	cmp	r2, #9
 8006b9a:	d903      	bls.n	8006ba4 <_vfiprintf_r+0x1d0>
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d0c6      	beq.n	8006b2e <_vfiprintf_r+0x15a>
 8006ba0:	9105      	str	r1, [sp, #20]
 8006ba2:	e7c4      	b.n	8006b2e <_vfiprintf_r+0x15a>
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bac:	e7f0      	b.n	8006b90 <_vfiprintf_r+0x1bc>
 8006bae:	ab03      	add	r3, sp, #12
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	462a      	mov	r2, r5
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4b13      	ldr	r3, [pc, #76]	; (8006c04 <_vfiprintf_r+0x230>)
 8006bb8:	a904      	add	r1, sp, #16
 8006bba:	f7fd fc65 	bl	8004488 <_printf_float>
 8006bbe:	4607      	mov	r7, r0
 8006bc0:	1c78      	adds	r0, r7, #1
 8006bc2:	d1d6      	bne.n	8006b72 <_vfiprintf_r+0x19e>
 8006bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bc6:	07d9      	lsls	r1, r3, #31
 8006bc8:	d405      	bmi.n	8006bd6 <_vfiprintf_r+0x202>
 8006bca:	89ab      	ldrh	r3, [r5, #12]
 8006bcc:	059a      	lsls	r2, r3, #22
 8006bce:	d402      	bmi.n	8006bd6 <_vfiprintf_r+0x202>
 8006bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bd2:	f7fe f9cf 	bl	8004f74 <__retarget_lock_release_recursive>
 8006bd6:	89ab      	ldrh	r3, [r5, #12]
 8006bd8:	065b      	lsls	r3, r3, #25
 8006bda:	f53f af1d 	bmi.w	8006a18 <_vfiprintf_r+0x44>
 8006bde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006be0:	e71c      	b.n	8006a1c <_vfiprintf_r+0x48>
 8006be2:	ab03      	add	r3, sp, #12
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	462a      	mov	r2, r5
 8006be8:	4630      	mov	r0, r6
 8006bea:	4b06      	ldr	r3, [pc, #24]	; (8006c04 <_vfiprintf_r+0x230>)
 8006bec:	a904      	add	r1, sp, #16
 8006bee:	f7fd feeb 	bl	80049c8 <_printf_i>
 8006bf2:	e7e4      	b.n	8006bbe <_vfiprintf_r+0x1ea>
 8006bf4:	08007fe4 	.word	0x08007fe4
 8006bf8:	08007fea 	.word	0x08007fea
 8006bfc:	08007fee 	.word	0x08007fee
 8006c00:	08004489 	.word	0x08004489
 8006c04:	080069b1 	.word	0x080069b1

08006c08 <__swbuf_r>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	460e      	mov	r6, r1
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	4605      	mov	r5, r0
 8006c10:	b118      	cbz	r0, 8006c1a <__swbuf_r+0x12>
 8006c12:	6a03      	ldr	r3, [r0, #32]
 8006c14:	b90b      	cbnz	r3, 8006c1a <__swbuf_r+0x12>
 8006c16:	f7fe f885 	bl	8004d24 <__sinit>
 8006c1a:	69a3      	ldr	r3, [r4, #24]
 8006c1c:	60a3      	str	r3, [r4, #8]
 8006c1e:	89a3      	ldrh	r3, [r4, #12]
 8006c20:	071a      	lsls	r2, r3, #28
 8006c22:	d525      	bpl.n	8006c70 <__swbuf_r+0x68>
 8006c24:	6923      	ldr	r3, [r4, #16]
 8006c26:	b31b      	cbz	r3, 8006c70 <__swbuf_r+0x68>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	6922      	ldr	r2, [r4, #16]
 8006c2c:	b2f6      	uxtb	r6, r6
 8006c2e:	1a98      	subs	r0, r3, r2
 8006c30:	6963      	ldr	r3, [r4, #20]
 8006c32:	4637      	mov	r7, r6
 8006c34:	4283      	cmp	r3, r0
 8006c36:	dc04      	bgt.n	8006c42 <__swbuf_r+0x3a>
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f7ff fdb2 	bl	80067a4 <_fflush_r>
 8006c40:	b9e0      	cbnz	r0, 8006c7c <__swbuf_r+0x74>
 8006c42:	68a3      	ldr	r3, [r4, #8]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	60a3      	str	r3, [r4, #8]
 8006c48:	6823      	ldr	r3, [r4, #0]
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	6022      	str	r2, [r4, #0]
 8006c4e:	701e      	strb	r6, [r3, #0]
 8006c50:	6962      	ldr	r2, [r4, #20]
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d004      	beq.n	8006c62 <__swbuf_r+0x5a>
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	07db      	lsls	r3, r3, #31
 8006c5c:	d506      	bpl.n	8006c6c <__swbuf_r+0x64>
 8006c5e:	2e0a      	cmp	r6, #10
 8006c60:	d104      	bne.n	8006c6c <__swbuf_r+0x64>
 8006c62:	4621      	mov	r1, r4
 8006c64:	4628      	mov	r0, r5
 8006c66:	f7ff fd9d 	bl	80067a4 <_fflush_r>
 8006c6a:	b938      	cbnz	r0, 8006c7c <__swbuf_r+0x74>
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f806 	bl	8006c84 <__swsetup_r>
 8006c78:	2800      	cmp	r0, #0
 8006c7a:	d0d5      	beq.n	8006c28 <__swbuf_r+0x20>
 8006c7c:	f04f 37ff 	mov.w	r7, #4294967295
 8006c80:	e7f4      	b.n	8006c6c <__swbuf_r+0x64>
	...

08006c84 <__swsetup_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <__swsetup_r+0xac>)
 8006c88:	4605      	mov	r5, r0
 8006c8a:	6818      	ldr	r0, [r3, #0]
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	b118      	cbz	r0, 8006c98 <__swsetup_r+0x14>
 8006c90:	6a03      	ldr	r3, [r0, #32]
 8006c92:	b90b      	cbnz	r3, 8006c98 <__swsetup_r+0x14>
 8006c94:	f7fe f846 	bl	8004d24 <__sinit>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c9e:	0718      	lsls	r0, r3, #28
 8006ca0:	d422      	bmi.n	8006ce8 <__swsetup_r+0x64>
 8006ca2:	06d9      	lsls	r1, r3, #27
 8006ca4:	d407      	bmi.n	8006cb6 <__swsetup_r+0x32>
 8006ca6:	2309      	movs	r3, #9
 8006ca8:	602b      	str	r3, [r5, #0]
 8006caa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb2:	81a3      	strh	r3, [r4, #12]
 8006cb4:	e034      	b.n	8006d20 <__swsetup_r+0x9c>
 8006cb6:	0758      	lsls	r0, r3, #29
 8006cb8:	d512      	bpl.n	8006ce0 <__swsetup_r+0x5c>
 8006cba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cbc:	b141      	cbz	r1, 8006cd0 <__swsetup_r+0x4c>
 8006cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cc2:	4299      	cmp	r1, r3
 8006cc4:	d002      	beq.n	8006ccc <__swsetup_r+0x48>
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f7fe ffd2 	bl	8005c70 <_free_r>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	6363      	str	r3, [r4, #52]	; 0x34
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	2300      	movs	r3, #0
 8006cda:	6063      	str	r3, [r4, #4]
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	6023      	str	r3, [r4, #0]
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	f043 0308 	orr.w	r3, r3, #8
 8006ce6:	81a3      	strh	r3, [r4, #12]
 8006ce8:	6923      	ldr	r3, [r4, #16]
 8006cea:	b94b      	cbnz	r3, 8006d00 <__swsetup_r+0x7c>
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf6:	d003      	beq.n	8006d00 <__swsetup_r+0x7c>
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	f000 f883 	bl	8006e06 <__smakebuf_r>
 8006d00:	89a0      	ldrh	r0, [r4, #12]
 8006d02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d06:	f010 0301 	ands.w	r3, r0, #1
 8006d0a:	d00a      	beq.n	8006d22 <__swsetup_r+0x9e>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60a3      	str	r3, [r4, #8]
 8006d10:	6963      	ldr	r3, [r4, #20]
 8006d12:	425b      	negs	r3, r3
 8006d14:	61a3      	str	r3, [r4, #24]
 8006d16:	6923      	ldr	r3, [r4, #16]
 8006d18:	b943      	cbnz	r3, 8006d2c <__swsetup_r+0xa8>
 8006d1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d1e:	d1c4      	bne.n	8006caa <__swsetup_r+0x26>
 8006d20:	bd38      	pop	{r3, r4, r5, pc}
 8006d22:	0781      	lsls	r1, r0, #30
 8006d24:	bf58      	it	pl
 8006d26:	6963      	ldrpl	r3, [r4, #20]
 8006d28:	60a3      	str	r3, [r4, #8]
 8006d2a:	e7f4      	b.n	8006d16 <__swsetup_r+0x92>
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	e7f7      	b.n	8006d20 <__swsetup_r+0x9c>
 8006d30:	20000074 	.word	0x20000074

08006d34 <_raise_r>:
 8006d34:	291f      	cmp	r1, #31
 8006d36:	b538      	push	{r3, r4, r5, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	d904      	bls.n	8006d48 <_raise_r+0x14>
 8006d3e:	2316      	movs	r3, #22
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	f04f 30ff 	mov.w	r0, #4294967295
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006d4a:	b112      	cbz	r2, 8006d52 <_raise_r+0x1e>
 8006d4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d50:	b94b      	cbnz	r3, 8006d66 <_raise_r+0x32>
 8006d52:	4620      	mov	r0, r4
 8006d54:	f000 f830 	bl	8006db8 <_getpid_r>
 8006d58:	462a      	mov	r2, r5
 8006d5a:	4601      	mov	r1, r0
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d62:	f000 b817 	b.w	8006d94 <_kill_r>
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d00a      	beq.n	8006d80 <_raise_r+0x4c>
 8006d6a:	1c59      	adds	r1, r3, #1
 8006d6c:	d103      	bne.n	8006d76 <_raise_r+0x42>
 8006d6e:	2316      	movs	r3, #22
 8006d70:	6003      	str	r3, [r0, #0]
 8006d72:	2001      	movs	r0, #1
 8006d74:	e7e7      	b.n	8006d46 <_raise_r+0x12>
 8006d76:	2400      	movs	r4, #0
 8006d78:	4628      	mov	r0, r5
 8006d7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d7e:	4798      	blx	r3
 8006d80:	2000      	movs	r0, #0
 8006d82:	e7e0      	b.n	8006d46 <_raise_r+0x12>

08006d84 <raise>:
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <raise+0xc>)
 8006d86:	4601      	mov	r1, r0
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f7ff bfd3 	b.w	8006d34 <_raise_r>
 8006d8e:	bf00      	nop
 8006d90:	20000074 	.word	0x20000074

08006d94 <_kill_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	2300      	movs	r3, #0
 8006d98:	4d06      	ldr	r5, [pc, #24]	; (8006db4 <_kill_r+0x20>)
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	4611      	mov	r1, r2
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	f7fa fdb0 	bl	8001906 <_kill>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	d102      	bne.n	8006db0 <_kill_r+0x1c>
 8006daa:	682b      	ldr	r3, [r5, #0]
 8006dac:	b103      	cbz	r3, 8006db0 <_kill_r+0x1c>
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	bd38      	pop	{r3, r4, r5, pc}
 8006db2:	bf00      	nop
 8006db4:	20000434 	.word	0x20000434

08006db8 <_getpid_r>:
 8006db8:	f7fa bd9e 	b.w	80018f8 <_getpid>

08006dbc <__swhatbuf_r>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	4615      	mov	r5, r2
 8006dc6:	2900      	cmp	r1, #0
 8006dc8:	461e      	mov	r6, r3
 8006dca:	b096      	sub	sp, #88	; 0x58
 8006dcc:	da0c      	bge.n	8006de8 <__swhatbuf_r+0x2c>
 8006dce:	89a3      	ldrh	r3, [r4, #12]
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006dd6:	bf0c      	ite	eq
 8006dd8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006ddc:	2340      	movne	r3, #64	; 0x40
 8006dde:	2000      	movs	r0, #0
 8006de0:	6031      	str	r1, [r6, #0]
 8006de2:	602b      	str	r3, [r5, #0]
 8006de4:	b016      	add	sp, #88	; 0x58
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	466a      	mov	r2, sp
 8006dea:	f000 f849 	bl	8006e80 <_fstat_r>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	dbed      	blt.n	8006dce <__swhatbuf_r+0x12>
 8006df2:	9901      	ldr	r1, [sp, #4]
 8006df4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006df8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006dfc:	4259      	negs	r1, r3
 8006dfe:	4159      	adcs	r1, r3
 8006e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e04:	e7eb      	b.n	8006dde <__swhatbuf_r+0x22>

08006e06 <__smakebuf_r>:
 8006e06:	898b      	ldrh	r3, [r1, #12]
 8006e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e0a:	079d      	lsls	r5, r3, #30
 8006e0c:	4606      	mov	r6, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	d507      	bpl.n	8006e22 <__smakebuf_r+0x1c>
 8006e12:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	6123      	str	r3, [r4, #16]
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	6163      	str	r3, [r4, #20]
 8006e1e:	b002      	add	sp, #8
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
 8006e22:	466a      	mov	r2, sp
 8006e24:	ab01      	add	r3, sp, #4
 8006e26:	f7ff ffc9 	bl	8006dbc <__swhatbuf_r>
 8006e2a:	9900      	ldr	r1, [sp, #0]
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7fd fa02 	bl	8004238 <_malloc_r>
 8006e34:	b948      	cbnz	r0, 8006e4a <__smakebuf_r+0x44>
 8006e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3a:	059a      	lsls	r2, r3, #22
 8006e3c:	d4ef      	bmi.n	8006e1e <__smakebuf_r+0x18>
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	f043 0302 	orr.w	r3, r3, #2
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	e7e3      	b.n	8006e12 <__smakebuf_r+0xc>
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	6020      	str	r0, [r4, #0]
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	9b00      	ldr	r3, [sp, #0]
 8006e56:	6120      	str	r0, [r4, #16]
 8006e58:	6163      	str	r3, [r4, #20]
 8006e5a:	9b01      	ldr	r3, [sp, #4]
 8006e5c:	b15b      	cbz	r3, 8006e76 <__smakebuf_r+0x70>
 8006e5e:	4630      	mov	r0, r6
 8006e60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e64:	f000 f81e 	bl	8006ea4 <_isatty_r>
 8006e68:	b128      	cbz	r0, 8006e76 <__smakebuf_r+0x70>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	f023 0303 	bic.w	r3, r3, #3
 8006e70:	f043 0301 	orr.w	r3, r3, #1
 8006e74:	81a3      	strh	r3, [r4, #12]
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	431d      	orrs	r5, r3
 8006e7a:	81a5      	strh	r5, [r4, #12]
 8006e7c:	e7cf      	b.n	8006e1e <__smakebuf_r+0x18>
	...

08006e80 <_fstat_r>:
 8006e80:	b538      	push	{r3, r4, r5, lr}
 8006e82:	2300      	movs	r3, #0
 8006e84:	4d06      	ldr	r5, [pc, #24]	; (8006ea0 <_fstat_r+0x20>)
 8006e86:	4604      	mov	r4, r0
 8006e88:	4608      	mov	r0, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	602b      	str	r3, [r5, #0]
 8006e8e:	f7fa fd98 	bl	80019c2 <_fstat>
 8006e92:	1c43      	adds	r3, r0, #1
 8006e94:	d102      	bne.n	8006e9c <_fstat_r+0x1c>
 8006e96:	682b      	ldr	r3, [r5, #0]
 8006e98:	b103      	cbz	r3, 8006e9c <_fstat_r+0x1c>
 8006e9a:	6023      	str	r3, [r4, #0]
 8006e9c:	bd38      	pop	{r3, r4, r5, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000434 	.word	0x20000434

08006ea4 <_isatty_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	4d05      	ldr	r5, [pc, #20]	; (8006ec0 <_isatty_r+0x1c>)
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	f7fa fd96 	bl	80019e0 <_isatty>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_isatty_r+0x1a>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_isatty_r+0x1a>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	20000434 	.word	0x20000434

08006ec4 <pow>:
 8006ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	4614      	mov	r4, r2
 8006eca:	461d      	mov	r5, r3
 8006ecc:	4680      	mov	r8, r0
 8006ece:	4689      	mov	r9, r1
 8006ed0:	f000 f866 	bl	8006fa0 <__ieee754_pow>
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	460f      	mov	r7, r1
 8006eda:	462b      	mov	r3, r5
 8006edc:	4620      	mov	r0, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7f9 fd94 	bl	8000a0c <__aeabi_dcmpun>
 8006ee4:	bbc8      	cbnz	r0, 8006f5a <pow+0x96>
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	2300      	movs	r3, #0
 8006eea:	4640      	mov	r0, r8
 8006eec:	4649      	mov	r1, r9
 8006eee:	f7f9 fd5b 	bl	80009a8 <__aeabi_dcmpeq>
 8006ef2:	b1b8      	cbz	r0, 8006f24 <pow+0x60>
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	4620      	mov	r0, r4
 8006efa:	4629      	mov	r1, r5
 8006efc:	f7f9 fd54 	bl	80009a8 <__aeabi_dcmpeq>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d141      	bne.n	8006f88 <pow+0xc4>
 8006f04:	4620      	mov	r0, r4
 8006f06:	4629      	mov	r1, r5
 8006f08:	f000 f844 	bl	8006f94 <finite>
 8006f0c:	b328      	cbz	r0, 8006f5a <pow+0x96>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2300      	movs	r3, #0
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 fd51 	bl	80009bc <__aeabi_dcmplt>
 8006f1a:	b1f0      	cbz	r0, 8006f5a <pow+0x96>
 8006f1c:	f7fd fffe 	bl	8004f1c <__errno>
 8006f20:	2322      	movs	r3, #34	; 0x22
 8006f22:	e019      	b.n	8006f58 <pow+0x94>
 8006f24:	4630      	mov	r0, r6
 8006f26:	4639      	mov	r1, r7
 8006f28:	f000 f834 	bl	8006f94 <finite>
 8006f2c:	b9c8      	cbnz	r0, 8006f62 <pow+0x9e>
 8006f2e:	4640      	mov	r0, r8
 8006f30:	4649      	mov	r1, r9
 8006f32:	f000 f82f 	bl	8006f94 <finite>
 8006f36:	b1a0      	cbz	r0, 8006f62 <pow+0x9e>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	f000 f82a 	bl	8006f94 <finite>
 8006f40:	b178      	cbz	r0, 8006f62 <pow+0x9e>
 8006f42:	4632      	mov	r2, r6
 8006f44:	463b      	mov	r3, r7
 8006f46:	4630      	mov	r0, r6
 8006f48:	4639      	mov	r1, r7
 8006f4a:	f7f9 fd5f 	bl	8000a0c <__aeabi_dcmpun>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0e4      	beq.n	8006f1c <pow+0x58>
 8006f52:	f7fd ffe3 	bl	8004f1c <__errno>
 8006f56:	2321      	movs	r3, #33	; 0x21
 8006f58:	6003      	str	r3, [r0, #0]
 8006f5a:	4630      	mov	r0, r6
 8006f5c:	4639      	mov	r1, r7
 8006f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f62:	2200      	movs	r2, #0
 8006f64:	2300      	movs	r3, #0
 8006f66:	4630      	mov	r0, r6
 8006f68:	4639      	mov	r1, r7
 8006f6a:	f7f9 fd1d 	bl	80009a8 <__aeabi_dcmpeq>
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d0f3      	beq.n	8006f5a <pow+0x96>
 8006f72:	4640      	mov	r0, r8
 8006f74:	4649      	mov	r1, r9
 8006f76:	f000 f80d 	bl	8006f94 <finite>
 8006f7a:	2800      	cmp	r0, #0
 8006f7c:	d0ed      	beq.n	8006f5a <pow+0x96>
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f000 f807 	bl	8006f94 <finite>
 8006f86:	e7c8      	b.n	8006f1a <pow+0x56>
 8006f88:	2600      	movs	r6, #0
 8006f8a:	4f01      	ldr	r7, [pc, #4]	; (8006f90 <pow+0xcc>)
 8006f8c:	e7e5      	b.n	8006f5a <pow+0x96>
 8006f8e:	bf00      	nop
 8006f90:	3ff00000 	.word	0x3ff00000

08006f94 <finite>:
 8006f94:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006f98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006f9c:	0fc0      	lsrs	r0, r0, #31
 8006f9e:	4770      	bx	lr

08006fa0 <__ieee754_pow>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	b093      	sub	sp, #76	; 0x4c
 8006fa6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006faa:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006fae:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006fb2:	4689      	mov	r9, r1
 8006fb4:	ea56 0102 	orrs.w	r1, r6, r2
 8006fb8:	4680      	mov	r8, r0
 8006fba:	d111      	bne.n	8006fe0 <__ieee754_pow+0x40>
 8006fbc:	1803      	adds	r3, r0, r0
 8006fbe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006fc2:	4152      	adcs	r2, r2
 8006fc4:	4299      	cmp	r1, r3
 8006fc6:	4b82      	ldr	r3, [pc, #520]	; (80071d0 <__ieee754_pow+0x230>)
 8006fc8:	4193      	sbcs	r3, r2
 8006fca:	f080 84ba 	bcs.w	8007942 <__ieee754_pow+0x9a2>
 8006fce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006fd2:	4640      	mov	r0, r8
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	f7f9 f8c9 	bl	800016c <__adddf3>
 8006fda:	4683      	mov	fp, r0
 8006fdc:	468c      	mov	ip, r1
 8006fde:	e06f      	b.n	80070c0 <__ieee754_pow+0x120>
 8006fe0:	4b7c      	ldr	r3, [pc, #496]	; (80071d4 <__ieee754_pow+0x234>)
 8006fe2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006fe6:	429c      	cmp	r4, r3
 8006fe8:	464d      	mov	r5, r9
 8006fea:	4682      	mov	sl, r0
 8006fec:	dc06      	bgt.n	8006ffc <__ieee754_pow+0x5c>
 8006fee:	d101      	bne.n	8006ff4 <__ieee754_pow+0x54>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d1ec      	bne.n	8006fce <__ieee754_pow+0x2e>
 8006ff4:	429e      	cmp	r6, r3
 8006ff6:	dc01      	bgt.n	8006ffc <__ieee754_pow+0x5c>
 8006ff8:	d10f      	bne.n	800701a <__ieee754_pow+0x7a>
 8006ffa:	b172      	cbz	r2, 800701a <__ieee754_pow+0x7a>
 8006ffc:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007000:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007004:	ea55 050a 	orrs.w	r5, r5, sl
 8007008:	d1e1      	bne.n	8006fce <__ieee754_pow+0x2e>
 800700a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800700e:	18db      	adds	r3, r3, r3
 8007010:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007014:	4152      	adcs	r2, r2
 8007016:	429d      	cmp	r5, r3
 8007018:	e7d5      	b.n	8006fc6 <__ieee754_pow+0x26>
 800701a:	2d00      	cmp	r5, #0
 800701c:	da39      	bge.n	8007092 <__ieee754_pow+0xf2>
 800701e:	4b6e      	ldr	r3, [pc, #440]	; (80071d8 <__ieee754_pow+0x238>)
 8007020:	429e      	cmp	r6, r3
 8007022:	dc52      	bgt.n	80070ca <__ieee754_pow+0x12a>
 8007024:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007028:	429e      	cmp	r6, r3
 800702a:	f340 849d 	ble.w	8007968 <__ieee754_pow+0x9c8>
 800702e:	1533      	asrs	r3, r6, #20
 8007030:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007034:	2b14      	cmp	r3, #20
 8007036:	dd0f      	ble.n	8007058 <__ieee754_pow+0xb8>
 8007038:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800703c:	fa22 f103 	lsr.w	r1, r2, r3
 8007040:	fa01 f303 	lsl.w	r3, r1, r3
 8007044:	4293      	cmp	r3, r2
 8007046:	f040 848f 	bne.w	8007968 <__ieee754_pow+0x9c8>
 800704a:	f001 0101 	and.w	r1, r1, #1
 800704e:	f1c1 0302 	rsb	r3, r1, #2
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	b182      	cbz	r2, 8007078 <__ieee754_pow+0xd8>
 8007056:	e05d      	b.n	8007114 <__ieee754_pow+0x174>
 8007058:	2a00      	cmp	r2, #0
 800705a:	d159      	bne.n	8007110 <__ieee754_pow+0x170>
 800705c:	f1c3 0314 	rsb	r3, r3, #20
 8007060:	fa46 f103 	asr.w	r1, r6, r3
 8007064:	fa01 f303 	lsl.w	r3, r1, r3
 8007068:	42b3      	cmp	r3, r6
 800706a:	f040 847a 	bne.w	8007962 <__ieee754_pow+0x9c2>
 800706e:	f001 0101 	and.w	r1, r1, #1
 8007072:	f1c1 0302 	rsb	r3, r1, #2
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	4b58      	ldr	r3, [pc, #352]	; (80071dc <__ieee754_pow+0x23c>)
 800707a:	429e      	cmp	r6, r3
 800707c:	d132      	bne.n	80070e4 <__ieee754_pow+0x144>
 800707e:	2f00      	cmp	r7, #0
 8007080:	f280 846b 	bge.w	800795a <__ieee754_pow+0x9ba>
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	2000      	movs	r0, #0
 800708a:	4954      	ldr	r1, [pc, #336]	; (80071dc <__ieee754_pow+0x23c>)
 800708c:	f7f9 fb4e 	bl	800072c <__aeabi_ddiv>
 8007090:	e7a3      	b.n	8006fda <__ieee754_pow+0x3a>
 8007092:	2300      	movs	r3, #0
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	2a00      	cmp	r2, #0
 8007098:	d13c      	bne.n	8007114 <__ieee754_pow+0x174>
 800709a:	4b4e      	ldr	r3, [pc, #312]	; (80071d4 <__ieee754_pow+0x234>)
 800709c:	429e      	cmp	r6, r3
 800709e:	d1eb      	bne.n	8007078 <__ieee754_pow+0xd8>
 80070a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80070a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80070a8:	ea53 030a 	orrs.w	r3, r3, sl
 80070ac:	f000 8449 	beq.w	8007942 <__ieee754_pow+0x9a2>
 80070b0:	4b4b      	ldr	r3, [pc, #300]	; (80071e0 <__ieee754_pow+0x240>)
 80070b2:	429c      	cmp	r4, r3
 80070b4:	dd0b      	ble.n	80070ce <__ieee754_pow+0x12e>
 80070b6:	2f00      	cmp	r7, #0
 80070b8:	f2c0 8449 	blt.w	800794e <__ieee754_pow+0x9ae>
 80070bc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80070c0:	4658      	mov	r0, fp
 80070c2:	4661      	mov	r1, ip
 80070c4:	b013      	add	sp, #76	; 0x4c
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ca:	2302      	movs	r3, #2
 80070cc:	e7e2      	b.n	8007094 <__ieee754_pow+0xf4>
 80070ce:	2f00      	cmp	r7, #0
 80070d0:	f04f 0b00 	mov.w	fp, #0
 80070d4:	f04f 0c00 	mov.w	ip, #0
 80070d8:	daf2      	bge.n	80070c0 <__ieee754_pow+0x120>
 80070da:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80070de:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80070e2:	e7ed      	b.n	80070c0 <__ieee754_pow+0x120>
 80070e4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80070e8:	d106      	bne.n	80070f8 <__ieee754_pow+0x158>
 80070ea:	4642      	mov	r2, r8
 80070ec:	464b      	mov	r3, r9
 80070ee:	4640      	mov	r0, r8
 80070f0:	4649      	mov	r1, r9
 80070f2:	f7f9 f9f1 	bl	80004d8 <__aeabi_dmul>
 80070f6:	e770      	b.n	8006fda <__ieee754_pow+0x3a>
 80070f8:	4b3a      	ldr	r3, [pc, #232]	; (80071e4 <__ieee754_pow+0x244>)
 80070fa:	429f      	cmp	r7, r3
 80070fc:	d10a      	bne.n	8007114 <__ieee754_pow+0x174>
 80070fe:	2d00      	cmp	r5, #0
 8007100:	db08      	blt.n	8007114 <__ieee754_pow+0x174>
 8007102:	4640      	mov	r0, r8
 8007104:	4649      	mov	r1, r9
 8007106:	b013      	add	sp, #76	; 0x4c
 8007108:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	f000 bd0a 	b.w	8007b24 <__ieee754_sqrt>
 8007110:	2300      	movs	r3, #0
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4640      	mov	r0, r8
 8007116:	4649      	mov	r1, r9
 8007118:	f000 fc58 	bl	80079cc <fabs>
 800711c:	4683      	mov	fp, r0
 800711e:	468c      	mov	ip, r1
 8007120:	f1ba 0f00 	cmp.w	sl, #0
 8007124:	d128      	bne.n	8007178 <__ieee754_pow+0x1d8>
 8007126:	b124      	cbz	r4, 8007132 <__ieee754_pow+0x192>
 8007128:	4b2c      	ldr	r3, [pc, #176]	; (80071dc <__ieee754_pow+0x23c>)
 800712a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800712e:	429a      	cmp	r2, r3
 8007130:	d122      	bne.n	8007178 <__ieee754_pow+0x1d8>
 8007132:	2f00      	cmp	r7, #0
 8007134:	da07      	bge.n	8007146 <__ieee754_pow+0x1a6>
 8007136:	465a      	mov	r2, fp
 8007138:	4663      	mov	r3, ip
 800713a:	2000      	movs	r0, #0
 800713c:	4927      	ldr	r1, [pc, #156]	; (80071dc <__ieee754_pow+0x23c>)
 800713e:	f7f9 faf5 	bl	800072c <__aeabi_ddiv>
 8007142:	4683      	mov	fp, r0
 8007144:	468c      	mov	ip, r1
 8007146:	2d00      	cmp	r5, #0
 8007148:	daba      	bge.n	80070c0 <__ieee754_pow+0x120>
 800714a:	9b00      	ldr	r3, [sp, #0]
 800714c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007150:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007154:	431c      	orrs	r4, r3
 8007156:	d108      	bne.n	800716a <__ieee754_pow+0x1ca>
 8007158:	465a      	mov	r2, fp
 800715a:	4663      	mov	r3, ip
 800715c:	4658      	mov	r0, fp
 800715e:	4661      	mov	r1, ip
 8007160:	f7f9 f802 	bl	8000168 <__aeabi_dsub>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	e790      	b.n	800708c <__ieee754_pow+0xec>
 800716a:	9b00      	ldr	r3, [sp, #0]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d1a7      	bne.n	80070c0 <__ieee754_pow+0x120>
 8007170:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007174:	469c      	mov	ip, r3
 8007176:	e7a3      	b.n	80070c0 <__ieee754_pow+0x120>
 8007178:	0feb      	lsrs	r3, r5, #31
 800717a:	3b01      	subs	r3, #1
 800717c:	930c      	str	r3, [sp, #48]	; 0x30
 800717e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007180:	9b00      	ldr	r3, [sp, #0]
 8007182:	4313      	orrs	r3, r2
 8007184:	d104      	bne.n	8007190 <__ieee754_pow+0x1f0>
 8007186:	4642      	mov	r2, r8
 8007188:	464b      	mov	r3, r9
 800718a:	4640      	mov	r0, r8
 800718c:	4649      	mov	r1, r9
 800718e:	e7e7      	b.n	8007160 <__ieee754_pow+0x1c0>
 8007190:	4b15      	ldr	r3, [pc, #84]	; (80071e8 <__ieee754_pow+0x248>)
 8007192:	429e      	cmp	r6, r3
 8007194:	f340 80f6 	ble.w	8007384 <__ieee754_pow+0x3e4>
 8007198:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800719c:	429e      	cmp	r6, r3
 800719e:	4b10      	ldr	r3, [pc, #64]	; (80071e0 <__ieee754_pow+0x240>)
 80071a0:	dd09      	ble.n	80071b6 <__ieee754_pow+0x216>
 80071a2:	429c      	cmp	r4, r3
 80071a4:	dc0c      	bgt.n	80071c0 <__ieee754_pow+0x220>
 80071a6:	2f00      	cmp	r7, #0
 80071a8:	da0c      	bge.n	80071c4 <__ieee754_pow+0x224>
 80071aa:	2000      	movs	r0, #0
 80071ac:	b013      	add	sp, #76	; 0x4c
 80071ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b2:	f000 bcb2 	b.w	8007b1a <__math_oflow>
 80071b6:	429c      	cmp	r4, r3
 80071b8:	dbf5      	blt.n	80071a6 <__ieee754_pow+0x206>
 80071ba:	4b08      	ldr	r3, [pc, #32]	; (80071dc <__ieee754_pow+0x23c>)
 80071bc:	429c      	cmp	r4, r3
 80071be:	dd15      	ble.n	80071ec <__ieee754_pow+0x24c>
 80071c0:	2f00      	cmp	r7, #0
 80071c2:	dcf2      	bgt.n	80071aa <__ieee754_pow+0x20a>
 80071c4:	2000      	movs	r0, #0
 80071c6:	b013      	add	sp, #76	; 0x4c
 80071c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071cc:	f000 bca0 	b.w	8007b10 <__math_uflow>
 80071d0:	fff00000 	.word	0xfff00000
 80071d4:	7ff00000 	.word	0x7ff00000
 80071d8:	433fffff 	.word	0x433fffff
 80071dc:	3ff00000 	.word	0x3ff00000
 80071e0:	3fefffff 	.word	0x3fefffff
 80071e4:	3fe00000 	.word	0x3fe00000
 80071e8:	41e00000 	.word	0x41e00000
 80071ec:	4661      	mov	r1, ip
 80071ee:	2200      	movs	r2, #0
 80071f0:	4658      	mov	r0, fp
 80071f2:	4b5f      	ldr	r3, [pc, #380]	; (8007370 <__ieee754_pow+0x3d0>)
 80071f4:	f7f8 ffb8 	bl	8000168 <__aeabi_dsub>
 80071f8:	a355      	add	r3, pc, #340	; (adr r3, 8007350 <__ieee754_pow+0x3b0>)
 80071fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fe:	4604      	mov	r4, r0
 8007200:	460d      	mov	r5, r1
 8007202:	f7f9 f969 	bl	80004d8 <__aeabi_dmul>
 8007206:	a354      	add	r3, pc, #336	; (adr r3, 8007358 <__ieee754_pow+0x3b8>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	4620      	mov	r0, r4
 8007212:	4629      	mov	r1, r5
 8007214:	f7f9 f960 	bl	80004d8 <__aeabi_dmul>
 8007218:	2200      	movs	r2, #0
 800721a:	4682      	mov	sl, r0
 800721c:	468b      	mov	fp, r1
 800721e:	4620      	mov	r0, r4
 8007220:	4629      	mov	r1, r5
 8007222:	4b54      	ldr	r3, [pc, #336]	; (8007374 <__ieee754_pow+0x3d4>)
 8007224:	f7f9 f958 	bl	80004d8 <__aeabi_dmul>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	a14c      	add	r1, pc, #304	; (adr r1, 8007360 <__ieee754_pow+0x3c0>)
 800722e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007232:	f7f8 ff99 	bl	8000168 <__aeabi_dsub>
 8007236:	4622      	mov	r2, r4
 8007238:	462b      	mov	r3, r5
 800723a:	f7f9 f94d 	bl	80004d8 <__aeabi_dmul>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	2000      	movs	r0, #0
 8007244:	494c      	ldr	r1, [pc, #304]	; (8007378 <__ieee754_pow+0x3d8>)
 8007246:	f7f8 ff8f 	bl	8000168 <__aeabi_dsub>
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	4680      	mov	r8, r0
 8007250:	4689      	mov	r9, r1
 8007252:	4620      	mov	r0, r4
 8007254:	4629      	mov	r1, r5
 8007256:	f7f9 f93f 	bl	80004d8 <__aeabi_dmul>
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	4640      	mov	r0, r8
 8007260:	4649      	mov	r1, r9
 8007262:	f7f9 f939 	bl	80004d8 <__aeabi_dmul>
 8007266:	a340      	add	r3, pc, #256	; (adr r3, 8007368 <__ieee754_pow+0x3c8>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	f7f9 f934 	bl	80004d8 <__aeabi_dmul>
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4650      	mov	r0, sl
 8007276:	4659      	mov	r1, fp
 8007278:	f7f8 ff76 	bl	8000168 <__aeabi_dsub>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4604      	mov	r4, r0
 8007282:	460d      	mov	r5, r1
 8007284:	4630      	mov	r0, r6
 8007286:	4639      	mov	r1, r7
 8007288:	f7f8 ff70 	bl	800016c <__adddf3>
 800728c:	2000      	movs	r0, #0
 800728e:	4632      	mov	r2, r6
 8007290:	463b      	mov	r3, r7
 8007292:	4682      	mov	sl, r0
 8007294:	468b      	mov	fp, r1
 8007296:	f7f8 ff67 	bl	8000168 <__aeabi_dsub>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4620      	mov	r0, r4
 80072a0:	4629      	mov	r1, r5
 80072a2:	f7f8 ff61 	bl	8000168 <__aeabi_dsub>
 80072a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072aa:	9b00      	ldr	r3, [sp, #0]
 80072ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072ae:	3b01      	subs	r3, #1
 80072b0:	4313      	orrs	r3, r2
 80072b2:	f04f 0600 	mov.w	r6, #0
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	bf0c      	ite	eq
 80072bc:	4b2f      	ldreq	r3, [pc, #188]	; (800737c <__ieee754_pow+0x3dc>)
 80072be:	4b2c      	ldrne	r3, [pc, #176]	; (8007370 <__ieee754_pow+0x3d0>)
 80072c0:	4604      	mov	r4, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072c8:	e9cd 2300 	strd	r2, r3, [sp]
 80072cc:	4632      	mov	r2, r6
 80072ce:	463b      	mov	r3, r7
 80072d0:	f7f8 ff4a 	bl	8000168 <__aeabi_dsub>
 80072d4:	4652      	mov	r2, sl
 80072d6:	465b      	mov	r3, fp
 80072d8:	f7f9 f8fe 	bl	80004d8 <__aeabi_dmul>
 80072dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072e0:	4680      	mov	r8, r0
 80072e2:	4689      	mov	r9, r1
 80072e4:	4620      	mov	r0, r4
 80072e6:	4629      	mov	r1, r5
 80072e8:	f7f9 f8f6 	bl	80004d8 <__aeabi_dmul>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4640      	mov	r0, r8
 80072f2:	4649      	mov	r1, r9
 80072f4:	f7f8 ff3a 	bl	800016c <__adddf3>
 80072f8:	4632      	mov	r2, r6
 80072fa:	463b      	mov	r3, r7
 80072fc:	4680      	mov	r8, r0
 80072fe:	4689      	mov	r9, r1
 8007300:	4650      	mov	r0, sl
 8007302:	4659      	mov	r1, fp
 8007304:	f7f9 f8e8 	bl	80004d8 <__aeabi_dmul>
 8007308:	4604      	mov	r4, r0
 800730a:	460d      	mov	r5, r1
 800730c:	460b      	mov	r3, r1
 800730e:	4602      	mov	r2, r0
 8007310:	4649      	mov	r1, r9
 8007312:	4640      	mov	r0, r8
 8007314:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007318:	f7f8 ff28 	bl	800016c <__adddf3>
 800731c:	4b18      	ldr	r3, [pc, #96]	; (8007380 <__ieee754_pow+0x3e0>)
 800731e:	4682      	mov	sl, r0
 8007320:	4299      	cmp	r1, r3
 8007322:	460f      	mov	r7, r1
 8007324:	460e      	mov	r6, r1
 8007326:	f340 82e7 	ble.w	80078f8 <__ieee754_pow+0x958>
 800732a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800732e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007332:	4303      	orrs	r3, r0
 8007334:	f000 81e2 	beq.w	80076fc <__ieee754_pow+0x75c>
 8007338:	e9dd 0100 	ldrd	r0, r1, [sp]
 800733c:	2200      	movs	r2, #0
 800733e:	2300      	movs	r3, #0
 8007340:	f7f9 fb3c 	bl	80009bc <__aeabi_dcmplt>
 8007344:	3800      	subs	r0, #0
 8007346:	bf18      	it	ne
 8007348:	2001      	movne	r0, #1
 800734a:	e72f      	b.n	80071ac <__ieee754_pow+0x20c>
 800734c:	f3af 8000 	nop.w
 8007350:	60000000 	.word	0x60000000
 8007354:	3ff71547 	.word	0x3ff71547
 8007358:	f85ddf44 	.word	0xf85ddf44
 800735c:	3e54ae0b 	.word	0x3e54ae0b
 8007360:	55555555 	.word	0x55555555
 8007364:	3fd55555 	.word	0x3fd55555
 8007368:	652b82fe 	.word	0x652b82fe
 800736c:	3ff71547 	.word	0x3ff71547
 8007370:	3ff00000 	.word	0x3ff00000
 8007374:	3fd00000 	.word	0x3fd00000
 8007378:	3fe00000 	.word	0x3fe00000
 800737c:	bff00000 	.word	0xbff00000
 8007380:	408fffff 	.word	0x408fffff
 8007384:	4bd4      	ldr	r3, [pc, #848]	; (80076d8 <__ieee754_pow+0x738>)
 8007386:	2200      	movs	r2, #0
 8007388:	402b      	ands	r3, r5
 800738a:	b943      	cbnz	r3, 800739e <__ieee754_pow+0x3fe>
 800738c:	4658      	mov	r0, fp
 800738e:	4661      	mov	r1, ip
 8007390:	4bd2      	ldr	r3, [pc, #840]	; (80076dc <__ieee754_pow+0x73c>)
 8007392:	f7f9 f8a1 	bl	80004d8 <__aeabi_dmul>
 8007396:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800739a:	4683      	mov	fp, r0
 800739c:	460c      	mov	r4, r1
 800739e:	1523      	asrs	r3, r4, #20
 80073a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80073a4:	4413      	add	r3, r2
 80073a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80073a8:	4bcd      	ldr	r3, [pc, #820]	; (80076e0 <__ieee754_pow+0x740>)
 80073aa:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80073ae:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80073b2:	429c      	cmp	r4, r3
 80073b4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073b8:	dd08      	ble.n	80073cc <__ieee754_pow+0x42c>
 80073ba:	4bca      	ldr	r3, [pc, #808]	; (80076e4 <__ieee754_pow+0x744>)
 80073bc:	429c      	cmp	r4, r3
 80073be:	f340 8164 	ble.w	800768a <__ieee754_pow+0x6ea>
 80073c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073c4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80073c8:	3301      	adds	r3, #1
 80073ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80073cc:	2600      	movs	r6, #0
 80073ce:	00f3      	lsls	r3, r6, #3
 80073d0:	930d      	str	r3, [sp, #52]	; 0x34
 80073d2:	4bc5      	ldr	r3, [pc, #788]	; (80076e8 <__ieee754_pow+0x748>)
 80073d4:	4658      	mov	r0, fp
 80073d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80073da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80073de:	4629      	mov	r1, r5
 80073e0:	461a      	mov	r2, r3
 80073e2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80073e6:	4623      	mov	r3, r4
 80073e8:	f7f8 febe 	bl	8000168 <__aeabi_dsub>
 80073ec:	46da      	mov	sl, fp
 80073ee:	462b      	mov	r3, r5
 80073f0:	4652      	mov	r2, sl
 80073f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80073f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073fa:	f7f8 feb7 	bl	800016c <__adddf3>
 80073fe:	4602      	mov	r2, r0
 8007400:	460b      	mov	r3, r1
 8007402:	2000      	movs	r0, #0
 8007404:	49b9      	ldr	r1, [pc, #740]	; (80076ec <__ieee754_pow+0x74c>)
 8007406:	f7f9 f991 	bl	800072c <__aeabi_ddiv>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007412:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007416:	f7f9 f85f 	bl	80004d8 <__aeabi_dmul>
 800741a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800741e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007422:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007426:	2300      	movs	r3, #0
 8007428:	2200      	movs	r2, #0
 800742a:	46ab      	mov	fp, r5
 800742c:	106d      	asrs	r5, r5, #1
 800742e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007438:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800743c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007440:	4640      	mov	r0, r8
 8007442:	4649      	mov	r1, r9
 8007444:	4614      	mov	r4, r2
 8007446:	461d      	mov	r5, r3
 8007448:	f7f9 f846 	bl	80004d8 <__aeabi_dmul>
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007454:	f7f8 fe88 	bl	8000168 <__aeabi_dsub>
 8007458:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800745c:	4606      	mov	r6, r0
 800745e:	460f      	mov	r7, r1
 8007460:	4620      	mov	r0, r4
 8007462:	4629      	mov	r1, r5
 8007464:	f7f8 fe80 	bl	8000168 <__aeabi_dsub>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	4650      	mov	r0, sl
 800746e:	4659      	mov	r1, fp
 8007470:	f7f8 fe7a 	bl	8000168 <__aeabi_dsub>
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	f7f9 f82e 	bl	80004d8 <__aeabi_dmul>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4630      	mov	r0, r6
 8007482:	4639      	mov	r1, r7
 8007484:	f7f8 fe70 	bl	8000168 <__aeabi_dsub>
 8007488:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800748c:	f7f9 f824 	bl	80004d8 <__aeabi_dmul>
 8007490:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007494:	4682      	mov	sl, r0
 8007496:	468b      	mov	fp, r1
 8007498:	4610      	mov	r0, r2
 800749a:	4619      	mov	r1, r3
 800749c:	f7f9 f81c 	bl	80004d8 <__aeabi_dmul>
 80074a0:	a37b      	add	r3, pc, #492	; (adr r3, 8007690 <__ieee754_pow+0x6f0>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	4604      	mov	r4, r0
 80074a8:	460d      	mov	r5, r1
 80074aa:	f7f9 f815 	bl	80004d8 <__aeabi_dmul>
 80074ae:	a37a      	add	r3, pc, #488	; (adr r3, 8007698 <__ieee754_pow+0x6f8>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f8 fe5a 	bl	800016c <__adddf3>
 80074b8:	4622      	mov	r2, r4
 80074ba:	462b      	mov	r3, r5
 80074bc:	f7f9 f80c 	bl	80004d8 <__aeabi_dmul>
 80074c0:	a377      	add	r3, pc, #476	; (adr r3, 80076a0 <__ieee754_pow+0x700>)
 80074c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c6:	f7f8 fe51 	bl	800016c <__adddf3>
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	f7f9 f803 	bl	80004d8 <__aeabi_dmul>
 80074d2:	a375      	add	r3, pc, #468	; (adr r3, 80076a8 <__ieee754_pow+0x708>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f8 fe48 	bl	800016c <__adddf3>
 80074dc:	4622      	mov	r2, r4
 80074de:	462b      	mov	r3, r5
 80074e0:	f7f8 fffa 	bl	80004d8 <__aeabi_dmul>
 80074e4:	a372      	add	r3, pc, #456	; (adr r3, 80076b0 <__ieee754_pow+0x710>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 fe3f 	bl	800016c <__adddf3>
 80074ee:	4622      	mov	r2, r4
 80074f0:	462b      	mov	r3, r5
 80074f2:	f7f8 fff1 	bl	80004d8 <__aeabi_dmul>
 80074f6:	a370      	add	r3, pc, #448	; (adr r3, 80076b8 <__ieee754_pow+0x718>)
 80074f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fc:	f7f8 fe36 	bl	800016c <__adddf3>
 8007500:	4622      	mov	r2, r4
 8007502:	4606      	mov	r6, r0
 8007504:	460f      	mov	r7, r1
 8007506:	462b      	mov	r3, r5
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	f7f8 ffe4 	bl	80004d8 <__aeabi_dmul>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4630      	mov	r0, r6
 8007516:	4639      	mov	r1, r7
 8007518:	f7f8 ffde 	bl	80004d8 <__aeabi_dmul>
 800751c:	4604      	mov	r4, r0
 800751e:	460d      	mov	r5, r1
 8007520:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	f7f8 fe20 	bl	800016c <__adddf3>
 800752c:	4652      	mov	r2, sl
 800752e:	465b      	mov	r3, fp
 8007530:	f7f8 ffd2 	bl	80004d8 <__aeabi_dmul>
 8007534:	4622      	mov	r2, r4
 8007536:	462b      	mov	r3, r5
 8007538:	f7f8 fe18 	bl	800016c <__adddf3>
 800753c:	4642      	mov	r2, r8
 800753e:	4606      	mov	r6, r0
 8007540:	460f      	mov	r7, r1
 8007542:	464b      	mov	r3, r9
 8007544:	4640      	mov	r0, r8
 8007546:	4649      	mov	r1, r9
 8007548:	f7f8 ffc6 	bl	80004d8 <__aeabi_dmul>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007554:	2200      	movs	r2, #0
 8007556:	4b66      	ldr	r3, [pc, #408]	; (80076f0 <__ieee754_pow+0x750>)
 8007558:	f7f8 fe08 	bl	800016c <__adddf3>
 800755c:	4632      	mov	r2, r6
 800755e:	463b      	mov	r3, r7
 8007560:	f7f8 fe04 	bl	800016c <__adddf3>
 8007564:	2400      	movs	r4, #0
 8007566:	460d      	mov	r5, r1
 8007568:	4622      	mov	r2, r4
 800756a:	460b      	mov	r3, r1
 800756c:	4640      	mov	r0, r8
 800756e:	4649      	mov	r1, r9
 8007570:	f7f8 ffb2 	bl	80004d8 <__aeabi_dmul>
 8007574:	2200      	movs	r2, #0
 8007576:	4680      	mov	r8, r0
 8007578:	4689      	mov	r9, r1
 800757a:	4620      	mov	r0, r4
 800757c:	4629      	mov	r1, r5
 800757e:	4b5c      	ldr	r3, [pc, #368]	; (80076f0 <__ieee754_pow+0x750>)
 8007580:	f7f8 fdf2 	bl	8000168 <__aeabi_dsub>
 8007584:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007588:	f7f8 fdee 	bl	8000168 <__aeabi_dsub>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f8 fde8 	bl	8000168 <__aeabi_dsub>
 8007598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800759c:	f7f8 ff9c 	bl	80004d8 <__aeabi_dmul>
 80075a0:	4622      	mov	r2, r4
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	462b      	mov	r3, r5
 80075a8:	4650      	mov	r0, sl
 80075aa:	4659      	mov	r1, fp
 80075ac:	f7f8 ff94 	bl	80004d8 <__aeabi_dmul>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4630      	mov	r0, r6
 80075b6:	4639      	mov	r1, r7
 80075b8:	f7f8 fdd8 	bl	800016c <__adddf3>
 80075bc:	2400      	movs	r4, #0
 80075be:	4606      	mov	r6, r0
 80075c0:	460f      	mov	r7, r1
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4640      	mov	r0, r8
 80075c8:	4649      	mov	r1, r9
 80075ca:	f7f8 fdcf 	bl	800016c <__adddf3>
 80075ce:	a33c      	add	r3, pc, #240	; (adr r3, 80076c0 <__ieee754_pow+0x720>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	4620      	mov	r0, r4
 80075d6:	460d      	mov	r5, r1
 80075d8:	f7f8 ff7e 	bl	80004d8 <__aeabi_dmul>
 80075dc:	4642      	mov	r2, r8
 80075de:	464b      	mov	r3, r9
 80075e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075e4:	4620      	mov	r0, r4
 80075e6:	4629      	mov	r1, r5
 80075e8:	f7f8 fdbe 	bl	8000168 <__aeabi_dsub>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4630      	mov	r0, r6
 80075f2:	4639      	mov	r1, r7
 80075f4:	f7f8 fdb8 	bl	8000168 <__aeabi_dsub>
 80075f8:	a333      	add	r3, pc, #204	; (adr r3, 80076c8 <__ieee754_pow+0x728>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f8 ff6b 	bl	80004d8 <__aeabi_dmul>
 8007602:	a333      	add	r3, pc, #204	; (adr r3, 80076d0 <__ieee754_pow+0x730>)
 8007604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007608:	4606      	mov	r6, r0
 800760a:	460f      	mov	r7, r1
 800760c:	4620      	mov	r0, r4
 800760e:	4629      	mov	r1, r5
 8007610:	f7f8 ff62 	bl	80004d8 <__aeabi_dmul>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f8 fda6 	bl	800016c <__adddf3>
 8007620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007622:	4b34      	ldr	r3, [pc, #208]	; (80076f4 <__ieee754_pow+0x754>)
 8007624:	4413      	add	r3, r2
 8007626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762a:	f7f8 fd9f 	bl	800016c <__adddf3>
 800762e:	4680      	mov	r8, r0
 8007630:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007632:	4689      	mov	r9, r1
 8007634:	f7f8 fee6 	bl	8000404 <__aeabi_i2d>
 8007638:	4604      	mov	r4, r0
 800763a:	460d      	mov	r5, r1
 800763c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007640:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007642:	4b2d      	ldr	r3, [pc, #180]	; (80076f8 <__ieee754_pow+0x758>)
 8007644:	4413      	add	r3, r2
 8007646:	e9d3 6700 	ldrd	r6, r7, [r3]
 800764a:	4642      	mov	r2, r8
 800764c:	464b      	mov	r3, r9
 800764e:	f7f8 fd8d 	bl	800016c <__adddf3>
 8007652:	4632      	mov	r2, r6
 8007654:	463b      	mov	r3, r7
 8007656:	f7f8 fd89 	bl	800016c <__adddf3>
 800765a:	4622      	mov	r2, r4
 800765c:	462b      	mov	r3, r5
 800765e:	f7f8 fd85 	bl	800016c <__adddf3>
 8007662:	2000      	movs	r0, #0
 8007664:	4622      	mov	r2, r4
 8007666:	462b      	mov	r3, r5
 8007668:	4682      	mov	sl, r0
 800766a:	468b      	mov	fp, r1
 800766c:	f7f8 fd7c 	bl	8000168 <__aeabi_dsub>
 8007670:	4632      	mov	r2, r6
 8007672:	463b      	mov	r3, r7
 8007674:	f7f8 fd78 	bl	8000168 <__aeabi_dsub>
 8007678:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800767c:	f7f8 fd74 	bl	8000168 <__aeabi_dsub>
 8007680:	4602      	mov	r2, r0
 8007682:	460b      	mov	r3, r1
 8007684:	4640      	mov	r0, r8
 8007686:	4649      	mov	r1, r9
 8007688:	e60b      	b.n	80072a2 <__ieee754_pow+0x302>
 800768a:	2601      	movs	r6, #1
 800768c:	e69f      	b.n	80073ce <__ieee754_pow+0x42e>
 800768e:	bf00      	nop
 8007690:	4a454eef 	.word	0x4a454eef
 8007694:	3fca7e28 	.word	0x3fca7e28
 8007698:	93c9db65 	.word	0x93c9db65
 800769c:	3fcd864a 	.word	0x3fcd864a
 80076a0:	a91d4101 	.word	0xa91d4101
 80076a4:	3fd17460 	.word	0x3fd17460
 80076a8:	518f264d 	.word	0x518f264d
 80076ac:	3fd55555 	.word	0x3fd55555
 80076b0:	db6fabff 	.word	0xdb6fabff
 80076b4:	3fdb6db6 	.word	0x3fdb6db6
 80076b8:	33333303 	.word	0x33333303
 80076bc:	3fe33333 	.word	0x3fe33333
 80076c0:	e0000000 	.word	0xe0000000
 80076c4:	3feec709 	.word	0x3feec709
 80076c8:	dc3a03fd 	.word	0xdc3a03fd
 80076cc:	3feec709 	.word	0x3feec709
 80076d0:	145b01f5 	.word	0x145b01f5
 80076d4:	be3e2fe0 	.word	0xbe3e2fe0
 80076d8:	7ff00000 	.word	0x7ff00000
 80076dc:	43400000 	.word	0x43400000
 80076e0:	0003988e 	.word	0x0003988e
 80076e4:	000bb679 	.word	0x000bb679
 80076e8:	08008140 	.word	0x08008140
 80076ec:	3ff00000 	.word	0x3ff00000
 80076f0:	40080000 	.word	0x40080000
 80076f4:	08008160 	.word	0x08008160
 80076f8:	08008150 	.word	0x08008150
 80076fc:	a39c      	add	r3, pc, #624	; (adr r3, 8007970 <__ieee754_pow+0x9d0>)
 80076fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007702:	4640      	mov	r0, r8
 8007704:	4649      	mov	r1, r9
 8007706:	f7f8 fd31 	bl	800016c <__adddf3>
 800770a:	4622      	mov	r2, r4
 800770c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007710:	462b      	mov	r3, r5
 8007712:	4650      	mov	r0, sl
 8007714:	4639      	mov	r1, r7
 8007716:	f7f8 fd27 	bl	8000168 <__aeabi_dsub>
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007722:	f7f9 f969 	bl	80009f8 <__aeabi_dcmpgt>
 8007726:	2800      	cmp	r0, #0
 8007728:	f47f ae06 	bne.w	8007338 <__ieee754_pow+0x398>
 800772c:	4aa2      	ldr	r2, [pc, #648]	; (80079b8 <__ieee754_pow+0xa18>)
 800772e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007732:	4293      	cmp	r3, r2
 8007734:	f340 8100 	ble.w	8007938 <__ieee754_pow+0x998>
 8007738:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800773c:	151b      	asrs	r3, r3, #20
 800773e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007742:	fa4a fa03 	asr.w	sl, sl, r3
 8007746:	44b2      	add	sl, r6
 8007748:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800774c:	489b      	ldr	r0, [pc, #620]	; (80079bc <__ieee754_pow+0xa1c>)
 800774e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007752:	4108      	asrs	r0, r1
 8007754:	ea00 030a 	and.w	r3, r0, sl
 8007758:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800775c:	f1c1 0114 	rsb	r1, r1, #20
 8007760:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007764:	fa4a fa01 	asr.w	sl, sl, r1
 8007768:	2e00      	cmp	r6, #0
 800776a:	f04f 0200 	mov.w	r2, #0
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	bfb8      	it	lt
 8007774:	f1ca 0a00 	rsblt	sl, sl, #0
 8007778:	f7f8 fcf6 	bl	8000168 <__aeabi_dsub>
 800777c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007780:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007784:	2400      	movs	r4, #0
 8007786:	4642      	mov	r2, r8
 8007788:	464b      	mov	r3, r9
 800778a:	f7f8 fcef 	bl	800016c <__adddf3>
 800778e:	a37a      	add	r3, pc, #488	; (adr r3, 8007978 <__ieee754_pow+0x9d8>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	4620      	mov	r0, r4
 8007796:	460d      	mov	r5, r1
 8007798:	f7f8 fe9e 	bl	80004d8 <__aeabi_dmul>
 800779c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077a0:	4606      	mov	r6, r0
 80077a2:	460f      	mov	r7, r1
 80077a4:	4620      	mov	r0, r4
 80077a6:	4629      	mov	r1, r5
 80077a8:	f7f8 fcde 	bl	8000168 <__aeabi_dsub>
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	4640      	mov	r0, r8
 80077b2:	4649      	mov	r1, r9
 80077b4:	f7f8 fcd8 	bl	8000168 <__aeabi_dsub>
 80077b8:	a371      	add	r3, pc, #452	; (adr r3, 8007980 <__ieee754_pow+0x9e0>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	f7f8 fe8b 	bl	80004d8 <__aeabi_dmul>
 80077c2:	a371      	add	r3, pc, #452	; (adr r3, 8007988 <__ieee754_pow+0x9e8>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	4680      	mov	r8, r0
 80077ca:	4689      	mov	r9, r1
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f8 fe82 	bl	80004d8 <__aeabi_dmul>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f8 fcc6 	bl	800016c <__adddf3>
 80077e0:	4604      	mov	r4, r0
 80077e2:	460d      	mov	r5, r1
 80077e4:	4602      	mov	r2, r0
 80077e6:	460b      	mov	r3, r1
 80077e8:	4630      	mov	r0, r6
 80077ea:	4639      	mov	r1, r7
 80077ec:	f7f8 fcbe 	bl	800016c <__adddf3>
 80077f0:	4632      	mov	r2, r6
 80077f2:	463b      	mov	r3, r7
 80077f4:	4680      	mov	r8, r0
 80077f6:	4689      	mov	r9, r1
 80077f8:	f7f8 fcb6 	bl	8000168 <__aeabi_dsub>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4620      	mov	r0, r4
 8007802:	4629      	mov	r1, r5
 8007804:	f7f8 fcb0 	bl	8000168 <__aeabi_dsub>
 8007808:	4642      	mov	r2, r8
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	464b      	mov	r3, r9
 8007810:	4640      	mov	r0, r8
 8007812:	4649      	mov	r1, r9
 8007814:	f7f8 fe60 	bl	80004d8 <__aeabi_dmul>
 8007818:	a35d      	add	r3, pc, #372	; (adr r3, 8007990 <__ieee754_pow+0x9f0>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	4604      	mov	r4, r0
 8007820:	460d      	mov	r5, r1
 8007822:	f7f8 fe59 	bl	80004d8 <__aeabi_dmul>
 8007826:	a35c      	add	r3, pc, #368	; (adr r3, 8007998 <__ieee754_pow+0x9f8>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f7f8 fc9c 	bl	8000168 <__aeabi_dsub>
 8007830:	4622      	mov	r2, r4
 8007832:	462b      	mov	r3, r5
 8007834:	f7f8 fe50 	bl	80004d8 <__aeabi_dmul>
 8007838:	a359      	add	r3, pc, #356	; (adr r3, 80079a0 <__ieee754_pow+0xa00>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fc95 	bl	800016c <__adddf3>
 8007842:	4622      	mov	r2, r4
 8007844:	462b      	mov	r3, r5
 8007846:	f7f8 fe47 	bl	80004d8 <__aeabi_dmul>
 800784a:	a357      	add	r3, pc, #348	; (adr r3, 80079a8 <__ieee754_pow+0xa08>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fc8a 	bl	8000168 <__aeabi_dsub>
 8007854:	4622      	mov	r2, r4
 8007856:	462b      	mov	r3, r5
 8007858:	f7f8 fe3e 	bl	80004d8 <__aeabi_dmul>
 800785c:	a354      	add	r3, pc, #336	; (adr r3, 80079b0 <__ieee754_pow+0xa10>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f7f8 fc83 	bl	800016c <__adddf3>
 8007866:	4622      	mov	r2, r4
 8007868:	462b      	mov	r3, r5
 800786a:	f7f8 fe35 	bl	80004d8 <__aeabi_dmul>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4640      	mov	r0, r8
 8007874:	4649      	mov	r1, r9
 8007876:	f7f8 fc77 	bl	8000168 <__aeabi_dsub>
 800787a:	4604      	mov	r4, r0
 800787c:	460d      	mov	r5, r1
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4640      	mov	r0, r8
 8007884:	4649      	mov	r1, r9
 8007886:	f7f8 fe27 	bl	80004d8 <__aeabi_dmul>
 800788a:	2200      	movs	r2, #0
 800788c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f8 fc66 	bl	8000168 <__aeabi_dsub>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a4:	f7f8 ff42 	bl	800072c <__aeabi_ddiv>
 80078a8:	4632      	mov	r2, r6
 80078aa:	4604      	mov	r4, r0
 80078ac:	460d      	mov	r5, r1
 80078ae:	463b      	mov	r3, r7
 80078b0:	4640      	mov	r0, r8
 80078b2:	4649      	mov	r1, r9
 80078b4:	f7f8 fe10 	bl	80004d8 <__aeabi_dmul>
 80078b8:	4632      	mov	r2, r6
 80078ba:	463b      	mov	r3, r7
 80078bc:	f7f8 fc56 	bl	800016c <__adddf3>
 80078c0:	4602      	mov	r2, r0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4620      	mov	r0, r4
 80078c6:	4629      	mov	r1, r5
 80078c8:	f7f8 fc4e 	bl	8000168 <__aeabi_dsub>
 80078cc:	4642      	mov	r2, r8
 80078ce:	464b      	mov	r3, r9
 80078d0:	f7f8 fc4a 	bl	8000168 <__aeabi_dsub>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	2000      	movs	r0, #0
 80078da:	4939      	ldr	r1, [pc, #228]	; (80079c0 <__ieee754_pow+0xa20>)
 80078dc:	f7f8 fc44 	bl	8000168 <__aeabi_dsub>
 80078e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80078e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80078e8:	da29      	bge.n	800793e <__ieee754_pow+0x99e>
 80078ea:	4652      	mov	r2, sl
 80078ec:	f000 f874 	bl	80079d8 <scalbn>
 80078f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078f4:	f7ff bbfd 	b.w	80070f2 <__ieee754_pow+0x152>
 80078f8:	4b32      	ldr	r3, [pc, #200]	; (80079c4 <__ieee754_pow+0xa24>)
 80078fa:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80078fe:	429f      	cmp	r7, r3
 8007900:	f77f af14 	ble.w	800772c <__ieee754_pow+0x78c>
 8007904:	4b30      	ldr	r3, [pc, #192]	; (80079c8 <__ieee754_pow+0xa28>)
 8007906:	440b      	add	r3, r1
 8007908:	4303      	orrs	r3, r0
 800790a:	d009      	beq.n	8007920 <__ieee754_pow+0x980>
 800790c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007910:	2200      	movs	r2, #0
 8007912:	2300      	movs	r3, #0
 8007914:	f7f9 f852 	bl	80009bc <__aeabi_dcmplt>
 8007918:	3800      	subs	r0, #0
 800791a:	bf18      	it	ne
 800791c:	2001      	movne	r0, #1
 800791e:	e452      	b.n	80071c6 <__ieee754_pow+0x226>
 8007920:	4622      	mov	r2, r4
 8007922:	462b      	mov	r3, r5
 8007924:	f7f8 fc20 	bl	8000168 <__aeabi_dsub>
 8007928:	4642      	mov	r2, r8
 800792a:	464b      	mov	r3, r9
 800792c:	f7f9 f85a 	bl	80009e4 <__aeabi_dcmpge>
 8007930:	2800      	cmp	r0, #0
 8007932:	f43f aefb 	beq.w	800772c <__ieee754_pow+0x78c>
 8007936:	e7e9      	b.n	800790c <__ieee754_pow+0x96c>
 8007938:	f04f 0a00 	mov.w	sl, #0
 800793c:	e720      	b.n	8007780 <__ieee754_pow+0x7e0>
 800793e:	4621      	mov	r1, r4
 8007940:	e7d6      	b.n	80078f0 <__ieee754_pow+0x950>
 8007942:	f04f 0b00 	mov.w	fp, #0
 8007946:	f8df c078 	ldr.w	ip, [pc, #120]	; 80079c0 <__ieee754_pow+0xa20>
 800794a:	f7ff bbb9 	b.w	80070c0 <__ieee754_pow+0x120>
 800794e:	f04f 0b00 	mov.w	fp, #0
 8007952:	f04f 0c00 	mov.w	ip, #0
 8007956:	f7ff bbb3 	b.w	80070c0 <__ieee754_pow+0x120>
 800795a:	4640      	mov	r0, r8
 800795c:	4649      	mov	r1, r9
 800795e:	f7ff bb3c 	b.w	8006fda <__ieee754_pow+0x3a>
 8007962:	9200      	str	r2, [sp, #0]
 8007964:	f7ff bb88 	b.w	8007078 <__ieee754_pow+0xd8>
 8007968:	2300      	movs	r3, #0
 800796a:	f7ff bb72 	b.w	8007052 <__ieee754_pow+0xb2>
 800796e:	bf00      	nop
 8007970:	652b82fe 	.word	0x652b82fe
 8007974:	3c971547 	.word	0x3c971547
 8007978:	00000000 	.word	0x00000000
 800797c:	3fe62e43 	.word	0x3fe62e43
 8007980:	fefa39ef 	.word	0xfefa39ef
 8007984:	3fe62e42 	.word	0x3fe62e42
 8007988:	0ca86c39 	.word	0x0ca86c39
 800798c:	be205c61 	.word	0xbe205c61
 8007990:	72bea4d0 	.word	0x72bea4d0
 8007994:	3e663769 	.word	0x3e663769
 8007998:	c5d26bf1 	.word	0xc5d26bf1
 800799c:	3ebbbd41 	.word	0x3ebbbd41
 80079a0:	af25de2c 	.word	0xaf25de2c
 80079a4:	3f11566a 	.word	0x3f11566a
 80079a8:	16bebd93 	.word	0x16bebd93
 80079ac:	3f66c16c 	.word	0x3f66c16c
 80079b0:	5555553e 	.word	0x5555553e
 80079b4:	3fc55555 	.word	0x3fc55555
 80079b8:	3fe00000 	.word	0x3fe00000
 80079bc:	fff00000 	.word	0xfff00000
 80079c0:	3ff00000 	.word	0x3ff00000
 80079c4:	4090cbff 	.word	0x4090cbff
 80079c8:	3f6f3400 	.word	0x3f6f3400

080079cc <fabs>:
 80079cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079d0:	4619      	mov	r1, r3
 80079d2:	4770      	bx	lr
 80079d4:	0000      	movs	r0, r0
	...

080079d8 <scalbn>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	4616      	mov	r6, r2
 80079dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079e0:	4604      	mov	r4, r0
 80079e2:	460d      	mov	r5, r1
 80079e4:	460b      	mov	r3, r1
 80079e6:	b992      	cbnz	r2, 8007a0e <scalbn+0x36>
 80079e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079ec:	4303      	orrs	r3, r0
 80079ee:	d03c      	beq.n	8007a6a <scalbn+0x92>
 80079f0:	4b31      	ldr	r3, [pc, #196]	; (8007ab8 <scalbn+0xe0>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	f7f8 fd70 	bl	80004d8 <__aeabi_dmul>
 80079f8:	4b30      	ldr	r3, [pc, #192]	; (8007abc <scalbn+0xe4>)
 80079fa:	4604      	mov	r4, r0
 80079fc:	429e      	cmp	r6, r3
 80079fe:	460d      	mov	r5, r1
 8007a00:	da0f      	bge.n	8007a22 <scalbn+0x4a>
 8007a02:	a329      	add	r3, pc, #164	; (adr r3, 8007aa8 <scalbn+0xd0>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fd66 	bl	80004d8 <__aeabi_dmul>
 8007a0c:	e006      	b.n	8007a1c <scalbn+0x44>
 8007a0e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007a12:	42ba      	cmp	r2, r7
 8007a14:	d109      	bne.n	8007a2a <scalbn+0x52>
 8007a16:	4602      	mov	r2, r0
 8007a18:	f7f8 fba8 	bl	800016c <__adddf3>
 8007a1c:	4604      	mov	r4, r0
 8007a1e:	460d      	mov	r5, r1
 8007a20:	e023      	b.n	8007a6a <scalbn+0x92>
 8007a22:	460b      	mov	r3, r1
 8007a24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007a28:	3a36      	subs	r2, #54	; 0x36
 8007a2a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007a2e:	428e      	cmp	r6, r1
 8007a30:	dd0e      	ble.n	8007a50 <scalbn+0x78>
 8007a32:	a31f      	add	r3, pc, #124	; (adr r3, 8007ab0 <scalbn+0xd8>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007a3c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007a40:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007a44:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007a48:	481d      	ldr	r0, [pc, #116]	; (8007ac0 <scalbn+0xe8>)
 8007a4a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007a4e:	e7db      	b.n	8007a08 <scalbn+0x30>
 8007a50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007a54:	4432      	add	r2, r6
 8007a56:	428a      	cmp	r2, r1
 8007a58:	dceb      	bgt.n	8007a32 <scalbn+0x5a>
 8007a5a:	2a00      	cmp	r2, #0
 8007a5c:	dd08      	ble.n	8007a70 <scalbn+0x98>
 8007a5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a66:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a6a:	4620      	mov	r0, r4
 8007a6c:	4629      	mov	r1, r5
 8007a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a70:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a74:	da0c      	bge.n	8007a90 <scalbn+0xb8>
 8007a76:	a30c      	add	r3, pc, #48	; (adr r3, 8007aa8 <scalbn+0xd0>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007a80:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007a84:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007a88:	480e      	ldr	r0, [pc, #56]	; (8007ac4 <scalbn+0xec>)
 8007a8a:	f041 011f 	orr.w	r1, r1, #31
 8007a8e:	e7bb      	b.n	8007a08 <scalbn+0x30>
 8007a90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a94:	3236      	adds	r2, #54	; 0x36
 8007a96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <scalbn+0xf0>)
 8007aa6:	e7af      	b.n	8007a08 <scalbn+0x30>
 8007aa8:	c2f8f359 	.word	0xc2f8f359
 8007aac:	01a56e1f 	.word	0x01a56e1f
 8007ab0:	8800759c 	.word	0x8800759c
 8007ab4:	7e37e43c 	.word	0x7e37e43c
 8007ab8:	43500000 	.word	0x43500000
 8007abc:	ffff3cb0 	.word	0xffff3cb0
 8007ac0:	8800759c 	.word	0x8800759c
 8007ac4:	c2f8f359 	.word	0xc2f8f359
 8007ac8:	3c900000 	.word	0x3c900000

08007acc <with_errno>:
 8007acc:	b570      	push	{r4, r5, r6, lr}
 8007ace:	4604      	mov	r4, r0
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	4616      	mov	r6, r2
 8007ad4:	f7fd fa22 	bl	8004f1c <__errno>
 8007ad8:	4629      	mov	r1, r5
 8007ada:	6006      	str	r6, [r0, #0]
 8007adc:	4620      	mov	r0, r4
 8007ade:	bd70      	pop	{r4, r5, r6, pc}

08007ae0 <xflow>:
 8007ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ae2:	4615      	mov	r5, r2
 8007ae4:	461c      	mov	r4, r3
 8007ae6:	b180      	cbz	r0, 8007b0a <xflow+0x2a>
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007aee:	e9cd 0100 	strd	r0, r1, [sp]
 8007af2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007af6:	4628      	mov	r0, r5
 8007af8:	4621      	mov	r1, r4
 8007afa:	f7f8 fced 	bl	80004d8 <__aeabi_dmul>
 8007afe:	2222      	movs	r2, #34	; 0x22
 8007b00:	b003      	add	sp, #12
 8007b02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b06:	f7ff bfe1 	b.w	8007acc <with_errno>
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	e7ee      	b.n	8007aee <xflow+0xe>

08007b10 <__math_uflow>:
 8007b10:	2200      	movs	r2, #0
 8007b12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b16:	f7ff bfe3 	b.w	8007ae0 <xflow>

08007b1a <__math_oflow>:
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007b20:	f7ff bfde 	b.w	8007ae0 <xflow>

08007b24 <__ieee754_sqrt>:
 8007b24:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007cc8 <__ieee754_sqrt+0x1a4>
 8007b28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007b30:	460b      	mov	r3, r1
 8007b32:	4606      	mov	r6, r0
 8007b34:	460d      	mov	r5, r1
 8007b36:	460a      	mov	r2, r1
 8007b38:	4604      	mov	r4, r0
 8007b3a:	d10e      	bne.n	8007b5a <__ieee754_sqrt+0x36>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	f7f8 fccb 	bl	80004d8 <__aeabi_dmul>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4630      	mov	r0, r6
 8007b48:	4629      	mov	r1, r5
 8007b4a:	f7f8 fb0f 	bl	800016c <__adddf3>
 8007b4e:	4606      	mov	r6, r0
 8007b50:	460d      	mov	r5, r1
 8007b52:	4630      	mov	r0, r6
 8007b54:	4629      	mov	r1, r5
 8007b56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5a:	2900      	cmp	r1, #0
 8007b5c:	dc0d      	bgt.n	8007b7a <__ieee754_sqrt+0x56>
 8007b5e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007b62:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007b66:	d0f4      	beq.n	8007b52 <__ieee754_sqrt+0x2e>
 8007b68:	b139      	cbz	r1, 8007b7a <__ieee754_sqrt+0x56>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	f7f8 fafc 	bl	8000168 <__aeabi_dsub>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	f7f8 fdda 	bl	800072c <__aeabi_ddiv>
 8007b78:	e7e9      	b.n	8007b4e <__ieee754_sqrt+0x2a>
 8007b7a:	1512      	asrs	r2, r2, #20
 8007b7c:	f000 8089 	beq.w	8007c92 <__ieee754_sqrt+0x16e>
 8007b80:	2500      	movs	r5, #0
 8007b82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b86:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b8e:	07d2      	lsls	r2, r2, #31
 8007b90:	bf5c      	itt	pl
 8007b92:	005b      	lslpl	r3, r3, #1
 8007b94:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b9c:	bf58      	it	pl
 8007b9e:	0064      	lslpl	r4, r4, #1
 8007ba0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007ba4:	0062      	lsls	r2, r4, #1
 8007ba6:	2016      	movs	r0, #22
 8007ba8:	4629      	mov	r1, r5
 8007baa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007bae:	1076      	asrs	r6, r6, #1
 8007bb0:	190f      	adds	r7, r1, r4
 8007bb2:	429f      	cmp	r7, r3
 8007bb4:	bfde      	ittt	le
 8007bb6:	1bdb      	suble	r3, r3, r7
 8007bb8:	1939      	addle	r1, r7, r4
 8007bba:	192d      	addle	r5, r5, r4
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	3801      	subs	r0, #1
 8007bc0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007bc4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007bc8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007bcc:	d1f0      	bne.n	8007bb0 <__ieee754_sqrt+0x8c>
 8007bce:	4604      	mov	r4, r0
 8007bd0:	2720      	movs	r7, #32
 8007bd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007bd6:	428b      	cmp	r3, r1
 8007bd8:	eb0c 0e00 	add.w	lr, ip, r0
 8007bdc:	dc02      	bgt.n	8007be4 <__ieee754_sqrt+0xc0>
 8007bde:	d113      	bne.n	8007c08 <__ieee754_sqrt+0xe4>
 8007be0:	4596      	cmp	lr, r2
 8007be2:	d811      	bhi.n	8007c08 <__ieee754_sqrt+0xe4>
 8007be4:	f1be 0f00 	cmp.w	lr, #0
 8007be8:	eb0e 000c 	add.w	r0, lr, ip
 8007bec:	da56      	bge.n	8007c9c <__ieee754_sqrt+0x178>
 8007bee:	2800      	cmp	r0, #0
 8007bf0:	db54      	blt.n	8007c9c <__ieee754_sqrt+0x178>
 8007bf2:	f101 0801 	add.w	r8, r1, #1
 8007bf6:	1a5b      	subs	r3, r3, r1
 8007bf8:	4641      	mov	r1, r8
 8007bfa:	4596      	cmp	lr, r2
 8007bfc:	bf88      	it	hi
 8007bfe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007c02:	eba2 020e 	sub.w	r2, r2, lr
 8007c06:	4464      	add	r4, ip
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	3f01      	subs	r7, #1
 8007c0c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007c10:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007c14:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007c18:	d1dd      	bne.n	8007bd6 <__ieee754_sqrt+0xb2>
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	d01b      	beq.n	8007c56 <__ieee754_sqrt+0x132>
 8007c1e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007ccc <__ieee754_sqrt+0x1a8>
 8007c22:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007cd0 <__ieee754_sqrt+0x1ac>
 8007c26:	e9da 0100 	ldrd	r0, r1, [sl]
 8007c2a:	e9db 2300 	ldrd	r2, r3, [fp]
 8007c2e:	f7f8 fa9b 	bl	8000168 <__aeabi_dsub>
 8007c32:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4640      	mov	r0, r8
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	f7f8 fec7 	bl	80009d0 <__aeabi_dcmple>
 8007c42:	b140      	cbz	r0, 8007c56 <__ieee754_sqrt+0x132>
 8007c44:	e9da 0100 	ldrd	r0, r1, [sl]
 8007c48:	e9db 2300 	ldrd	r2, r3, [fp]
 8007c4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007c50:	d126      	bne.n	8007ca0 <__ieee754_sqrt+0x17c>
 8007c52:	463c      	mov	r4, r7
 8007c54:	3501      	adds	r5, #1
 8007c56:	106b      	asrs	r3, r5, #1
 8007c58:	0864      	lsrs	r4, r4, #1
 8007c5a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c5e:	07ea      	lsls	r2, r5, #31
 8007c60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c64:	bf48      	it	mi
 8007c66:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007c70:	e76d      	b.n	8007b4e <__ieee754_sqrt+0x2a>
 8007c72:	0ae3      	lsrs	r3, r4, #11
 8007c74:	3915      	subs	r1, #21
 8007c76:	0564      	lsls	r4, r4, #21
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0fa      	beq.n	8007c72 <__ieee754_sqrt+0x14e>
 8007c7c:	02d8      	lsls	r0, r3, #11
 8007c7e:	d50a      	bpl.n	8007c96 <__ieee754_sqrt+0x172>
 8007c80:	f1c2 0020 	rsb	r0, r2, #32
 8007c84:	fa24 f000 	lsr.w	r0, r4, r0
 8007c88:	1e55      	subs	r5, r2, #1
 8007c8a:	4094      	lsls	r4, r2
 8007c8c:	4303      	orrs	r3, r0
 8007c8e:	1b4a      	subs	r2, r1, r5
 8007c90:	e776      	b.n	8007b80 <__ieee754_sqrt+0x5c>
 8007c92:	4611      	mov	r1, r2
 8007c94:	e7f0      	b.n	8007c78 <__ieee754_sqrt+0x154>
 8007c96:	005b      	lsls	r3, r3, #1
 8007c98:	3201      	adds	r2, #1
 8007c9a:	e7ef      	b.n	8007c7c <__ieee754_sqrt+0x158>
 8007c9c:	4688      	mov	r8, r1
 8007c9e:	e7aa      	b.n	8007bf6 <__ieee754_sqrt+0xd2>
 8007ca0:	f7f8 fa64 	bl	800016c <__adddf3>
 8007ca4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4640      	mov	r0, r8
 8007cae:	4649      	mov	r1, r9
 8007cb0:	f7f8 fe84 	bl	80009bc <__aeabi_dcmplt>
 8007cb4:	b120      	cbz	r0, 8007cc0 <__ieee754_sqrt+0x19c>
 8007cb6:	1ca1      	adds	r1, r4, #2
 8007cb8:	bf08      	it	eq
 8007cba:	3501      	addeq	r5, #1
 8007cbc:	3402      	adds	r4, #2
 8007cbe:	e7ca      	b.n	8007c56 <__ieee754_sqrt+0x132>
 8007cc0:	3401      	adds	r4, #1
 8007cc2:	f024 0401 	bic.w	r4, r4, #1
 8007cc6:	e7c6      	b.n	8007c56 <__ieee754_sqrt+0x132>
 8007cc8:	7ff00000 	.word	0x7ff00000
 8007ccc:	200001e8 	.word	0x200001e8
 8007cd0:	200001f0 	.word	0x200001f0

08007cd4 <_init>:
 8007cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd6:	bf00      	nop
 8007cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cda:	bc08      	pop	{r3}
 8007cdc:	469e      	mov	lr, r3
 8007cde:	4770      	bx	lr

08007ce0 <_fini>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	bf00      	nop
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr
