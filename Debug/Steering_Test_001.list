
Steering_Test_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b94  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08007ca8  08007ca8  00017ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008180  08008180  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08008180  08008180  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008180  08008180  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008180  08008180  00018180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08008188  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001e8  08008370  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08008370  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a3de  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eca  00000000  00000000  0002a632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000938  00000000  00000000  0002c500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006f9  00000000  00000000  0002ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000186a4  00000000  00000000  0002d531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4b4  00000000  00000000  00045bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000870ce  00000000  00000000  00052089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000381c  00000000  00000000  000d9158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000dc974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007c8c 	.word	0x08007c8c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007c8c 	.word	0x08007c8c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <NXT_SendNum>:
UART_HandleTypeDef huart;					// huart1

uint8_t cmd_end[3] = {0xFF, 0xFF, 0xFF};	// Needed at the end of every instruction
char msg[50]; 								// Array for Sending/Transmitting messages

void NXT_SendNum(char *obj, int32_t num){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Enable onboard led to signify starting of transmission
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000b32:	201e      	movs	r0, #30
 8000b34:	f003 fb2c 	bl	8004190 <malloc>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *) buffer, "%s.val=%ld", obj, num); //change to %ld
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <NXT_SendNum+0x4c>)
 8000b42:	68f8      	ldr	r0, [r7, #12]
 8000b44:	f004 f900 	bl	8004d48 <siprintf>
 8000b48:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	68f9      	ldr	r1, [r7, #12]
 8000b54:	4808      	ldr	r0, [pc, #32]	; (8000b78 <NXT_SendNum+0x50>)
 8000b56:	f002 fd55 	bl	8003604 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, cmd_end, 3, 100);
 8000b5a:	2364      	movs	r3, #100	; 0x64
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	4907      	ldr	r1, [pc, #28]	; (8000b7c <NXT_SendNum+0x54>)
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <NXT_SendNum+0x50>)
 8000b62:	f002 fd4f 	bl	8003604 <HAL_UART_Transmit>
	free(buffer);
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f003 fb1a 	bl	80041a0 <free>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	08007ca8 	.word	0x08007ca8
 8000b78:	20000204 	.word	0x20000204
 8000b7c:	20000000 	.word	0x20000000

08000b80 <NXT_SendFloat>:

void NXT_SendFloat(char *obj, float num, int dp){
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b088      	sub	sp, #32
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	int32_t number = num * (pow(10,dp));
 8000b8c:	68b8      	ldr	r0, [r7, #8]
 8000b8e:	f7ff fc4b 	bl	8000428 <__aeabi_f2d>
 8000b92:	4604      	mov	r4, r0
 8000b94:	460d      	mov	r5, r1
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff fc34 	bl	8000404 <__aeabi_i2d>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4923      	ldr	r1, [pc, #140]	; (8000c34 <NXT_SendFloat+0xb4>)
 8000ba6:	f006 f969 	bl	8006e7c <pow>
 8000baa:	4602      	mov	r2, r0
 8000bac:	460b      	mov	r3, r1
 8000bae:	4620      	mov	r0, r4
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	f7ff fc91 	bl	80004d8 <__aeabi_dmul>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	460b      	mov	r3, r1
 8000bba:	4610      	mov	r0, r2
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f7ff ff3b 	bl	8000a38 <__aeabi_d2iz>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000bc6:	201e      	movs	r0, #30
 8000bc8:	f003 fae2 	bl	8004190 <malloc>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	61bb      	str	r3, [r7, #24]
	int len = sprintf((char *)buffer, "%s.vvs1=%d", obj, dp);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	4918      	ldr	r1, [pc, #96]	; (8000c38 <NXT_SendFloat+0xb8>)
 8000bd6:	69b8      	ldr	r0, [r7, #24]
 8000bd8:	f004 f8b6 	bl	8004d48 <siprintf>
 8000bdc:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	69b9      	ldr	r1, [r7, #24]
 8000be8:	4814      	ldr	r0, [pc, #80]	; (8000c3c <NXT_SendFloat+0xbc>)
 8000bea:	f002 fd0b 	bl	8003604 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, cmd_end, 3, 100);
 8000bee:	2364      	movs	r3, #100	; 0x64
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	4913      	ldr	r1, [pc, #76]	; (8000c40 <NXT_SendFloat+0xc0>)
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <NXT_SendFloat+0xbc>)
 8000bf6:	f002 fd05 	bl	8003604 <HAL_UART_Transmit>

	len = sprintf((char *)buffer, "%s.val=%ld", obj, number);
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	4911      	ldr	r1, [pc, #68]	; (8000c44 <NXT_SendFloat+0xc4>)
 8000c00:	69b8      	ldr	r0, [r7, #24]
 8000c02:	f004 f8a1 	bl	8004d48 <siprintf>
 8000c06:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	69b9      	ldr	r1, [r7, #24]
 8000c12:	480a      	ldr	r0, [pc, #40]	; (8000c3c <NXT_SendFloat+0xbc>)
 8000c14:	f002 fcf6 	bl	8003604 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, cmd_end, 3, 100);
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	4908      	ldr	r1, [pc, #32]	; (8000c40 <NXT_SendFloat+0xc0>)
 8000c1e:	4807      	ldr	r0, [pc, #28]	; (8000c3c <NXT_SendFloat+0xbc>)
 8000c20:	f002 fcf0 	bl	8003604 <HAL_UART_Transmit>
	free(buffer);
 8000c24:	69b8      	ldr	r0, [r7, #24]
 8000c26:	f003 fabb 	bl	80041a0 <free>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

}
 8000c2a:	bf00      	nop
 8000c2c:	3720      	adds	r7, #32
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bdb0      	pop	{r4, r5, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40240000 	.word	0x40240000
 8000c38:	08007cb4 	.word	0x08007cb4
 8000c3c:	20000204 	.word	0x20000204
 8000c40:	20000000 	.word	0x20000000
 8000c44:	08007ca8 	.word	0x08007ca8

08000c48 <NXT_SendTXT>:
	free(buffer);
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

}

void NXT_SendTXT(char *obj, char val[]){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000c52:	201e      	movs	r0, #30
 8000c54:	f003 fa9c 	bl	8004190 <malloc>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60fb      	str	r3, [r7, #12]

	int len = sprintf((char *)buffer, "%s.txt=\"%s\"", obj, val);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	490c      	ldr	r1, [pc, #48]	; (8000c94 <NXT_SendTXT+0x4c>)
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f004 f870 	bl	8004d48 <siprintf>
 8000c68:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart, buffer, len, 1000);
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	68f9      	ldr	r1, [r7, #12]
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <NXT_SendTXT+0x50>)
 8000c76:	f002 fcc5 	bl	8003604 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, cmd_end, 3, 100);
 8000c7a:	2364      	movs	r3, #100	; 0x64
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	4907      	ldr	r1, [pc, #28]	; (8000c9c <NXT_SendTXT+0x54>)
 8000c80:	4805      	ldr	r0, [pc, #20]	; (8000c98 <NXT_SendTXT+0x50>)
 8000c82:	f002 fcbf 	bl	8003604 <HAL_UART_Transmit>
	free(buffer);
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f003 fa8a 	bl	80041a0 <free>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	08007cc8 	.word	0x08007cc8
 8000c98:	20000204 	.word	0x20000204
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <NXT_SendCmd>:

void NXT_SendCmd(char *obj, char *param, uint16_t num, char *st, bool isStr){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	4613      	mov	r3, r2
 8000cae:	80fb      	strh	r3, [r7, #6]

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000cb0:	201e      	movs	r0, #30
 8000cb2:	f003 fa6d 	bl	8004190 <malloc>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	617b      	str	r3, [r7, #20]

	int len = (isStr) ? sprintf((char *)buffer, "%s.%s=%d", obj, param, num) : sprintf((char *)buffer, "%s.%s=\"%s\"", obj, param, st);
 8000cba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d009      	beq.n	8000cd6 <NXT_SendCmd+0x36>
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	4912      	ldr	r1, [pc, #72]	; (8000d14 <NXT_SendCmd+0x74>)
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f004 f83b 	bl	8004d48 <siprintf>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	e008      	b.n	8000ce8 <NXT_SendCmd+0x48>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <NXT_SendCmd+0x78>)
 8000ce0:	6978      	ldr	r0, [r7, #20]
 8000ce2:	f004 f831 	bl	8004d48 <siprintf>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	613b      	str	r3, [r7, #16]
	HAL_UART_Transmit(&huart, buffer, len, 1000);
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	6979      	ldr	r1, [r7, #20]
 8000cf4:	4809      	ldr	r0, [pc, #36]	; (8000d1c <NXT_SendCmd+0x7c>)
 8000cf6:	f002 fc85 	bl	8003604 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, cmd_end, 3, 100);
 8000cfa:	2364      	movs	r3, #100	; 0x64
 8000cfc:	2203      	movs	r2, #3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <NXT_SendCmd+0x80>)
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <NXT_SendCmd+0x7c>)
 8000d02:	f002 fc7f 	bl	8003604 <HAL_UART_Transmit>
	free(buffer);
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f003 fa4a 	bl	80041a0 <free>
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	08007cd4 	.word	0x08007cd4
 8000d18:	08007ce0 	.word	0x08007ce0
 8000d1c:	20000204 	.word	0x20000204
 8000d20:	20000000 	.word	0x20000000

08000d24 <HC95write>:
#include "main.h"
#include "stm32f1xx_hal.h"

//uint8_t currentVal; uint8_t currentVal1;

void HC95write(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	// ...
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d2e:	4807      	ldr	r0, [pc, #28]	; (8000d4c <HC95write+0x28>)
 8000d30:	f001 fff0 	bl	8002d14 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8000d34:	20fa      	movs	r0, #250	; 0xfa
 8000d36:	f000 feed 	bl	8001b14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <HC95write+0x28>)
 8000d42:	f001 ffe7 	bl	8002d14 <HAL_GPIO_WritePin>
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40011000 	.word	0x40011000

08000d50 <HC95write1>:

void HC95write1(){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	// ...
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	4807      	ldr	r0, [pc, #28]	; (8000d78 <HC95write1+0x28>)
 8000d5c:	f001 ffda 	bl	8002d14 <HAL_GPIO_WritePin>
	HAL_Delay(750);
 8000d60:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000d64:	f000 fed6 	bl	8001b14 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <HC95write1+0x28>)
 8000d70:	f001 ffd0 	bl	8002d14 <HAL_GPIO_WritePin>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40011000 	.word	0x40011000

08000d7c <HAL_StatusToString>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
CAN_RxHeaderTypeDef RxHeader;
CAN_TxHeaderTypeDef TxHeader;

char* HAL_StatusToString(HAL_StatusTypeDef status) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
    switch(status) {
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d813      	bhi.n	8000db4 <HAL_StatusToString+0x38>
 8000d8c:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <HAL_StatusToString+0x18>)
 8000d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d92:	bf00      	nop
 8000d94:	08000da5 	.word	0x08000da5
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000dad 	.word	0x08000dad
 8000da0:	08000db1 	.word	0x08000db1
        case HAL_OK:      return "OK";					// HAL_OK
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_StatusToString+0x44>)
 8000da6:	e006      	b.n	8000db6 <HAL_StatusToString+0x3a>
        case HAL_ERROR:   return "ERROR";				// HAL_ERROR
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_StatusToString+0x48>)
 8000daa:	e004      	b.n	8000db6 <HAL_StatusToString+0x3a>
        case HAL_BUSY:    return "BUSY";				// HAL_BUSY
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_StatusToString+0x4c>)
 8000dae:	e002      	b.n	8000db6 <HAL_StatusToString+0x3a>
        case HAL_TIMEOUT: return "TIMEOUT";				// HAL_TIMEOUT
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_StatusToString+0x50>)
 8000db2:	e000      	b.n	8000db6 <HAL_StatusToString+0x3a>
        default:          return "IDK";					// UNKNOWN STATUS
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_StatusToString+0x54>)
    }
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	08007cf8 	.word	0x08007cf8
 8000dc4:	08007cfc 	.word	0x08007cfc
 8000dc8:	08007d04 	.word	0x08007d04
 8000dcc:	08007d0c 	.word	0x08007d0c
 8000dd0:	08007d14 	.word	0x08007d14

08000dd4 <Errrwhatthesigma>:

void Errrwhatthesigma(char errMsg[], int f){				// main user defined Error / ALERT handling function
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af02      	add	r7, sp, #8
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]

	if(f==3){												// LOW PRIORITY
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d118      	bne.n	8000e16 <Errrwhatthesigma+0x42>
		NXT_SendCmd("errMsg", "bco", 65535, "", false);		// changes the colour of the gear txt box to white.
 8000de4:	2300      	movs	r3, #0
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <Errrwhatthesigma+0xcc>)
 8000dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dee:	492d      	ldr	r1, [pc, #180]	; (8000ea4 <Errrwhatthesigma+0xd0>)
 8000df0:	482d      	ldr	r0, [pc, #180]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000df2:	f7ff ff55 	bl	8000ca0 <NXT_SendCmd>
		NXT_SendCmd("errMsg", "pco", 0, "", false);			// changes the colour of the text inside the "Gear" txt box to black
 8000df6:	2300      	movs	r3, #0
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <Errrwhatthesigma+0xcc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	492b      	ldr	r1, [pc, #172]	; (8000eac <Errrwhatthesigma+0xd8>)
 8000e00:	4829      	ldr	r0, [pc, #164]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000e02:	f7ff ff4d 	bl	8000ca0 <NXT_SendCmd>
		NXT_SendTXT("errMsg", errMsg);
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000e0a:	f7ff ff1d 	bl	8000c48 <NXT_SendTXT>
		ErrLedBlink(f);
 8000e0e:	6838      	ldr	r0, [r7, #0]
 8000e10:	f000 f850 	bl	8000eb4 <ErrLedBlink>
	}
	else{
		NXT_SendTXT("rad_state", errMsg);
		ErrLedBlink(f);
	}
}
 8000e14:	e03f      	b.n	8000e96 <Errrwhatthesigma+0xc2>
	else if(f==2){											// MEDIUM PRIORITY
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d118      	bne.n	8000e4e <Errrwhatthesigma+0x7a>
		NXT_SendCmd("errMsg", "bco", 65505, "", false);		// changes the colour of the gear txt box to yellow.
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <Errrwhatthesigma+0xcc>)
 8000e22:	f64f 72e1 	movw	r2, #65505	; 0xffe1
 8000e26:	491f      	ldr	r1, [pc, #124]	; (8000ea4 <Errrwhatthesigma+0xd0>)
 8000e28:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000e2a:	f7ff ff39 	bl	8000ca0 <NXT_SendCmd>
		NXT_SendCmd("errMsg", "pco", 0, "", false);			// changes the colour of the text inside the "Gear" txt box to black
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <Errrwhatthesigma+0xcc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	491d      	ldr	r1, [pc, #116]	; (8000eac <Errrwhatthesigma+0xd8>)
 8000e38:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000e3a:	f7ff ff31 	bl	8000ca0 <NXT_SendCmd>
		NXT_SendTXT("errMsg", errMsg);
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	4819      	ldr	r0, [pc, #100]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000e42:	f7ff ff01 	bl	8000c48 <NXT_SendTXT>
		ErrLedBlink(f);
 8000e46:	6838      	ldr	r0, [r7, #0]
 8000e48:	f000 f834 	bl	8000eb4 <ErrLedBlink>
}
 8000e4c:	e023      	b.n	8000e96 <Errrwhatthesigma+0xc2>
	else if(f==1){											// HIGH PRIORITY
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d119      	bne.n	8000e88 <Errrwhatthesigma+0xb4>
		NXT_SendCmd("errMsg", "bco", 51200, "", false);		// changes the colour of the gear txt box to red.
 8000e54:	2300      	movs	r3, #0
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <Errrwhatthesigma+0xcc>)
 8000e5a:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8000e5e:	4911      	ldr	r1, [pc, #68]	; (8000ea4 <Errrwhatthesigma+0xd0>)
 8000e60:	4811      	ldr	r0, [pc, #68]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000e62:	f7ff ff1d 	bl	8000ca0 <NXT_SendCmd>
		NXT_SendCmd("errMsg", "pco", 65535, "", false);		// changes the colour of the text inside the "Gear" txt box to white
 8000e66:	2300      	movs	r3, #0
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <Errrwhatthesigma+0xcc>)
 8000e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e70:	490e      	ldr	r1, [pc, #56]	; (8000eac <Errrwhatthesigma+0xd8>)
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000e74:	f7ff ff14 	bl	8000ca0 <NXT_SendCmd>
		NXT_SendTXT("errMsg", errMsg);
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <Errrwhatthesigma+0xd4>)
 8000e7c:	f7ff fee4 	bl	8000c48 <NXT_SendTXT>
		ErrLedBlink(f);
 8000e80:	6838      	ldr	r0, [r7, #0]
 8000e82:	f000 f817 	bl	8000eb4 <ErrLedBlink>
}
 8000e86:	e006      	b.n	8000e96 <Errrwhatthesigma+0xc2>
		NXT_SendTXT("rad_state", errMsg);
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4809      	ldr	r0, [pc, #36]	; (8000eb0 <Errrwhatthesigma+0xdc>)
 8000e8c:	f7ff fedc 	bl	8000c48 <NXT_SendTXT>
		ErrLedBlink(f);
 8000e90:	6838      	ldr	r0, [r7, #0]
 8000e92:	f000 f80f 	bl	8000eb4 <ErrLedBlink>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	08007d18 	.word	0x08007d18
 8000ea4:	08007d1c 	.word	0x08007d1c
 8000ea8:	08007d20 	.word	0x08007d20
 8000eac:	08007d28 	.word	0x08007d28
 8000eb0:	08007d2c 	.word	0x08007d2c

08000eb4 <ErrLedBlink>:

void ErrLedBlink(int f){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	int x = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
	while((x++) < 20){
 8000ec0:	e041      	b.n	8000f46 <ErrLedBlink+0x92>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4824      	ldr	r0, [pc, #144]	; (8000f5c <ErrLedBlink+0xa8>)
 8000eca:	f001 ff23 	bl	8002d14 <HAL_GPIO_WritePin>
		else if(f == 3)			// LOW PRIORITY
			HAL_Delay(1250);
		else
			HAL_Delay(3000);
		*/
		(f==1) ? HAL_Delay(200) : (f==2) ? HAL_Delay(750) : (f==3) ? HAL_Delay(1250) : HAL_Delay(2000);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d103      	bne.n	8000edc <ErrLedBlink+0x28>
 8000ed4:	20c8      	movs	r0, #200	; 0xc8
 8000ed6:	f000 fe1d 	bl	8001b14 <HAL_Delay>
 8000eda:	e013      	b.n	8000f04 <ErrLedBlink+0x50>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d104      	bne.n	8000eec <ErrLedBlink+0x38>
 8000ee2:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000ee6:	f000 fe15 	bl	8001b14 <HAL_Delay>
 8000eea:	e00b      	b.n	8000f04 <ErrLedBlink+0x50>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d104      	bne.n	8000efc <ErrLedBlink+0x48>
 8000ef2:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8000ef6:	f000 fe0d 	bl	8001b14 <HAL_Delay>
 8000efa:	e003      	b.n	8000f04 <ErrLedBlink+0x50>
 8000efc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f00:	f000 fe08 	bl	8001b14 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	4814      	ldr	r0, [pc, #80]	; (8000f5c <ErrLedBlink+0xa8>)
 8000f0c:	f001 ff02 	bl	8002d14 <HAL_GPIO_WritePin>
		(f==1) ? HAL_Delay(200) : (f==2) ? HAL_Delay(750) : (f==3) ? HAL_Delay(1250) : HAL_Delay(2000);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d103      	bne.n	8000f1e <ErrLedBlink+0x6a>
 8000f16:	20c8      	movs	r0, #200	; 0xc8
 8000f18:	f000 fdfc 	bl	8001b14 <HAL_Delay>
 8000f1c:	e013      	b.n	8000f46 <ErrLedBlink+0x92>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d104      	bne.n	8000f2e <ErrLedBlink+0x7a>
 8000f24:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000f28:	f000 fdf4 	bl	8001b14 <HAL_Delay>
 8000f2c:	e00b      	b.n	8000f46 <ErrLedBlink+0x92>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d104      	bne.n	8000f3e <ErrLedBlink+0x8a>
 8000f34:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8000f38:	f000 fdec 	bl	8001b14 <HAL_Delay>
 8000f3c:	e003      	b.n	8000f46 <ErrLedBlink+0x92>
 8000f3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f42:	f000 fde7 	bl	8001b14 <HAL_Delay>
	while((x++) < 20){
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60fa      	str	r2, [r7, #12]
 8000f4c:	2b13      	cmp	r3, #19
 8000f4e:	ddb8      	ble.n	8000ec2 <ErrLedBlink+0xe>
	}
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40011000 	.word	0x40011000

08000f60 <deelay>:

void deelay(uint8_t x){
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	while(x-- == 0){
 8000f6a:	bf00      	nop
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	1e5a      	subs	r2, r3, #1
 8000f70:	71fa      	strb	r2, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d105      	bne.n	8000f82 <deelay+0x22>
		for(uint8_t i = 0 ; i < 10000 ; i++);
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e7fb      	b.n	8000f7a <deelay+0x1a>
	}
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
	...

08000f90 <HAL_CAN_RxFifo1MsgPendingCallback>:
//	Predefined functions for sending different data to display

//LED DRIVING CODE GOES HERE

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	6078      	str	r0, [r7, #4]
	// could keep in infinite loop and keep checking if it getting filled, and after some time (1 min), if it doesn't, send to error handling.
	uint32_t FifoFill = HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1);
 8000f98:	2101      	movs	r1, #1
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f001 f907 	bl	80021ae <HAL_CAN_GetRxFifoFillLevel>
 8000fa0:	60f8      	str	r0, [r7, #12]
	while(! FifoFill){
 8000fa2:	e005      	b.n	8000fb0 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		Errrwhatthesigma("!FIFO_FILL", 3);
 8000fa4:	2103      	movs	r1, #3
 8000fa6:	4874      	ldr	r0, [pc, #464]	; (8001178 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e8>)
 8000fa8:	f7ff ff14 	bl	8000dd4 <Errrwhatthesigma>
		Error_Handler();
 8000fac:	f000 fb3e 	bl	800162c <Error_Handler>
	while(! FifoFill){
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f6      	beq.n	8000fa4 <HAL_CAN_RxFifo1MsgPendingCallback+0x14>
	}
	NXT_SendNum("map", FifoFill);					// Shares the fill level of FIFO1 to see how many messages are filling up the queue.
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4870      	ldr	r0, [pc, #448]	; (800117c <HAL_CAN_RxFifo1MsgPendingCallback+0x1ec>)
 8000fbc:	f7ff fdb4 	bl	8000b28 <NXT_SendNum>

	NXT_SendTXT("rad_state", "FILL"); HAL_Delay(2000);
 8000fc0:	496f      	ldr	r1, [pc, #444]	; (8001180 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f0>)
 8000fc2:	4870      	ldr	r0, [pc, #448]	; (8001184 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f4>)
 8000fc4:	f7ff fe40 	bl	8000c48 <NXT_SendTXT>
 8000fc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fcc:	f000 fda2 	bl	8001b14 <HAL_Delay>

	stat = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, canData);
 8000fd0:	4b6d      	ldr	r3, [pc, #436]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 8000fd2:	4a6e      	ldr	r2, [pc, #440]	; (800118c <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f000 ffc8 	bl	8001f6c <HAL_CAN_GetRxMessage>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b6b      	ldr	r3, [pc, #428]	; (8001190 <HAL_CAN_RxFifo1MsgPendingCallback+0x200>)
 8000fe2:	701a      	strb	r2, [r3, #0]
    if (stat != HAL_OK){							// Tells us if the CAN bus is ready, listening or not.
 8000fe4:	4b6a      	ldr	r3, [pc, #424]	; (8001190 <HAL_CAN_RxFifo1MsgPendingCallback+0x200>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00b      	beq.n	8001004 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>
    	Errrwhatthesigma(HAL_StatusToString(stat), 3);
 8000fec:	4b68      	ldr	r3, [pc, #416]	; (8001190 <HAL_CAN_RxFifo1MsgPendingCallback+0x200>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fec3 	bl	8000d7c <HAL_StatusToString>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2103      	movs	r1, #3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff feea 	bl	8000dd4 <Errrwhatthesigma>
    	Error_Handler();
 8001000:	f000 fb14 	bl	800162c <Error_Handler>
    }
    NXT_SendTXT("rad_state", "RxMsgRcvd");
 8001004:	4963      	ldr	r1, [pc, #396]	; (8001194 <HAL_CAN_RxFifo1MsgPendingCallback+0x204>)
 8001006:	485f      	ldr	r0, [pc, #380]	; (8001184 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f4>)
 8001008:	f7ff fe1e 	bl	8000c48 <NXT_SendTXT>
    //NXT_SendNum("map", 2);						// will continue to show number of meesages in fifo until the code if figured out.
    HAL_Delay(2000);
 800100c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001010:	f000 fd80 	bl	8001b14 <HAL_Delay>

    if(RxHeader.ExtId == 0x18F00400){							// ID: 0CFFF048
 8001014:	4b5d      	ldr	r3, [pc, #372]	; (800118c <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	4a5f      	ldr	r2, [pc, #380]	; (8001198 <HAL_CAN_RxFifo1MsgPendingCallback+0x208>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d124      	bne.n	8001068 <HAL_CAN_RxFifo1MsgPendingCallback+0xd8>
    	//value1 = (float)(*z_value)*0.125;
    	a_val = (canData[1] << 8) | canData[0];					// RPM (uint16_t)
 800101e:	4b5a      	ldr	r3, [pc, #360]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	4b58      	ldr	r3, [pc, #352]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b21b      	sxth	r3, r3
 8001030:	b29a      	uxth	r2, r3
 8001032:	4b5a      	ldr	r3, [pc, #360]	; (800119c <HAL_CAN_RxFifo1MsgPendingCallback+0x20c>)
 8001034:	801a      	strh	r2, [r3, #0]
    	NXT_SendNum("rpm", (int32_t)a_val);
 8001036:	4b59      	ldr	r3, [pc, #356]	; (800119c <HAL_CAN_RxFifo1MsgPendingCallback+0x20c>)
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	4619      	mov	r1, r3
 800103c:	4858      	ldr	r0, [pc, #352]	; (80011a0 <HAL_CAN_RxFifo1MsgPendingCallback+0x210>)
 800103e:	f7ff fd73 	bl	8000b28 <NXT_SendNum>
    	    // 2. Next 2 bytes as signed 16-bit integer
    	b_val = (int16_t)((canData[3] << 8) | canData[2]);		// TPS (int16_t)
 8001042:	4b51      	ldr	r3, [pc, #324]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21b      	sxth	r3, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x214>)
 8001058:	801a      	strh	r2, [r3, #0]
    	// if (b_val > 32767) b_val -= 65536;

    	NXT_SendNum("tpsbar", (int32_t)(b_val)); // can just output canData[2] as high byte (canData[3]) will always be 00
 800105a:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x214>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	4851      	ldr	r0, [pc, #324]	; (80011a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x218>)
 8001062:	f7ff fd61 	bl	8000b28 <NXT_SendNum>
    	NXT_SendNum("map", RxHeader.ExtId);
    	//sprintf(msg,"ID : %lu \r\n",RxHeader.ExtId);
   		//HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
    }

}
 8001066:	e07e      	b.n	8001166 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d6>
    else if(RxHeader.ExtId == 0x18FEEE00){						// ID: 0CFFF548
 8001068:	4b48      	ldr	r3, [pc, #288]	; (800118c <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	4a4f      	ldr	r2, [pc, #316]	; (80011ac <HAL_CAN_RxFifo1MsgPendingCallback+0x21c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d173      	bne.n	800115a <HAL_CAN_RxFifo1MsgPendingCallback+0x1ca>
    	units_val = (int8_t)(canData[7]);						// TEMPERATURE TYPE / UNIT (0 / 1)
 8001072:	4b45      	ldr	r3, [pc, #276]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 8001074:	79db      	ldrb	r3, [r3, #7]
 8001076:	b25a      	sxtb	r2, r3
 8001078:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 800107a:	701a      	strb	r2, [r3, #0]
    	if(units_val == 01) unit = 'C';
 800107c:	4b4c      	ldr	r3, [pc, #304]	; (80011b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x220>)
 800107e:	f993 3000 	ldrsb.w	r3, [r3]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d103      	bne.n	800108e <HAL_CAN_RxFifo1MsgPendingCallback+0xfe>
 8001086:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>)
 8001088:	2243      	movs	r2, #67	; 0x43
 800108a:	701a      	strb	r2, [r3, #0]
 800108c:	e002      	b.n	8001094 <HAL_CAN_RxFifo1MsgPendingCallback+0x104>
    	else unit = 'F';
 800108e:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x224>)
 8001090:	2246      	movs	r2, #70	; 0x46
 8001092:	701a      	strb	r2, [r3, #0]
    	a_val = (int32_t)(canData[1] << 8) | canData[0];		// BATTERY VOLTAGE (uint)
 8001094:	4b3c      	ldr	r3, [pc, #240]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b3c      	ldr	r3, [pc, #240]	; (800119c <HAL_CAN_RxFifo1MsgPendingCallback+0x20c>)
 80010aa:	801a      	strh	r2, [r3, #0]
    	NXT_SendFloat("bat_v", (float)(a_val*0.01), 2);
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_CAN_RxFifo1MsgPendingCallback+0x20c>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9a7 	bl	8000404 <__aeabi_i2d>
 80010b6:	a32e      	add	r3, pc, #184	; (adr r3, 8001170 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa0c 	bl	80004d8 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4610      	mov	r0, r2
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fcde 	bl	8000a88 <__aeabi_d2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2202      	movs	r2, #2
 80010d0:	4619      	mov	r1, r3
 80010d2:	4839      	ldr	r0, [pc, #228]	; (80011b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x228>)
 80010d4:	f7ff fd54 	bl	8000b80 <NXT_SendFloat>
    	c_val = (int16_t)((canData[5] << 8) | canData[4]);		// COOLANT TEMP (signed int)
 80010d8:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 80010da:	795b      	ldrb	r3, [r3, #5]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f8>)
 80010e2:	791b      	ldrb	r3, [r3, #4]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	4b33      	ldr	r3, [pc, #204]	; (80011bc <HAL_CAN_RxFifo1MsgPendingCallback+0x22c>)
 80010ee:	801a      	strh	r2, [r3, #0]
    	if (c_val > 32767) c_val -= 65536;
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <HAL_CAN_RxFifo1MsgPendingCallback+0x22c>)
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	da03      	bge.n	8001102 <HAL_CAN_RxFifo1MsgPendingCallback+0x172>
 80010fa:	4b30      	ldr	r3, [pc, #192]	; (80011bc <HAL_CAN_RxFifo1MsgPendingCallback+0x22c>)
 80010fc:	881a      	ldrh	r2, [r3, #0]
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <HAL_CAN_RxFifo1MsgPendingCallback+0x22c>)
 8001100:	801a      	strh	r2, [r3, #0]
   		NXT_SendFloat("oil_temp", (float)(c_val*0.01), 2);
 8001102:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_CAN_RxFifo1MsgPendingCallback+0x22c>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f97c 	bl	8000404 <__aeabi_i2d>
 800110c:	a318      	add	r3, pc, #96	; (adr r3, 8001170 <HAL_CAN_RxFifo1MsgPendingCallback+0x1e0>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff f9e1 	bl	80004d8 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f7ff fcb3 	bl	8000a88 <__aeabi_d2f>
 8001122:	4603      	mov	r3, r0
 8001124:	2202      	movs	r2, #2
 8001126:	4619      	mov	r1, r3
 8001128:	4825      	ldr	r0, [pc, #148]	; (80011c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x230>)
 800112a:	f7ff fd29 	bl	8000b80 <NXT_SendFloat>
    	if(c_val > 8000){
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <HAL_CAN_RxFifo1MsgPendingCallback+0x22c>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001136:	d916      	bls.n	8001166 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d6>
    		NXT_SendCmd("rad_state", "bco", 65505, "", false); 		// Turns the radiator state box to yellow to signify change
 8001138:	2300      	movs	r3, #0
 800113a:	9300      	str	r3, [sp, #0]
 800113c:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x234>)
 800113e:	f64f 72e1 	movw	r2, #65505	; 0xffe1
 8001142:	4921      	ldr	r1, [pc, #132]	; (80011c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x238>)
 8001144:	480f      	ldr	r0, [pc, #60]	; (8001184 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f4>)
 8001146:	f7ff fdab 	bl	8000ca0 <NXT_SendCmd>
    		NXT_SendTXT("rad_state", "ON");
 800114a:	4920      	ldr	r1, [pc, #128]	; (80011cc <HAL_CAN_RxFifo1MsgPendingCallback+0x23c>)
 800114c:	480d      	ldr	r0, [pc, #52]	; (8001184 <HAL_CAN_RxFifo1MsgPendingCallback+0x1f4>)
 800114e:	f7ff fd7b 	bl	8000c48 <NXT_SendTXT>
    		deelay(2);
 8001152:	2002      	movs	r0, #2
 8001154:	f7ff ff04 	bl	8000f60 <deelay>
}
 8001158:	e005      	b.n	8001166 <HAL_CAN_RxFifo1MsgPendingCallback+0x1d6>
    	NXT_SendNum("map", RxHeader.ExtId);
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_CAN_RxFifo1MsgPendingCallback+0x1fc>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	4619      	mov	r1, r3
 8001160:	4806      	ldr	r0, [pc, #24]	; (800117c <HAL_CAN_RxFifo1MsgPendingCallback+0x1ec>)
 8001162:	f7ff fce1 	bl	8000b28 <NXT_SendNum>
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	47ae147b 	.word	0x47ae147b
 8001174:	3f847ae1 	.word	0x3f847ae1
 8001178:	08007d38 	.word	0x08007d38
 800117c:	08007d44 	.word	0x08007d44
 8001180:	08007d48 	.word	0x08007d48
 8001184:	08007d2c 	.word	0x08007d2c
 8001188:	200002c4 	.word	0x200002c4
 800118c:	200002d4 	.word	0x200002d4
 8001190:	20000274 	.word	0x20000274
 8001194:	08007d50 	.word	0x08007d50
 8001198:	18f00400 	.word	0x18f00400
 800119c:	200002cc 	.word	0x200002cc
 80011a0:	08007d5c 	.word	0x08007d5c
 80011a4:	200002ce 	.word	0x200002ce
 80011a8:	08007d60 	.word	0x08007d60
 80011ac:	18feee00 	.word	0x18feee00
 80011b0:	200002c1 	.word	0x200002c1
 80011b4:	200002c0 	.word	0x200002c0
 80011b8:	08007d68 	.word	0x08007d68
 80011bc:	200002d0 	.word	0x200002d0
 80011c0:	08007d70 	.word	0x08007d70
 80011c4:	08007d18 	.word	0x08007d18
 80011c8:	08007d1c 	.word	0x08007d1c
 80011cc:	08007d7c 	.word	0x08007d7c

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d4:	f000 fc3c 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f89e 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f000 f97e 	bl	80014dc <MX_GPIO_Init>
  MX_CAN_Init();
 80011e0:	f000 f8ec 	bl	80013bc <MX_CAN_Init>
  MX_USART1_UART_Init();
 80011e4:	f000 f950 	bl	8001488 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80011e8:	f000 f8db 	bl	80013a2 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NXT_SendTXT("rad_state", ""); HAL_Delay(3000);
 80011ec:	4938      	ldr	r1, [pc, #224]	; (80012d0 <main+0x100>)
 80011ee:	4839      	ldr	r0, [pc, #228]	; (80012d4 <main+0x104>)
 80011f0:	f7ff fd2a 	bl	8000c48 <NXT_SendTXT>
 80011f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80011f8:	f000 fc8c 	bl	8001b14 <HAL_Delay>
  stat = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80011fc:	2110      	movs	r1, #16
 80011fe:	4836      	ldr	r0, [pc, #216]	; (80012d8 <main+0x108>)
 8001200:	f000 fffc 	bl	80021fc <HAL_CAN_ActivateNotification>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b34      	ldr	r3, [pc, #208]	; (80012dc <main+0x10c>)
 800120a:	701a      	strb	r2, [r3, #0]
  if(stat != HAL_OK){
 800120c:	4b33      	ldr	r3, [pc, #204]	; (80012dc <main+0x10c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00b      	beq.n	800122c <main+0x5c>
	  Errrwhatthesigma(HAL_StatusToString(stat), 2);
 8001214:	4b31      	ldr	r3, [pc, #196]	; (80012dc <main+0x10c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fdaf 	bl	8000d7c <HAL_StatusToString>
 800121e:	4603      	mov	r3, r0
 8001220:	2102      	movs	r1, #2
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fdd6 	bl	8000dd4 <Errrwhatthesigma>
	  Error_Handler();
 8001228:	f000 fa00 	bl	800162c <Error_Handler>
  }

    HC95write();
 800122c:	f7ff fd7a 	bl	8000d24 <HC95write>
    HC95write1();
 8001230:	f7ff fd8e 	bl	8000d50 <HC95write1>
  // INITIALIZING THE VALUES FOR STARTUP
  NXT_SendTXT("t4", "BPS");
 8001234:	492a      	ldr	r1, [pc, #168]	; (80012e0 <main+0x110>)
 8001236:	482b      	ldr	r0, [pc, #172]	; (80012e4 <main+0x114>)
 8001238:	f7ff fd06 	bl	8000c48 <NXT_SendTXT>
  NXT_SendTXT("t5", "TPS");
 800123c:	492a      	ldr	r1, [pc, #168]	; (80012e8 <main+0x118>)
 800123e:	482b      	ldr	r0, [pc, #172]	; (80012ec <main+0x11c>)
 8001240:	f7ff fd02 	bl	8000c48 <NXT_SendTXT>

  NXT_SendNum("rpm", 0);
 8001244:	2100      	movs	r1, #0
 8001246:	482a      	ldr	r0, [pc, #168]	; (80012f0 <main+0x120>)
 8001248:	f7ff fc6e 	bl	8000b28 <NXT_SendNum>
  NXT_SendNum("speed", 0);
 800124c:	2100      	movs	r1, #0
 800124e:	4829      	ldr	r0, [pc, #164]	; (80012f4 <main+0x124>)
 8001250:	f7ff fc6a 	bl	8000b28 <NXT_SendNum>
  NXT_SendNum("map", 0);
 8001254:	2100      	movs	r1, #0
 8001256:	4828      	ldr	r0, [pc, #160]	; (80012f8 <main+0x128>)
 8001258:	f7ff fc66 	bl	8000b28 <NXT_SendNum>

  NXT_SendNum("bbar", 0);
 800125c:	2100      	movs	r1, #0
 800125e:	4827      	ldr	r0, [pc, #156]	; (80012fc <main+0x12c>)
 8001260:	f7ff fc62 	bl	8000b28 <NXT_SendNum>
  NXT_SendNum("tpsbar", 0);
 8001264:	2100      	movs	r1, #0
 8001266:	4826      	ldr	r0, [pc, #152]	; (8001300 <main+0x130>)
 8001268:	f7ff fc5e 	bl	8000b28 <NXT_SendNum>

  NXT_SendTXT("gear", "");
 800126c:	4918      	ldr	r1, [pc, #96]	; (80012d0 <main+0x100>)
 800126e:	4825      	ldr	r0, [pc, #148]	; (8001304 <main+0x134>)
 8001270:	f7ff fcea 	bl	8000c48 <NXT_SendTXT>
  NXT_SendTXT("rad_state", "OFF");
 8001274:	4924      	ldr	r1, [pc, #144]	; (8001308 <main+0x138>)
 8001276:	4817      	ldr	r0, [pc, #92]	; (80012d4 <main+0x104>)
 8001278:	f7ff fce6 	bl	8000c48 <NXT_SendTXT>
  NXT_SendFloat("afr", 1.00, 2);
 800127c:	2202      	movs	r2, #2
 800127e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001282:	4822      	ldr	r0, [pc, #136]	; (800130c <main+0x13c>)
 8001284:	f7ff fc7c 	bl	8000b80 <NXT_SendFloat>
  NXT_SendFloat("bat_v", 1.00, 2);
 8001288:	2202      	movs	r2, #2
 800128a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800128e:	4820      	ldr	r0, [pc, #128]	; (8001310 <main+0x140>)
 8001290:	f7ff fc76 	bl	8000b80 <NXT_SendFloat>
  NXT_SendFloat("oil_temp", 1.00, 2);
 8001294:	2202      	movs	r2, #2
 8001296:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800129a:	481e      	ldr	r0, [pc, #120]	; (8001314 <main+0x144>)
 800129c:	f7ff fc70 	bl	8000b80 <NXT_SendFloat>
  // fill in with the other values. This will signify that the code has started.
  stat = HAL_CAN_Start(&hcan);
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <main+0x108>)
 80012a2:	f000 fe1f 	bl	8001ee4 <HAL_CAN_Start>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <main+0x10c>)
 80012ac:	701a      	strb	r2, [r3, #0]
  if(stat != HAL_OK){
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <main+0x10c>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00b      	beq.n	80012ce <main+0xfe>
  	  Errrwhatthesigma(HAL_StatusToString(stat), 2);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <main+0x10c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fd5e 	bl	8000d7c <HAL_StatusToString>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2102      	movs	r1, #2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd85 	bl	8000dd4 <Errrwhatthesigma>
  	  Error_Handler();
 80012ca:	f000 f9af 	bl	800162c <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int b=0;
  while(1)
 80012ce:	e7fe      	b.n	80012ce <main+0xfe>
 80012d0:	08007d18 	.word	0x08007d18
 80012d4:	08007d2c 	.word	0x08007d2c
 80012d8:	2000024c 	.word	0x2000024c
 80012dc:	20000274 	.word	0x20000274
 80012e0:	08007d80 	.word	0x08007d80
 80012e4:	08007d84 	.word	0x08007d84
 80012e8:	08007d88 	.word	0x08007d88
 80012ec:	08007d8c 	.word	0x08007d8c
 80012f0:	08007d5c 	.word	0x08007d5c
 80012f4:	08007d90 	.word	0x08007d90
 80012f8:	08007d44 	.word	0x08007d44
 80012fc:	08007d98 	.word	0x08007d98
 8001300:	08007d60 	.word	0x08007d60
 8001304:	08007da0 	.word	0x08007da0
 8001308:	08007da8 	.word	0x08007da8
 800130c:	08007dac 	.word	0x08007dac
 8001310:	08007d68 	.word	0x08007d68
 8001314:	08007d70 	.word	0x08007d70

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b090      	sub	sp, #64	; 0x40
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	2228      	movs	r2, #40	; 0x28
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fd71 	bl	8004e0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133a:	2301      	movs	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800133e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001342:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001348:	2301      	movs	r3, #1
 800134a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001354:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001356:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800135a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	4618      	mov	r0, r3
 8001362:	f001 fcef 	bl	8002d44 <HAL_RCC_OscConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800136c:	f000 f95e 	bl	800162c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001370:	230f      	movs	r3, #15
 8001372:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001374:	2302      	movs	r3, #2
 8001376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001378:	2300      	movs	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001380:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f001 ff5c 	bl	8003248 <HAL_RCC_ClockConfig>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001396:	f000 f949 	bl	800162c <Error_Handler>
  }
}
 800139a:	bf00      	nop
 800139c:	3740      	adds	r7, #64	; 0x40
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2025      	movs	r0, #37	; 0x25
 80013ac:	f001 fa45 	bl	800283a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013b0:	2025      	movs	r0, #37	; 0x25
 80013b2:	f001 fa5e 	bl	8002872 <HAL_NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <MX_CAN_Init+0xc4>)
 80013c4:	4a2f      	ldr	r2, [pc, #188]	; (8001484 <MX_CAN_Init+0xc8>)
 80013c6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80013c8:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <MX_CAN_Init+0xc4>)
 80013ca:	2212      	movs	r2, #18
 80013cc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013ce:	4b2c      	ldr	r3, [pc, #176]	; (8001480 <MX_CAN_Init+0xc4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013d4:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <MX_CAN_Init+0xc4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <MX_CAN_Init+0xc4>)
 80013dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013e0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <MX_CAN_Init+0xc4>)
 80013e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80013e8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <MX_CAN_Init+0xc4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <MX_CAN_Init+0xc4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <MX_CAN_Init+0xc4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <MX_CAN_Init+0xc4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_CAN_Init+0xc4>)
 8001404:	2200      	movs	r2, #0
 8001406:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_CAN_Init+0xc4>)
 800140a:	2200      	movs	r2, #0
 800140c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800140e:	481c      	ldr	r0, [pc, #112]	; (8001480 <MX_CAN_Init+0xc4>)
 8001410:	f000 fba4 	bl	8001b5c <HAL_CAN_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800141a:	f000 f907 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef can_filter_init;

  	can_filter_init.FilterActivation = CAN_FILTER_ENABLE;
 800141e:	2301      	movs	r3, #1
 8001420:	623b      	str	r3, [r7, #32]
  	can_filter_init.FilterBank = 10;  // Filter 0 (contains 2 32 bit Reg scans preferred ID)
 8001422:	230a      	movs	r3, #10
 8001424:	617b      	str	r3, [r7, #20]
  	can_filter_init.FilterFIFOAssignment = CAN_FILTER_FIFO1;  // FIFO1
 8001426:	2301      	movs	r3, #1
 8001428:	613b      	str	r3, [r7, #16]
  	can_filter_init.FilterIdHigh = 0x0000;
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
  	can_filter_init.FilterIdLow = 0x0000;
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  	can_filter_init.FilterMaskIdHigh = 0x0000;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  	can_filter_init.FilterMaskIdLow = 0x0000;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  	can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  	can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 800143e:	2301      	movs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
  	can_filter_init.SlaveStartFilterBank = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24

  	if(HAL_CAN_ConfigFilter(&hcan, &can_filter_init) != HAL_OK)
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_CAN_Init+0xc4>)
 800144c:	f000 fc81 	bl	8001d52 <HAL_CAN_ConfigFilter>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00f      	beq.n	8001476 <MX_CAN_Init+0xba>
  	{
  		Errrwhatthesigma(HAL_StatusToString(HAL_CAN_ConfigFilter(&hcan, &can_filter_init)), 2);
 8001456:	463b      	mov	r3, r7
 8001458:	4619      	mov	r1, r3
 800145a:	4809      	ldr	r0, [pc, #36]	; (8001480 <MX_CAN_Init+0xc4>)
 800145c:	f000 fc79 	bl	8001d52 <HAL_CAN_ConfigFilter>
 8001460:	4603      	mov	r3, r0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fc8a 	bl	8000d7c <HAL_StatusToString>
 8001468:	4603      	mov	r3, r0
 800146a:	2102      	movs	r1, #2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fcb1 	bl	8000dd4 <Errrwhatthesigma>
  		Error_Handler();
 8001472:	f000 f8db 	bl	800162c <Error_Handler>
  	}
  /* USER CODE END CAN_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000024c 	.word	0x2000024c
 8001484:	40006400 	.word	0x40006400

08001488 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART1_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 8001494:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001498:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014c0:	f002 f850 	bl	8003564 <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ca:	f000 f8af 	bl	800162c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000278 	.word	0x20000278
 80014d8:	40013800 	.word	0x40013800

080014dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f0:	4b4a      	ldr	r3, [pc, #296]	; (800161c <MX_GPIO_Init+0x140>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	4a49      	ldr	r2, [pc, #292]	; (800161c <MX_GPIO_Init+0x140>)
 80014f6:	f043 0310 	orr.w	r3, r3, #16
 80014fa:	6193      	str	r3, [r2, #24]
 80014fc:	4b47      	ldr	r3, [pc, #284]	; (800161c <MX_GPIO_Init+0x140>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001508:	4b44      	ldr	r3, [pc, #272]	; (800161c <MX_GPIO_Init+0x140>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	4a43      	ldr	r2, [pc, #268]	; (800161c <MX_GPIO_Init+0x140>)
 800150e:	f043 0320 	orr.w	r3, r3, #32
 8001512:	6193      	str	r3, [r2, #24]
 8001514:	4b41      	ldr	r3, [pc, #260]	; (800161c <MX_GPIO_Init+0x140>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	f003 0320 	and.w	r3, r3, #32
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001520:	4b3e      	ldr	r3, [pc, #248]	; (800161c <MX_GPIO_Init+0x140>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	4a3d      	ldr	r2, [pc, #244]	; (800161c <MX_GPIO_Init+0x140>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6193      	str	r3, [r2, #24]
 800152c:	4b3b      	ldr	r3, [pc, #236]	; (800161c <MX_GPIO_Init+0x140>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001538:	4b38      	ldr	r3, [pc, #224]	; (800161c <MX_GPIO_Init+0x140>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	4a37      	ldr	r2, [pc, #220]	; (800161c <MX_GPIO_Init+0x140>)
 800153e:	f043 0308 	orr.w	r3, r3, #8
 8001542:	6193      	str	r3, [r2, #24]
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <MX_GPIO_Init+0x140>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	603b      	str	r3, [r7, #0]
 800154e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001556:	4832      	ldr	r0, [pc, #200]	; (8001620 <MX_GPIO_Init+0x144>)
 8001558:	f001 fbdc 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001562:	4830      	ldr	r0, [pc, #192]	; (8001624 <MX_GPIO_Init+0x148>)
 8001564:	f001 fbd6 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800156e:	482e      	ldr	r0, [pc, #184]	; (8001628 <MX_GPIO_Init+0x14c>)
 8001570:	f001 fbd0 	bl	8002d14 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 7108 	mov.w	r1, #544	; 0x220
 800157a:	482b      	ldr	r0, [pc, #172]	; (8001628 <MX_GPIO_Init+0x14c>)
 800157c:	f001 fbca 	bl	8002d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2302      	movs	r3, #2
 8001590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4619      	mov	r1, r3
 8001598:	4821      	ldr	r0, [pc, #132]	; (8001620 <MX_GPIO_Init+0x144>)
 800159a:	f001 fa37 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800159e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	4619      	mov	r1, r3
 80015b6:	481b      	ldr	r0, [pc, #108]	; (8001624 <MX_GPIO_Init+0x148>)
 80015b8:	f001 fa28 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015bc:	2318      	movs	r3, #24
 80015be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4619      	mov	r1, r3
 80015d2:	4815      	ldr	r0, [pc, #84]	; (8001628 <MX_GPIO_Init+0x14c>)
 80015d4:	f001 fa1a 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 80015d8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80015dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4619      	mov	r1, r3
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <MX_GPIO_Init+0x14c>)
 80015f2:	f001 fa0b 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80015f6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80015fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fc:	2301      	movs	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0310 	add.w	r3, r7, #16
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <MX_GPIO_Init+0x14c>)
 8001610:	f001 f9fc 	bl	8002a0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40021000 	.word	0x40021000
 8001620:	40011000 	.word	0x40011000
 8001624:	40010800 	.word	0x40010800
 8001628:	40010c00 	.word	0x40010c00

0800162c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001630:	b672      	cpsid	i
}
 8001632:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001634:	e7fe      	b.n	8001634 <Error_Handler+0x8>
	...

08001638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_MspInit+0x5c>)
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_MspInit+0x5c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6193      	str	r3, [r2, #24]
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_MspInit+0x5c>)
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_MspInit+0x5c>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a0e      	ldr	r2, [pc, #56]	; (8001694 <HAL_MspInit+0x5c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_MspInit+0x5c>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_MspInit+0x60>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4a04      	ldr	r2, [pc, #16]	; (8001698 <HAL_MspInit+0x60>)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	3714      	adds	r7, #20
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	40021000 	.word	0x40021000
 8001698:	40010000 	.word	0x40010000

0800169c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_CAN_MspInit+0xac>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d141      	bne.n	8001740 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <HAL_CAN_MspInit+0xb0>)
 80016be:	69db      	ldr	r3, [r3, #28]
 80016c0:	4a22      	ldr	r2, [pc, #136]	; (800174c <HAL_CAN_MspInit+0xb0>)
 80016c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016c6:	61d3      	str	r3, [r2, #28]
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <HAL_CAN_MspInit+0xb0>)
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_CAN_MspInit+0xb0>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_CAN_MspInit+0xb0>)
 80016da:	f043 0304 	orr.w	r3, r3, #4
 80016de:	6193      	str	r3, [r2, #24]
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <HAL_CAN_MspInit+0xb0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4619      	mov	r1, r3
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <HAL_CAN_MspInit+0xb4>)
 8001702:	f001 f983 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <HAL_CAN_MspInit+0xb4>)
 800171c:	f001 f976 	bl	8002a0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2101      	movs	r1, #1
 8001724:	2015      	movs	r0, #21
 8001726:	f001 f888 	bl	800283a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800172a:	2015      	movs	r0, #21
 800172c:	f001 f8a1 	bl	8002872 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2101      	movs	r1, #1
 8001734:	2016      	movs	r0, #22
 8001736:	f001 f880 	bl	800283a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800173a:	2016      	movs	r0, #22
 800173c:	f001 f899 	bl	8002872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001740:	bf00      	nop
 8001742:	3720      	adds	r7, #32
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40006400 	.word	0x40006400
 800174c:	40021000 	.word	0x40021000
 8001750:	40010800 	.word	0x40010800

08001754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1c      	ldr	r2, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0x8c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d131      	bne.n	80017d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <HAL_UART_MspInit+0x90>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4a1a      	ldr	r2, [pc, #104]	; (80017e4 <HAL_UART_MspInit+0x90>)
 800177a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177e:	6193      	str	r3, [r2, #24]
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_UART_MspInit+0x90>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <HAL_UART_MspInit+0x90>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_UART_MspInit+0x90>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_UART_MspInit+0x90>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f003 0304 	and.w	r3, r3, #4
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0310 	add.w	r3, r7, #16
 80017b6:	4619      	mov	r1, r3
 80017b8:	480b      	ldr	r0, [pc, #44]	; (80017e8 <HAL_UART_MspInit+0x94>)
 80017ba:	f001 f927 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4619      	mov	r1, r3
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <HAL_UART_MspInit+0x94>)
 80017d4:	f001 f91a 	bl	8002a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	40010800 	.word	0x40010800

080017ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f0:	e7fe      	b.n	80017f0 <NMI_Handler+0x4>

080017f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f2:	b480      	push	{r7}
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017f6:	e7fe      	b.n	80017f6 <HardFault_Handler+0x4>

080017f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017fc:	e7fe      	b.n	80017fc <MemManage_Handler+0x4>

080017fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001802:	e7fe      	b.n	8001802 <BusFault_Handler+0x4>

08001804 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001808:	e7fe      	b.n	8001808 <UsageFault_Handler+0x4>

0800180a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr

08001822 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 f953 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <CAN1_RX1_IRQHandler+0x10>)
 8001842:	f000 fd00 	bl	8002246 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000024c 	.word	0x2000024c

08001850 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <CAN1_SCE_IRQHandler+0x10>)
 8001856:	f000 fcf6 	bl	8002246 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	2000024c 	.word	0x2000024c

08001864 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <USART1_IRQHandler+0x10>)
 800186a:	f001 ff57 	bl	800371c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000278 	.word	0x20000278

08001878 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return 1;
 800187c:	2301      	movs	r3, #1
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <_kill>:

int _kill(int pid, int sig)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001890:	f003 fb20 	bl	8004ed4 <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	2216      	movs	r2, #22
 8001898:	601a      	str	r2, [r3, #0]
  return -1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <_exit>:

void _exit (int status)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ae:	f04f 31ff 	mov.w	r1, #4294967295
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffe7 	bl	8001886 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b8:	e7fe      	b.n	80018b8 <_exit+0x12>

080018ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e00a      	b.n	80018e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018cc:	f3af 8000 	nop.w
 80018d0:	4601      	mov	r1, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf0      	blt.n	80018cc <_read+0x12>
  }

  return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e009      	b.n	800191a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	60ba      	str	r2, [r7, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf1      	blt.n	8001906 <_write+0x12>
  }
  return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_close>:

int _close(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
 800194a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001952:	605a      	str	r2, [r3, #4]
  return 0;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <_isatty>:

int _isatty(int file)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001968:	2301      	movs	r3, #1
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	; (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	; (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f003 fa8a 	bl	8004ed4 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20005000 	.word	0x20005000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	200002f0 	.word	0x200002f0
 80019f4:	20000448 	.word	0x20000448

080019f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff fff8 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a0a:	490c      	ldr	r1, [pc, #48]	; (8001a3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	; (8001a40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a20:	4c09      	ldr	r4, [pc, #36]	; (8001a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f003 fa57 	bl	8004ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7ff fbcd 	bl	80011d0 <main>
  bx lr
 8001a36:	4770      	bx	lr
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001a40:	08008188 	.word	0x08008188
  ldr r2, =_sbss
 8001a44:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001a48:	20000444 	.word	0x20000444

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_Init+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_Init+0x28>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 fedf 	bl	8002824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fde4 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 fef7 	bl	800288e <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 febf 	bl	800283a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000004 	.word	0x20000004
 8001ad4:	2000000c 	.word	0x2000000c
 8001ad8:	20000008 	.word	0x20000008

08001adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_IncTick+0x1c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_IncTick+0x20>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a03      	ldr	r2, [pc, #12]	; (8001afc <HAL_IncTick+0x20>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	2000000c 	.word	0x2000000c
 8001afc:	200002f4 	.word	0x200002f4

08001b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b02      	ldr	r3, [pc, #8]	; (8001b10 <HAL_GetTick+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	200002f4 	.word	0x200002f4

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffe0 	bl	8001b00 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	2000000c 	.word	0x2000000c

08001b5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0ed      	b.n	8001d4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fd8e 	bl	800169c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b90:	f7ff ffb6 	bl	8001b00 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b96:	e012      	b.n	8001bbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b98:	f7ff ffb2 	bl	8001b00 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d90b      	bls.n	8001bbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0c5      	b.n	8001d4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0e5      	beq.n	8001b98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0202 	bic.w	r2, r2, #2
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bdc:	f7ff ff90 	bl	8001b00 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001be2:	e012      	b.n	8001c0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be4:	f7ff ff8c 	bl	8001b00 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d90b      	bls.n	8001c0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2205      	movs	r2, #5
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e09f      	b.n	8001d4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e5      	bne.n	8001be4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e1b      	ldrb	r3, [r3, #24]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e007      	b.n	8001c42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7e5b      	ldrb	r3, [r3, #25]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d108      	bne.n	8001c5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e9b      	ldrb	r3, [r3, #26]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d108      	bne.n	8001c86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e007      	b.n	8001c96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0220 	bic.w	r2, r2, #32
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7edb      	ldrb	r3, [r3, #27]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0210 	bic.w	r2, r2, #16
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e007      	b.n	8001cc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0210 	orr.w	r2, r2, #16
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7f1b      	ldrb	r3, [r3, #28]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d108      	bne.n	8001cda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0208 	orr.w	r2, r2, #8
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e007      	b.n	8001cea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0208 	bic.w	r2, r2, #8
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7f5b      	ldrb	r3, [r3, #29]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d108      	bne.n	8001d04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0204 	orr.w	r2, r2, #4
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e007      	b.n	8001d14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0204 	bic.w	r2, r2, #4
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	ea42 0103 	orr.w	r1, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001d52:	b480      	push	{r7}
 8001d54:	b087      	sub	sp, #28
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d68:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001d6a:	7cfb      	ldrb	r3, [r7, #19]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d003      	beq.n	8001d78 <HAL_CAN_ConfigFilter+0x26>
 8001d70:	7cfb      	ldrb	r3, [r7, #19]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	f040 80aa 	bne.w	8001ecc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001d7e:	f043 0201 	orr.w	r2, r3, #1
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	f003 031f 	and.w	r3, r3, #31
 8001d90:	2201      	movs	r2, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d123      	bne.n	8001dfa <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001dd4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3248      	adds	r2, #72	; 0x48
 8001dda:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dee:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001df0:	6979      	ldr	r1, [r7, #20]
 8001df2:	3348      	adds	r3, #72	; 0x48
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d122      	bne.n	8001e48 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3248      	adds	r2, #72	; 0x48
 8001e28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e3e:	6979      	ldr	r1, [r7, #20]
 8001e40:	3348      	adds	r3, #72	; 0x48
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e62:	e007      	b.n	8001e74 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ebe:	f023 0201 	bic.w	r2, r3, #1
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e006      	b.n	8001eda <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	371c      	adds	r7, #28
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d12e      	bne.n	8001f56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2202      	movs	r2, #2
 8001efc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f10:	f7ff fdf6 	bl	8001b00 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f16:	e012      	b.n	8001f3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f18:	f7ff fdf2 	bl	8001b00 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b0a      	cmp	r3, #10
 8001f24:	d90b      	bls.n	8001f3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e012      	b.n	8001f64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1e5      	bne.n	8001f18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e006      	b.n	8001f64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
  }
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b087      	sub	sp, #28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f80:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d003      	beq.n	8001f90 <HAL_CAN_GetRxMessage+0x24>
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	f040 8103 	bne.w	8002196 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10e      	bne.n	8001fb4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d116      	bne.n	8001fd2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0f7      	b.n	80021a4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0e8      	b.n	80021a4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	331b      	adds	r3, #27
 8001fda:	011b      	lsls	r3, r3, #4
 8001fdc:	4413      	add	r3, r2
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0204 	and.w	r2, r3, #4
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d10c      	bne.n	800200a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	331b      	adds	r3, #27
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	4413      	add	r3, r2
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0d5b      	lsrs	r3, r3, #21
 8002000:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e00b      	b.n	8002022 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	331b      	adds	r3, #27
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	08db      	lsrs	r3, r3, #3
 800201a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	331b      	adds	r3, #27
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	4413      	add	r3, r2
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0202 	and.w	r2, r3, #2
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	331b      	adds	r3, #27
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	3304      	adds	r3, #4
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2208      	movs	r2, #8
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	e00b      	b.n	8002070 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	331b      	adds	r3, #27
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 020f 	and.w	r2, r3, #15
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	331b      	adds	r3, #27
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4413      	add	r3, r2
 800207c:	3304      	adds	r3, #4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0a1b      	lsrs	r3, r3, #8
 8002082:	b2da      	uxtb	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	331b      	adds	r3, #27
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	4413      	add	r3, r2
 8002094:	3304      	adds	r3, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4413      	add	r3, r2
 80020c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0a1a      	lsrs	r2, r3, #8
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	3301      	adds	r3, #1
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	4413      	add	r3, r2
 80020da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	0c1a      	lsrs	r2, r3, #16
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3302      	adds	r3, #2
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e1a      	lsrs	r2, r3, #24
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3303      	adds	r3, #3
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	011b      	lsls	r3, r3, #4
 800210c:	4413      	add	r3, r2
 800210e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	3304      	adds	r3, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	4413      	add	r3, r2
 8002126:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	0a1a      	lsrs	r2, r3, #8
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3305      	adds	r3, #5
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	4413      	add	r3, r2
 8002140:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0c1a      	lsrs	r2, r3, #16
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	3306      	adds	r3, #6
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	4413      	add	r3, r2
 800215a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	0e1a      	lsrs	r2, r3, #24
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	3307      	adds	r3, #7
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0220 	orr.w	r2, r2, #32
 800217e:	60da      	str	r2, [r3, #12]
 8002180:	e007      	b.n	8002192 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691a      	ldr	r2, [r3, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f042 0220 	orr.w	r2, r2, #32
 8002190:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e006      	b.n	80021a4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
  }
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b085      	sub	sp, #20
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d002      	beq.n	80021d0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80021ca:	7afb      	ldrb	r3, [r7, #11]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d10f      	bne.n	80021f0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e005      	b.n	80021f0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80021f0:	68fb      	ldr	r3, [r7, #12]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d002      	beq.n	800221a <HAL_CAN_ActivateNotification+0x1e>
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d109      	bne.n	800222e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6959      	ldr	r1, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	e006      	b.n	800223c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002232:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
  }
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	bc80      	pop	{r7}
 8002244:	4770      	bx	lr

08002246 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b08a      	sub	sp, #40	; 0x28
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800224e:	2300      	movs	r3, #0
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d07c      	beq.n	8002386 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d023      	beq.n	80022de <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f000 f983 	bl	80025b4 <HAL_CAN_TxMailbox0CompleteCallback>
 80022ae:	e016      	b.n	80022de <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
 80022c2:	e00c      	b.n	80022de <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d004      	beq.n	80022d8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	e002      	b.n	80022de <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f986 	bl	80025ea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d024      	beq.n	8002332 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f962 	bl	80025c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8002302:	e016      	b.n	8002332 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230a:	2b00      	cmp	r3, #0
 800230c:	d004      	beq.n	8002318 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e00c      	b.n	8002332 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231e:	2b00      	cmp	r3, #0
 8002320:	d004      	beq.n	800232c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
 800232a:	e002      	b.n	8002332 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f965 	bl	80025fc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d024      	beq.n	8002386 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002344:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f941 	bl	80025d8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002356:	e016      	b.n	8002386 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
 800236a:	e00c      	b.n	8002386 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	e002      	b.n	8002386 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f944 	bl	800260e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2210      	movs	r2, #16
 80023a8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00b      	beq.n	80023cc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2208      	movs	r2, #8
 80023c4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f933 	bl	8002632 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f91b 	bl	8002620 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00c      	beq.n	800240e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f003 0310 	and.w	r3, r3, #16
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002404:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2210      	movs	r2, #16
 800240c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00b      	beq.n	8002430 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d006      	beq.n	8002430 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2208      	movs	r2, #8
 8002428:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f90a 	bl	8002644 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7fe fda1 	bl	8000f90 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d006      	beq.n	8002470 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2210      	movs	r2, #16
 8002468:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f8f3 	bl	8002656 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d006      	beq.n	8002492 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2208      	movs	r2, #8
 800248a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8eb 	bl	8002668 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d07b      	beq.n	8002594 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d072      	beq.n	800258c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002500:	2b00      	cmp	r3, #0
 8002502:	d043      	beq.n	800258c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03e      	beq.n	800258c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d02b      	beq.n	8002570 <HAL_CAN_IRQHandler+0x32a>
 8002518:	2b60      	cmp	r3, #96	; 0x60
 800251a:	d82e      	bhi.n	800257a <HAL_CAN_IRQHandler+0x334>
 800251c:	2b50      	cmp	r3, #80	; 0x50
 800251e:	d022      	beq.n	8002566 <HAL_CAN_IRQHandler+0x320>
 8002520:	2b50      	cmp	r3, #80	; 0x50
 8002522:	d82a      	bhi.n	800257a <HAL_CAN_IRQHandler+0x334>
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d019      	beq.n	800255c <HAL_CAN_IRQHandler+0x316>
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d826      	bhi.n	800257a <HAL_CAN_IRQHandler+0x334>
 800252c:	2b30      	cmp	r3, #48	; 0x30
 800252e:	d010      	beq.n	8002552 <HAL_CAN_IRQHandler+0x30c>
 8002530:	2b30      	cmp	r3, #48	; 0x30
 8002532:	d822      	bhi.n	800257a <HAL_CAN_IRQHandler+0x334>
 8002534:	2b10      	cmp	r3, #16
 8002536:	d002      	beq.n	800253e <HAL_CAN_IRQHandler+0x2f8>
 8002538:	2b20      	cmp	r3, #32
 800253a:	d005      	beq.n	8002548 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800253c:	e01d      	b.n	800257a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002546:	e019      	b.n	800257c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	f043 0310 	orr.w	r3, r3, #16
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002550:	e014      	b.n	800257c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f043 0320 	orr.w	r3, r3, #32
 8002558:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800255a:	e00f      	b.n	800257c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002564:	e00a      	b.n	800257c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800256e:	e005      	b.n	800257c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002578:	e000      	b.n	800257c <HAL_CAN_IRQHandler+0x336>
            break;
 800257a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800258a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2204      	movs	r2, #4
 8002592:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002596:	2b00      	cmp	r3, #0
 8002598:	d008      	beq.n	80025ac <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	431a      	orrs	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f867 	bl	800267a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80025ac:	bf00      	nop
 80025ae:	3728      	adds	r7, #40	; 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800269c:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026a8:	4013      	ands	r3, r2
 80026aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <__NVIC_SetPriorityGrouping+0x44>)
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	60d3      	str	r3, [r2, #12]
}
 80026c4:	bf00      	nop
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <__NVIC_GetPriorityGrouping+0x18>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0307 	and.w	r3, r3, #7
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	db0b      	blt.n	800271a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	f003 021f 	and.w	r2, r3, #31
 8002708:	4906      	ldr	r1, [pc, #24]	; (8002724 <__NVIC_EnableIRQ+0x34>)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2001      	movs	r0, #1
 8002712:	fa00 f202 	lsl.w	r2, r0, r2
 8002716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100

08002728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002738:	2b00      	cmp	r3, #0
 800273a:	db0a      	blt.n	8002752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b2da      	uxtb	r2, r3
 8002740:	490c      	ldr	r1, [pc, #48]	; (8002774 <__NVIC_SetPriority+0x4c>)
 8002742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	440b      	add	r3, r1
 800274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002750:	e00a      	b.n	8002768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	b2da      	uxtb	r2, r3
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <__NVIC_SetPriority+0x50>)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	3b04      	subs	r3, #4
 8002760:	0112      	lsls	r2, r2, #4
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	440b      	add	r3, r1
 8002766:	761a      	strb	r2, [r3, #24]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	e000e100 	.word	0xe000e100
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277c:	b480      	push	{r7}
 800277e:	b089      	sub	sp, #36	; 0x24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	f1c3 0307 	rsb	r3, r3, #7
 8002796:	2b04      	cmp	r3, #4
 8002798:	bf28      	it	cs
 800279a:	2304      	movcs	r3, #4
 800279c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3304      	adds	r3, #4
 80027a2:	2b06      	cmp	r3, #6
 80027a4:	d902      	bls.n	80027ac <NVIC_EncodePriority+0x30>
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3b03      	subs	r3, #3
 80027aa:	e000      	b.n	80027ae <NVIC_EncodePriority+0x32>
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b0:	f04f 32ff 	mov.w	r2, #4294967295
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027c4:	f04f 31ff 	mov.w	r1, #4294967295
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa01 f303 	lsl.w	r3, r1, r3
 80027ce:	43d9      	mvns	r1, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d4:	4313      	orrs	r3, r2
         );
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027f0:	d301      	bcc.n	80027f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00f      	b.n	8002816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <SysTick_Config+0x40>)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027fe:	210f      	movs	r1, #15
 8002800:	f04f 30ff 	mov.w	r0, #4294967295
 8002804:	f7ff ff90 	bl	8002728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <SysTick_Config+0x40>)
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800280e:	4b04      	ldr	r3, [pc, #16]	; (8002820 <SysTick_Config+0x40>)
 8002810:	2207      	movs	r2, #7
 8002812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	e000e010 	.word	0xe000e010

08002824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff2d 	bl	800268c <__NVIC_SetPriorityGrouping>
}
 8002832:	bf00      	nop
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
 8002846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800284c:	f7ff ff42 	bl	80026d4 <__NVIC_GetPriorityGrouping>
 8002850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	6978      	ldr	r0, [r7, #20]
 8002858:	f7ff ff90 	bl	800277c <NVIC_EncodePriority>
 800285c:	4602      	mov	r2, r0
 800285e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002862:	4611      	mov	r1, r2
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff5f 	bl	8002728 <__NVIC_SetPriority>
}
 800286a:	bf00      	nop
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800287c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff35 	bl	80026f0 <__NVIC_EnableIRQ>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffa2 	bl	80027e0 <SysTick_Config>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d008      	beq.n	80028d0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2204      	movs	r2, #4
 80028c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e020      	b.n	8002912 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 020e 	bic.w	r2, r2, #14
 80028de:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	2101      	movs	r1, #1
 80028fa:	fa01 f202 	lsl.w	r2, r1, r2
 80028fe:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d005      	beq.n	8002940 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e051      	b.n	80029e4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 020e 	bic.w	r2, r2, #14
 800294e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_DMA_Abort_IT+0xd4>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d029      	beq.n	80029be <HAL_DMA_Abort_IT+0xa2>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a21      	ldr	r2, [pc, #132]	; (80029f4 <HAL_DMA_Abort_IT+0xd8>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d022      	beq.n	80029ba <HAL_DMA_Abort_IT+0x9e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <HAL_DMA_Abort_IT+0xdc>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01a      	beq.n	80029b4 <HAL_DMA_Abort_IT+0x98>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1e      	ldr	r2, [pc, #120]	; (80029fc <HAL_DMA_Abort_IT+0xe0>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d012      	beq.n	80029ae <HAL_DMA_Abort_IT+0x92>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <HAL_DMA_Abort_IT+0xe4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d00a      	beq.n	80029a8 <HAL_DMA_Abort_IT+0x8c>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <HAL_DMA_Abort_IT+0xe8>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d102      	bne.n	80029a2 <HAL_DMA_Abort_IT+0x86>
 800299c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80029a0:	e00e      	b.n	80029c0 <HAL_DMA_Abort_IT+0xa4>
 80029a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a6:	e00b      	b.n	80029c0 <HAL_DMA_Abort_IT+0xa4>
 80029a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029ac:	e008      	b.n	80029c0 <HAL_DMA_Abort_IT+0xa4>
 80029ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b2:	e005      	b.n	80029c0 <HAL_DMA_Abort_IT+0xa4>
 80029b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b8:	e002      	b.n	80029c0 <HAL_DMA_Abort_IT+0xa4>
 80029ba:	2310      	movs	r3, #16
 80029bc:	e000      	b.n	80029c0 <HAL_DMA_Abort_IT+0xa4>
 80029be:	2301      	movs	r3, #1
 80029c0:	4a11      	ldr	r2, [pc, #68]	; (8002a08 <HAL_DMA_Abort_IT+0xec>)
 80029c2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4798      	blx	r3
    } 
  }
  return status;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40020008 	.word	0x40020008
 80029f4:	4002001c 	.word	0x4002001c
 80029f8:	40020030 	.word	0x40020030
 80029fc:	40020044 	.word	0x40020044
 8002a00:	40020058 	.word	0x40020058
 8002a04:	4002006c 	.word	0x4002006c
 8002a08:	40020000 	.word	0x40020000

08002a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b08b      	sub	sp, #44	; 0x2c
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1e:	e169      	b.n	8002cf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a20:	2201      	movs	r2, #1
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	f040 8158 	bne.w	8002cee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4a9a      	ldr	r2, [pc, #616]	; (8002cac <HAL_GPIO_Init+0x2a0>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d05e      	beq.n	8002b06 <HAL_GPIO_Init+0xfa>
 8002a48:	4a98      	ldr	r2, [pc, #608]	; (8002cac <HAL_GPIO_Init+0x2a0>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d875      	bhi.n	8002b3a <HAL_GPIO_Init+0x12e>
 8002a4e:	4a98      	ldr	r2, [pc, #608]	; (8002cb0 <HAL_GPIO_Init+0x2a4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d058      	beq.n	8002b06 <HAL_GPIO_Init+0xfa>
 8002a54:	4a96      	ldr	r2, [pc, #600]	; (8002cb0 <HAL_GPIO_Init+0x2a4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d86f      	bhi.n	8002b3a <HAL_GPIO_Init+0x12e>
 8002a5a:	4a96      	ldr	r2, [pc, #600]	; (8002cb4 <HAL_GPIO_Init+0x2a8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d052      	beq.n	8002b06 <HAL_GPIO_Init+0xfa>
 8002a60:	4a94      	ldr	r2, [pc, #592]	; (8002cb4 <HAL_GPIO_Init+0x2a8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d869      	bhi.n	8002b3a <HAL_GPIO_Init+0x12e>
 8002a66:	4a94      	ldr	r2, [pc, #592]	; (8002cb8 <HAL_GPIO_Init+0x2ac>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d04c      	beq.n	8002b06 <HAL_GPIO_Init+0xfa>
 8002a6c:	4a92      	ldr	r2, [pc, #584]	; (8002cb8 <HAL_GPIO_Init+0x2ac>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d863      	bhi.n	8002b3a <HAL_GPIO_Init+0x12e>
 8002a72:	4a92      	ldr	r2, [pc, #584]	; (8002cbc <HAL_GPIO_Init+0x2b0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d046      	beq.n	8002b06 <HAL_GPIO_Init+0xfa>
 8002a78:	4a90      	ldr	r2, [pc, #576]	; (8002cbc <HAL_GPIO_Init+0x2b0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d85d      	bhi.n	8002b3a <HAL_GPIO_Init+0x12e>
 8002a7e:	2b12      	cmp	r3, #18
 8002a80:	d82a      	bhi.n	8002ad8 <HAL_GPIO_Init+0xcc>
 8002a82:	2b12      	cmp	r3, #18
 8002a84:	d859      	bhi.n	8002b3a <HAL_GPIO_Init+0x12e>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <HAL_GPIO_Init+0x80>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002b07 	.word	0x08002b07
 8002a90:	08002ae1 	.word	0x08002ae1
 8002a94:	08002af3 	.word	0x08002af3
 8002a98:	08002b35 	.word	0x08002b35
 8002a9c:	08002b3b 	.word	0x08002b3b
 8002aa0:	08002b3b 	.word	0x08002b3b
 8002aa4:	08002b3b 	.word	0x08002b3b
 8002aa8:	08002b3b 	.word	0x08002b3b
 8002aac:	08002b3b 	.word	0x08002b3b
 8002ab0:	08002b3b 	.word	0x08002b3b
 8002ab4:	08002b3b 	.word	0x08002b3b
 8002ab8:	08002b3b 	.word	0x08002b3b
 8002abc:	08002b3b 	.word	0x08002b3b
 8002ac0:	08002b3b 	.word	0x08002b3b
 8002ac4:	08002b3b 	.word	0x08002b3b
 8002ac8:	08002b3b 	.word	0x08002b3b
 8002acc:	08002b3b 	.word	0x08002b3b
 8002ad0:	08002ae9 	.word	0x08002ae9
 8002ad4:	08002afd 	.word	0x08002afd
 8002ad8:	4a79      	ldr	r2, [pc, #484]	; (8002cc0 <HAL_GPIO_Init+0x2b4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ade:	e02c      	b.n	8002b3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	623b      	str	r3, [r7, #32]
          break;
 8002ae6:	e029      	b.n	8002b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	3304      	adds	r3, #4
 8002aee:	623b      	str	r3, [r7, #32]
          break;
 8002af0:	e024      	b.n	8002b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	3308      	adds	r3, #8
 8002af8:	623b      	str	r3, [r7, #32]
          break;
 8002afa:	e01f      	b.n	8002b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	330c      	adds	r3, #12
 8002b02:	623b      	str	r3, [r7, #32]
          break;
 8002b04:	e01a      	b.n	8002b3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d102      	bne.n	8002b14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b0e:	2304      	movs	r3, #4
 8002b10:	623b      	str	r3, [r7, #32]
          break;
 8002b12:	e013      	b.n	8002b3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d105      	bne.n	8002b28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	611a      	str	r2, [r3, #16]
          break;
 8002b26:	e009      	b.n	8002b3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b28:	2308      	movs	r3, #8
 8002b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	615a      	str	r2, [r3, #20]
          break;
 8002b32:	e003      	b.n	8002b3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b34:	2300      	movs	r3, #0
 8002b36:	623b      	str	r3, [r7, #32]
          break;
 8002b38:	e000      	b.n	8002b3c <HAL_GPIO_Init+0x130>
          break;
 8002b3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2bff      	cmp	r3, #255	; 0xff
 8002b40:	d801      	bhi.n	8002b46 <HAL_GPIO_Init+0x13a>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	e001      	b.n	8002b4a <HAL_GPIO_Init+0x13e>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2bff      	cmp	r3, #255	; 0xff
 8002b50:	d802      	bhi.n	8002b58 <HAL_GPIO_Init+0x14c>
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	e002      	b.n	8002b5e <HAL_GPIO_Init+0x152>
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	3b08      	subs	r3, #8
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	210f      	movs	r1, #15
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	401a      	ands	r2, r3
 8002b70:	6a39      	ldr	r1, [r7, #32]
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f000 80b1 	beq.w	8002cee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b8c:	4b4d      	ldr	r3, [pc, #308]	; (8002cc4 <HAL_GPIO_Init+0x2b8>)
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	4a4c      	ldr	r2, [pc, #304]	; (8002cc4 <HAL_GPIO_Init+0x2b8>)
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	6193      	str	r3, [r2, #24]
 8002b98:	4b4a      	ldr	r3, [pc, #296]	; (8002cc4 <HAL_GPIO_Init+0x2b8>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002ba4:	4a48      	ldr	r2, [pc, #288]	; (8002cc8 <HAL_GPIO_Init+0x2bc>)
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	3302      	adds	r3, #2
 8002bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f003 0303 	and.w	r3, r3, #3
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	220f      	movs	r2, #15
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a40      	ldr	r2, [pc, #256]	; (8002ccc <HAL_GPIO_Init+0x2c0>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d013      	beq.n	8002bf8 <HAL_GPIO_Init+0x1ec>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_GPIO_Init+0x2c4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00d      	beq.n	8002bf4 <HAL_GPIO_Init+0x1e8>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a3e      	ldr	r2, [pc, #248]	; (8002cd4 <HAL_GPIO_Init+0x2c8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d007      	beq.n	8002bf0 <HAL_GPIO_Init+0x1e4>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a3d      	ldr	r2, [pc, #244]	; (8002cd8 <HAL_GPIO_Init+0x2cc>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d101      	bne.n	8002bec <HAL_GPIO_Init+0x1e0>
 8002be8:	2303      	movs	r3, #3
 8002bea:	e006      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e004      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e002      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <HAL_GPIO_Init+0x1ee>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bfc:	f002 0203 	and.w	r2, r2, #3
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	4093      	lsls	r3, r2
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c0a:	492f      	ldr	r1, [pc, #188]	; (8002cc8 <HAL_GPIO_Init+0x2bc>)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d006      	beq.n	8002c32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c24:	4b2d      	ldr	r3, [pc, #180]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	492c      	ldr	r1, [pc, #176]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	608b      	str	r3, [r1, #8]
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	4928      	ldr	r1, [pc, #160]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c4c:	4b23      	ldr	r3, [pc, #140]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	4922      	ldr	r1, [pc, #136]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]
 8002c58:	e006      	b.n	8002c68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c5a:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	491e      	ldr	r1, [pc, #120]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d006      	beq.n	8002c82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c74:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4918      	ldr	r1, [pc, #96]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	604b      	str	r3, [r1, #4]
 8002c80:	e006      	b.n	8002c90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c82:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	4914      	ldr	r1, [pc, #80]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d021      	beq.n	8002ce0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	490e      	ldr	r1, [pc, #56]	; (8002cdc <HAL_GPIO_Init+0x2d0>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e021      	b.n	8002cee <HAL_GPIO_Init+0x2e2>
 8002caa:	bf00      	nop
 8002cac:	10320000 	.word	0x10320000
 8002cb0:	10310000 	.word	0x10310000
 8002cb4:	10220000 	.word	0x10220000
 8002cb8:	10210000 	.word	0x10210000
 8002cbc:	10120000 	.word	0x10120000
 8002cc0:	10110000 	.word	0x10110000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010000 	.word	0x40010000
 8002ccc:	40010800 	.word	0x40010800
 8002cd0:	40010c00 	.word	0x40010c00
 8002cd4:	40011000 	.word	0x40011000
 8002cd8:	40011400 	.word	0x40011400
 8002cdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_GPIO_Init+0x304>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	4909      	ldr	r1, [pc, #36]	; (8002d10 <HAL_GPIO_Init+0x304>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f47f ae8e 	bne.w	8002a20 <HAL_GPIO_Init+0x14>
  }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	372c      	adds	r7, #44	; 0x2c
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr
 8002d10:	40010400 	.word	0x40010400

08002d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	807b      	strh	r3, [r7, #2]
 8002d20:	4613      	mov	r3, r2
 8002d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d24:	787b      	ldrb	r3, [r7, #1]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d2a:	887a      	ldrh	r2, [r7, #2]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d30:	e003      	b.n	8002d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d32:	887b      	ldrh	r3, [r7, #2]
 8002d34:	041a      	lsls	r2, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e272      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8087 	beq.w	8002e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d64:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f003 030c 	and.w	r3, r3, #12
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d00c      	beq.n	8002d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d70:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b08      	cmp	r3, #8
 8002d7a:	d112      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
 8002d7c:	4b8c      	ldr	r3, [pc, #560]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8a:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d06c      	beq.n	8002e70 <HAL_RCC_OscConfig+0x12c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d168      	bne.n	8002e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e24c      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002daa:	d106      	bne.n	8002dba <HAL_RCC_OscConfig+0x76>
 8002dac:	4b80      	ldr	r3, [pc, #512]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a7f      	ldr	r2, [pc, #508]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002db2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e02e      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0x98>
 8002dc2:	4b7b      	ldr	r3, [pc, #492]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a7a      	ldr	r2, [pc, #488]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b78      	ldr	r3, [pc, #480]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a77      	ldr	r2, [pc, #476]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e01d      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCC_OscConfig+0xbc>
 8002de6:	4b72      	ldr	r3, [pc, #456]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a71      	ldr	r2, [pc, #452]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b6f      	ldr	r3, [pc, #444]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a6e      	ldr	r2, [pc, #440]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	e00b      	b.n	8002e18 <HAL_RCC_OscConfig+0xd4>
 8002e00:	4b6b      	ldr	r3, [pc, #428]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a6a      	ldr	r2, [pc, #424]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e0a:	6013      	str	r3, [r2, #0]
 8002e0c:	4b68      	ldr	r3, [pc, #416]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a67      	ldr	r2, [pc, #412]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d013      	beq.n	8002e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fe6e 	bl	8001b00 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe fe6a 	bl	8001b00 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	; 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e200      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0xe4>
 8002e46:	e014      	b.n	8002e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fe5a 	bl	8001b00 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e50:	f7fe fe56 	bl	8001b00 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e1ec      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e62:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x10c>
 8002e6e:	e000      	b.n	8002e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d063      	beq.n	8002f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e7e:	4b4c      	ldr	r3, [pc, #304]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 030c 	and.w	r3, r3, #12
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00b      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e8a:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d11c      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x18c>
 8002e96:	4b46      	ldr	r3, [pc, #280]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d116      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea2:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <HAL_RCC_OscConfig+0x176>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e1c0      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eba:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4939      	ldr	r1, [pc, #228]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ece:	e03a      	b.n	8002f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d020      	beq.n	8002f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed8:	4b36      	ldr	r3, [pc, #216]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ede:	f7fe fe0f 	bl	8001b00 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee6:	f7fe fe0b 	bl	8001b00 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e1a1      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d0f0      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f04:	4b2a      	ldr	r3, [pc, #168]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4927      	ldr	r1, [pc, #156]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]
 8002f18:	e015      	b.n	8002f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f1a:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f20:	f7fe fdee 	bl	8001b00 <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f26:	e008      	b.n	8002f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f28:	f7fe fdea 	bl	8001b00 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e180      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f0      	bne.n	8002f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d03a      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d019      	beq.n	8002f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f60:	f7fe fdce 	bl	8001b00 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe fdca 	bl	8001b00 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e160      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7a:	4b0d      	ldr	r3, [pc, #52]	; (8002fb0 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0f0      	beq.n	8002f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f86:	2001      	movs	r0, #1
 8002f88:	f000 face 	bl	8003528 <RCC_Delay>
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	; (8002fb8 <HAL_RCC_OscConfig+0x274>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f94:	f7fe fdb4 	bl	8001b00 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9a:	e00f      	b.n	8002fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fdb0 	bl	8001b00 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d908      	bls.n	8002fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e146      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
 8002fae:	bf00      	nop
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	42420000 	.word	0x42420000
 8002fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b92      	ldr	r3, [pc, #584]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e9      	bne.n	8002f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80a6 	beq.w	8003122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b8b      	ldr	r3, [pc, #556]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10d      	bne.n	8003002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b88      	ldr	r3, [pc, #544]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	4a87      	ldr	r2, [pc, #540]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	61d3      	str	r3, [r2, #28]
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ffe:	2301      	movs	r3, #1
 8003000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003002:	4b82      	ldr	r3, [pc, #520]	; (800320c <HAL_RCC_OscConfig+0x4c8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300a:	2b00      	cmp	r3, #0
 800300c:	d118      	bne.n	8003040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800300e:	4b7f      	ldr	r3, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x4c8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7e      	ldr	r2, [pc, #504]	; (800320c <HAL_RCC_OscConfig+0x4c8>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301a:	f7fe fd71 	bl	8001b00 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003022:	f7fe fd6d 	bl	8001b00 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b64      	cmp	r3, #100	; 0x64
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e103      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003034:	4b75      	ldr	r3, [pc, #468]	; (800320c <HAL_RCC_OscConfig+0x4c8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f0      	beq.n	8003022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x312>
 8003048:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6213      	str	r3, [r2, #32]
 8003054:	e02d      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x334>
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	6a1b      	ldr	r3, [r3, #32]
 8003062:	4a69      	ldr	r2, [pc, #420]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003064:	f023 0301 	bic.w	r3, r3, #1
 8003068:	6213      	str	r3, [r2, #32]
 800306a:	4b67      	ldr	r3, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	4a66      	ldr	r2, [pc, #408]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	6213      	str	r3, [r2, #32]
 8003076:	e01c      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d10c      	bne.n	800309a <HAL_RCC_OscConfig+0x356>
 8003080:	4b61      	ldr	r3, [pc, #388]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	4a60      	ldr	r2, [pc, #384]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	f043 0304 	orr.w	r3, r3, #4
 800308a:	6213      	str	r3, [r2, #32]
 800308c:	4b5e      	ldr	r3, [pc, #376]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	4a5d      	ldr	r2, [pc, #372]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6213      	str	r3, [r2, #32]
 8003098:	e00b      	b.n	80030b2 <HAL_RCC_OscConfig+0x36e>
 800309a:	4b5b      	ldr	r3, [pc, #364]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a5a      	ldr	r2, [pc, #360]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	6213      	str	r3, [r2, #32]
 80030a6:	4b58      	ldr	r3, [pc, #352]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a57      	ldr	r2, [pc, #348]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 0304 	bic.w	r3, r3, #4
 80030b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d015      	beq.n	80030e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fd21 	bl	8001b00 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	e00a      	b.n	80030d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c2:	f7fe fd1d 	bl	8001b00 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e0b1      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	4b4b      	ldr	r3, [pc, #300]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ee      	beq.n	80030c2 <HAL_RCC_OscConfig+0x37e>
 80030e4:	e014      	b.n	8003110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e6:	f7fe fd0b 	bl	8001b00 <HAL_GetTick>
 80030ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ee:	f7fe fd07 	bl	8001b00 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d901      	bls.n	8003104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e09b      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	4b40      	ldr	r3, [pc, #256]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ee      	bne.n	80030ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003110:	7dfb      	ldrb	r3, [r7, #23]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003116:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	4a3b      	ldr	r2, [pc, #236]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8087 	beq.w	800323a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b08      	cmp	r3, #8
 8003136:	d061      	beq.n	80031fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d146      	bne.n	80031ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003140:	4b33      	ldr	r3, [pc, #204]	; (8003210 <HAL_RCC_OscConfig+0x4cc>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003146:	f7fe fcdb 	bl	8001b00 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800314e:	f7fe fcd7 	bl	8001b00 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e06d      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f0      	bne.n	800314e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d108      	bne.n	8003188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	4921      	ldr	r1, [pc, #132]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003188:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a19      	ldr	r1, [r3, #32]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	430b      	orrs	r3, r1
 800319a:	491b      	ldr	r1, [pc, #108]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a0:	4b1b      	ldr	r3, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x4cc>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe fcab 	bl	8001b00 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ae:	f7fe fca7 	bl	8001b00 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e03d      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x46a>
 80031cc:	e035      	b.n	800323a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fe fc94 	bl	8001b00 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fe fc90 	bl	8001b00 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e026      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_RCC_OscConfig+0x4c4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x498>
 80031fa:	e01e      	b.n	800323a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d107      	bne.n	8003214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e019      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
 8003208:	40021000 	.word	0x40021000
 800320c:	40007000 	.word	0x40007000
 8003210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_OscConfig+0x500>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	429a      	cmp	r2, r3
 8003226:	d106      	bne.n	8003236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d001      	beq.n	800323a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40021000 	.word	0x40021000

08003248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e0d0      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b6a      	ldr	r3, [pc, #424]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b67      	ldr	r3, [pc, #412]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 0207 	bic.w	r2, r3, #7
 8003272:	4965      	ldr	r1, [pc, #404]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a52      	ldr	r2, [pc, #328]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d040      	beq.n	8003368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d115      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d107      	bne.n	8003316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d109      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e073      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0302 	and.w	r3, r3, #2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06b      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003326:	4b39      	ldr	r3, [pc, #228]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f023 0203 	bic.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4936      	ldr	r1, [pc, #216]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003338:	f7fe fbe2 	bl	8001b00 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7fe fbde 	bl	8001b00 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e053      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	4b2d      	ldr	r3, [pc, #180]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 020c 	and.w	r2, r3, #12
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	429a      	cmp	r2, r3
 8003366:	d1eb      	bne.n	8003340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003368:	4b27      	ldr	r3, [pc, #156]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	429a      	cmp	r2, r3
 8003374:	d210      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 0207 	bic.w	r2, r3, #7
 800337e:	4922      	ldr	r1, [pc, #136]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_RCC_ClockConfig+0x1c0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f821 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	; (8003410 <HAL_RCC_ClockConfig+0x1c8>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1cc>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1d0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fe fb40 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40022000 	.word	0x40022000
 800340c:	40021000 	.word	0x40021000
 8003410:	08007db0 	.word	0x08007db0
 8003414:	20000004 	.word	0x20000004
 8003418:	20000008 	.word	0x20000008

0800341c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003436:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 030c 	and.w	r3, r3, #12
 8003442:	2b04      	cmp	r3, #4
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x30>
 8003446:	2b08      	cmp	r3, #8
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x36>
 800344a:	e027      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800344c:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800344e:	613b      	str	r3, [r7, #16]
      break;
 8003450:	e027      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	0c9b      	lsrs	r3, r3, #18
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	4a17      	ldr	r2, [pc, #92]	; (80034b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800345c:	5cd3      	ldrb	r3, [r2, r3]
 800345e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	0c5b      	lsrs	r3, r3, #17
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	4a11      	ldr	r2, [pc, #68]	; (80034bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003476:	5cd3      	ldrb	r3, [r2, r3]
 8003478:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a0d      	ldr	r2, [pc, #52]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800347e:	fb03 f202 	mul.w	r2, r3, r2
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	fbb2 f3f3 	udiv	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e004      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0c      	ldr	r2, [pc, #48]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003490:	fb02 f303 	mul.w	r3, r2, r3
 8003494:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	613b      	str	r3, [r7, #16]
      break;
 800349a:	e002      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800349e:	613b      	str	r3, [r7, #16]
      break;
 80034a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034a2:	693b      	ldr	r3, [r7, #16]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	007a1200 	.word	0x007a1200
 80034b8:	08007dc8 	.word	0x08007dc8
 80034bc:	08007dd8 	.word	0x08007dd8
 80034c0:	003d0900 	.word	0x003d0900

080034c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b02      	ldr	r3, [pc, #8]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	20000004 	.word	0x20000004

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034dc:	f7ff fff2 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	4903      	ldr	r1, [pc, #12]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034ee:	5ccb      	ldrb	r3, [r1, r3]
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08007dc0 	.word	0x08007dc0

08003500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003504:	f7ff ffde 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	0adb      	lsrs	r3, r3, #11
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4903      	ldr	r1, [pc, #12]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	08007dc0 	.word	0x08007dc0

08003528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <RCC_Delay+0x34>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <RCC_Delay+0x38>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	0a5b      	lsrs	r3, r3, #9
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	fb02 f303 	mul.w	r3, r2, r3
 8003542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003544:	bf00      	nop
  }
  while (Delay --);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1e5a      	subs	r2, r3, #1
 800354a:	60fa      	str	r2, [r7, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f9      	bne.n	8003544 <RCC_Delay+0x1c>
}
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	3714      	adds	r7, #20
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr
 800355c:	20000004 	.word	0x20000004
 8003560:	10624dd3 	.word	0x10624dd3

08003564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e042      	b.n	80035fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7fe f8e2 	bl	8001754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	; 0x24
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fd63 	bl	8004074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	691a      	ldr	r2, [r3, #16]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08a      	sub	sp, #40	; 0x28
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	603b      	str	r3, [r7, #0]
 8003610:	4613      	mov	r3, r2
 8003612:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b20      	cmp	r3, #32
 8003622:	d175      	bne.n	8003710 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <HAL_UART_Transmit+0x2c>
 800362a:	88fb      	ldrh	r3, [r7, #6]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e06e      	b.n	8003712 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2221      	movs	r2, #33	; 0x21
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003642:	f7fe fa5d 	bl	8001b00 <HAL_GetTick>
 8003646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	88fa      	ldrh	r2, [r7, #6]
 800364c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	88fa      	ldrh	r2, [r7, #6]
 8003652:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365c:	d108      	bne.n	8003670 <HAL_UART_Transmit+0x6c>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	e003      	b.n	8003678 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003678:	e02e      	b.n	80036d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2200      	movs	r2, #0
 8003682:	2180      	movs	r1, #128	; 0x80
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 fb01 	bl	8003c8c <UART_WaitOnFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e03a      	b.n	8003712 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3302      	adds	r3, #2
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e007      	b.n	80036ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	3301      	adds	r3, #1
 80036c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036dc:	b29b      	uxth	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1cb      	bne.n	800367a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	2140      	movs	r1, #64	; 0x40
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 facd 	bl	8003c8c <UART_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e006      	b.n	8003712 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b0ba      	sub	sp, #232	; 0xe8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003742:	2300      	movs	r3, #0
 8003744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800374e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003752:	f003 030f 	and.w	r3, r3, #15
 8003756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800375a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_UART_IRQHandler+0x66>
 800376e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003772:	f003 0320 	and.w	r3, r3, #32
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fbbc 	bl	8003ef8 <UART_Receive_IT>
      return;
 8003780:	e25b      	b.n	8003c3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 80de 	beq.w	8003948 <HAL_UART_IRQHandler+0x22c>
 800378c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d106      	bne.n	80037a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 80d1 	beq.w	8003948 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_UART_IRQHandler+0xae>
 80037b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f043 0201 	orr.w	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_UART_IRQHandler+0xd2>
 80037d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_UART_IRQHandler+0xf6>
 80037fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d011      	beq.n	8003842 <HAL_UART_IRQHandler+0x126>
 800381e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d105      	bne.n	8003836 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800382a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f043 0208 	orr.w	r2, r3, #8
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 81f2 	beq.w	8003c30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800384c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003850:	f003 0320 	and.w	r3, r3, #32
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_UART_IRQHandler+0x14e>
 8003858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fb47 	bl	8003ef8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	695b      	ldr	r3, [r3, #20]
 8003870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf14      	ite	ne
 8003878:	2301      	movne	r3, #1
 800387a:	2300      	moveq	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <HAL_UART_IRQHandler+0x17a>
 800388e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003892:	2b00      	cmp	r3, #0
 8003894:	d04f      	beq.n	8003936 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fa51 	bl	8003d3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d041      	beq.n	800392e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80038c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1d9      	bne.n	80038aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d013      	beq.n	8003926 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	4a7e      	ldr	r2, [pc, #504]	; (8003afc <HAL_UART_IRQHandler+0x3e0>)
 8003904:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff f806 	bl	800291c <HAL_DMA_Abort_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003920:	4610      	mov	r0, r2
 8003922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e00e      	b.n	8003944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f99c 	bl	8003c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e00a      	b.n	8003944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f998 	bl	8003c64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	e006      	b.n	8003944 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f994 	bl	8003c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003942:	e175      	b.n	8003c30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	bf00      	nop
    return;
 8003946:	e173      	b.n	8003c30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	2b01      	cmp	r3, #1
 800394e:	f040 814f 	bne.w	8003bf0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 8148 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8141 	beq.w	8003bf0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60bb      	str	r3, [r7, #8]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80b6 	beq.w	8003b00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8145 	beq.w	8003c34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039b2:	429a      	cmp	r2, r3
 80039b4:	f080 813e 	bcs.w	8003c34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80039be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	f000 8088 	beq.w	8003adc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1d9      	bne.n	80039cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3314      	adds	r3, #20
 8003a1e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a2a:	f023 0301 	bic.w	r3, r3, #1
 8003a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a42:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a44:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a48:	e841 2300 	strex	r3, r2, [r1]
 8003a4c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e1      	bne.n	8003a18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3314      	adds	r3, #20
 8003a5a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3314      	adds	r3, #20
 8003a74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a78:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a80:	e841 2300 	strex	r3, r2, [r1]
 8003a84:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1e3      	bne.n	8003a54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aac:	f023 0310 	bic.w	r3, r3, #16
 8003ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003abe:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ac0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ac4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e3      	bne.n	8003a9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fee5 	bl	80028a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4619      	mov	r1, r3
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8bf 	bl	8003c76 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003af8:	e09c      	b.n	8003c34 <HAL_UART_IRQHandler+0x518>
 8003afa:	bf00      	nop
 8003afc:	08003e03 	.word	0x08003e03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 808e 	beq.w	8003c38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8089 	beq.w	8003c38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b4a:	647a      	str	r2, [r7, #68]	; 0x44
 8003b4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e3      	bne.n	8003b26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	3314      	adds	r3, #20
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	e853 3f00 	ldrex	r3, [r3]
 8003b6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	f023 0301 	bic.w	r3, r3, #1
 8003b74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3314      	adds	r3, #20
 8003b7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b82:	633a      	str	r2, [r7, #48]	; 0x30
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e3      	bne.n	8003b5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	e853 3f00 	ldrex	r3, [r3]
 8003bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0310 	bic.w	r3, r3, #16
 8003bba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	330c      	adds	r3, #12
 8003bc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003bc8:	61fa      	str	r2, [r7, #28]
 8003bca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e3      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003be2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003be6:	4619      	mov	r1, r3
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f844 	bl	8003c76 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bee:	e023      	b.n	8003c38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <HAL_UART_IRQHandler+0x4f4>
 8003bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f90e 	bl	8003e2a <UART_Transmit_IT>
    return;
 8003c0e:	e014      	b.n	8003c3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00e      	beq.n	8003c3a <HAL_UART_IRQHandler+0x51e>
 8003c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f94d 	bl	8003ec8 <UART_EndTransmit_IT>
    return;
 8003c2e:	e004      	b.n	8003c3a <HAL_UART_IRQHandler+0x51e>
    return;
 8003c30:	bf00      	nop
 8003c32:	e002      	b.n	8003c3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c34:	bf00      	nop
 8003c36:	e000      	b.n	8003c3a <HAL_UART_IRQHandler+0x51e>
      return;
 8003c38:	bf00      	nop
  }
}
 8003c3a:	37e8      	adds	r7, #232	; 0xe8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bc80      	pop	{r7}
 8003c50:	4770      	bx	lr

08003c52 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	460b      	mov	r3, r1
 8003c80:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9c:	e03b      	b.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d037      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fd ff2b 	bl	8001b00 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	6a3a      	ldr	r2, [r7, #32]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e03a      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d023      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b80      	cmp	r3, #128	; 0x80
 8003cd2:	d020      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d01d      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d116      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f81d 	bl	8003d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2208      	movs	r2, #8
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00f      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	bf0c      	ite	eq
 8003d26:	2301      	moveq	r3, #1
 8003d28:	2300      	movne	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	79fb      	ldrb	r3, [r7, #7]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d0b4      	beq.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3718      	adds	r7, #24
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b095      	sub	sp, #84	; 0x54
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	330c      	adds	r3, #12
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	e853 3f00 	ldrex	r3, [r3]
 8003d54:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d66:	643a      	str	r2, [r7, #64]	; 0x40
 8003d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d6e:	e841 2300 	strex	r3, r2, [r1]
 8003d72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1e5      	bne.n	8003d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3314      	adds	r3, #20
 8003d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f023 0301 	bic.w	r3, r3, #1
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3314      	adds	r3, #20
 8003d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003da0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e5      	bne.n	8003d7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d119      	bne.n	8003dea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f023 0310 	bic.w	r3, r3, #16
 8003dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dd6:	61ba      	str	r2, [r7, #24]
 8003dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6979      	ldr	r1, [r7, #20]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	613b      	str	r3, [r7, #16]
   return(result);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003df8:	bf00      	nop
 8003dfa:	3754      	adds	r7, #84	; 0x54
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bc80      	pop	{r7}
 8003e00:	4770      	bx	lr

08003e02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f7ff ff21 	bl	8003c64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e22:	bf00      	nop
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b21      	cmp	r3, #33	; 0x21
 8003e3c:	d13e      	bne.n	8003ebc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e46:	d114      	bne.n	8003e72 <UART_Transmit_IT+0x48>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d110      	bne.n	8003e72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	1c9a      	adds	r2, r3, #2
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	621a      	str	r2, [r3, #32]
 8003e70:	e008      	b.n	8003e84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	1c59      	adds	r1, r3, #1
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6211      	str	r1, [r2, #32]
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4619      	mov	r1, r3
 8003e92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10f      	bne.n	8003eb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	e000      	b.n	8003ebe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr

08003ec8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ede:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fea9 	bl	8003c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08c      	sub	sp, #48	; 0x30
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b22      	cmp	r3, #34	; 0x22
 8003f0a:	f040 80ae 	bne.w	800406a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f16:	d117      	bne.n	8003f48 <UART_Receive_IT+0x50>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d113      	bne.n	8003f48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f40:	1c9a      	adds	r2, r3, #2
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
 8003f46:	e026      	b.n	8003f96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	d007      	beq.n	8003f6c <UART_Receive_IT+0x74>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <UART_Receive_IT+0x82>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d106      	bne.n	8003f7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e008      	b.n	8003f8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d15d      	bne.n	8004066 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0220 	bic.w	r2, r2, #32
 8003fb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	695a      	ldr	r2, [r3, #20]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d135      	bne.n	800405c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	330c      	adds	r3, #12
 8003ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	613b      	str	r3, [r7, #16]
   return(result);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f023 0310 	bic.w	r3, r3, #16
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004016:	623a      	str	r2, [r7, #32]
 8004018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	69f9      	ldr	r1, [r7, #28]
 800401c:	6a3a      	ldr	r2, [r7, #32]
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	61bb      	str	r3, [r7, #24]
   return(result);
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e5      	bne.n	8003ff6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0310 	and.w	r3, r3, #16
 8004034:	2b10      	cmp	r3, #16
 8004036:	d10a      	bne.n	800404e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004052:	4619      	mov	r1, r3
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fe0e 	bl	8003c76 <HAL_UARTEx_RxEventCallback>
 800405a:	e002      	b.n	8004062 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fdf8 	bl	8003c52 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e002      	b.n	800406c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004066:	2300      	movs	r3, #0
 8004068:	e000      	b.n	800406c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800406a:	2302      	movs	r3, #2
  }
}
 800406c:	4618      	mov	r0, r3
 800406e:	3730      	adds	r7, #48	; 0x30
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ae:	f023 030c 	bic.w	r3, r3, #12
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	430b      	orrs	r3, r1
 80040ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <UART_SetConfig+0x114>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7ff fa10 	bl	8003500 <HAL_RCC_GetPCLK2Freq>
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	e002      	b.n	80040ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7ff f9f8 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 80040e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009a      	lsls	r2, r3, #2
 80040f4:	441a      	add	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <UART_SetConfig+0x118>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	0119      	lsls	r1, r3, #4
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009a      	lsls	r2, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004120:	4b1a      	ldr	r3, [pc, #104]	; (800418c <UART_SetConfig+0x118>)
 8004122:	fba3 0302 	umull	r0, r3, r3, r2
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2064      	movs	r0, #100	; 0x64
 800412a:	fb00 f303 	mul.w	r3, r0, r3
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	3332      	adds	r3, #50	; 0x32
 8004134:	4a15      	ldr	r2, [pc, #84]	; (800418c <UART_SetConfig+0x118>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004140:	4419      	add	r1, r3
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	009a      	lsls	r2, r3, #2
 800414c:	441a      	add	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	fbb2 f2f3 	udiv	r2, r2, r3
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <UART_SetConfig+0x118>)
 800415a:	fba3 0302 	umull	r0, r3, r3, r2
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2064      	movs	r0, #100	; 0x64
 8004162:	fb00 f303 	mul.w	r3, r0, r3
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	3332      	adds	r3, #50	; 0x32
 800416c:	4a07      	ldr	r2, [pc, #28]	; (800418c <UART_SetConfig+0x118>)
 800416e:	fba2 2303 	umull	r2, r3, r2, r3
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	f003 020f 	and.w	r2, r3, #15
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	440a      	add	r2, r1
 800417e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004180:	bf00      	nop
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40013800 	.word	0x40013800
 800418c:	51eb851f 	.word	0x51eb851f

08004190 <malloc>:
 8004190:	4b02      	ldr	r3, [pc, #8]	; (800419c <malloc+0xc>)
 8004192:	4601      	mov	r1, r0
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	f000 b82b 	b.w	80041f0 <_malloc_r>
 800419a:	bf00      	nop
 800419c:	20000068 	.word	0x20000068

080041a0 <free>:
 80041a0:	4b02      	ldr	r3, [pc, #8]	; (80041ac <free+0xc>)
 80041a2:	4601      	mov	r1, r0
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	f001 bd3f 	b.w	8005c28 <_free_r>
 80041aa:	bf00      	nop
 80041ac:	20000068 	.word	0x20000068

080041b0 <sbrk_aligned>:
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	4e0e      	ldr	r6, [pc, #56]	; (80041ec <sbrk_aligned+0x3c>)
 80041b4:	460c      	mov	r4, r1
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	4605      	mov	r5, r0
 80041ba:	b911      	cbnz	r1, 80041c2 <sbrk_aligned+0x12>
 80041bc:	f000 fe68 	bl	8004e90 <_sbrk_r>
 80041c0:	6030      	str	r0, [r6, #0]
 80041c2:	4621      	mov	r1, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 fe63 	bl	8004e90 <_sbrk_r>
 80041ca:	1c43      	adds	r3, r0, #1
 80041cc:	d00a      	beq.n	80041e4 <sbrk_aligned+0x34>
 80041ce:	1cc4      	adds	r4, r0, #3
 80041d0:	f024 0403 	bic.w	r4, r4, #3
 80041d4:	42a0      	cmp	r0, r4
 80041d6:	d007      	beq.n	80041e8 <sbrk_aligned+0x38>
 80041d8:	1a21      	subs	r1, r4, r0
 80041da:	4628      	mov	r0, r5
 80041dc:	f000 fe58 	bl	8004e90 <_sbrk_r>
 80041e0:	3001      	adds	r0, #1
 80041e2:	d101      	bne.n	80041e8 <sbrk_aligned+0x38>
 80041e4:	f04f 34ff 	mov.w	r4, #4294967295
 80041e8:	4620      	mov	r0, r4
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	200002fc 	.word	0x200002fc

080041f0 <_malloc_r>:
 80041f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f4:	1ccd      	adds	r5, r1, #3
 80041f6:	f025 0503 	bic.w	r5, r5, #3
 80041fa:	3508      	adds	r5, #8
 80041fc:	2d0c      	cmp	r5, #12
 80041fe:	bf38      	it	cc
 8004200:	250c      	movcc	r5, #12
 8004202:	2d00      	cmp	r5, #0
 8004204:	4607      	mov	r7, r0
 8004206:	db01      	blt.n	800420c <_malloc_r+0x1c>
 8004208:	42a9      	cmp	r1, r5
 800420a:	d905      	bls.n	8004218 <_malloc_r+0x28>
 800420c:	230c      	movs	r3, #12
 800420e:	2600      	movs	r6, #0
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4630      	mov	r0, r6
 8004214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004218:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042ec <_malloc_r+0xfc>
 800421c:	f000 f868 	bl	80042f0 <__malloc_lock>
 8004220:	f8d8 3000 	ldr.w	r3, [r8]
 8004224:	461c      	mov	r4, r3
 8004226:	bb5c      	cbnz	r4, 8004280 <_malloc_r+0x90>
 8004228:	4629      	mov	r1, r5
 800422a:	4638      	mov	r0, r7
 800422c:	f7ff ffc0 	bl	80041b0 <sbrk_aligned>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	4604      	mov	r4, r0
 8004234:	d155      	bne.n	80042e2 <_malloc_r+0xf2>
 8004236:	f8d8 4000 	ldr.w	r4, [r8]
 800423a:	4626      	mov	r6, r4
 800423c:	2e00      	cmp	r6, #0
 800423e:	d145      	bne.n	80042cc <_malloc_r+0xdc>
 8004240:	2c00      	cmp	r4, #0
 8004242:	d048      	beq.n	80042d6 <_malloc_r+0xe6>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	4631      	mov	r1, r6
 8004248:	4638      	mov	r0, r7
 800424a:	eb04 0903 	add.w	r9, r4, r3
 800424e:	f000 fe1f 	bl	8004e90 <_sbrk_r>
 8004252:	4581      	cmp	r9, r0
 8004254:	d13f      	bne.n	80042d6 <_malloc_r+0xe6>
 8004256:	6821      	ldr	r1, [r4, #0]
 8004258:	4638      	mov	r0, r7
 800425a:	1a6d      	subs	r5, r5, r1
 800425c:	4629      	mov	r1, r5
 800425e:	f7ff ffa7 	bl	80041b0 <sbrk_aligned>
 8004262:	3001      	adds	r0, #1
 8004264:	d037      	beq.n	80042d6 <_malloc_r+0xe6>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	442b      	add	r3, r5
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	f8d8 3000 	ldr.w	r3, [r8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d038      	beq.n	80042e6 <_malloc_r+0xf6>
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	42a2      	cmp	r2, r4
 8004278:	d12b      	bne.n	80042d2 <_malloc_r+0xe2>
 800427a:	2200      	movs	r2, #0
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	e00f      	b.n	80042a0 <_malloc_r+0xb0>
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	1b52      	subs	r2, r2, r5
 8004284:	d41f      	bmi.n	80042c6 <_malloc_r+0xd6>
 8004286:	2a0b      	cmp	r2, #11
 8004288:	d917      	bls.n	80042ba <_malloc_r+0xca>
 800428a:	1961      	adds	r1, r4, r5
 800428c:	42a3      	cmp	r3, r4
 800428e:	6025      	str	r5, [r4, #0]
 8004290:	bf18      	it	ne
 8004292:	6059      	strne	r1, [r3, #4]
 8004294:	6863      	ldr	r3, [r4, #4]
 8004296:	bf08      	it	eq
 8004298:	f8c8 1000 	streq.w	r1, [r8]
 800429c:	5162      	str	r2, [r4, r5]
 800429e:	604b      	str	r3, [r1, #4]
 80042a0:	4638      	mov	r0, r7
 80042a2:	f104 060b 	add.w	r6, r4, #11
 80042a6:	f000 f829 	bl	80042fc <__malloc_unlock>
 80042aa:	f026 0607 	bic.w	r6, r6, #7
 80042ae:	1d23      	adds	r3, r4, #4
 80042b0:	1af2      	subs	r2, r6, r3
 80042b2:	d0ae      	beq.n	8004212 <_malloc_r+0x22>
 80042b4:	1b9b      	subs	r3, r3, r6
 80042b6:	50a3      	str	r3, [r4, r2]
 80042b8:	e7ab      	b.n	8004212 <_malloc_r+0x22>
 80042ba:	42a3      	cmp	r3, r4
 80042bc:	6862      	ldr	r2, [r4, #4]
 80042be:	d1dd      	bne.n	800427c <_malloc_r+0x8c>
 80042c0:	f8c8 2000 	str.w	r2, [r8]
 80042c4:	e7ec      	b.n	80042a0 <_malloc_r+0xb0>
 80042c6:	4623      	mov	r3, r4
 80042c8:	6864      	ldr	r4, [r4, #4]
 80042ca:	e7ac      	b.n	8004226 <_malloc_r+0x36>
 80042cc:	4634      	mov	r4, r6
 80042ce:	6876      	ldr	r6, [r6, #4]
 80042d0:	e7b4      	b.n	800423c <_malloc_r+0x4c>
 80042d2:	4613      	mov	r3, r2
 80042d4:	e7cc      	b.n	8004270 <_malloc_r+0x80>
 80042d6:	230c      	movs	r3, #12
 80042d8:	4638      	mov	r0, r7
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	f000 f80e 	bl	80042fc <__malloc_unlock>
 80042e0:	e797      	b.n	8004212 <_malloc_r+0x22>
 80042e2:	6025      	str	r5, [r4, #0]
 80042e4:	e7dc      	b.n	80042a0 <_malloc_r+0xb0>
 80042e6:	605b      	str	r3, [r3, #4]
 80042e8:	deff      	udf	#255	; 0xff
 80042ea:	bf00      	nop
 80042ec:	200002f8 	.word	0x200002f8

080042f0 <__malloc_lock>:
 80042f0:	4801      	ldr	r0, [pc, #4]	; (80042f8 <__malloc_lock+0x8>)
 80042f2:	f000 be1a 	b.w	8004f2a <__retarget_lock_acquire_recursive>
 80042f6:	bf00      	nop
 80042f8:	20000440 	.word	0x20000440

080042fc <__malloc_unlock>:
 80042fc:	4801      	ldr	r0, [pc, #4]	; (8004304 <__malloc_unlock+0x8>)
 80042fe:	f000 be15 	b.w	8004f2c <__retarget_lock_release_recursive>
 8004302:	bf00      	nop
 8004304:	20000440 	.word	0x20000440

08004308 <__cvt>:
 8004308:	2b00      	cmp	r3, #0
 800430a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430e:	461f      	mov	r7, r3
 8004310:	bfbb      	ittet	lt
 8004312:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004316:	461f      	movlt	r7, r3
 8004318:	2300      	movge	r3, #0
 800431a:	232d      	movlt	r3, #45	; 0x2d
 800431c:	b088      	sub	sp, #32
 800431e:	4614      	mov	r4, r2
 8004320:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004322:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004324:	7013      	strb	r3, [r2, #0]
 8004326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004328:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800432c:	f023 0820 	bic.w	r8, r3, #32
 8004330:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004334:	d005      	beq.n	8004342 <__cvt+0x3a>
 8004336:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800433a:	d100      	bne.n	800433e <__cvt+0x36>
 800433c:	3501      	adds	r5, #1
 800433e:	2302      	movs	r3, #2
 8004340:	e000      	b.n	8004344 <__cvt+0x3c>
 8004342:	2303      	movs	r3, #3
 8004344:	aa07      	add	r2, sp, #28
 8004346:	9204      	str	r2, [sp, #16]
 8004348:	aa06      	add	r2, sp, #24
 800434a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800434e:	e9cd 3500 	strd	r3, r5, [sp]
 8004352:	4622      	mov	r2, r4
 8004354:	463b      	mov	r3, r7
 8004356:	f000 fe83 	bl	8005060 <_dtoa_r>
 800435a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800435e:	4606      	mov	r6, r0
 8004360:	d102      	bne.n	8004368 <__cvt+0x60>
 8004362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004364:	07db      	lsls	r3, r3, #31
 8004366:	d522      	bpl.n	80043ae <__cvt+0xa6>
 8004368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800436c:	eb06 0905 	add.w	r9, r6, r5
 8004370:	d110      	bne.n	8004394 <__cvt+0x8c>
 8004372:	7833      	ldrb	r3, [r6, #0]
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d10a      	bne.n	800438e <__cvt+0x86>
 8004378:	2200      	movs	r2, #0
 800437a:	2300      	movs	r3, #0
 800437c:	4620      	mov	r0, r4
 800437e:	4639      	mov	r1, r7
 8004380:	f7fc fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8004384:	b918      	cbnz	r0, 800438e <__cvt+0x86>
 8004386:	f1c5 0501 	rsb	r5, r5, #1
 800438a:	f8ca 5000 	str.w	r5, [sl]
 800438e:	f8da 3000 	ldr.w	r3, [sl]
 8004392:	4499      	add	r9, r3
 8004394:	2200      	movs	r2, #0
 8004396:	2300      	movs	r3, #0
 8004398:	4620      	mov	r0, r4
 800439a:	4639      	mov	r1, r7
 800439c:	f7fc fb04 	bl	80009a8 <__aeabi_dcmpeq>
 80043a0:	b108      	cbz	r0, 80043a6 <__cvt+0x9e>
 80043a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80043a6:	2230      	movs	r2, #48	; 0x30
 80043a8:	9b07      	ldr	r3, [sp, #28]
 80043aa:	454b      	cmp	r3, r9
 80043ac:	d307      	bcc.n	80043be <__cvt+0xb6>
 80043ae:	4630      	mov	r0, r6
 80043b0:	9b07      	ldr	r3, [sp, #28]
 80043b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043b4:	1b9b      	subs	r3, r3, r6
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	b008      	add	sp, #32
 80043ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	9107      	str	r1, [sp, #28]
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e7f0      	b.n	80043a8 <__cvt+0xa0>

080043c6 <__exponent>:
 80043c6:	4603      	mov	r3, r0
 80043c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ca:	2900      	cmp	r1, #0
 80043cc:	f803 2b02 	strb.w	r2, [r3], #2
 80043d0:	bfb6      	itet	lt
 80043d2:	222d      	movlt	r2, #45	; 0x2d
 80043d4:	222b      	movge	r2, #43	; 0x2b
 80043d6:	4249      	neglt	r1, r1
 80043d8:	2909      	cmp	r1, #9
 80043da:	7042      	strb	r2, [r0, #1]
 80043dc:	dd2a      	ble.n	8004434 <__exponent+0x6e>
 80043de:	f10d 0207 	add.w	r2, sp, #7
 80043e2:	4617      	mov	r7, r2
 80043e4:	260a      	movs	r6, #10
 80043e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80043ea:	4694      	mov	ip, r2
 80043ec:	fb06 1415 	mls	r4, r6, r5, r1
 80043f0:	3430      	adds	r4, #48	; 0x30
 80043f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80043f6:	460c      	mov	r4, r1
 80043f8:	2c63      	cmp	r4, #99	; 0x63
 80043fa:	4629      	mov	r1, r5
 80043fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8004400:	dcf1      	bgt.n	80043e6 <__exponent+0x20>
 8004402:	3130      	adds	r1, #48	; 0x30
 8004404:	f1ac 0402 	sub.w	r4, ip, #2
 8004408:	f802 1c01 	strb.w	r1, [r2, #-1]
 800440c:	4622      	mov	r2, r4
 800440e:	1c41      	adds	r1, r0, #1
 8004410:	42ba      	cmp	r2, r7
 8004412:	d30a      	bcc.n	800442a <__exponent+0x64>
 8004414:	f10d 0209 	add.w	r2, sp, #9
 8004418:	eba2 020c 	sub.w	r2, r2, ip
 800441c:	42bc      	cmp	r4, r7
 800441e:	bf88      	it	hi
 8004420:	2200      	movhi	r2, #0
 8004422:	4413      	add	r3, r2
 8004424:	1a18      	subs	r0, r3, r0
 8004426:	b003      	add	sp, #12
 8004428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800442e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004432:	e7ed      	b.n	8004410 <__exponent+0x4a>
 8004434:	2330      	movs	r3, #48	; 0x30
 8004436:	3130      	adds	r1, #48	; 0x30
 8004438:	7083      	strb	r3, [r0, #2]
 800443a:	70c1      	strb	r1, [r0, #3]
 800443c:	1d03      	adds	r3, r0, #4
 800443e:	e7f1      	b.n	8004424 <__exponent+0x5e>

08004440 <_printf_float>:
 8004440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004444:	b091      	sub	sp, #68	; 0x44
 8004446:	460c      	mov	r4, r1
 8004448:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800444c:	4616      	mov	r6, r2
 800444e:	461f      	mov	r7, r3
 8004450:	4605      	mov	r5, r0
 8004452:	f000 fce5 	bl	8004e20 <_localeconv_r>
 8004456:	6803      	ldr	r3, [r0, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	9309      	str	r3, [sp, #36]	; 0x24
 800445c:	f7fb fe78 	bl	8000150 <strlen>
 8004460:	2300      	movs	r3, #0
 8004462:	930e      	str	r3, [sp, #56]	; 0x38
 8004464:	f8d8 3000 	ldr.w	r3, [r8]
 8004468:	900a      	str	r0, [sp, #40]	; 0x28
 800446a:	3307      	adds	r3, #7
 800446c:	f023 0307 	bic.w	r3, r3, #7
 8004470:	f103 0208 	add.w	r2, r3, #8
 8004474:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004478:	f8d4 b000 	ldr.w	fp, [r4]
 800447c:	f8c8 2000 	str.w	r2, [r8]
 8004480:	e9d3 a800 	ldrd	sl, r8, [r3]
 8004484:	4652      	mov	r2, sl
 8004486:	4643      	mov	r3, r8
 8004488:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800448c:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8004490:	930b      	str	r3, [sp, #44]	; 0x2c
 8004492:	f04f 32ff 	mov.w	r2, #4294967295
 8004496:	4650      	mov	r0, sl
 8004498:	4b9c      	ldr	r3, [pc, #624]	; (800470c <_printf_float+0x2cc>)
 800449a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800449c:	f7fc fab6 	bl	8000a0c <__aeabi_dcmpun>
 80044a0:	bb70      	cbnz	r0, 8004500 <_printf_float+0xc0>
 80044a2:	f04f 32ff 	mov.w	r2, #4294967295
 80044a6:	4650      	mov	r0, sl
 80044a8:	4b98      	ldr	r3, [pc, #608]	; (800470c <_printf_float+0x2cc>)
 80044aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044ac:	f7fc fa90 	bl	80009d0 <__aeabi_dcmple>
 80044b0:	bb30      	cbnz	r0, 8004500 <_printf_float+0xc0>
 80044b2:	2200      	movs	r2, #0
 80044b4:	2300      	movs	r3, #0
 80044b6:	4650      	mov	r0, sl
 80044b8:	4641      	mov	r1, r8
 80044ba:	f7fc fa7f 	bl	80009bc <__aeabi_dcmplt>
 80044be:	b110      	cbz	r0, 80044c6 <_printf_float+0x86>
 80044c0:	232d      	movs	r3, #45	; 0x2d
 80044c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044c6:	4a92      	ldr	r2, [pc, #584]	; (8004710 <_printf_float+0x2d0>)
 80044c8:	4b92      	ldr	r3, [pc, #584]	; (8004714 <_printf_float+0x2d4>)
 80044ca:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044ce:	bf94      	ite	ls
 80044d0:	4690      	movls	r8, r2
 80044d2:	4698      	movhi	r8, r3
 80044d4:	2303      	movs	r3, #3
 80044d6:	f04f 0a00 	mov.w	sl, #0
 80044da:	6123      	str	r3, [r4, #16]
 80044dc:	f02b 0304 	bic.w	r3, fp, #4
 80044e0:	6023      	str	r3, [r4, #0]
 80044e2:	4633      	mov	r3, r6
 80044e4:	4621      	mov	r1, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	9700      	str	r7, [sp, #0]
 80044ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80044ec:	f000 f9d6 	bl	800489c <_printf_common>
 80044f0:	3001      	adds	r0, #1
 80044f2:	f040 8090 	bne.w	8004616 <_printf_float+0x1d6>
 80044f6:	f04f 30ff 	mov.w	r0, #4294967295
 80044fa:	b011      	add	sp, #68	; 0x44
 80044fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004500:	4652      	mov	r2, sl
 8004502:	4643      	mov	r3, r8
 8004504:	4650      	mov	r0, sl
 8004506:	4641      	mov	r1, r8
 8004508:	f7fc fa80 	bl	8000a0c <__aeabi_dcmpun>
 800450c:	b148      	cbz	r0, 8004522 <_printf_float+0xe2>
 800450e:	f1b8 0f00 	cmp.w	r8, #0
 8004512:	bfb8      	it	lt
 8004514:	232d      	movlt	r3, #45	; 0x2d
 8004516:	4a80      	ldr	r2, [pc, #512]	; (8004718 <_printf_float+0x2d8>)
 8004518:	bfb8      	it	lt
 800451a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800451e:	4b7f      	ldr	r3, [pc, #508]	; (800471c <_printf_float+0x2dc>)
 8004520:	e7d3      	b.n	80044ca <_printf_float+0x8a>
 8004522:	6863      	ldr	r3, [r4, #4]
 8004524:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	d142      	bne.n	80045b2 <_printf_float+0x172>
 800452c:	2306      	movs	r3, #6
 800452e:	6063      	str	r3, [r4, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	9206      	str	r2, [sp, #24]
 8004534:	aa0e      	add	r2, sp, #56	; 0x38
 8004536:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800453a:	aa0d      	add	r2, sp, #52	; 0x34
 800453c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004540:	9203      	str	r2, [sp, #12]
 8004542:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004546:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	4652      	mov	r2, sl
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	4628      	mov	r0, r5
 8004554:	4643      	mov	r3, r8
 8004556:	910b      	str	r1, [sp, #44]	; 0x2c
 8004558:	f7ff fed6 	bl	8004308 <__cvt>
 800455c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800455e:	4680      	mov	r8, r0
 8004560:	2947      	cmp	r1, #71	; 0x47
 8004562:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004564:	d108      	bne.n	8004578 <_printf_float+0x138>
 8004566:	1cc8      	adds	r0, r1, #3
 8004568:	db02      	blt.n	8004570 <_printf_float+0x130>
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	4299      	cmp	r1, r3
 800456e:	dd40      	ble.n	80045f2 <_printf_float+0x1b2>
 8004570:	f1a9 0902 	sub.w	r9, r9, #2
 8004574:	fa5f f989 	uxtb.w	r9, r9
 8004578:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800457c:	d81f      	bhi.n	80045be <_printf_float+0x17e>
 800457e:	464a      	mov	r2, r9
 8004580:	3901      	subs	r1, #1
 8004582:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004586:	910d      	str	r1, [sp, #52]	; 0x34
 8004588:	f7ff ff1d 	bl	80043c6 <__exponent>
 800458c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800458e:	4682      	mov	sl, r0
 8004590:	1813      	adds	r3, r2, r0
 8004592:	2a01      	cmp	r2, #1
 8004594:	6123      	str	r3, [r4, #16]
 8004596:	dc02      	bgt.n	800459e <_printf_float+0x15e>
 8004598:	6822      	ldr	r2, [r4, #0]
 800459a:	07d2      	lsls	r2, r2, #31
 800459c:	d501      	bpl.n	80045a2 <_printf_float+0x162>
 800459e:	3301      	adds	r3, #1
 80045a0:	6123      	str	r3, [r4, #16]
 80045a2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d09b      	beq.n	80044e2 <_printf_float+0xa2>
 80045aa:	232d      	movs	r3, #45	; 0x2d
 80045ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b0:	e797      	b.n	80044e2 <_printf_float+0xa2>
 80045b2:	2947      	cmp	r1, #71	; 0x47
 80045b4:	d1bc      	bne.n	8004530 <_printf_float+0xf0>
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1ba      	bne.n	8004530 <_printf_float+0xf0>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e7b7      	b.n	800452e <_printf_float+0xee>
 80045be:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045c2:	d118      	bne.n	80045f6 <_printf_float+0x1b6>
 80045c4:	2900      	cmp	r1, #0
 80045c6:	6863      	ldr	r3, [r4, #4]
 80045c8:	dd0b      	ble.n	80045e2 <_printf_float+0x1a2>
 80045ca:	6121      	str	r1, [r4, #16]
 80045cc:	b913      	cbnz	r3, 80045d4 <_printf_float+0x194>
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	07d0      	lsls	r0, r2, #31
 80045d2:	d502      	bpl.n	80045da <_printf_float+0x19a>
 80045d4:	3301      	adds	r3, #1
 80045d6:	440b      	add	r3, r1
 80045d8:	6123      	str	r3, [r4, #16]
 80045da:	f04f 0a00 	mov.w	sl, #0
 80045de:	65a1      	str	r1, [r4, #88]	; 0x58
 80045e0:	e7df      	b.n	80045a2 <_printf_float+0x162>
 80045e2:	b913      	cbnz	r3, 80045ea <_printf_float+0x1aa>
 80045e4:	6822      	ldr	r2, [r4, #0]
 80045e6:	07d2      	lsls	r2, r2, #31
 80045e8:	d501      	bpl.n	80045ee <_printf_float+0x1ae>
 80045ea:	3302      	adds	r3, #2
 80045ec:	e7f4      	b.n	80045d8 <_printf_float+0x198>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e7f2      	b.n	80045d8 <_printf_float+0x198>
 80045f2:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045f8:	4299      	cmp	r1, r3
 80045fa:	db05      	blt.n	8004608 <_printf_float+0x1c8>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	6121      	str	r1, [r4, #16]
 8004600:	07d8      	lsls	r0, r3, #31
 8004602:	d5ea      	bpl.n	80045da <_printf_float+0x19a>
 8004604:	1c4b      	adds	r3, r1, #1
 8004606:	e7e7      	b.n	80045d8 <_printf_float+0x198>
 8004608:	2900      	cmp	r1, #0
 800460a:	bfcc      	ite	gt
 800460c:	2201      	movgt	r2, #1
 800460e:	f1c1 0202 	rsble	r2, r1, #2
 8004612:	4413      	add	r3, r2
 8004614:	e7e0      	b.n	80045d8 <_printf_float+0x198>
 8004616:	6823      	ldr	r3, [r4, #0]
 8004618:	055a      	lsls	r2, r3, #21
 800461a:	d407      	bmi.n	800462c <_printf_float+0x1ec>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	4642      	mov	r2, r8
 8004620:	4631      	mov	r1, r6
 8004622:	4628      	mov	r0, r5
 8004624:	47b8      	blx	r7
 8004626:	3001      	adds	r0, #1
 8004628:	d12b      	bne.n	8004682 <_printf_float+0x242>
 800462a:	e764      	b.n	80044f6 <_printf_float+0xb6>
 800462c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004630:	f240 80dd 	bls.w	80047ee <_printf_float+0x3ae>
 8004634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004638:	2200      	movs	r2, #0
 800463a:	2300      	movs	r3, #0
 800463c:	f7fc f9b4 	bl	80009a8 <__aeabi_dcmpeq>
 8004640:	2800      	cmp	r0, #0
 8004642:	d033      	beq.n	80046ac <_printf_float+0x26c>
 8004644:	2301      	movs	r3, #1
 8004646:	4631      	mov	r1, r6
 8004648:	4628      	mov	r0, r5
 800464a:	4a35      	ldr	r2, [pc, #212]	; (8004720 <_printf_float+0x2e0>)
 800464c:	47b8      	blx	r7
 800464e:	3001      	adds	r0, #1
 8004650:	f43f af51 	beq.w	80044f6 <_printf_float+0xb6>
 8004654:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004658:	429a      	cmp	r2, r3
 800465a:	db02      	blt.n	8004662 <_printf_float+0x222>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	07d8      	lsls	r0, r3, #31
 8004660:	d50f      	bpl.n	8004682 <_printf_float+0x242>
 8004662:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004666:	4631      	mov	r1, r6
 8004668:	4628      	mov	r0, r5
 800466a:	47b8      	blx	r7
 800466c:	3001      	adds	r0, #1
 800466e:	f43f af42 	beq.w	80044f6 <_printf_float+0xb6>
 8004672:	f04f 0800 	mov.w	r8, #0
 8004676:	f104 091a 	add.w	r9, r4, #26
 800467a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800467c:	3b01      	subs	r3, #1
 800467e:	4543      	cmp	r3, r8
 8004680:	dc09      	bgt.n	8004696 <_printf_float+0x256>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	079b      	lsls	r3, r3, #30
 8004686:	f100 8104 	bmi.w	8004892 <_printf_float+0x452>
 800468a:	68e0      	ldr	r0, [r4, #12]
 800468c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800468e:	4298      	cmp	r0, r3
 8004690:	bfb8      	it	lt
 8004692:	4618      	movlt	r0, r3
 8004694:	e731      	b.n	80044fa <_printf_float+0xba>
 8004696:	2301      	movs	r3, #1
 8004698:	464a      	mov	r2, r9
 800469a:	4631      	mov	r1, r6
 800469c:	4628      	mov	r0, r5
 800469e:	47b8      	blx	r7
 80046a0:	3001      	adds	r0, #1
 80046a2:	f43f af28 	beq.w	80044f6 <_printf_float+0xb6>
 80046a6:	f108 0801 	add.w	r8, r8, #1
 80046aa:	e7e6      	b.n	800467a <_printf_float+0x23a>
 80046ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	dc38      	bgt.n	8004724 <_printf_float+0x2e4>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4631      	mov	r1, r6
 80046b6:	4628      	mov	r0, r5
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <_printf_float+0x2e0>)
 80046ba:	47b8      	blx	r7
 80046bc:	3001      	adds	r0, #1
 80046be:	f43f af1a 	beq.w	80044f6 <_printf_float+0xb6>
 80046c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80046c6:	4313      	orrs	r3, r2
 80046c8:	d102      	bne.n	80046d0 <_printf_float+0x290>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	07d9      	lsls	r1, r3, #31
 80046ce:	d5d8      	bpl.n	8004682 <_printf_float+0x242>
 80046d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d4:	4631      	mov	r1, r6
 80046d6:	4628      	mov	r0, r5
 80046d8:	47b8      	blx	r7
 80046da:	3001      	adds	r0, #1
 80046dc:	f43f af0b 	beq.w	80044f6 <_printf_float+0xb6>
 80046e0:	f04f 0900 	mov.w	r9, #0
 80046e4:	f104 0a1a 	add.w	sl, r4, #26
 80046e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046ea:	425b      	negs	r3, r3
 80046ec:	454b      	cmp	r3, r9
 80046ee:	dc01      	bgt.n	80046f4 <_printf_float+0x2b4>
 80046f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046f2:	e794      	b.n	800461e <_printf_float+0x1de>
 80046f4:	2301      	movs	r3, #1
 80046f6:	4652      	mov	r2, sl
 80046f8:	4631      	mov	r1, r6
 80046fa:	4628      	mov	r0, r5
 80046fc:	47b8      	blx	r7
 80046fe:	3001      	adds	r0, #1
 8004700:	f43f aef9 	beq.w	80044f6 <_printf_float+0xb6>
 8004704:	f109 0901 	add.w	r9, r9, #1
 8004708:	e7ee      	b.n	80046e8 <_printf_float+0x2a8>
 800470a:	bf00      	nop
 800470c:	7fefffff 	.word	0x7fefffff
 8004710:	08007dda 	.word	0x08007dda
 8004714:	08007dde 	.word	0x08007dde
 8004718:	08007de2 	.word	0x08007de2
 800471c:	08007de6 	.word	0x08007de6
 8004720:	08007dea 	.word	0x08007dea
 8004724:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004728:	429a      	cmp	r2, r3
 800472a:	bfa8      	it	ge
 800472c:	461a      	movge	r2, r3
 800472e:	2a00      	cmp	r2, #0
 8004730:	4691      	mov	r9, r2
 8004732:	dc37      	bgt.n	80047a4 <_printf_float+0x364>
 8004734:	f04f 0b00 	mov.w	fp, #0
 8004738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800473c:	f104 021a 	add.w	r2, r4, #26
 8004740:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004744:	ebaa 0309 	sub.w	r3, sl, r9
 8004748:	455b      	cmp	r3, fp
 800474a:	dc33      	bgt.n	80047b4 <_printf_float+0x374>
 800474c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004750:	429a      	cmp	r2, r3
 8004752:	db3b      	blt.n	80047cc <_printf_float+0x38c>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	07da      	lsls	r2, r3, #31
 8004758:	d438      	bmi.n	80047cc <_printf_float+0x38c>
 800475a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800475e:	eba2 0903 	sub.w	r9, r2, r3
 8004762:	eba2 020a 	sub.w	r2, r2, sl
 8004766:	4591      	cmp	r9, r2
 8004768:	bfa8      	it	ge
 800476a:	4691      	movge	r9, r2
 800476c:	f1b9 0f00 	cmp.w	r9, #0
 8004770:	dc34      	bgt.n	80047dc <_printf_float+0x39c>
 8004772:	f04f 0800 	mov.w	r8, #0
 8004776:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800477a:	f104 0a1a 	add.w	sl, r4, #26
 800477e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	eba3 0309 	sub.w	r3, r3, r9
 8004788:	4543      	cmp	r3, r8
 800478a:	f77f af7a 	ble.w	8004682 <_printf_float+0x242>
 800478e:	2301      	movs	r3, #1
 8004790:	4652      	mov	r2, sl
 8004792:	4631      	mov	r1, r6
 8004794:	4628      	mov	r0, r5
 8004796:	47b8      	blx	r7
 8004798:	3001      	adds	r0, #1
 800479a:	f43f aeac 	beq.w	80044f6 <_printf_float+0xb6>
 800479e:	f108 0801 	add.w	r8, r8, #1
 80047a2:	e7ec      	b.n	800477e <_printf_float+0x33e>
 80047a4:	4613      	mov	r3, r2
 80047a6:	4631      	mov	r1, r6
 80047a8:	4642      	mov	r2, r8
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	d1c0      	bne.n	8004734 <_printf_float+0x2f4>
 80047b2:	e6a0      	b.n	80044f6 <_printf_float+0xb6>
 80047b4:	2301      	movs	r3, #1
 80047b6:	4631      	mov	r1, r6
 80047b8:	4628      	mov	r0, r5
 80047ba:	920b      	str	r2, [sp, #44]	; 0x2c
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	f43f ae99 	beq.w	80044f6 <_printf_float+0xb6>
 80047c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047c6:	f10b 0b01 	add.w	fp, fp, #1
 80047ca:	e7b9      	b.n	8004740 <_printf_float+0x300>
 80047cc:	4631      	mov	r1, r6
 80047ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	d1bf      	bne.n	800475a <_printf_float+0x31a>
 80047da:	e68c      	b.n	80044f6 <_printf_float+0xb6>
 80047dc:	464b      	mov	r3, r9
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	eb08 020a 	add.w	r2, r8, sl
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	d1c2      	bne.n	8004772 <_printf_float+0x332>
 80047ec:	e683      	b.n	80044f6 <_printf_float+0xb6>
 80047ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047f0:	2a01      	cmp	r2, #1
 80047f2:	dc01      	bgt.n	80047f8 <_printf_float+0x3b8>
 80047f4:	07db      	lsls	r3, r3, #31
 80047f6:	d539      	bpl.n	800486c <_printf_float+0x42c>
 80047f8:	2301      	movs	r3, #1
 80047fa:	4642      	mov	r2, r8
 80047fc:	4631      	mov	r1, r6
 80047fe:	4628      	mov	r0, r5
 8004800:	47b8      	blx	r7
 8004802:	3001      	adds	r0, #1
 8004804:	f43f ae77 	beq.w	80044f6 <_printf_float+0xb6>
 8004808:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800480c:	4631      	mov	r1, r6
 800480e:	4628      	mov	r0, r5
 8004810:	47b8      	blx	r7
 8004812:	3001      	adds	r0, #1
 8004814:	f43f ae6f 	beq.w	80044f6 <_printf_float+0xb6>
 8004818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800481c:	2200      	movs	r2, #0
 800481e:	2300      	movs	r3, #0
 8004820:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004824:	f7fc f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8004828:	b9d8      	cbnz	r0, 8004862 <_printf_float+0x422>
 800482a:	f109 33ff 	add.w	r3, r9, #4294967295
 800482e:	f108 0201 	add.w	r2, r8, #1
 8004832:	4631      	mov	r1, r6
 8004834:	4628      	mov	r0, r5
 8004836:	47b8      	blx	r7
 8004838:	3001      	adds	r0, #1
 800483a:	d10e      	bne.n	800485a <_printf_float+0x41a>
 800483c:	e65b      	b.n	80044f6 <_printf_float+0xb6>
 800483e:	2301      	movs	r3, #1
 8004840:	464a      	mov	r2, r9
 8004842:	4631      	mov	r1, r6
 8004844:	4628      	mov	r0, r5
 8004846:	47b8      	blx	r7
 8004848:	3001      	adds	r0, #1
 800484a:	f43f ae54 	beq.w	80044f6 <_printf_float+0xb6>
 800484e:	f108 0801 	add.w	r8, r8, #1
 8004852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004854:	3b01      	subs	r3, #1
 8004856:	4543      	cmp	r3, r8
 8004858:	dcf1      	bgt.n	800483e <_printf_float+0x3fe>
 800485a:	4653      	mov	r3, sl
 800485c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004860:	e6de      	b.n	8004620 <_printf_float+0x1e0>
 8004862:	f04f 0800 	mov.w	r8, #0
 8004866:	f104 091a 	add.w	r9, r4, #26
 800486a:	e7f2      	b.n	8004852 <_printf_float+0x412>
 800486c:	2301      	movs	r3, #1
 800486e:	4642      	mov	r2, r8
 8004870:	e7df      	b.n	8004832 <_printf_float+0x3f2>
 8004872:	2301      	movs	r3, #1
 8004874:	464a      	mov	r2, r9
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	47b8      	blx	r7
 800487c:	3001      	adds	r0, #1
 800487e:	f43f ae3a 	beq.w	80044f6 <_printf_float+0xb6>
 8004882:	f108 0801 	add.w	r8, r8, #1
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800488a:	1a5b      	subs	r3, r3, r1
 800488c:	4543      	cmp	r3, r8
 800488e:	dcf0      	bgt.n	8004872 <_printf_float+0x432>
 8004890:	e6fb      	b.n	800468a <_printf_float+0x24a>
 8004892:	f04f 0800 	mov.w	r8, #0
 8004896:	f104 0919 	add.w	r9, r4, #25
 800489a:	e7f4      	b.n	8004886 <_printf_float+0x446>

0800489c <_printf_common>:
 800489c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a0:	4616      	mov	r6, r2
 80048a2:	4699      	mov	r9, r3
 80048a4:	688a      	ldr	r2, [r1, #8]
 80048a6:	690b      	ldr	r3, [r1, #16]
 80048a8:	4607      	mov	r7, r0
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bfb8      	it	lt
 80048ae:	4613      	movlt	r3, r2
 80048b0:	6033      	str	r3, [r6, #0]
 80048b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048b6:	460c      	mov	r4, r1
 80048b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048bc:	b10a      	cbz	r2, 80048c2 <_printf_common+0x26>
 80048be:	3301      	adds	r3, #1
 80048c0:	6033      	str	r3, [r6, #0]
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	0699      	lsls	r1, r3, #26
 80048c6:	bf42      	ittt	mi
 80048c8:	6833      	ldrmi	r3, [r6, #0]
 80048ca:	3302      	addmi	r3, #2
 80048cc:	6033      	strmi	r3, [r6, #0]
 80048ce:	6825      	ldr	r5, [r4, #0]
 80048d0:	f015 0506 	ands.w	r5, r5, #6
 80048d4:	d106      	bne.n	80048e4 <_printf_common+0x48>
 80048d6:	f104 0a19 	add.w	sl, r4, #25
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	6832      	ldr	r2, [r6, #0]
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	dc2b      	bgt.n	800493c <_printf_common+0xa0>
 80048e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048e8:	1e13      	subs	r3, r2, #0
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	bf18      	it	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	0692      	lsls	r2, r2, #26
 80048f2:	d430      	bmi.n	8004956 <_printf_common+0xba>
 80048f4:	4649      	mov	r1, r9
 80048f6:	4638      	mov	r0, r7
 80048f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048fc:	47c0      	blx	r8
 80048fe:	3001      	adds	r0, #1
 8004900:	d023      	beq.n	800494a <_printf_common+0xae>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	f003 0306 	and.w	r3, r3, #6
 800490a:	2b04      	cmp	r3, #4
 800490c:	bf14      	ite	ne
 800490e:	2500      	movne	r5, #0
 8004910:	6833      	ldreq	r3, [r6, #0]
 8004912:	f04f 0600 	mov.w	r6, #0
 8004916:	bf08      	it	eq
 8004918:	68e5      	ldreq	r5, [r4, #12]
 800491a:	f104 041a 	add.w	r4, r4, #26
 800491e:	bf08      	it	eq
 8004920:	1aed      	subeq	r5, r5, r3
 8004922:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004926:	bf08      	it	eq
 8004928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800492c:	4293      	cmp	r3, r2
 800492e:	bfc4      	itt	gt
 8004930:	1a9b      	subgt	r3, r3, r2
 8004932:	18ed      	addgt	r5, r5, r3
 8004934:	42b5      	cmp	r5, r6
 8004936:	d11a      	bne.n	800496e <_printf_common+0xd2>
 8004938:	2000      	movs	r0, #0
 800493a:	e008      	b.n	800494e <_printf_common+0xb2>
 800493c:	2301      	movs	r3, #1
 800493e:	4652      	mov	r2, sl
 8004940:	4649      	mov	r1, r9
 8004942:	4638      	mov	r0, r7
 8004944:	47c0      	blx	r8
 8004946:	3001      	adds	r0, #1
 8004948:	d103      	bne.n	8004952 <_printf_common+0xb6>
 800494a:	f04f 30ff 	mov.w	r0, #4294967295
 800494e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004952:	3501      	adds	r5, #1
 8004954:	e7c1      	b.n	80048da <_printf_common+0x3e>
 8004956:	2030      	movs	r0, #48	; 0x30
 8004958:	18e1      	adds	r1, r4, r3
 800495a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004964:	4422      	add	r2, r4
 8004966:	3302      	adds	r3, #2
 8004968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800496c:	e7c2      	b.n	80048f4 <_printf_common+0x58>
 800496e:	2301      	movs	r3, #1
 8004970:	4622      	mov	r2, r4
 8004972:	4649      	mov	r1, r9
 8004974:	4638      	mov	r0, r7
 8004976:	47c0      	blx	r8
 8004978:	3001      	adds	r0, #1
 800497a:	d0e6      	beq.n	800494a <_printf_common+0xae>
 800497c:	3601      	adds	r6, #1
 800497e:	e7d9      	b.n	8004934 <_printf_common+0x98>

08004980 <_printf_i>:
 8004980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	7e0f      	ldrb	r7, [r1, #24]
 8004986:	4691      	mov	r9, r2
 8004988:	2f78      	cmp	r7, #120	; 0x78
 800498a:	4680      	mov	r8, r0
 800498c:	460c      	mov	r4, r1
 800498e:	469a      	mov	sl, r3
 8004990:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004992:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004996:	d807      	bhi.n	80049a8 <_printf_i+0x28>
 8004998:	2f62      	cmp	r7, #98	; 0x62
 800499a:	d80a      	bhi.n	80049b2 <_printf_i+0x32>
 800499c:	2f00      	cmp	r7, #0
 800499e:	f000 80d5 	beq.w	8004b4c <_printf_i+0x1cc>
 80049a2:	2f58      	cmp	r7, #88	; 0x58
 80049a4:	f000 80c1 	beq.w	8004b2a <_printf_i+0x1aa>
 80049a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049b0:	e03a      	b.n	8004a28 <_printf_i+0xa8>
 80049b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049b6:	2b15      	cmp	r3, #21
 80049b8:	d8f6      	bhi.n	80049a8 <_printf_i+0x28>
 80049ba:	a101      	add	r1, pc, #4	; (adr r1, 80049c0 <_printf_i+0x40>)
 80049bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049c0:	08004a19 	.word	0x08004a19
 80049c4:	08004a2d 	.word	0x08004a2d
 80049c8:	080049a9 	.word	0x080049a9
 80049cc:	080049a9 	.word	0x080049a9
 80049d0:	080049a9 	.word	0x080049a9
 80049d4:	080049a9 	.word	0x080049a9
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	080049a9 	.word	0x080049a9
 80049e0:	080049a9 	.word	0x080049a9
 80049e4:	080049a9 	.word	0x080049a9
 80049e8:	080049a9 	.word	0x080049a9
 80049ec:	08004b33 	.word	0x08004b33
 80049f0:	08004a59 	.word	0x08004a59
 80049f4:	08004aed 	.word	0x08004aed
 80049f8:	080049a9 	.word	0x080049a9
 80049fc:	080049a9 	.word	0x080049a9
 8004a00:	08004b55 	.word	0x08004b55
 8004a04:	080049a9 	.word	0x080049a9
 8004a08:	08004a59 	.word	0x08004a59
 8004a0c:	080049a9 	.word	0x080049a9
 8004a10:	080049a9 	.word	0x080049a9
 8004a14:	08004af5 	.word	0x08004af5
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	602a      	str	r2, [r5, #0]
 8004a20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0a0      	b.n	8004b6e <_printf_i+0x1ee>
 8004a2c:	6820      	ldr	r0, [r4, #0]
 8004a2e:	682b      	ldr	r3, [r5, #0]
 8004a30:	0607      	lsls	r7, r0, #24
 8004a32:	f103 0104 	add.w	r1, r3, #4
 8004a36:	6029      	str	r1, [r5, #0]
 8004a38:	d501      	bpl.n	8004a3e <_printf_i+0xbe>
 8004a3a:	681e      	ldr	r6, [r3, #0]
 8004a3c:	e003      	b.n	8004a46 <_printf_i+0xc6>
 8004a3e:	0646      	lsls	r6, r0, #25
 8004a40:	d5fb      	bpl.n	8004a3a <_printf_i+0xba>
 8004a42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a46:	2e00      	cmp	r6, #0
 8004a48:	da03      	bge.n	8004a52 <_printf_i+0xd2>
 8004a4a:	232d      	movs	r3, #45	; 0x2d
 8004a4c:	4276      	negs	r6, r6
 8004a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a52:	230a      	movs	r3, #10
 8004a54:	4859      	ldr	r0, [pc, #356]	; (8004bbc <_printf_i+0x23c>)
 8004a56:	e012      	b.n	8004a7e <_printf_i+0xfe>
 8004a58:	682b      	ldr	r3, [r5, #0]
 8004a5a:	6820      	ldr	r0, [r4, #0]
 8004a5c:	1d19      	adds	r1, r3, #4
 8004a5e:	6029      	str	r1, [r5, #0]
 8004a60:	0605      	lsls	r5, r0, #24
 8004a62:	d501      	bpl.n	8004a68 <_printf_i+0xe8>
 8004a64:	681e      	ldr	r6, [r3, #0]
 8004a66:	e002      	b.n	8004a6e <_printf_i+0xee>
 8004a68:	0641      	lsls	r1, r0, #25
 8004a6a:	d5fb      	bpl.n	8004a64 <_printf_i+0xe4>
 8004a6c:	881e      	ldrh	r6, [r3, #0]
 8004a6e:	2f6f      	cmp	r7, #111	; 0x6f
 8004a70:	bf0c      	ite	eq
 8004a72:	2308      	moveq	r3, #8
 8004a74:	230a      	movne	r3, #10
 8004a76:	4851      	ldr	r0, [pc, #324]	; (8004bbc <_printf_i+0x23c>)
 8004a78:	2100      	movs	r1, #0
 8004a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a7e:	6865      	ldr	r5, [r4, #4]
 8004a80:	2d00      	cmp	r5, #0
 8004a82:	bfa8      	it	ge
 8004a84:	6821      	ldrge	r1, [r4, #0]
 8004a86:	60a5      	str	r5, [r4, #8]
 8004a88:	bfa4      	itt	ge
 8004a8a:	f021 0104 	bicge.w	r1, r1, #4
 8004a8e:	6021      	strge	r1, [r4, #0]
 8004a90:	b90e      	cbnz	r6, 8004a96 <_printf_i+0x116>
 8004a92:	2d00      	cmp	r5, #0
 8004a94:	d04b      	beq.n	8004b2e <_printf_i+0x1ae>
 8004a96:	4615      	mov	r5, r2
 8004a98:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a9c:	fb03 6711 	mls	r7, r3, r1, r6
 8004aa0:	5dc7      	ldrb	r7, [r0, r7]
 8004aa2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004aa6:	4637      	mov	r7, r6
 8004aa8:	42bb      	cmp	r3, r7
 8004aaa:	460e      	mov	r6, r1
 8004aac:	d9f4      	bls.n	8004a98 <_printf_i+0x118>
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d10b      	bne.n	8004aca <_printf_i+0x14a>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	07de      	lsls	r6, r3, #31
 8004ab6:	d508      	bpl.n	8004aca <_printf_i+0x14a>
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	6861      	ldr	r1, [r4, #4]
 8004abc:	4299      	cmp	r1, r3
 8004abe:	bfde      	ittt	le
 8004ac0:	2330      	movle	r3, #48	; 0x30
 8004ac2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ac6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004aca:	1b52      	subs	r2, r2, r5
 8004acc:	6122      	str	r2, [r4, #16]
 8004ace:	464b      	mov	r3, r9
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	f8cd a000 	str.w	sl, [sp]
 8004ad8:	aa03      	add	r2, sp, #12
 8004ada:	f7ff fedf 	bl	800489c <_printf_common>
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d14a      	bne.n	8004b78 <_printf_i+0x1f8>
 8004ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae6:	b004      	add	sp, #16
 8004ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aec:	6823      	ldr	r3, [r4, #0]
 8004aee:	f043 0320 	orr.w	r3, r3, #32
 8004af2:	6023      	str	r3, [r4, #0]
 8004af4:	2778      	movs	r7, #120	; 0x78
 8004af6:	4832      	ldr	r0, [pc, #200]	; (8004bc0 <_printf_i+0x240>)
 8004af8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	6829      	ldr	r1, [r5, #0]
 8004b00:	061f      	lsls	r7, r3, #24
 8004b02:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b06:	d402      	bmi.n	8004b0e <_printf_i+0x18e>
 8004b08:	065f      	lsls	r7, r3, #25
 8004b0a:	bf48      	it	mi
 8004b0c:	b2b6      	uxthmi	r6, r6
 8004b0e:	07df      	lsls	r7, r3, #31
 8004b10:	bf48      	it	mi
 8004b12:	f043 0320 	orrmi.w	r3, r3, #32
 8004b16:	6029      	str	r1, [r5, #0]
 8004b18:	bf48      	it	mi
 8004b1a:	6023      	strmi	r3, [r4, #0]
 8004b1c:	b91e      	cbnz	r6, 8004b26 <_printf_i+0x1a6>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	f023 0320 	bic.w	r3, r3, #32
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	2310      	movs	r3, #16
 8004b28:	e7a6      	b.n	8004a78 <_printf_i+0xf8>
 8004b2a:	4824      	ldr	r0, [pc, #144]	; (8004bbc <_printf_i+0x23c>)
 8004b2c:	e7e4      	b.n	8004af8 <_printf_i+0x178>
 8004b2e:	4615      	mov	r5, r2
 8004b30:	e7bd      	b.n	8004aae <_printf_i+0x12e>
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	6826      	ldr	r6, [r4, #0]
 8004b36:	1d18      	adds	r0, r3, #4
 8004b38:	6961      	ldr	r1, [r4, #20]
 8004b3a:	6028      	str	r0, [r5, #0]
 8004b3c:	0635      	lsls	r5, r6, #24
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	d501      	bpl.n	8004b46 <_printf_i+0x1c6>
 8004b42:	6019      	str	r1, [r3, #0]
 8004b44:	e002      	b.n	8004b4c <_printf_i+0x1cc>
 8004b46:	0670      	lsls	r0, r6, #25
 8004b48:	d5fb      	bpl.n	8004b42 <_printf_i+0x1c2>
 8004b4a:	8019      	strh	r1, [r3, #0]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	4615      	mov	r5, r2
 8004b50:	6123      	str	r3, [r4, #16]
 8004b52:	e7bc      	b.n	8004ace <_printf_i+0x14e>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	2100      	movs	r1, #0
 8004b58:	1d1a      	adds	r2, r3, #4
 8004b5a:	602a      	str	r2, [r5, #0]
 8004b5c:	681d      	ldr	r5, [r3, #0]
 8004b5e:	6862      	ldr	r2, [r4, #4]
 8004b60:	4628      	mov	r0, r5
 8004b62:	f000 f9e4 	bl	8004f2e <memchr>
 8004b66:	b108      	cbz	r0, 8004b6c <_printf_i+0x1ec>
 8004b68:	1b40      	subs	r0, r0, r5
 8004b6a:	6060      	str	r0, [r4, #4]
 8004b6c:	6863      	ldr	r3, [r4, #4]
 8004b6e:	6123      	str	r3, [r4, #16]
 8004b70:	2300      	movs	r3, #0
 8004b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b76:	e7aa      	b.n	8004ace <_printf_i+0x14e>
 8004b78:	462a      	mov	r2, r5
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	4640      	mov	r0, r8
 8004b7e:	6923      	ldr	r3, [r4, #16]
 8004b80:	47d0      	blx	sl
 8004b82:	3001      	adds	r0, #1
 8004b84:	d0ad      	beq.n	8004ae2 <_printf_i+0x162>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	079b      	lsls	r3, r3, #30
 8004b8a:	d413      	bmi.n	8004bb4 <_printf_i+0x234>
 8004b8c:	68e0      	ldr	r0, [r4, #12]
 8004b8e:	9b03      	ldr	r3, [sp, #12]
 8004b90:	4298      	cmp	r0, r3
 8004b92:	bfb8      	it	lt
 8004b94:	4618      	movlt	r0, r3
 8004b96:	e7a6      	b.n	8004ae6 <_printf_i+0x166>
 8004b98:	2301      	movs	r3, #1
 8004b9a:	4632      	mov	r2, r6
 8004b9c:	4649      	mov	r1, r9
 8004b9e:	4640      	mov	r0, r8
 8004ba0:	47d0      	blx	sl
 8004ba2:	3001      	adds	r0, #1
 8004ba4:	d09d      	beq.n	8004ae2 <_printf_i+0x162>
 8004ba6:	3501      	adds	r5, #1
 8004ba8:	68e3      	ldr	r3, [r4, #12]
 8004baa:	9903      	ldr	r1, [sp, #12]
 8004bac:	1a5b      	subs	r3, r3, r1
 8004bae:	42ab      	cmp	r3, r5
 8004bb0:	dcf2      	bgt.n	8004b98 <_printf_i+0x218>
 8004bb2:	e7eb      	b.n	8004b8c <_printf_i+0x20c>
 8004bb4:	2500      	movs	r5, #0
 8004bb6:	f104 0619 	add.w	r6, r4, #25
 8004bba:	e7f5      	b.n	8004ba8 <_printf_i+0x228>
 8004bbc:	08007dec 	.word	0x08007dec
 8004bc0:	08007dfd 	.word	0x08007dfd

08004bc4 <std>:
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	b510      	push	{r4, lr}
 8004bc8:	4604      	mov	r4, r0
 8004bca:	e9c0 3300 	strd	r3, r3, [r0]
 8004bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bd2:	6083      	str	r3, [r0, #8]
 8004bd4:	8181      	strh	r1, [r0, #12]
 8004bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8004bd8:	81c2      	strh	r2, [r0, #14]
 8004bda:	6183      	str	r3, [r0, #24]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	2208      	movs	r2, #8
 8004be0:	305c      	adds	r0, #92	; 0x5c
 8004be2:	f000 f914 	bl	8004e0e <memset>
 8004be6:	4b0d      	ldr	r3, [pc, #52]	; (8004c1c <std+0x58>)
 8004be8:	6224      	str	r4, [r4, #32]
 8004bea:	6263      	str	r3, [r4, #36]	; 0x24
 8004bec:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <std+0x5c>)
 8004bee:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bf0:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <std+0x60>)
 8004bf2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <std+0x64>)
 8004bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <std+0x68>)
 8004bfa:	429c      	cmp	r4, r3
 8004bfc:	d006      	beq.n	8004c0c <std+0x48>
 8004bfe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004c02:	4294      	cmp	r4, r2
 8004c04:	d002      	beq.n	8004c0c <std+0x48>
 8004c06:	33d0      	adds	r3, #208	; 0xd0
 8004c08:	429c      	cmp	r4, r3
 8004c0a:	d105      	bne.n	8004c18 <std+0x54>
 8004c0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c14:	f000 b988 	b.w	8004f28 <__retarget_lock_init_recursive>
 8004c18:	bd10      	pop	{r4, pc}
 8004c1a:	bf00      	nop
 8004c1c:	08004d89 	.word	0x08004d89
 8004c20:	08004dab 	.word	0x08004dab
 8004c24:	08004de3 	.word	0x08004de3
 8004c28:	08004e07 	.word	0x08004e07
 8004c2c:	20000300 	.word	0x20000300

08004c30 <stdio_exit_handler>:
 8004c30:	4a02      	ldr	r2, [pc, #8]	; (8004c3c <stdio_exit_handler+0xc>)
 8004c32:	4903      	ldr	r1, [pc, #12]	; (8004c40 <stdio_exit_handler+0x10>)
 8004c34:	4803      	ldr	r0, [pc, #12]	; (8004c44 <stdio_exit_handler+0x14>)
 8004c36:	f000 b869 	b.w	8004d0c <_fwalk_sglue>
 8004c3a:	bf00      	nop
 8004c3c:	20000010 	.word	0x20000010
 8004c40:	0800675d 	.word	0x0800675d
 8004c44:	2000001c 	.word	0x2000001c

08004c48 <cleanup_stdio>:
 8004c48:	6841      	ldr	r1, [r0, #4]
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <cleanup_stdio+0x34>)
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	4299      	cmp	r1, r3
 8004c50:	4604      	mov	r4, r0
 8004c52:	d001      	beq.n	8004c58 <cleanup_stdio+0x10>
 8004c54:	f001 fd82 	bl	800675c <_fflush_r>
 8004c58:	68a1      	ldr	r1, [r4, #8]
 8004c5a:	4b09      	ldr	r3, [pc, #36]	; (8004c80 <cleanup_stdio+0x38>)
 8004c5c:	4299      	cmp	r1, r3
 8004c5e:	d002      	beq.n	8004c66 <cleanup_stdio+0x1e>
 8004c60:	4620      	mov	r0, r4
 8004c62:	f001 fd7b 	bl	800675c <_fflush_r>
 8004c66:	68e1      	ldr	r1, [r4, #12]
 8004c68:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <cleanup_stdio+0x3c>)
 8004c6a:	4299      	cmp	r1, r3
 8004c6c:	d004      	beq.n	8004c78 <cleanup_stdio+0x30>
 8004c6e:	4620      	mov	r0, r4
 8004c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c74:	f001 bd72 	b.w	800675c <_fflush_r>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000300 	.word	0x20000300
 8004c80:	20000368 	.word	0x20000368
 8004c84:	200003d0 	.word	0x200003d0

08004c88 <global_stdio_init.part.0>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <global_stdio_init.part.0+0x30>)
 8004c8c:	4c0b      	ldr	r4, [pc, #44]	; (8004cbc <global_stdio_init.part.0+0x34>)
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <global_stdio_init.part.0+0x38>)
 8004c90:	4620      	mov	r0, r4
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	2104      	movs	r1, #4
 8004c96:	2200      	movs	r2, #0
 8004c98:	f7ff ff94 	bl	8004bc4 <std>
 8004c9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	2109      	movs	r1, #9
 8004ca4:	f7ff ff8e 	bl	8004bc4 <std>
 8004ca8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004cac:	2202      	movs	r2, #2
 8004cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb2:	2112      	movs	r1, #18
 8004cb4:	f7ff bf86 	b.w	8004bc4 <std>
 8004cb8:	20000438 	.word	0x20000438
 8004cbc:	20000300 	.word	0x20000300
 8004cc0:	08004c31 	.word	0x08004c31

08004cc4 <__sfp_lock_acquire>:
 8004cc4:	4801      	ldr	r0, [pc, #4]	; (8004ccc <__sfp_lock_acquire+0x8>)
 8004cc6:	f000 b930 	b.w	8004f2a <__retarget_lock_acquire_recursive>
 8004cca:	bf00      	nop
 8004ccc:	20000441 	.word	0x20000441

08004cd0 <__sfp_lock_release>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__sfp_lock_release+0x8>)
 8004cd2:	f000 b92b 	b.w	8004f2c <__retarget_lock_release_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	20000441 	.word	0x20000441

08004cdc <__sinit>:
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	4604      	mov	r4, r0
 8004ce0:	f7ff fff0 	bl	8004cc4 <__sfp_lock_acquire>
 8004ce4:	6a23      	ldr	r3, [r4, #32]
 8004ce6:	b11b      	cbz	r3, 8004cf0 <__sinit+0x14>
 8004ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cec:	f7ff bff0 	b.w	8004cd0 <__sfp_lock_release>
 8004cf0:	4b04      	ldr	r3, [pc, #16]	; (8004d04 <__sinit+0x28>)
 8004cf2:	6223      	str	r3, [r4, #32]
 8004cf4:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <__sinit+0x2c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f5      	bne.n	8004ce8 <__sinit+0xc>
 8004cfc:	f7ff ffc4 	bl	8004c88 <global_stdio_init.part.0>
 8004d00:	e7f2      	b.n	8004ce8 <__sinit+0xc>
 8004d02:	bf00      	nop
 8004d04:	08004c49 	.word	0x08004c49
 8004d08:	20000438 	.word	0x20000438

08004d0c <_fwalk_sglue>:
 8004d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d10:	4607      	mov	r7, r0
 8004d12:	4688      	mov	r8, r1
 8004d14:	4614      	mov	r4, r2
 8004d16:	2600      	movs	r6, #0
 8004d18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d1c:	f1b9 0901 	subs.w	r9, r9, #1
 8004d20:	d505      	bpl.n	8004d2e <_fwalk_sglue+0x22>
 8004d22:	6824      	ldr	r4, [r4, #0]
 8004d24:	2c00      	cmp	r4, #0
 8004d26:	d1f7      	bne.n	8004d18 <_fwalk_sglue+0xc>
 8004d28:	4630      	mov	r0, r6
 8004d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d2e:	89ab      	ldrh	r3, [r5, #12]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d907      	bls.n	8004d44 <_fwalk_sglue+0x38>
 8004d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	d003      	beq.n	8004d44 <_fwalk_sglue+0x38>
 8004d3c:	4629      	mov	r1, r5
 8004d3e:	4638      	mov	r0, r7
 8004d40:	47c0      	blx	r8
 8004d42:	4306      	orrs	r6, r0
 8004d44:	3568      	adds	r5, #104	; 0x68
 8004d46:	e7e9      	b.n	8004d1c <_fwalk_sglue+0x10>

08004d48 <siprintf>:
 8004d48:	b40e      	push	{r1, r2, r3}
 8004d4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d4e:	b500      	push	{lr}
 8004d50:	b09c      	sub	sp, #112	; 0x70
 8004d52:	ab1d      	add	r3, sp, #116	; 0x74
 8004d54:	9002      	str	r0, [sp, #8]
 8004d56:	9006      	str	r0, [sp, #24]
 8004d58:	9107      	str	r1, [sp, #28]
 8004d5a:	9104      	str	r1, [sp, #16]
 8004d5c:	4808      	ldr	r0, [pc, #32]	; (8004d80 <siprintf+0x38>)
 8004d5e:	4909      	ldr	r1, [pc, #36]	; (8004d84 <siprintf+0x3c>)
 8004d60:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d64:	9105      	str	r1, [sp, #20]
 8004d66:	6800      	ldr	r0, [r0, #0]
 8004d68:	a902      	add	r1, sp, #8
 8004d6a:	9301      	str	r3, [sp, #4]
 8004d6c:	f001 fb76 	bl	800645c <_svfiprintf_r>
 8004d70:	2200      	movs	r2, #0
 8004d72:	9b02      	ldr	r3, [sp, #8]
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	b01c      	add	sp, #112	; 0x70
 8004d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d7c:	b003      	add	sp, #12
 8004d7e:	4770      	bx	lr
 8004d80:	20000068 	.word	0x20000068
 8004d84:	ffff0208 	.word	0xffff0208

08004d88 <__sread>:
 8004d88:	b510      	push	{r4, lr}
 8004d8a:	460c      	mov	r4, r1
 8004d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d90:	f000 f86c 	bl	8004e6c <_read_r>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	bfab      	itete	ge
 8004d98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d9c:	181b      	addge	r3, r3, r0
 8004d9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004da2:	bfac      	ite	ge
 8004da4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004da6:	81a3      	strhlt	r3, [r4, #12]
 8004da8:	bd10      	pop	{r4, pc}

08004daa <__swrite>:
 8004daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dae:	461f      	mov	r7, r3
 8004db0:	898b      	ldrh	r3, [r1, #12]
 8004db2:	4605      	mov	r5, r0
 8004db4:	05db      	lsls	r3, r3, #23
 8004db6:	460c      	mov	r4, r1
 8004db8:	4616      	mov	r6, r2
 8004dba:	d505      	bpl.n	8004dc8 <__swrite+0x1e>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc4:	f000 f840 	bl	8004e48 <_lseek_r>
 8004dc8:	89a3      	ldrh	r3, [r4, #12]
 8004dca:	4632      	mov	r2, r6
 8004dcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd0:	81a3      	strh	r3, [r4, #12]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	463b      	mov	r3, r7
 8004dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dde:	f000 b867 	b.w	8004eb0 <_write_r>

08004de2 <__sseek>:
 8004de2:	b510      	push	{r4, lr}
 8004de4:	460c      	mov	r4, r1
 8004de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dea:	f000 f82d 	bl	8004e48 <_lseek_r>
 8004dee:	1c43      	adds	r3, r0, #1
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	bf15      	itete	ne
 8004df4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004df6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dfe:	81a3      	strheq	r3, [r4, #12]
 8004e00:	bf18      	it	ne
 8004e02:	81a3      	strhne	r3, [r4, #12]
 8004e04:	bd10      	pop	{r4, pc}

08004e06 <__sclose>:
 8004e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0a:	f000 b80d 	b.w	8004e28 <_close_r>

08004e0e <memset>:
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4402      	add	r2, r0
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d100      	bne.n	8004e18 <memset+0xa>
 8004e16:	4770      	bx	lr
 8004e18:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1c:	e7f9      	b.n	8004e12 <memset+0x4>
	...

08004e20 <_localeconv_r>:
 8004e20:	4800      	ldr	r0, [pc, #0]	; (8004e24 <_localeconv_r+0x4>)
 8004e22:	4770      	bx	lr
 8004e24:	2000015c 	.word	0x2000015c

08004e28 <_close_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	4d05      	ldr	r5, [pc, #20]	; (8004e44 <_close_r+0x1c>)
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	f7fc fd7a 	bl	800192c <_close>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_close_r+0x1a>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_close_r+0x1a>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	2000043c 	.word	0x2000043c

08004e48 <_lseek_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	4608      	mov	r0, r1
 8004e4e:	4611      	mov	r1, r2
 8004e50:	2200      	movs	r2, #0
 8004e52:	4d05      	ldr	r5, [pc, #20]	; (8004e68 <_lseek_r+0x20>)
 8004e54:	602a      	str	r2, [r5, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f7fc fd8c 	bl	8001974 <_lseek>
 8004e5c:	1c43      	adds	r3, r0, #1
 8004e5e:	d102      	bne.n	8004e66 <_lseek_r+0x1e>
 8004e60:	682b      	ldr	r3, [r5, #0]
 8004e62:	b103      	cbz	r3, 8004e66 <_lseek_r+0x1e>
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	bd38      	pop	{r3, r4, r5, pc}
 8004e68:	2000043c 	.word	0x2000043c

08004e6c <_read_r>:
 8004e6c:	b538      	push	{r3, r4, r5, lr}
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	4611      	mov	r1, r2
 8004e74:	2200      	movs	r2, #0
 8004e76:	4d05      	ldr	r5, [pc, #20]	; (8004e8c <_read_r+0x20>)
 8004e78:	602a      	str	r2, [r5, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	f7fc fd1d 	bl	80018ba <_read>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d102      	bne.n	8004e8a <_read_r+0x1e>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	b103      	cbz	r3, 8004e8a <_read_r+0x1e>
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	bd38      	pop	{r3, r4, r5, pc}
 8004e8c:	2000043c 	.word	0x2000043c

08004e90 <_sbrk_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	2300      	movs	r3, #0
 8004e94:	4d05      	ldr	r5, [pc, #20]	; (8004eac <_sbrk_r+0x1c>)
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	f7fc fd76 	bl	800198c <_sbrk>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_sbrk_r+0x1a>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_sbrk_r+0x1a>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	2000043c 	.word	0x2000043c

08004eb0 <_write_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4604      	mov	r4, r0
 8004eb4:	4608      	mov	r0, r1
 8004eb6:	4611      	mov	r1, r2
 8004eb8:	2200      	movs	r2, #0
 8004eba:	4d05      	ldr	r5, [pc, #20]	; (8004ed0 <_write_r+0x20>)
 8004ebc:	602a      	str	r2, [r5, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7fc fd18 	bl	80018f4 <_write>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_write_r+0x1e>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_write_r+0x1e>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	2000043c 	.word	0x2000043c

08004ed4 <__errno>:
 8004ed4:	4b01      	ldr	r3, [pc, #4]	; (8004edc <__errno+0x8>)
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000068 	.word	0x20000068

08004ee0 <__libc_init_array>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	2600      	movs	r6, #0
 8004ee4:	4d0c      	ldr	r5, [pc, #48]	; (8004f18 <__libc_init_array+0x38>)
 8004ee6:	4c0d      	ldr	r4, [pc, #52]	; (8004f1c <__libc_init_array+0x3c>)
 8004ee8:	1b64      	subs	r4, r4, r5
 8004eea:	10a4      	asrs	r4, r4, #2
 8004eec:	42a6      	cmp	r6, r4
 8004eee:	d109      	bne.n	8004f04 <__libc_init_array+0x24>
 8004ef0:	f002 fecc 	bl	8007c8c <_init>
 8004ef4:	2600      	movs	r6, #0
 8004ef6:	4d0a      	ldr	r5, [pc, #40]	; (8004f20 <__libc_init_array+0x40>)
 8004ef8:	4c0a      	ldr	r4, [pc, #40]	; (8004f24 <__libc_init_array+0x44>)
 8004efa:	1b64      	subs	r4, r4, r5
 8004efc:	10a4      	asrs	r4, r4, #2
 8004efe:	42a6      	cmp	r6, r4
 8004f00:	d105      	bne.n	8004f0e <__libc_init_array+0x2e>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f08:	4798      	blx	r3
 8004f0a:	3601      	adds	r6, #1
 8004f0c:	e7ee      	b.n	8004eec <__libc_init_array+0xc>
 8004f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f12:	4798      	blx	r3
 8004f14:	3601      	adds	r6, #1
 8004f16:	e7f2      	b.n	8004efe <__libc_init_array+0x1e>
 8004f18:	08008180 	.word	0x08008180
 8004f1c:	08008180 	.word	0x08008180
 8004f20:	08008180 	.word	0x08008180
 8004f24:	08008184 	.word	0x08008184

08004f28 <__retarget_lock_init_recursive>:
 8004f28:	4770      	bx	lr

08004f2a <__retarget_lock_acquire_recursive>:
 8004f2a:	4770      	bx	lr

08004f2c <__retarget_lock_release_recursive>:
 8004f2c:	4770      	bx	lr

08004f2e <memchr>:
 8004f2e:	4603      	mov	r3, r0
 8004f30:	b510      	push	{r4, lr}
 8004f32:	b2c9      	uxtb	r1, r1
 8004f34:	4402      	add	r2, r0
 8004f36:	4293      	cmp	r3, r2
 8004f38:	4618      	mov	r0, r3
 8004f3a:	d101      	bne.n	8004f40 <memchr+0x12>
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	e003      	b.n	8004f48 <memchr+0x1a>
 8004f40:	7804      	ldrb	r4, [r0, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	428c      	cmp	r4, r1
 8004f46:	d1f6      	bne.n	8004f36 <memchr+0x8>
 8004f48:	bd10      	pop	{r4, pc}

08004f4a <quorem>:
 8004f4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4e:	6903      	ldr	r3, [r0, #16]
 8004f50:	690c      	ldr	r4, [r1, #16]
 8004f52:	4607      	mov	r7, r0
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	db7f      	blt.n	8005058 <quorem+0x10e>
 8004f58:	3c01      	subs	r4, #1
 8004f5a:	f100 0514 	add.w	r5, r0, #20
 8004f5e:	f101 0814 	add.w	r8, r1, #20
 8004f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f66:	9301      	str	r3, [sp, #4]
 8004f68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f70:	3301      	adds	r3, #1
 8004f72:	429a      	cmp	r2, r3
 8004f74:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f80:	d331      	bcc.n	8004fe6 <quorem+0x9c>
 8004f82:	f04f 0e00 	mov.w	lr, #0
 8004f86:	4640      	mov	r0, r8
 8004f88:	46ac      	mov	ip, r5
 8004f8a:	46f2      	mov	sl, lr
 8004f8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f90:	b293      	uxth	r3, r2
 8004f92:	fb06 e303 	mla	r3, r6, r3, lr
 8004f96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f9a:	0c1a      	lsrs	r2, r3, #16
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	fb06 220e 	mla	r2, r6, lr, r2
 8004fa2:	ebaa 0303 	sub.w	r3, sl, r3
 8004fa6:	f8dc a000 	ldr.w	sl, [ip]
 8004faa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fae:	fa1f fa8a 	uxth.w	sl, sl
 8004fb2:	4453      	add	r3, sl
 8004fb4:	f8dc a000 	ldr.w	sl, [ip]
 8004fb8:	b292      	uxth	r2, r2
 8004fba:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004fbe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fc8:	4581      	cmp	r9, r0
 8004fca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004fce:	f84c 3b04 	str.w	r3, [ip], #4
 8004fd2:	d2db      	bcs.n	8004f8c <quorem+0x42>
 8004fd4:	f855 300b 	ldr.w	r3, [r5, fp]
 8004fd8:	b92b      	cbnz	r3, 8004fe6 <quorem+0x9c>
 8004fda:	9b01      	ldr	r3, [sp, #4]
 8004fdc:	3b04      	subs	r3, #4
 8004fde:	429d      	cmp	r5, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	d32d      	bcc.n	8005040 <quorem+0xf6>
 8004fe4:	613c      	str	r4, [r7, #16]
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f001 f8e0 	bl	80061ac <__mcmp>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	db23      	blt.n	8005038 <quorem+0xee>
 8004ff0:	4629      	mov	r1, r5
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	3601      	adds	r6, #1
 8004ff6:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ffa:	f8d1 c000 	ldr.w	ip, [r1]
 8004ffe:	b293      	uxth	r3, r2
 8005000:	1ac3      	subs	r3, r0, r3
 8005002:	0c12      	lsrs	r2, r2, #16
 8005004:	fa1f f08c 	uxth.w	r0, ip
 8005008:	4403      	add	r3, r0
 800500a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800500e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005012:	b29b      	uxth	r3, r3
 8005014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005018:	45c1      	cmp	r9, r8
 800501a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800501e:	f841 3b04 	str.w	r3, [r1], #4
 8005022:	d2e8      	bcs.n	8004ff6 <quorem+0xac>
 8005024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005028:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800502c:	b922      	cbnz	r2, 8005038 <quorem+0xee>
 800502e:	3b04      	subs	r3, #4
 8005030:	429d      	cmp	r5, r3
 8005032:	461a      	mov	r2, r3
 8005034:	d30a      	bcc.n	800504c <quorem+0x102>
 8005036:	613c      	str	r4, [r7, #16]
 8005038:	4630      	mov	r0, r6
 800503a:	b003      	add	sp, #12
 800503c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	3b04      	subs	r3, #4
 8005044:	2a00      	cmp	r2, #0
 8005046:	d1cd      	bne.n	8004fe4 <quorem+0x9a>
 8005048:	3c01      	subs	r4, #1
 800504a:	e7c8      	b.n	8004fde <quorem+0x94>
 800504c:	6812      	ldr	r2, [r2, #0]
 800504e:	3b04      	subs	r3, #4
 8005050:	2a00      	cmp	r2, #0
 8005052:	d1f0      	bne.n	8005036 <quorem+0xec>
 8005054:	3c01      	subs	r4, #1
 8005056:	e7eb      	b.n	8005030 <quorem+0xe6>
 8005058:	2000      	movs	r0, #0
 800505a:	e7ee      	b.n	800503a <quorem+0xf0>
 800505c:	0000      	movs	r0, r0
	...

08005060 <_dtoa_r>:
 8005060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005064:	4616      	mov	r6, r2
 8005066:	461f      	mov	r7, r3
 8005068:	69c4      	ldr	r4, [r0, #28]
 800506a:	b099      	sub	sp, #100	; 0x64
 800506c:	4605      	mov	r5, r0
 800506e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005072:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005076:	b974      	cbnz	r4, 8005096 <_dtoa_r+0x36>
 8005078:	2010      	movs	r0, #16
 800507a:	f7ff f889 	bl	8004190 <malloc>
 800507e:	4602      	mov	r2, r0
 8005080:	61e8      	str	r0, [r5, #28]
 8005082:	b920      	cbnz	r0, 800508e <_dtoa_r+0x2e>
 8005084:	21ef      	movs	r1, #239	; 0xef
 8005086:	4bac      	ldr	r3, [pc, #688]	; (8005338 <_dtoa_r+0x2d8>)
 8005088:	48ac      	ldr	r0, [pc, #688]	; (800533c <_dtoa_r+0x2dc>)
 800508a:	f001 fbb7 	bl	80067fc <__assert_func>
 800508e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005092:	6004      	str	r4, [r0, #0]
 8005094:	60c4      	str	r4, [r0, #12]
 8005096:	69eb      	ldr	r3, [r5, #28]
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	b151      	cbz	r1, 80050b2 <_dtoa_r+0x52>
 800509c:	685a      	ldr	r2, [r3, #4]
 800509e:	2301      	movs	r3, #1
 80050a0:	4093      	lsls	r3, r2
 80050a2:	604a      	str	r2, [r1, #4]
 80050a4:	608b      	str	r3, [r1, #8]
 80050a6:	4628      	mov	r0, r5
 80050a8:	f000 fe46 	bl	8005d38 <_Bfree>
 80050ac:	2200      	movs	r2, #0
 80050ae:	69eb      	ldr	r3, [r5, #28]
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	1e3b      	subs	r3, r7, #0
 80050b4:	bfaf      	iteee	ge
 80050b6:	2300      	movge	r3, #0
 80050b8:	2201      	movlt	r2, #1
 80050ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050be:	9305      	strlt	r3, [sp, #20]
 80050c0:	bfa8      	it	ge
 80050c2:	f8c8 3000 	strge.w	r3, [r8]
 80050c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80050ca:	4b9d      	ldr	r3, [pc, #628]	; (8005340 <_dtoa_r+0x2e0>)
 80050cc:	bfb8      	it	lt
 80050ce:	f8c8 2000 	strlt.w	r2, [r8]
 80050d2:	ea33 0309 	bics.w	r3, r3, r9
 80050d6:	d119      	bne.n	800510c <_dtoa_r+0xac>
 80050d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80050dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050e4:	4333      	orrs	r3, r6
 80050e6:	f000 8589 	beq.w	8005bfc <_dtoa_r+0xb9c>
 80050ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050ec:	b953      	cbnz	r3, 8005104 <_dtoa_r+0xa4>
 80050ee:	4b95      	ldr	r3, [pc, #596]	; (8005344 <_dtoa_r+0x2e4>)
 80050f0:	e023      	b.n	800513a <_dtoa_r+0xda>
 80050f2:	4b95      	ldr	r3, [pc, #596]	; (8005348 <_dtoa_r+0x2e8>)
 80050f4:	9303      	str	r3, [sp, #12]
 80050f6:	3308      	adds	r3, #8
 80050f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	9803      	ldr	r0, [sp, #12]
 80050fe:	b019      	add	sp, #100	; 0x64
 8005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	4b8f      	ldr	r3, [pc, #572]	; (8005344 <_dtoa_r+0x2e4>)
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	3303      	adds	r3, #3
 800510a:	e7f5      	b.n	80050f8 <_dtoa_r+0x98>
 800510c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005110:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005114:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005118:	2200      	movs	r2, #0
 800511a:	2300      	movs	r3, #0
 800511c:	f7fb fc44 	bl	80009a8 <__aeabi_dcmpeq>
 8005120:	4680      	mov	r8, r0
 8005122:	b160      	cbz	r0, 800513e <_dtoa_r+0xde>
 8005124:	2301      	movs	r3, #1
 8005126:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 8562 	beq.w	8005bf6 <_dtoa_r+0xb96>
 8005132:	4b86      	ldr	r3, [pc, #536]	; (800534c <_dtoa_r+0x2ec>)
 8005134:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	3b01      	subs	r3, #1
 800513a:	9303      	str	r3, [sp, #12]
 800513c:	e7de      	b.n	80050fc <_dtoa_r+0x9c>
 800513e:	ab16      	add	r3, sp, #88	; 0x58
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	ab17      	add	r3, sp, #92	; 0x5c
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	4628      	mov	r0, r5
 8005148:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800514c:	f001 f8d6 	bl	80062fc <__d2b>
 8005150:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005154:	4682      	mov	sl, r0
 8005156:	2c00      	cmp	r4, #0
 8005158:	d07e      	beq.n	8005258 <_dtoa_r+0x1f8>
 800515a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800515e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005160:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005168:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800516c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005170:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005174:	4619      	mov	r1, r3
 8005176:	2200      	movs	r2, #0
 8005178:	4b75      	ldr	r3, [pc, #468]	; (8005350 <_dtoa_r+0x2f0>)
 800517a:	f7fa fff5 	bl	8000168 <__aeabi_dsub>
 800517e:	a368      	add	r3, pc, #416	; (adr r3, 8005320 <_dtoa_r+0x2c0>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f7fb f9a8 	bl	80004d8 <__aeabi_dmul>
 8005188:	a367      	add	r3, pc, #412	; (adr r3, 8005328 <_dtoa_r+0x2c8>)
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f7fa ffed 	bl	800016c <__adddf3>
 8005192:	4606      	mov	r6, r0
 8005194:	4620      	mov	r0, r4
 8005196:	460f      	mov	r7, r1
 8005198:	f7fb f934 	bl	8000404 <__aeabi_i2d>
 800519c:	a364      	add	r3, pc, #400	; (adr r3, 8005330 <_dtoa_r+0x2d0>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fb f999 	bl	80004d8 <__aeabi_dmul>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4630      	mov	r0, r6
 80051ac:	4639      	mov	r1, r7
 80051ae:	f7fa ffdd 	bl	800016c <__adddf3>
 80051b2:	4606      	mov	r6, r0
 80051b4:	460f      	mov	r7, r1
 80051b6:	f7fb fc3f 	bl	8000a38 <__aeabi_d2iz>
 80051ba:	2200      	movs	r2, #0
 80051bc:	4683      	mov	fp, r0
 80051be:	2300      	movs	r3, #0
 80051c0:	4630      	mov	r0, r6
 80051c2:	4639      	mov	r1, r7
 80051c4:	f7fb fbfa 	bl	80009bc <__aeabi_dcmplt>
 80051c8:	b148      	cbz	r0, 80051de <_dtoa_r+0x17e>
 80051ca:	4658      	mov	r0, fp
 80051cc:	f7fb f91a 	bl	8000404 <__aeabi_i2d>
 80051d0:	4632      	mov	r2, r6
 80051d2:	463b      	mov	r3, r7
 80051d4:	f7fb fbe8 	bl	80009a8 <__aeabi_dcmpeq>
 80051d8:	b908      	cbnz	r0, 80051de <_dtoa_r+0x17e>
 80051da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051de:	f1bb 0f16 	cmp.w	fp, #22
 80051e2:	d857      	bhi.n	8005294 <_dtoa_r+0x234>
 80051e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051e8:	4b5a      	ldr	r3, [pc, #360]	; (8005354 <_dtoa_r+0x2f4>)
 80051ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fb fbe3 	bl	80009bc <__aeabi_dcmplt>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d04e      	beq.n	8005298 <_dtoa_r+0x238>
 80051fa:	2300      	movs	r3, #0
 80051fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005200:	930f      	str	r3, [sp, #60]	; 0x3c
 8005202:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005204:	1b1b      	subs	r3, r3, r4
 8005206:	1e5a      	subs	r2, r3, #1
 8005208:	bf46      	itte	mi
 800520a:	f1c3 0901 	rsbmi	r9, r3, #1
 800520e:	2300      	movmi	r3, #0
 8005210:	f04f 0900 	movpl.w	r9, #0
 8005214:	9209      	str	r2, [sp, #36]	; 0x24
 8005216:	bf48      	it	mi
 8005218:	9309      	strmi	r3, [sp, #36]	; 0x24
 800521a:	f1bb 0f00 	cmp.w	fp, #0
 800521e:	db3d      	blt.n	800529c <_dtoa_r+0x23c>
 8005220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005222:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005226:	445b      	add	r3, fp
 8005228:	9309      	str	r3, [sp, #36]	; 0x24
 800522a:	2300      	movs	r3, #0
 800522c:	930a      	str	r3, [sp, #40]	; 0x28
 800522e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005230:	2b09      	cmp	r3, #9
 8005232:	d867      	bhi.n	8005304 <_dtoa_r+0x2a4>
 8005234:	2b05      	cmp	r3, #5
 8005236:	bfc4      	itt	gt
 8005238:	3b04      	subgt	r3, #4
 800523a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800523c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800523e:	bfc8      	it	gt
 8005240:	2400      	movgt	r4, #0
 8005242:	f1a3 0302 	sub.w	r3, r3, #2
 8005246:	bfd8      	it	le
 8005248:	2401      	movle	r4, #1
 800524a:	2b03      	cmp	r3, #3
 800524c:	f200 8086 	bhi.w	800535c <_dtoa_r+0x2fc>
 8005250:	e8df f003 	tbb	[pc, r3]
 8005254:	5637392c 	.word	0x5637392c
 8005258:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800525c:	441c      	add	r4, r3
 800525e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005262:	2b20      	cmp	r3, #32
 8005264:	bfc1      	itttt	gt
 8005266:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800526a:	fa09 f903 	lslgt.w	r9, r9, r3
 800526e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005272:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005276:	bfd6      	itet	le
 8005278:	f1c3 0320 	rsble	r3, r3, #32
 800527c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005280:	fa06 f003 	lslle.w	r0, r6, r3
 8005284:	f7fb f8ae 	bl	80003e4 <__aeabi_ui2d>
 8005288:	2201      	movs	r2, #1
 800528a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800528e:	3c01      	subs	r4, #1
 8005290:	9213      	str	r2, [sp, #76]	; 0x4c
 8005292:	e76f      	b.n	8005174 <_dtoa_r+0x114>
 8005294:	2301      	movs	r3, #1
 8005296:	e7b3      	b.n	8005200 <_dtoa_r+0x1a0>
 8005298:	900f      	str	r0, [sp, #60]	; 0x3c
 800529a:	e7b2      	b.n	8005202 <_dtoa_r+0x1a2>
 800529c:	f1cb 0300 	rsb	r3, fp, #0
 80052a0:	930a      	str	r3, [sp, #40]	; 0x28
 80052a2:	2300      	movs	r3, #0
 80052a4:	eba9 090b 	sub.w	r9, r9, fp
 80052a8:	930e      	str	r3, [sp, #56]	; 0x38
 80052aa:	e7c0      	b.n	800522e <_dtoa_r+0x1ce>
 80052ac:	2300      	movs	r3, #0
 80052ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80052b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	dc55      	bgt.n	8005362 <_dtoa_r+0x302>
 80052b6:	2301      	movs	r3, #1
 80052b8:	461a      	mov	r2, r3
 80052ba:	9306      	str	r3, [sp, #24]
 80052bc:	9308      	str	r3, [sp, #32]
 80052be:	9223      	str	r2, [sp, #140]	; 0x8c
 80052c0:	e00b      	b.n	80052da <_dtoa_r+0x27a>
 80052c2:	2301      	movs	r3, #1
 80052c4:	e7f3      	b.n	80052ae <_dtoa_r+0x24e>
 80052c6:	2300      	movs	r3, #0
 80052c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052cc:	445b      	add	r3, fp
 80052ce:	9306      	str	r3, [sp, #24]
 80052d0:	3301      	adds	r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	9308      	str	r3, [sp, #32]
 80052d6:	bfb8      	it	lt
 80052d8:	2301      	movlt	r3, #1
 80052da:	2100      	movs	r1, #0
 80052dc:	2204      	movs	r2, #4
 80052de:	69e8      	ldr	r0, [r5, #28]
 80052e0:	f102 0614 	add.w	r6, r2, #20
 80052e4:	429e      	cmp	r6, r3
 80052e6:	d940      	bls.n	800536a <_dtoa_r+0x30a>
 80052e8:	6041      	str	r1, [r0, #4]
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 fce4 	bl	8005cb8 <_Balloc>
 80052f0:	9003      	str	r0, [sp, #12]
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d13c      	bne.n	8005370 <_dtoa_r+0x310>
 80052f6:	4602      	mov	r2, r0
 80052f8:	f240 11af 	movw	r1, #431	; 0x1af
 80052fc:	4b16      	ldr	r3, [pc, #88]	; (8005358 <_dtoa_r+0x2f8>)
 80052fe:	e6c3      	b.n	8005088 <_dtoa_r+0x28>
 8005300:	2301      	movs	r3, #1
 8005302:	e7e1      	b.n	80052c8 <_dtoa_r+0x268>
 8005304:	2401      	movs	r4, #1
 8005306:	2300      	movs	r3, #0
 8005308:	940b      	str	r4, [sp, #44]	; 0x2c
 800530a:	9322      	str	r3, [sp, #136]	; 0x88
 800530c:	f04f 33ff 	mov.w	r3, #4294967295
 8005310:	2200      	movs	r2, #0
 8005312:	9306      	str	r3, [sp, #24]
 8005314:	9308      	str	r3, [sp, #32]
 8005316:	2312      	movs	r3, #18
 8005318:	e7d1      	b.n	80052be <_dtoa_r+0x25e>
 800531a:	bf00      	nop
 800531c:	f3af 8000 	nop.w
 8005320:	636f4361 	.word	0x636f4361
 8005324:	3fd287a7 	.word	0x3fd287a7
 8005328:	8b60c8b3 	.word	0x8b60c8b3
 800532c:	3fc68a28 	.word	0x3fc68a28
 8005330:	509f79fb 	.word	0x509f79fb
 8005334:	3fd34413 	.word	0x3fd34413
 8005338:	08007e1b 	.word	0x08007e1b
 800533c:	08007e32 	.word	0x08007e32
 8005340:	7ff00000 	.word	0x7ff00000
 8005344:	08007e17 	.word	0x08007e17
 8005348:	08007e0e 	.word	0x08007e0e
 800534c:	08007deb 	.word	0x08007deb
 8005350:	3ff80000 	.word	0x3ff80000
 8005354:	08007f20 	.word	0x08007f20
 8005358:	08007e8a 	.word	0x08007e8a
 800535c:	2301      	movs	r3, #1
 800535e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005360:	e7d4      	b.n	800530c <_dtoa_r+0x2ac>
 8005362:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005364:	9306      	str	r3, [sp, #24]
 8005366:	9308      	str	r3, [sp, #32]
 8005368:	e7b7      	b.n	80052da <_dtoa_r+0x27a>
 800536a:	3101      	adds	r1, #1
 800536c:	0052      	lsls	r2, r2, #1
 800536e:	e7b7      	b.n	80052e0 <_dtoa_r+0x280>
 8005370:	69eb      	ldr	r3, [r5, #28]
 8005372:	9a03      	ldr	r2, [sp, #12]
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	9b08      	ldr	r3, [sp, #32]
 8005378:	2b0e      	cmp	r3, #14
 800537a:	f200 80a8 	bhi.w	80054ce <_dtoa_r+0x46e>
 800537e:	2c00      	cmp	r4, #0
 8005380:	f000 80a5 	beq.w	80054ce <_dtoa_r+0x46e>
 8005384:	f1bb 0f00 	cmp.w	fp, #0
 8005388:	dd34      	ble.n	80053f4 <_dtoa_r+0x394>
 800538a:	4b9a      	ldr	r3, [pc, #616]	; (80055f4 <_dtoa_r+0x594>)
 800538c:	f00b 020f 	and.w	r2, fp, #15
 8005390:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005394:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005398:	e9d3 3400 	ldrd	r3, r4, [r3]
 800539c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053a0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80053a4:	d016      	beq.n	80053d4 <_dtoa_r+0x374>
 80053a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053aa:	4b93      	ldr	r3, [pc, #588]	; (80055f8 <_dtoa_r+0x598>)
 80053ac:	2703      	movs	r7, #3
 80053ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053b2:	f7fb f9bb 	bl	800072c <__aeabi_ddiv>
 80053b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ba:	f004 040f 	and.w	r4, r4, #15
 80053be:	4e8e      	ldr	r6, [pc, #568]	; (80055f8 <_dtoa_r+0x598>)
 80053c0:	b954      	cbnz	r4, 80053d8 <_dtoa_r+0x378>
 80053c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053ca:	f7fb f9af 	bl	800072c <__aeabi_ddiv>
 80053ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053d2:	e029      	b.n	8005428 <_dtoa_r+0x3c8>
 80053d4:	2702      	movs	r7, #2
 80053d6:	e7f2      	b.n	80053be <_dtoa_r+0x35e>
 80053d8:	07e1      	lsls	r1, r4, #31
 80053da:	d508      	bpl.n	80053ee <_dtoa_r+0x38e>
 80053dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053e0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80053e4:	f7fb f878 	bl	80004d8 <__aeabi_dmul>
 80053e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ec:	3701      	adds	r7, #1
 80053ee:	1064      	asrs	r4, r4, #1
 80053f0:	3608      	adds	r6, #8
 80053f2:	e7e5      	b.n	80053c0 <_dtoa_r+0x360>
 80053f4:	f000 80a5 	beq.w	8005542 <_dtoa_r+0x4e2>
 80053f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053fc:	f1cb 0400 	rsb	r4, fp, #0
 8005400:	4b7c      	ldr	r3, [pc, #496]	; (80055f4 <_dtoa_r+0x594>)
 8005402:	f004 020f 	and.w	r2, r4, #15
 8005406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f7fb f863 	bl	80004d8 <__aeabi_dmul>
 8005412:	2702      	movs	r7, #2
 8005414:	2300      	movs	r3, #0
 8005416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800541a:	4e77      	ldr	r6, [pc, #476]	; (80055f8 <_dtoa_r+0x598>)
 800541c:	1124      	asrs	r4, r4, #4
 800541e:	2c00      	cmp	r4, #0
 8005420:	f040 8084 	bne.w	800552c <_dtoa_r+0x4cc>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1d2      	bne.n	80053ce <_dtoa_r+0x36e>
 8005428:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800542c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005430:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8087 	beq.w	8005546 <_dtoa_r+0x4e6>
 8005438:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800543c:	2200      	movs	r2, #0
 800543e:	4b6f      	ldr	r3, [pc, #444]	; (80055fc <_dtoa_r+0x59c>)
 8005440:	f7fb fabc 	bl	80009bc <__aeabi_dcmplt>
 8005444:	2800      	cmp	r0, #0
 8005446:	d07e      	beq.n	8005546 <_dtoa_r+0x4e6>
 8005448:	9b08      	ldr	r3, [sp, #32]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d07b      	beq.n	8005546 <_dtoa_r+0x4e6>
 800544e:	9b06      	ldr	r3, [sp, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	dd38      	ble.n	80054c6 <_dtoa_r+0x466>
 8005454:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005458:	2200      	movs	r2, #0
 800545a:	4b69      	ldr	r3, [pc, #420]	; (8005600 <_dtoa_r+0x5a0>)
 800545c:	f7fb f83c 	bl	80004d8 <__aeabi_dmul>
 8005460:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005464:	9c06      	ldr	r4, [sp, #24]
 8005466:	f10b 38ff 	add.w	r8, fp, #4294967295
 800546a:	3701      	adds	r7, #1
 800546c:	4638      	mov	r0, r7
 800546e:	f7fa ffc9 	bl	8000404 <__aeabi_i2d>
 8005472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005476:	f7fb f82f 	bl	80004d8 <__aeabi_dmul>
 800547a:	2200      	movs	r2, #0
 800547c:	4b61      	ldr	r3, [pc, #388]	; (8005604 <_dtoa_r+0x5a4>)
 800547e:	f7fa fe75 	bl	800016c <__adddf3>
 8005482:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005486:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800548a:	9611      	str	r6, [sp, #68]	; 0x44
 800548c:	2c00      	cmp	r4, #0
 800548e:	d15d      	bne.n	800554c <_dtoa_r+0x4ec>
 8005490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005494:	2200      	movs	r2, #0
 8005496:	4b5c      	ldr	r3, [pc, #368]	; (8005608 <_dtoa_r+0x5a8>)
 8005498:	f7fa fe66 	bl	8000168 <__aeabi_dsub>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054a4:	4633      	mov	r3, r6
 80054a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054a8:	f7fb faa6 	bl	80009f8 <__aeabi_dcmpgt>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	f040 8295 	bne.w	80059dc <_dtoa_r+0x97c>
 80054b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80054bc:	f7fb fa7e 	bl	80009bc <__aeabi_dcmplt>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	f040 8289 	bne.w	80059d8 <_dtoa_r+0x978>
 80054c6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80054ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80054ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f2c0 8151 	blt.w	8005778 <_dtoa_r+0x718>
 80054d6:	f1bb 0f0e 	cmp.w	fp, #14
 80054da:	f300 814d 	bgt.w	8005778 <_dtoa_r+0x718>
 80054de:	4b45      	ldr	r3, [pc, #276]	; (80055f4 <_dtoa_r+0x594>)
 80054e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80054e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80054e8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80054ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f280 80da 	bge.w	80056a8 <_dtoa_r+0x648>
 80054f4:	9b08      	ldr	r3, [sp, #32]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f300 80d6 	bgt.w	80056a8 <_dtoa_r+0x648>
 80054fc:	f040 826b 	bne.w	80059d6 <_dtoa_r+0x976>
 8005500:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005504:	2200      	movs	r2, #0
 8005506:	4b40      	ldr	r3, [pc, #256]	; (8005608 <_dtoa_r+0x5a8>)
 8005508:	f7fa ffe6 	bl	80004d8 <__aeabi_dmul>
 800550c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005510:	f7fb fa68 	bl	80009e4 <__aeabi_dcmpge>
 8005514:	9c08      	ldr	r4, [sp, #32]
 8005516:	4626      	mov	r6, r4
 8005518:	2800      	cmp	r0, #0
 800551a:	f040 8241 	bne.w	80059a0 <_dtoa_r+0x940>
 800551e:	2331      	movs	r3, #49	; 0x31
 8005520:	9f03      	ldr	r7, [sp, #12]
 8005522:	f10b 0b01 	add.w	fp, fp, #1
 8005526:	f807 3b01 	strb.w	r3, [r7], #1
 800552a:	e23d      	b.n	80059a8 <_dtoa_r+0x948>
 800552c:	07e2      	lsls	r2, r4, #31
 800552e:	d505      	bpl.n	800553c <_dtoa_r+0x4dc>
 8005530:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005534:	f7fa ffd0 	bl	80004d8 <__aeabi_dmul>
 8005538:	2301      	movs	r3, #1
 800553a:	3701      	adds	r7, #1
 800553c:	1064      	asrs	r4, r4, #1
 800553e:	3608      	adds	r6, #8
 8005540:	e76d      	b.n	800541e <_dtoa_r+0x3be>
 8005542:	2702      	movs	r7, #2
 8005544:	e770      	b.n	8005428 <_dtoa_r+0x3c8>
 8005546:	46d8      	mov	r8, fp
 8005548:	9c08      	ldr	r4, [sp, #32]
 800554a:	e78f      	b.n	800546c <_dtoa_r+0x40c>
 800554c:	9903      	ldr	r1, [sp, #12]
 800554e:	4b29      	ldr	r3, [pc, #164]	; (80055f4 <_dtoa_r+0x594>)
 8005550:	4421      	add	r1, r4
 8005552:	9112      	str	r1, [sp, #72]	; 0x48
 8005554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005556:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800555a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800555e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005562:	2900      	cmp	r1, #0
 8005564:	d054      	beq.n	8005610 <_dtoa_r+0x5b0>
 8005566:	2000      	movs	r0, #0
 8005568:	4928      	ldr	r1, [pc, #160]	; (800560c <_dtoa_r+0x5ac>)
 800556a:	f7fb f8df 	bl	800072c <__aeabi_ddiv>
 800556e:	463b      	mov	r3, r7
 8005570:	4632      	mov	r2, r6
 8005572:	f7fa fdf9 	bl	8000168 <__aeabi_dsub>
 8005576:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800557a:	9f03      	ldr	r7, [sp, #12]
 800557c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005580:	f7fb fa5a 	bl	8000a38 <__aeabi_d2iz>
 8005584:	4604      	mov	r4, r0
 8005586:	f7fa ff3d 	bl	8000404 <__aeabi_i2d>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005592:	f7fa fde9 	bl	8000168 <__aeabi_dsub>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	3430      	adds	r4, #48	; 0x30
 800559c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055a4:	f807 4b01 	strb.w	r4, [r7], #1
 80055a8:	f7fb fa08 	bl	80009bc <__aeabi_dcmplt>
 80055ac:	2800      	cmp	r0, #0
 80055ae:	d173      	bne.n	8005698 <_dtoa_r+0x638>
 80055b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b4:	2000      	movs	r0, #0
 80055b6:	4911      	ldr	r1, [pc, #68]	; (80055fc <_dtoa_r+0x59c>)
 80055b8:	f7fa fdd6 	bl	8000168 <__aeabi_dsub>
 80055bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055c0:	f7fb f9fc 	bl	80009bc <__aeabi_dcmplt>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	f040 80b6 	bne.w	8005736 <_dtoa_r+0x6d6>
 80055ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055cc:	429f      	cmp	r7, r3
 80055ce:	f43f af7a 	beq.w	80054c6 <_dtoa_r+0x466>
 80055d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055d6:	2200      	movs	r2, #0
 80055d8:	4b09      	ldr	r3, [pc, #36]	; (8005600 <_dtoa_r+0x5a0>)
 80055da:	f7fa ff7d 	bl	80004d8 <__aeabi_dmul>
 80055de:	2200      	movs	r2, #0
 80055e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055e8:	4b05      	ldr	r3, [pc, #20]	; (8005600 <_dtoa_r+0x5a0>)
 80055ea:	f7fa ff75 	bl	80004d8 <__aeabi_dmul>
 80055ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055f2:	e7c3      	b.n	800557c <_dtoa_r+0x51c>
 80055f4:	08007f20 	.word	0x08007f20
 80055f8:	08007ef8 	.word	0x08007ef8
 80055fc:	3ff00000 	.word	0x3ff00000
 8005600:	40240000 	.word	0x40240000
 8005604:	401c0000 	.word	0x401c0000
 8005608:	40140000 	.word	0x40140000
 800560c:	3fe00000 	.word	0x3fe00000
 8005610:	4630      	mov	r0, r6
 8005612:	4639      	mov	r1, r7
 8005614:	f7fa ff60 	bl	80004d8 <__aeabi_dmul>
 8005618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800561a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800561e:	9c03      	ldr	r4, [sp, #12]
 8005620:	9314      	str	r3, [sp, #80]	; 0x50
 8005622:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005626:	f7fb fa07 	bl	8000a38 <__aeabi_d2iz>
 800562a:	9015      	str	r0, [sp, #84]	; 0x54
 800562c:	f7fa feea 	bl	8000404 <__aeabi_i2d>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005638:	f7fa fd96 	bl	8000168 <__aeabi_dsub>
 800563c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800563e:	4606      	mov	r6, r0
 8005640:	3330      	adds	r3, #48	; 0x30
 8005642:	f804 3b01 	strb.w	r3, [r4], #1
 8005646:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005648:	460f      	mov	r7, r1
 800564a:	429c      	cmp	r4, r3
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	d124      	bne.n	800569c <_dtoa_r+0x63c>
 8005652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005656:	4baf      	ldr	r3, [pc, #700]	; (8005914 <_dtoa_r+0x8b4>)
 8005658:	f7fa fd88 	bl	800016c <__adddf3>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fb f9c8 	bl	80009f8 <__aeabi_dcmpgt>
 8005668:	2800      	cmp	r0, #0
 800566a:	d163      	bne.n	8005734 <_dtoa_r+0x6d4>
 800566c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005670:	2000      	movs	r0, #0
 8005672:	49a8      	ldr	r1, [pc, #672]	; (8005914 <_dtoa_r+0x8b4>)
 8005674:	f7fa fd78 	bl	8000168 <__aeabi_dsub>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4630      	mov	r0, r6
 800567e:	4639      	mov	r1, r7
 8005680:	f7fb f99c 	bl	80009bc <__aeabi_dcmplt>
 8005684:	2800      	cmp	r0, #0
 8005686:	f43f af1e 	beq.w	80054c6 <_dtoa_r+0x466>
 800568a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800568c:	1e7b      	subs	r3, r7, #1
 800568e:	9314      	str	r3, [sp, #80]	; 0x50
 8005690:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005694:	2b30      	cmp	r3, #48	; 0x30
 8005696:	d0f8      	beq.n	800568a <_dtoa_r+0x62a>
 8005698:	46c3      	mov	fp, r8
 800569a:	e03b      	b.n	8005714 <_dtoa_r+0x6b4>
 800569c:	4b9e      	ldr	r3, [pc, #632]	; (8005918 <_dtoa_r+0x8b8>)
 800569e:	f7fa ff1b 	bl	80004d8 <__aeabi_dmul>
 80056a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056a6:	e7bc      	b.n	8005622 <_dtoa_r+0x5c2>
 80056a8:	9f03      	ldr	r7, [sp, #12]
 80056aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80056ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056b2:	4640      	mov	r0, r8
 80056b4:	4649      	mov	r1, r9
 80056b6:	f7fb f839 	bl	800072c <__aeabi_ddiv>
 80056ba:	f7fb f9bd 	bl	8000a38 <__aeabi_d2iz>
 80056be:	4604      	mov	r4, r0
 80056c0:	f7fa fea0 	bl	8000404 <__aeabi_i2d>
 80056c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056c8:	f7fa ff06 	bl	80004d8 <__aeabi_dmul>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	f7fa fd48 	bl	8000168 <__aeabi_dsub>
 80056d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80056dc:	f807 6b01 	strb.w	r6, [r7], #1
 80056e0:	9e03      	ldr	r6, [sp, #12]
 80056e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80056e6:	1bbe      	subs	r6, r7, r6
 80056e8:	45b4      	cmp	ip, r6
 80056ea:	4602      	mov	r2, r0
 80056ec:	460b      	mov	r3, r1
 80056ee:	d136      	bne.n	800575e <_dtoa_r+0x6fe>
 80056f0:	f7fa fd3c 	bl	800016c <__adddf3>
 80056f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056f8:	4680      	mov	r8, r0
 80056fa:	4689      	mov	r9, r1
 80056fc:	f7fb f97c 	bl	80009f8 <__aeabi_dcmpgt>
 8005700:	bb58      	cbnz	r0, 800575a <_dtoa_r+0x6fa>
 8005702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005706:	4640      	mov	r0, r8
 8005708:	4649      	mov	r1, r9
 800570a:	f7fb f94d 	bl	80009a8 <__aeabi_dcmpeq>
 800570e:	b108      	cbz	r0, 8005714 <_dtoa_r+0x6b4>
 8005710:	07e3      	lsls	r3, r4, #31
 8005712:	d422      	bmi.n	800575a <_dtoa_r+0x6fa>
 8005714:	4651      	mov	r1, sl
 8005716:	4628      	mov	r0, r5
 8005718:	f000 fb0e 	bl	8005d38 <_Bfree>
 800571c:	2300      	movs	r3, #0
 800571e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005720:	703b      	strb	r3, [r7, #0]
 8005722:	f10b 0301 	add.w	r3, fp, #1
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800572a:	2b00      	cmp	r3, #0
 800572c:	f43f ace6 	beq.w	80050fc <_dtoa_r+0x9c>
 8005730:	601f      	str	r7, [r3, #0]
 8005732:	e4e3      	b.n	80050fc <_dtoa_r+0x9c>
 8005734:	4627      	mov	r7, r4
 8005736:	463b      	mov	r3, r7
 8005738:	461f      	mov	r7, r3
 800573a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800573e:	2a39      	cmp	r2, #57	; 0x39
 8005740:	d107      	bne.n	8005752 <_dtoa_r+0x6f2>
 8005742:	9a03      	ldr	r2, [sp, #12]
 8005744:	429a      	cmp	r2, r3
 8005746:	d1f7      	bne.n	8005738 <_dtoa_r+0x6d8>
 8005748:	2230      	movs	r2, #48	; 0x30
 800574a:	9903      	ldr	r1, [sp, #12]
 800574c:	f108 0801 	add.w	r8, r8, #1
 8005750:	700a      	strb	r2, [r1, #0]
 8005752:	781a      	ldrb	r2, [r3, #0]
 8005754:	3201      	adds	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e79e      	b.n	8005698 <_dtoa_r+0x638>
 800575a:	46d8      	mov	r8, fp
 800575c:	e7eb      	b.n	8005736 <_dtoa_r+0x6d6>
 800575e:	2200      	movs	r2, #0
 8005760:	4b6d      	ldr	r3, [pc, #436]	; (8005918 <_dtoa_r+0x8b8>)
 8005762:	f7fa feb9 	bl	80004d8 <__aeabi_dmul>
 8005766:	2200      	movs	r2, #0
 8005768:	2300      	movs	r3, #0
 800576a:	4680      	mov	r8, r0
 800576c:	4689      	mov	r9, r1
 800576e:	f7fb f91b 	bl	80009a8 <__aeabi_dcmpeq>
 8005772:	2800      	cmp	r0, #0
 8005774:	d09b      	beq.n	80056ae <_dtoa_r+0x64e>
 8005776:	e7cd      	b.n	8005714 <_dtoa_r+0x6b4>
 8005778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800577a:	2a00      	cmp	r2, #0
 800577c:	f000 80c4 	beq.w	8005908 <_dtoa_r+0x8a8>
 8005780:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005782:	2a01      	cmp	r2, #1
 8005784:	f300 80a8 	bgt.w	80058d8 <_dtoa_r+0x878>
 8005788:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800578a:	2a00      	cmp	r2, #0
 800578c:	f000 80a0 	beq.w	80058d0 <_dtoa_r+0x870>
 8005790:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005794:	464f      	mov	r7, r9
 8005796:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579a:	2101      	movs	r1, #1
 800579c:	441a      	add	r2, r3
 800579e:	4628      	mov	r0, r5
 80057a0:	4499      	add	r9, r3
 80057a2:	9209      	str	r2, [sp, #36]	; 0x24
 80057a4:	f000 fb7e 	bl	8005ea4 <__i2b>
 80057a8:	4606      	mov	r6, r0
 80057aa:	b15f      	cbz	r7, 80057c4 <_dtoa_r+0x764>
 80057ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	dd08      	ble.n	80057c4 <_dtoa_r+0x764>
 80057b2:	42bb      	cmp	r3, r7
 80057b4:	bfa8      	it	ge
 80057b6:	463b      	movge	r3, r7
 80057b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057ba:	eba9 0903 	sub.w	r9, r9, r3
 80057be:	1aff      	subs	r7, r7, r3
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	9309      	str	r3, [sp, #36]	; 0x24
 80057c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c6:	b1f3      	cbz	r3, 8005806 <_dtoa_r+0x7a6>
 80057c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80a0 	beq.w	8005910 <_dtoa_r+0x8b0>
 80057d0:	2c00      	cmp	r4, #0
 80057d2:	dd10      	ble.n	80057f6 <_dtoa_r+0x796>
 80057d4:	4631      	mov	r1, r6
 80057d6:	4622      	mov	r2, r4
 80057d8:	4628      	mov	r0, r5
 80057da:	f000 fc21 	bl	8006020 <__pow5mult>
 80057de:	4652      	mov	r2, sl
 80057e0:	4601      	mov	r1, r0
 80057e2:	4606      	mov	r6, r0
 80057e4:	4628      	mov	r0, r5
 80057e6:	f000 fb73 	bl	8005ed0 <__multiply>
 80057ea:	4680      	mov	r8, r0
 80057ec:	4651      	mov	r1, sl
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 faa2 	bl	8005d38 <_Bfree>
 80057f4:	46c2      	mov	sl, r8
 80057f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f8:	1b1a      	subs	r2, r3, r4
 80057fa:	d004      	beq.n	8005806 <_dtoa_r+0x7a6>
 80057fc:	4651      	mov	r1, sl
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 fc0e 	bl	8006020 <__pow5mult>
 8005804:	4682      	mov	sl, r0
 8005806:	2101      	movs	r1, #1
 8005808:	4628      	mov	r0, r5
 800580a:	f000 fb4b 	bl	8005ea4 <__i2b>
 800580e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005810:	4604      	mov	r4, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	f340 8082 	ble.w	800591c <_dtoa_r+0x8bc>
 8005818:	461a      	mov	r2, r3
 800581a:	4601      	mov	r1, r0
 800581c:	4628      	mov	r0, r5
 800581e:	f000 fbff 	bl	8006020 <__pow5mult>
 8005822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005824:	4604      	mov	r4, r0
 8005826:	2b01      	cmp	r3, #1
 8005828:	dd7b      	ble.n	8005922 <_dtoa_r+0x8c2>
 800582a:	f04f 0800 	mov.w	r8, #0
 800582e:	6923      	ldr	r3, [r4, #16]
 8005830:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005834:	6918      	ldr	r0, [r3, #16]
 8005836:	f000 fae7 	bl	8005e08 <__hi0bits>
 800583a:	f1c0 0020 	rsb	r0, r0, #32
 800583e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005840:	4418      	add	r0, r3
 8005842:	f010 001f 	ands.w	r0, r0, #31
 8005846:	f000 8092 	beq.w	800596e <_dtoa_r+0x90e>
 800584a:	f1c0 0320 	rsb	r3, r0, #32
 800584e:	2b04      	cmp	r3, #4
 8005850:	f340 8085 	ble.w	800595e <_dtoa_r+0x8fe>
 8005854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005856:	f1c0 001c 	rsb	r0, r0, #28
 800585a:	4403      	add	r3, r0
 800585c:	4481      	add	r9, r0
 800585e:	4407      	add	r7, r0
 8005860:	9309      	str	r3, [sp, #36]	; 0x24
 8005862:	f1b9 0f00 	cmp.w	r9, #0
 8005866:	dd05      	ble.n	8005874 <_dtoa_r+0x814>
 8005868:	4651      	mov	r1, sl
 800586a:	464a      	mov	r2, r9
 800586c:	4628      	mov	r0, r5
 800586e:	f000 fc31 	bl	80060d4 <__lshift>
 8005872:	4682      	mov	sl, r0
 8005874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	dd05      	ble.n	8005886 <_dtoa_r+0x826>
 800587a:	4621      	mov	r1, r4
 800587c:	461a      	mov	r2, r3
 800587e:	4628      	mov	r0, r5
 8005880:	f000 fc28 	bl	80060d4 <__lshift>
 8005884:	4604      	mov	r4, r0
 8005886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d072      	beq.n	8005972 <_dtoa_r+0x912>
 800588c:	4621      	mov	r1, r4
 800588e:	4650      	mov	r0, sl
 8005890:	f000 fc8c 	bl	80061ac <__mcmp>
 8005894:	2800      	cmp	r0, #0
 8005896:	da6c      	bge.n	8005972 <_dtoa_r+0x912>
 8005898:	2300      	movs	r3, #0
 800589a:	4651      	mov	r1, sl
 800589c:	220a      	movs	r2, #10
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 fa6c 	bl	8005d7c <__multadd>
 80058a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058a6:	4682      	mov	sl, r0
 80058a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 81ac 	beq.w	8005c0a <_dtoa_r+0xbaa>
 80058b2:	2300      	movs	r3, #0
 80058b4:	4631      	mov	r1, r6
 80058b6:	220a      	movs	r2, #10
 80058b8:	4628      	mov	r0, r5
 80058ba:	f000 fa5f 	bl	8005d7c <__multadd>
 80058be:	9b06      	ldr	r3, [sp, #24]
 80058c0:	4606      	mov	r6, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f300 8093 	bgt.w	80059ee <_dtoa_r+0x98e>
 80058c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	dc59      	bgt.n	8005982 <_dtoa_r+0x922>
 80058ce:	e08e      	b.n	80059ee <_dtoa_r+0x98e>
 80058d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80058d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80058d6:	e75d      	b.n	8005794 <_dtoa_r+0x734>
 80058d8:	9b08      	ldr	r3, [sp, #32]
 80058da:	1e5c      	subs	r4, r3, #1
 80058dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058de:	42a3      	cmp	r3, r4
 80058e0:	bfbf      	itttt	lt
 80058e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80058e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80058e6:	1ae3      	sublt	r3, r4, r3
 80058e8:	18d2      	addlt	r2, r2, r3
 80058ea:	bfa8      	it	ge
 80058ec:	1b1c      	subge	r4, r3, r4
 80058ee:	9b08      	ldr	r3, [sp, #32]
 80058f0:	bfbe      	ittt	lt
 80058f2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80058f4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80058f6:	2400      	movlt	r4, #0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfb5      	itete	lt
 80058fc:	eba9 0703 	sublt.w	r7, r9, r3
 8005900:	464f      	movge	r7, r9
 8005902:	2300      	movlt	r3, #0
 8005904:	9b08      	ldrge	r3, [sp, #32]
 8005906:	e747      	b.n	8005798 <_dtoa_r+0x738>
 8005908:	464f      	mov	r7, r9
 800590a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800590c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800590e:	e74c      	b.n	80057aa <_dtoa_r+0x74a>
 8005910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005912:	e773      	b.n	80057fc <_dtoa_r+0x79c>
 8005914:	3fe00000 	.word	0x3fe00000
 8005918:	40240000 	.word	0x40240000
 800591c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800591e:	2b01      	cmp	r3, #1
 8005920:	dc18      	bgt.n	8005954 <_dtoa_r+0x8f4>
 8005922:	9b04      	ldr	r3, [sp, #16]
 8005924:	b9b3      	cbnz	r3, 8005954 <_dtoa_r+0x8f4>
 8005926:	9b05      	ldr	r3, [sp, #20]
 8005928:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800592c:	b993      	cbnz	r3, 8005954 <_dtoa_r+0x8f4>
 800592e:	9b05      	ldr	r3, [sp, #20]
 8005930:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005934:	0d1b      	lsrs	r3, r3, #20
 8005936:	051b      	lsls	r3, r3, #20
 8005938:	b17b      	cbz	r3, 800595a <_dtoa_r+0x8fa>
 800593a:	f04f 0801 	mov.w	r8, #1
 800593e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005940:	f109 0901 	add.w	r9, r9, #1
 8005944:	3301      	adds	r3, #1
 8005946:	9309      	str	r3, [sp, #36]	; 0x24
 8005948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	f47f af6f 	bne.w	800582e <_dtoa_r+0x7ce>
 8005950:	2001      	movs	r0, #1
 8005952:	e774      	b.n	800583e <_dtoa_r+0x7de>
 8005954:	f04f 0800 	mov.w	r8, #0
 8005958:	e7f6      	b.n	8005948 <_dtoa_r+0x8e8>
 800595a:	4698      	mov	r8, r3
 800595c:	e7f4      	b.n	8005948 <_dtoa_r+0x8e8>
 800595e:	d080      	beq.n	8005862 <_dtoa_r+0x802>
 8005960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005962:	331c      	adds	r3, #28
 8005964:	441a      	add	r2, r3
 8005966:	4499      	add	r9, r3
 8005968:	441f      	add	r7, r3
 800596a:	9209      	str	r2, [sp, #36]	; 0x24
 800596c:	e779      	b.n	8005862 <_dtoa_r+0x802>
 800596e:	4603      	mov	r3, r0
 8005970:	e7f6      	b.n	8005960 <_dtoa_r+0x900>
 8005972:	9b08      	ldr	r3, [sp, #32]
 8005974:	2b00      	cmp	r3, #0
 8005976:	dc34      	bgt.n	80059e2 <_dtoa_r+0x982>
 8005978:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800597a:	2b02      	cmp	r3, #2
 800597c:	dd31      	ble.n	80059e2 <_dtoa_r+0x982>
 800597e:	9b08      	ldr	r3, [sp, #32]
 8005980:	9306      	str	r3, [sp, #24]
 8005982:	9b06      	ldr	r3, [sp, #24]
 8005984:	b963      	cbnz	r3, 80059a0 <_dtoa_r+0x940>
 8005986:	4621      	mov	r1, r4
 8005988:	2205      	movs	r2, #5
 800598a:	4628      	mov	r0, r5
 800598c:	f000 f9f6 	bl	8005d7c <__multadd>
 8005990:	4601      	mov	r1, r0
 8005992:	4604      	mov	r4, r0
 8005994:	4650      	mov	r0, sl
 8005996:	f000 fc09 	bl	80061ac <__mcmp>
 800599a:	2800      	cmp	r0, #0
 800599c:	f73f adbf 	bgt.w	800551e <_dtoa_r+0x4be>
 80059a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059a2:	9f03      	ldr	r7, [sp, #12]
 80059a4:	ea6f 0b03 	mvn.w	fp, r3
 80059a8:	f04f 0800 	mov.w	r8, #0
 80059ac:	4621      	mov	r1, r4
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 f9c2 	bl	8005d38 <_Bfree>
 80059b4:	2e00      	cmp	r6, #0
 80059b6:	f43f aead 	beq.w	8005714 <_dtoa_r+0x6b4>
 80059ba:	f1b8 0f00 	cmp.w	r8, #0
 80059be:	d005      	beq.n	80059cc <_dtoa_r+0x96c>
 80059c0:	45b0      	cmp	r8, r6
 80059c2:	d003      	beq.n	80059cc <_dtoa_r+0x96c>
 80059c4:	4641      	mov	r1, r8
 80059c6:	4628      	mov	r0, r5
 80059c8:	f000 f9b6 	bl	8005d38 <_Bfree>
 80059cc:	4631      	mov	r1, r6
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 f9b2 	bl	8005d38 <_Bfree>
 80059d4:	e69e      	b.n	8005714 <_dtoa_r+0x6b4>
 80059d6:	2400      	movs	r4, #0
 80059d8:	4626      	mov	r6, r4
 80059da:	e7e1      	b.n	80059a0 <_dtoa_r+0x940>
 80059dc:	46c3      	mov	fp, r8
 80059de:	4626      	mov	r6, r4
 80059e0:	e59d      	b.n	800551e <_dtoa_r+0x4be>
 80059e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 80c8 	beq.w	8005b7a <_dtoa_r+0xb1a>
 80059ea:	9b08      	ldr	r3, [sp, #32]
 80059ec:	9306      	str	r3, [sp, #24]
 80059ee:	2f00      	cmp	r7, #0
 80059f0:	dd05      	ble.n	80059fe <_dtoa_r+0x99e>
 80059f2:	4631      	mov	r1, r6
 80059f4:	463a      	mov	r2, r7
 80059f6:	4628      	mov	r0, r5
 80059f8:	f000 fb6c 	bl	80060d4 <__lshift>
 80059fc:	4606      	mov	r6, r0
 80059fe:	f1b8 0f00 	cmp.w	r8, #0
 8005a02:	d05b      	beq.n	8005abc <_dtoa_r+0xa5c>
 8005a04:	4628      	mov	r0, r5
 8005a06:	6871      	ldr	r1, [r6, #4]
 8005a08:	f000 f956 	bl	8005cb8 <_Balloc>
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	b928      	cbnz	r0, 8005a1c <_dtoa_r+0x9bc>
 8005a10:	4602      	mov	r2, r0
 8005a12:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005a16:	4b81      	ldr	r3, [pc, #516]	; (8005c1c <_dtoa_r+0xbbc>)
 8005a18:	f7ff bb36 	b.w	8005088 <_dtoa_r+0x28>
 8005a1c:	6932      	ldr	r2, [r6, #16]
 8005a1e:	f106 010c 	add.w	r1, r6, #12
 8005a22:	3202      	adds	r2, #2
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	300c      	adds	r0, #12
 8005a28:	f000 feda 	bl	80067e0 <memcpy>
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4639      	mov	r1, r7
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 fb4f 	bl	80060d4 <__lshift>
 8005a36:	46b0      	mov	r8, r6
 8005a38:	4606      	mov	r6, r0
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	9a03      	ldr	r2, [sp, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	9308      	str	r3, [sp, #32]
 8005a42:	9b06      	ldr	r3, [sp, #24]
 8005a44:	4413      	add	r3, r2
 8005a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a48:	9b04      	ldr	r3, [sp, #16]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a50:	9b08      	ldr	r3, [sp, #32]
 8005a52:	4621      	mov	r1, r4
 8005a54:	3b01      	subs	r3, #1
 8005a56:	4650      	mov	r0, sl
 8005a58:	9304      	str	r3, [sp, #16]
 8005a5a:	f7ff fa76 	bl	8004f4a <quorem>
 8005a5e:	4641      	mov	r1, r8
 8005a60:	9006      	str	r0, [sp, #24]
 8005a62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a66:	4650      	mov	r0, sl
 8005a68:	f000 fba0 	bl	80061ac <__mcmp>
 8005a6c:	4632      	mov	r2, r6
 8005a6e:	9009      	str	r0, [sp, #36]	; 0x24
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 fbb6 	bl	80061e4 <__mdiff>
 8005a78:	68c2      	ldr	r2, [r0, #12]
 8005a7a:	4607      	mov	r7, r0
 8005a7c:	bb02      	cbnz	r2, 8005ac0 <_dtoa_r+0xa60>
 8005a7e:	4601      	mov	r1, r0
 8005a80:	4650      	mov	r0, sl
 8005a82:	f000 fb93 	bl	80061ac <__mcmp>
 8005a86:	4602      	mov	r2, r0
 8005a88:	4639      	mov	r1, r7
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	920c      	str	r2, [sp, #48]	; 0x30
 8005a8e:	f000 f953 	bl	8005d38 <_Bfree>
 8005a92:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a96:	9f08      	ldr	r7, [sp, #32]
 8005a98:	ea43 0102 	orr.w	r1, r3, r2
 8005a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9e:	4319      	orrs	r1, r3
 8005aa0:	d110      	bne.n	8005ac4 <_dtoa_r+0xa64>
 8005aa2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005aa6:	d029      	beq.n	8005afc <_dtoa_r+0xa9c>
 8005aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	dd02      	ble.n	8005ab4 <_dtoa_r+0xa54>
 8005aae:	9b06      	ldr	r3, [sp, #24]
 8005ab0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	f883 9000 	strb.w	r9, [r3]
 8005aba:	e777      	b.n	80059ac <_dtoa_r+0x94c>
 8005abc:	4630      	mov	r0, r6
 8005abe:	e7ba      	b.n	8005a36 <_dtoa_r+0x9d6>
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	e7e1      	b.n	8005a88 <_dtoa_r+0xa28>
 8005ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	db04      	blt.n	8005ad4 <_dtoa_r+0xa74>
 8005aca:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005acc:	430b      	orrs	r3, r1
 8005ace:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	d120      	bne.n	8005b16 <_dtoa_r+0xab6>
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	dded      	ble.n	8005ab4 <_dtoa_r+0xa54>
 8005ad8:	4651      	mov	r1, sl
 8005ada:	2201      	movs	r2, #1
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 faf9 	bl	80060d4 <__lshift>
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4682      	mov	sl, r0
 8005ae6:	f000 fb61 	bl	80061ac <__mcmp>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	dc03      	bgt.n	8005af6 <_dtoa_r+0xa96>
 8005aee:	d1e1      	bne.n	8005ab4 <_dtoa_r+0xa54>
 8005af0:	f019 0f01 	tst.w	r9, #1
 8005af4:	d0de      	beq.n	8005ab4 <_dtoa_r+0xa54>
 8005af6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005afa:	d1d8      	bne.n	8005aae <_dtoa_r+0xa4e>
 8005afc:	2339      	movs	r3, #57	; 0x39
 8005afe:	9a04      	ldr	r2, [sp, #16]
 8005b00:	7013      	strb	r3, [r2, #0]
 8005b02:	463b      	mov	r3, r7
 8005b04:	461f      	mov	r7, r3
 8005b06:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	2a39      	cmp	r2, #57	; 0x39
 8005b0e:	d06b      	beq.n	8005be8 <_dtoa_r+0xb88>
 8005b10:	3201      	adds	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e74a      	b.n	80059ac <_dtoa_r+0x94c>
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	dd07      	ble.n	8005b2a <_dtoa_r+0xaca>
 8005b1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b1e:	d0ed      	beq.n	8005afc <_dtoa_r+0xa9c>
 8005b20:	9a04      	ldr	r2, [sp, #16]
 8005b22:	f109 0301 	add.w	r3, r9, #1
 8005b26:	7013      	strb	r3, [r2, #0]
 8005b28:	e740      	b.n	80059ac <_dtoa_r+0x94c>
 8005b2a:	9b08      	ldr	r3, [sp, #32]
 8005b2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b2e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d042      	beq.n	8005bbc <_dtoa_r+0xb5c>
 8005b36:	4651      	mov	r1, sl
 8005b38:	2300      	movs	r3, #0
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f000 f91d 	bl	8005d7c <__multadd>
 8005b42:	45b0      	cmp	r8, r6
 8005b44:	4682      	mov	sl, r0
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	f04f 020a 	mov.w	r2, #10
 8005b4e:	4641      	mov	r1, r8
 8005b50:	4628      	mov	r0, r5
 8005b52:	d107      	bne.n	8005b64 <_dtoa_r+0xb04>
 8005b54:	f000 f912 	bl	8005d7c <__multadd>
 8005b58:	4680      	mov	r8, r0
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	9b08      	ldr	r3, [sp, #32]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	9308      	str	r3, [sp, #32]
 8005b62:	e775      	b.n	8005a50 <_dtoa_r+0x9f0>
 8005b64:	f000 f90a 	bl	8005d7c <__multadd>
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	220a      	movs	r2, #10
 8005b70:	4628      	mov	r0, r5
 8005b72:	f000 f903 	bl	8005d7c <__multadd>
 8005b76:	4606      	mov	r6, r0
 8005b78:	e7f0      	b.n	8005b5c <_dtoa_r+0xafc>
 8005b7a:	9b08      	ldr	r3, [sp, #32]
 8005b7c:	9306      	str	r3, [sp, #24]
 8005b7e:	9f03      	ldr	r7, [sp, #12]
 8005b80:	4621      	mov	r1, r4
 8005b82:	4650      	mov	r0, sl
 8005b84:	f7ff f9e1 	bl	8004f4a <quorem>
 8005b88:	9b03      	ldr	r3, [sp, #12]
 8005b8a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b8e:	f807 9b01 	strb.w	r9, [r7], #1
 8005b92:	1afa      	subs	r2, r7, r3
 8005b94:	9b06      	ldr	r3, [sp, #24]
 8005b96:	4293      	cmp	r3, r2
 8005b98:	dd07      	ble.n	8005baa <_dtoa_r+0xb4a>
 8005b9a:	4651      	mov	r1, sl
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	220a      	movs	r2, #10
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f000 f8eb 	bl	8005d7c <__multadd>
 8005ba6:	4682      	mov	sl, r0
 8005ba8:	e7ea      	b.n	8005b80 <_dtoa_r+0xb20>
 8005baa:	9b06      	ldr	r3, [sp, #24]
 8005bac:	f04f 0800 	mov.w	r8, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	bfcc      	ite	gt
 8005bb4:	461f      	movgt	r7, r3
 8005bb6:	2701      	movle	r7, #1
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	441f      	add	r7, r3
 8005bbc:	4651      	mov	r1, sl
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 fa87 	bl	80060d4 <__lshift>
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	4682      	mov	sl, r0
 8005bca:	f000 faef 	bl	80061ac <__mcmp>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	dc97      	bgt.n	8005b02 <_dtoa_r+0xaa2>
 8005bd2:	d102      	bne.n	8005bda <_dtoa_r+0xb7a>
 8005bd4:	f019 0f01 	tst.w	r9, #1
 8005bd8:	d193      	bne.n	8005b02 <_dtoa_r+0xaa2>
 8005bda:	463b      	mov	r3, r7
 8005bdc:	461f      	mov	r7, r3
 8005bde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005be2:	2a30      	cmp	r2, #48	; 0x30
 8005be4:	d0fa      	beq.n	8005bdc <_dtoa_r+0xb7c>
 8005be6:	e6e1      	b.n	80059ac <_dtoa_r+0x94c>
 8005be8:	9a03      	ldr	r2, [sp, #12]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d18a      	bne.n	8005b04 <_dtoa_r+0xaa4>
 8005bee:	2331      	movs	r3, #49	; 0x31
 8005bf0:	f10b 0b01 	add.w	fp, fp, #1
 8005bf4:	e797      	b.n	8005b26 <_dtoa_r+0xac6>
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <_dtoa_r+0xbc0>)
 8005bf8:	f7ff ba9f 	b.w	800513a <_dtoa_r+0xda>
 8005bfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f47f aa77 	bne.w	80050f2 <_dtoa_r+0x92>
 8005c04:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <_dtoa_r+0xbc4>)
 8005c06:	f7ff ba98 	b.w	800513a <_dtoa_r+0xda>
 8005c0a:	9b06      	ldr	r3, [sp, #24]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dcb6      	bgt.n	8005b7e <_dtoa_r+0xb1e>
 8005c10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	f73f aeb5 	bgt.w	8005982 <_dtoa_r+0x922>
 8005c18:	e7b1      	b.n	8005b7e <_dtoa_r+0xb1e>
 8005c1a:	bf00      	nop
 8005c1c:	08007e8a 	.word	0x08007e8a
 8005c20:	08007dea 	.word	0x08007dea
 8005c24:	08007e0e 	.word	0x08007e0e

08005c28 <_free_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4605      	mov	r5, r0
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	d040      	beq.n	8005cb2 <_free_r+0x8a>
 8005c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c34:	1f0c      	subs	r4, r1, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	bfb8      	it	lt
 8005c3a:	18e4      	addlt	r4, r4, r3
 8005c3c:	f7fe fb58 	bl	80042f0 <__malloc_lock>
 8005c40:	4a1c      	ldr	r2, [pc, #112]	; (8005cb4 <_free_r+0x8c>)
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	b933      	cbnz	r3, 8005c54 <_free_r+0x2c>
 8005c46:	6063      	str	r3, [r4, #4]
 8005c48:	6014      	str	r4, [r2, #0]
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c50:	f7fe bb54 	b.w	80042fc <__malloc_unlock>
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	d908      	bls.n	8005c6a <_free_r+0x42>
 8005c58:	6820      	ldr	r0, [r4, #0]
 8005c5a:	1821      	adds	r1, r4, r0
 8005c5c:	428b      	cmp	r3, r1
 8005c5e:	bf01      	itttt	eq
 8005c60:	6819      	ldreq	r1, [r3, #0]
 8005c62:	685b      	ldreq	r3, [r3, #4]
 8005c64:	1809      	addeq	r1, r1, r0
 8005c66:	6021      	streq	r1, [r4, #0]
 8005c68:	e7ed      	b.n	8005c46 <_free_r+0x1e>
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	b10b      	cbz	r3, 8005c74 <_free_r+0x4c>
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	d9fa      	bls.n	8005c6a <_free_r+0x42>
 8005c74:	6811      	ldr	r1, [r2, #0]
 8005c76:	1850      	adds	r0, r2, r1
 8005c78:	42a0      	cmp	r0, r4
 8005c7a:	d10b      	bne.n	8005c94 <_free_r+0x6c>
 8005c7c:	6820      	ldr	r0, [r4, #0]
 8005c7e:	4401      	add	r1, r0
 8005c80:	1850      	adds	r0, r2, r1
 8005c82:	4283      	cmp	r3, r0
 8005c84:	6011      	str	r1, [r2, #0]
 8005c86:	d1e0      	bne.n	8005c4a <_free_r+0x22>
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	4408      	add	r0, r1
 8005c8e:	6010      	str	r0, [r2, #0]
 8005c90:	6053      	str	r3, [r2, #4]
 8005c92:	e7da      	b.n	8005c4a <_free_r+0x22>
 8005c94:	d902      	bls.n	8005c9c <_free_r+0x74>
 8005c96:	230c      	movs	r3, #12
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	e7d6      	b.n	8005c4a <_free_r+0x22>
 8005c9c:	6820      	ldr	r0, [r4, #0]
 8005c9e:	1821      	adds	r1, r4, r0
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	bf01      	itttt	eq
 8005ca4:	6819      	ldreq	r1, [r3, #0]
 8005ca6:	685b      	ldreq	r3, [r3, #4]
 8005ca8:	1809      	addeq	r1, r1, r0
 8005caa:	6021      	streq	r1, [r4, #0]
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	6054      	str	r4, [r2, #4]
 8005cb0:	e7cb      	b.n	8005c4a <_free_r+0x22>
 8005cb2:	bd38      	pop	{r3, r4, r5, pc}
 8005cb4:	200002f8 	.word	0x200002f8

08005cb8 <_Balloc>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	69c6      	ldr	r6, [r0, #28]
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	460d      	mov	r5, r1
 8005cc0:	b976      	cbnz	r6, 8005ce0 <_Balloc+0x28>
 8005cc2:	2010      	movs	r0, #16
 8005cc4:	f7fe fa64 	bl	8004190 <malloc>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	61e0      	str	r0, [r4, #28]
 8005ccc:	b920      	cbnz	r0, 8005cd8 <_Balloc+0x20>
 8005cce:	216b      	movs	r1, #107	; 0x6b
 8005cd0:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <_Balloc+0x78>)
 8005cd2:	4818      	ldr	r0, [pc, #96]	; (8005d34 <_Balloc+0x7c>)
 8005cd4:	f000 fd92 	bl	80067fc <__assert_func>
 8005cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005cdc:	6006      	str	r6, [r0, #0]
 8005cde:	60c6      	str	r6, [r0, #12]
 8005ce0:	69e6      	ldr	r6, [r4, #28]
 8005ce2:	68f3      	ldr	r3, [r6, #12]
 8005ce4:	b183      	cbz	r3, 8005d08 <_Balloc+0x50>
 8005ce6:	69e3      	ldr	r3, [r4, #28]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cee:	b9b8      	cbnz	r0, 8005d20 <_Balloc+0x68>
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f605 	lsl.w	r6, r1, r5
 8005cf6:	1d72      	adds	r2, r6, #5
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	0092      	lsls	r2, r2, #2
 8005cfc:	f000 fd9c 	bl	8006838 <_calloc_r>
 8005d00:	b160      	cbz	r0, 8005d1c <_Balloc+0x64>
 8005d02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d06:	e00e      	b.n	8005d26 <_Balloc+0x6e>
 8005d08:	2221      	movs	r2, #33	; 0x21
 8005d0a:	2104      	movs	r1, #4
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 fd93 	bl	8006838 <_calloc_r>
 8005d12:	69e3      	ldr	r3, [r4, #28]
 8005d14:	60f0      	str	r0, [r6, #12]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e4      	bne.n	8005ce6 <_Balloc+0x2e>
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	6802      	ldr	r2, [r0, #0]
 8005d22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d26:	2300      	movs	r3, #0
 8005d28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d2c:	e7f7      	b.n	8005d1e <_Balloc+0x66>
 8005d2e:	bf00      	nop
 8005d30:	08007e1b 	.word	0x08007e1b
 8005d34:	08007e9b 	.word	0x08007e9b

08005d38 <_Bfree>:
 8005d38:	b570      	push	{r4, r5, r6, lr}
 8005d3a:	69c6      	ldr	r6, [r0, #28]
 8005d3c:	4605      	mov	r5, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	b976      	cbnz	r6, 8005d60 <_Bfree+0x28>
 8005d42:	2010      	movs	r0, #16
 8005d44:	f7fe fa24 	bl	8004190 <malloc>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	61e8      	str	r0, [r5, #28]
 8005d4c:	b920      	cbnz	r0, 8005d58 <_Bfree+0x20>
 8005d4e:	218f      	movs	r1, #143	; 0x8f
 8005d50:	4b08      	ldr	r3, [pc, #32]	; (8005d74 <_Bfree+0x3c>)
 8005d52:	4809      	ldr	r0, [pc, #36]	; (8005d78 <_Bfree+0x40>)
 8005d54:	f000 fd52 	bl	80067fc <__assert_func>
 8005d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d5c:	6006      	str	r6, [r0, #0]
 8005d5e:	60c6      	str	r6, [r0, #12]
 8005d60:	b13c      	cbz	r4, 8005d72 <_Bfree+0x3a>
 8005d62:	69eb      	ldr	r3, [r5, #28]
 8005d64:	6862      	ldr	r2, [r4, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d6c:	6021      	str	r1, [r4, #0]
 8005d6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d72:	bd70      	pop	{r4, r5, r6, pc}
 8005d74:	08007e1b 	.word	0x08007e1b
 8005d78:	08007e9b 	.word	0x08007e9b

08005d7c <__multadd>:
 8005d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d80:	4607      	mov	r7, r0
 8005d82:	460c      	mov	r4, r1
 8005d84:	461e      	mov	r6, r3
 8005d86:	2000      	movs	r0, #0
 8005d88:	690d      	ldr	r5, [r1, #16]
 8005d8a:	f101 0c14 	add.w	ip, r1, #20
 8005d8e:	f8dc 3000 	ldr.w	r3, [ip]
 8005d92:	3001      	adds	r0, #1
 8005d94:	b299      	uxth	r1, r3
 8005d96:	fb02 6101 	mla	r1, r2, r1, r6
 8005d9a:	0c1e      	lsrs	r6, r3, #16
 8005d9c:	0c0b      	lsrs	r3, r1, #16
 8005d9e:	fb02 3306 	mla	r3, r2, r6, r3
 8005da2:	b289      	uxth	r1, r1
 8005da4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005da8:	4285      	cmp	r5, r0
 8005daa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005dae:	f84c 1b04 	str.w	r1, [ip], #4
 8005db2:	dcec      	bgt.n	8005d8e <__multadd+0x12>
 8005db4:	b30e      	cbz	r6, 8005dfa <__multadd+0x7e>
 8005db6:	68a3      	ldr	r3, [r4, #8]
 8005db8:	42ab      	cmp	r3, r5
 8005dba:	dc19      	bgt.n	8005df0 <__multadd+0x74>
 8005dbc:	6861      	ldr	r1, [r4, #4]
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	3101      	adds	r1, #1
 8005dc2:	f7ff ff79 	bl	8005cb8 <_Balloc>
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	b928      	cbnz	r0, 8005dd6 <__multadd+0x5a>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	21ba      	movs	r1, #186	; 0xba
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <__multadd+0x84>)
 8005dd0:	480c      	ldr	r0, [pc, #48]	; (8005e04 <__multadd+0x88>)
 8005dd2:	f000 fd13 	bl	80067fc <__assert_func>
 8005dd6:	6922      	ldr	r2, [r4, #16]
 8005dd8:	f104 010c 	add.w	r1, r4, #12
 8005ddc:	3202      	adds	r2, #2
 8005dde:	0092      	lsls	r2, r2, #2
 8005de0:	300c      	adds	r0, #12
 8005de2:	f000 fcfd 	bl	80067e0 <memcpy>
 8005de6:	4621      	mov	r1, r4
 8005de8:	4638      	mov	r0, r7
 8005dea:	f7ff ffa5 	bl	8005d38 <_Bfree>
 8005dee:	4644      	mov	r4, r8
 8005df0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005df4:	3501      	adds	r5, #1
 8005df6:	615e      	str	r6, [r3, #20]
 8005df8:	6125      	str	r5, [r4, #16]
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	08007e8a 	.word	0x08007e8a
 8005e04:	08007e9b 	.word	0x08007e9b

08005e08 <__hi0bits>:
 8005e08:	0c02      	lsrs	r2, r0, #16
 8005e0a:	0412      	lsls	r2, r2, #16
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	b9ca      	cbnz	r2, 8005e44 <__hi0bits+0x3c>
 8005e10:	0403      	lsls	r3, r0, #16
 8005e12:	2010      	movs	r0, #16
 8005e14:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005e18:	bf04      	itt	eq
 8005e1a:	021b      	lsleq	r3, r3, #8
 8005e1c:	3008      	addeq	r0, #8
 8005e1e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005e22:	bf04      	itt	eq
 8005e24:	011b      	lsleq	r3, r3, #4
 8005e26:	3004      	addeq	r0, #4
 8005e28:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005e2c:	bf04      	itt	eq
 8005e2e:	009b      	lsleq	r3, r3, #2
 8005e30:	3002      	addeq	r0, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	db05      	blt.n	8005e42 <__hi0bits+0x3a>
 8005e36:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005e3a:	f100 0001 	add.w	r0, r0, #1
 8005e3e:	bf08      	it	eq
 8005e40:	2020      	moveq	r0, #32
 8005e42:	4770      	bx	lr
 8005e44:	2000      	movs	r0, #0
 8005e46:	e7e5      	b.n	8005e14 <__hi0bits+0xc>

08005e48 <__lo0bits>:
 8005e48:	6803      	ldr	r3, [r0, #0]
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	f013 0007 	ands.w	r0, r3, #7
 8005e50:	d00b      	beq.n	8005e6a <__lo0bits+0x22>
 8005e52:	07d9      	lsls	r1, r3, #31
 8005e54:	d421      	bmi.n	8005e9a <__lo0bits+0x52>
 8005e56:	0798      	lsls	r0, r3, #30
 8005e58:	bf49      	itett	mi
 8005e5a:	085b      	lsrmi	r3, r3, #1
 8005e5c:	089b      	lsrpl	r3, r3, #2
 8005e5e:	2001      	movmi	r0, #1
 8005e60:	6013      	strmi	r3, [r2, #0]
 8005e62:	bf5c      	itt	pl
 8005e64:	2002      	movpl	r0, #2
 8005e66:	6013      	strpl	r3, [r2, #0]
 8005e68:	4770      	bx	lr
 8005e6a:	b299      	uxth	r1, r3
 8005e6c:	b909      	cbnz	r1, 8005e72 <__lo0bits+0x2a>
 8005e6e:	2010      	movs	r0, #16
 8005e70:	0c1b      	lsrs	r3, r3, #16
 8005e72:	b2d9      	uxtb	r1, r3
 8005e74:	b909      	cbnz	r1, 8005e7a <__lo0bits+0x32>
 8005e76:	3008      	adds	r0, #8
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	0719      	lsls	r1, r3, #28
 8005e7c:	bf04      	itt	eq
 8005e7e:	091b      	lsreq	r3, r3, #4
 8005e80:	3004      	addeq	r0, #4
 8005e82:	0799      	lsls	r1, r3, #30
 8005e84:	bf04      	itt	eq
 8005e86:	089b      	lsreq	r3, r3, #2
 8005e88:	3002      	addeq	r0, #2
 8005e8a:	07d9      	lsls	r1, r3, #31
 8005e8c:	d403      	bmi.n	8005e96 <__lo0bits+0x4e>
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	f100 0001 	add.w	r0, r0, #1
 8005e94:	d003      	beq.n	8005e9e <__lo0bits+0x56>
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	4770      	bx	lr
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	4770      	bx	lr
 8005e9e:	2020      	movs	r0, #32
 8005ea0:	4770      	bx	lr
	...

08005ea4 <__i2b>:
 8005ea4:	b510      	push	{r4, lr}
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	f7ff ff05 	bl	8005cb8 <_Balloc>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	b928      	cbnz	r0, 8005ebe <__i2b+0x1a>
 8005eb2:	f240 1145 	movw	r1, #325	; 0x145
 8005eb6:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <__i2b+0x24>)
 8005eb8:	4804      	ldr	r0, [pc, #16]	; (8005ecc <__i2b+0x28>)
 8005eba:	f000 fc9f 	bl	80067fc <__assert_func>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	6144      	str	r4, [r0, #20]
 8005ec2:	6103      	str	r3, [r0, #16]
 8005ec4:	bd10      	pop	{r4, pc}
 8005ec6:	bf00      	nop
 8005ec8:	08007e8a 	.word	0x08007e8a
 8005ecc:	08007e9b 	.word	0x08007e9b

08005ed0 <__multiply>:
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	4691      	mov	r9, r2
 8005ed6:	690a      	ldr	r2, [r1, #16]
 8005ed8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005edc:	460c      	mov	r4, r1
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	bfbe      	ittt	lt
 8005ee2:	460b      	movlt	r3, r1
 8005ee4:	464c      	movlt	r4, r9
 8005ee6:	4699      	movlt	r9, r3
 8005ee8:	6927      	ldr	r7, [r4, #16]
 8005eea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005eee:	68a3      	ldr	r3, [r4, #8]
 8005ef0:	6861      	ldr	r1, [r4, #4]
 8005ef2:	eb07 060a 	add.w	r6, r7, sl
 8005ef6:	42b3      	cmp	r3, r6
 8005ef8:	b085      	sub	sp, #20
 8005efa:	bfb8      	it	lt
 8005efc:	3101      	addlt	r1, #1
 8005efe:	f7ff fedb 	bl	8005cb8 <_Balloc>
 8005f02:	b930      	cbnz	r0, 8005f12 <__multiply+0x42>
 8005f04:	4602      	mov	r2, r0
 8005f06:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005f0a:	4b43      	ldr	r3, [pc, #268]	; (8006018 <__multiply+0x148>)
 8005f0c:	4843      	ldr	r0, [pc, #268]	; (800601c <__multiply+0x14c>)
 8005f0e:	f000 fc75 	bl	80067fc <__assert_func>
 8005f12:	f100 0514 	add.w	r5, r0, #20
 8005f16:	462b      	mov	r3, r5
 8005f18:	2200      	movs	r2, #0
 8005f1a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005f1e:	4543      	cmp	r3, r8
 8005f20:	d321      	bcc.n	8005f66 <__multiply+0x96>
 8005f22:	f104 0314 	add.w	r3, r4, #20
 8005f26:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005f2a:	f109 0314 	add.w	r3, r9, #20
 8005f2e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005f32:	9202      	str	r2, [sp, #8]
 8005f34:	1b3a      	subs	r2, r7, r4
 8005f36:	3a15      	subs	r2, #21
 8005f38:	f022 0203 	bic.w	r2, r2, #3
 8005f3c:	3204      	adds	r2, #4
 8005f3e:	f104 0115 	add.w	r1, r4, #21
 8005f42:	428f      	cmp	r7, r1
 8005f44:	bf38      	it	cc
 8005f46:	2204      	movcc	r2, #4
 8005f48:	9201      	str	r2, [sp, #4]
 8005f4a:	9a02      	ldr	r2, [sp, #8]
 8005f4c:	9303      	str	r3, [sp, #12]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d80c      	bhi.n	8005f6c <__multiply+0x9c>
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	dd03      	ble.n	8005f5e <__multiply+0x8e>
 8005f56:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d05a      	beq.n	8006014 <__multiply+0x144>
 8005f5e:	6106      	str	r6, [r0, #16]
 8005f60:	b005      	add	sp, #20
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	f843 2b04 	str.w	r2, [r3], #4
 8005f6a:	e7d8      	b.n	8005f1e <__multiply+0x4e>
 8005f6c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f70:	f1ba 0f00 	cmp.w	sl, #0
 8005f74:	d023      	beq.n	8005fbe <__multiply+0xee>
 8005f76:	46a9      	mov	r9, r5
 8005f78:	f04f 0c00 	mov.w	ip, #0
 8005f7c:	f104 0e14 	add.w	lr, r4, #20
 8005f80:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f84:	f8d9 1000 	ldr.w	r1, [r9]
 8005f88:	fa1f fb82 	uxth.w	fp, r2
 8005f8c:	b289      	uxth	r1, r1
 8005f8e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f92:	4461      	add	r1, ip
 8005f94:	f8d9 c000 	ldr.w	ip, [r9]
 8005f98:	0c12      	lsrs	r2, r2, #16
 8005f9a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005f9e:	fb0a c202 	mla	r2, sl, r2, ip
 8005fa2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fa6:	b289      	uxth	r1, r1
 8005fa8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fac:	4577      	cmp	r7, lr
 8005fae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005fb2:	f849 1b04 	str.w	r1, [r9], #4
 8005fb6:	d8e3      	bhi.n	8005f80 <__multiply+0xb0>
 8005fb8:	9a01      	ldr	r2, [sp, #4]
 8005fba:	f845 c002 	str.w	ip, [r5, r2]
 8005fbe:	9a03      	ldr	r2, [sp, #12]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005fc6:	f1b9 0f00 	cmp.w	r9, #0
 8005fca:	d021      	beq.n	8006010 <__multiply+0x140>
 8005fcc:	46ae      	mov	lr, r5
 8005fce:	f04f 0a00 	mov.w	sl, #0
 8005fd2:	6829      	ldr	r1, [r5, #0]
 8005fd4:	f104 0c14 	add.w	ip, r4, #20
 8005fd8:	f8bc b000 	ldrh.w	fp, [ip]
 8005fdc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fe0:	b289      	uxth	r1, r1
 8005fe2:	fb09 220b 	mla	r2, r9, fp, r2
 8005fe6:	4452      	add	r2, sl
 8005fe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fec:	f84e 1b04 	str.w	r1, [lr], #4
 8005ff0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005ff4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005ff8:	f8be 1000 	ldrh.w	r1, [lr]
 8005ffc:	4567      	cmp	r7, ip
 8005ffe:	fb09 110a 	mla	r1, r9, sl, r1
 8006002:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006006:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800600a:	d8e5      	bhi.n	8005fd8 <__multiply+0x108>
 800600c:	9a01      	ldr	r2, [sp, #4]
 800600e:	50a9      	str	r1, [r5, r2]
 8006010:	3504      	adds	r5, #4
 8006012:	e79a      	b.n	8005f4a <__multiply+0x7a>
 8006014:	3e01      	subs	r6, #1
 8006016:	e79c      	b.n	8005f52 <__multiply+0x82>
 8006018:	08007e8a 	.word	0x08007e8a
 800601c:	08007e9b 	.word	0x08007e9b

08006020 <__pow5mult>:
 8006020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006024:	4615      	mov	r5, r2
 8006026:	f012 0203 	ands.w	r2, r2, #3
 800602a:	4606      	mov	r6, r0
 800602c:	460f      	mov	r7, r1
 800602e:	d007      	beq.n	8006040 <__pow5mult+0x20>
 8006030:	4c25      	ldr	r4, [pc, #148]	; (80060c8 <__pow5mult+0xa8>)
 8006032:	3a01      	subs	r2, #1
 8006034:	2300      	movs	r3, #0
 8006036:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800603a:	f7ff fe9f 	bl	8005d7c <__multadd>
 800603e:	4607      	mov	r7, r0
 8006040:	10ad      	asrs	r5, r5, #2
 8006042:	d03d      	beq.n	80060c0 <__pow5mult+0xa0>
 8006044:	69f4      	ldr	r4, [r6, #28]
 8006046:	b97c      	cbnz	r4, 8006068 <__pow5mult+0x48>
 8006048:	2010      	movs	r0, #16
 800604a:	f7fe f8a1 	bl	8004190 <malloc>
 800604e:	4602      	mov	r2, r0
 8006050:	61f0      	str	r0, [r6, #28]
 8006052:	b928      	cbnz	r0, 8006060 <__pow5mult+0x40>
 8006054:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006058:	4b1c      	ldr	r3, [pc, #112]	; (80060cc <__pow5mult+0xac>)
 800605a:	481d      	ldr	r0, [pc, #116]	; (80060d0 <__pow5mult+0xb0>)
 800605c:	f000 fbce 	bl	80067fc <__assert_func>
 8006060:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006064:	6004      	str	r4, [r0, #0]
 8006066:	60c4      	str	r4, [r0, #12]
 8006068:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800606c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006070:	b94c      	cbnz	r4, 8006086 <__pow5mult+0x66>
 8006072:	f240 2171 	movw	r1, #625	; 0x271
 8006076:	4630      	mov	r0, r6
 8006078:	f7ff ff14 	bl	8005ea4 <__i2b>
 800607c:	2300      	movs	r3, #0
 800607e:	4604      	mov	r4, r0
 8006080:	f8c8 0008 	str.w	r0, [r8, #8]
 8006084:	6003      	str	r3, [r0, #0]
 8006086:	f04f 0900 	mov.w	r9, #0
 800608a:	07eb      	lsls	r3, r5, #31
 800608c:	d50a      	bpl.n	80060a4 <__pow5mult+0x84>
 800608e:	4639      	mov	r1, r7
 8006090:	4622      	mov	r2, r4
 8006092:	4630      	mov	r0, r6
 8006094:	f7ff ff1c 	bl	8005ed0 <__multiply>
 8006098:	4680      	mov	r8, r0
 800609a:	4639      	mov	r1, r7
 800609c:	4630      	mov	r0, r6
 800609e:	f7ff fe4b 	bl	8005d38 <_Bfree>
 80060a2:	4647      	mov	r7, r8
 80060a4:	106d      	asrs	r5, r5, #1
 80060a6:	d00b      	beq.n	80060c0 <__pow5mult+0xa0>
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	b938      	cbnz	r0, 80060bc <__pow5mult+0x9c>
 80060ac:	4622      	mov	r2, r4
 80060ae:	4621      	mov	r1, r4
 80060b0:	4630      	mov	r0, r6
 80060b2:	f7ff ff0d 	bl	8005ed0 <__multiply>
 80060b6:	6020      	str	r0, [r4, #0]
 80060b8:	f8c0 9000 	str.w	r9, [r0]
 80060bc:	4604      	mov	r4, r0
 80060be:	e7e4      	b.n	800608a <__pow5mult+0x6a>
 80060c0:	4638      	mov	r0, r7
 80060c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060c6:	bf00      	nop
 80060c8:	08007fe8 	.word	0x08007fe8
 80060cc:	08007e1b 	.word	0x08007e1b
 80060d0:	08007e9b 	.word	0x08007e9b

080060d4 <__lshift>:
 80060d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	460c      	mov	r4, r1
 80060da:	4607      	mov	r7, r0
 80060dc:	4691      	mov	r9, r2
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	6849      	ldr	r1, [r1, #4]
 80060e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060e6:	68a3      	ldr	r3, [r4, #8]
 80060e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060ec:	f108 0601 	add.w	r6, r8, #1
 80060f0:	42b3      	cmp	r3, r6
 80060f2:	db0b      	blt.n	800610c <__lshift+0x38>
 80060f4:	4638      	mov	r0, r7
 80060f6:	f7ff fddf 	bl	8005cb8 <_Balloc>
 80060fa:	4605      	mov	r5, r0
 80060fc:	b948      	cbnz	r0, 8006112 <__lshift+0x3e>
 80060fe:	4602      	mov	r2, r0
 8006100:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006104:	4b27      	ldr	r3, [pc, #156]	; (80061a4 <__lshift+0xd0>)
 8006106:	4828      	ldr	r0, [pc, #160]	; (80061a8 <__lshift+0xd4>)
 8006108:	f000 fb78 	bl	80067fc <__assert_func>
 800610c:	3101      	adds	r1, #1
 800610e:	005b      	lsls	r3, r3, #1
 8006110:	e7ee      	b.n	80060f0 <__lshift+0x1c>
 8006112:	2300      	movs	r3, #0
 8006114:	f100 0114 	add.w	r1, r0, #20
 8006118:	f100 0210 	add.w	r2, r0, #16
 800611c:	4618      	mov	r0, r3
 800611e:	4553      	cmp	r3, sl
 8006120:	db33      	blt.n	800618a <__lshift+0xb6>
 8006122:	6920      	ldr	r0, [r4, #16]
 8006124:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006128:	f104 0314 	add.w	r3, r4, #20
 800612c:	f019 091f 	ands.w	r9, r9, #31
 8006130:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006134:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006138:	d02b      	beq.n	8006192 <__lshift+0xbe>
 800613a:	468a      	mov	sl, r1
 800613c:	2200      	movs	r2, #0
 800613e:	f1c9 0e20 	rsb	lr, r9, #32
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	fa00 f009 	lsl.w	r0, r0, r9
 8006148:	4310      	orrs	r0, r2
 800614a:	f84a 0b04 	str.w	r0, [sl], #4
 800614e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006152:	459c      	cmp	ip, r3
 8006154:	fa22 f20e 	lsr.w	r2, r2, lr
 8006158:	d8f3      	bhi.n	8006142 <__lshift+0x6e>
 800615a:	ebac 0304 	sub.w	r3, ip, r4
 800615e:	3b15      	subs	r3, #21
 8006160:	f023 0303 	bic.w	r3, r3, #3
 8006164:	3304      	adds	r3, #4
 8006166:	f104 0015 	add.w	r0, r4, #21
 800616a:	4584      	cmp	ip, r0
 800616c:	bf38      	it	cc
 800616e:	2304      	movcc	r3, #4
 8006170:	50ca      	str	r2, [r1, r3]
 8006172:	b10a      	cbz	r2, 8006178 <__lshift+0xa4>
 8006174:	f108 0602 	add.w	r6, r8, #2
 8006178:	3e01      	subs	r6, #1
 800617a:	4638      	mov	r0, r7
 800617c:	4621      	mov	r1, r4
 800617e:	612e      	str	r6, [r5, #16]
 8006180:	f7ff fdda 	bl	8005d38 <_Bfree>
 8006184:	4628      	mov	r0, r5
 8006186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618a:	f842 0f04 	str.w	r0, [r2, #4]!
 800618e:	3301      	adds	r3, #1
 8006190:	e7c5      	b.n	800611e <__lshift+0x4a>
 8006192:	3904      	subs	r1, #4
 8006194:	f853 2b04 	ldr.w	r2, [r3], #4
 8006198:	459c      	cmp	ip, r3
 800619a:	f841 2f04 	str.w	r2, [r1, #4]!
 800619e:	d8f9      	bhi.n	8006194 <__lshift+0xc0>
 80061a0:	e7ea      	b.n	8006178 <__lshift+0xa4>
 80061a2:	bf00      	nop
 80061a4:	08007e8a 	.word	0x08007e8a
 80061a8:	08007e9b 	.word	0x08007e9b

080061ac <__mcmp>:
 80061ac:	4603      	mov	r3, r0
 80061ae:	690a      	ldr	r2, [r1, #16]
 80061b0:	6900      	ldr	r0, [r0, #16]
 80061b2:	b530      	push	{r4, r5, lr}
 80061b4:	1a80      	subs	r0, r0, r2
 80061b6:	d10d      	bne.n	80061d4 <__mcmp+0x28>
 80061b8:	3314      	adds	r3, #20
 80061ba:	3114      	adds	r1, #20
 80061bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80061c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80061c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061cc:	4295      	cmp	r5, r2
 80061ce:	d002      	beq.n	80061d6 <__mcmp+0x2a>
 80061d0:	d304      	bcc.n	80061dc <__mcmp+0x30>
 80061d2:	2001      	movs	r0, #1
 80061d4:	bd30      	pop	{r4, r5, pc}
 80061d6:	42a3      	cmp	r3, r4
 80061d8:	d3f4      	bcc.n	80061c4 <__mcmp+0x18>
 80061da:	e7fb      	b.n	80061d4 <__mcmp+0x28>
 80061dc:	f04f 30ff 	mov.w	r0, #4294967295
 80061e0:	e7f8      	b.n	80061d4 <__mcmp+0x28>
	...

080061e4 <__mdiff>:
 80061e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	460d      	mov	r5, r1
 80061ea:	4607      	mov	r7, r0
 80061ec:	4611      	mov	r1, r2
 80061ee:	4628      	mov	r0, r5
 80061f0:	4614      	mov	r4, r2
 80061f2:	f7ff ffdb 	bl	80061ac <__mcmp>
 80061f6:	1e06      	subs	r6, r0, #0
 80061f8:	d111      	bne.n	800621e <__mdiff+0x3a>
 80061fa:	4631      	mov	r1, r6
 80061fc:	4638      	mov	r0, r7
 80061fe:	f7ff fd5b 	bl	8005cb8 <_Balloc>
 8006202:	4602      	mov	r2, r0
 8006204:	b928      	cbnz	r0, 8006212 <__mdiff+0x2e>
 8006206:	f240 2137 	movw	r1, #567	; 0x237
 800620a:	4b3a      	ldr	r3, [pc, #232]	; (80062f4 <__mdiff+0x110>)
 800620c:	483a      	ldr	r0, [pc, #232]	; (80062f8 <__mdiff+0x114>)
 800620e:	f000 faf5 	bl	80067fc <__assert_func>
 8006212:	2301      	movs	r3, #1
 8006214:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006218:	4610      	mov	r0, r2
 800621a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621e:	bfa4      	itt	ge
 8006220:	4623      	movge	r3, r4
 8006222:	462c      	movge	r4, r5
 8006224:	4638      	mov	r0, r7
 8006226:	6861      	ldr	r1, [r4, #4]
 8006228:	bfa6      	itte	ge
 800622a:	461d      	movge	r5, r3
 800622c:	2600      	movge	r6, #0
 800622e:	2601      	movlt	r6, #1
 8006230:	f7ff fd42 	bl	8005cb8 <_Balloc>
 8006234:	4602      	mov	r2, r0
 8006236:	b918      	cbnz	r0, 8006240 <__mdiff+0x5c>
 8006238:	f240 2145 	movw	r1, #581	; 0x245
 800623c:	4b2d      	ldr	r3, [pc, #180]	; (80062f4 <__mdiff+0x110>)
 800623e:	e7e5      	b.n	800620c <__mdiff+0x28>
 8006240:	f102 0814 	add.w	r8, r2, #20
 8006244:	46c2      	mov	sl, r8
 8006246:	f04f 0c00 	mov.w	ip, #0
 800624a:	6927      	ldr	r7, [r4, #16]
 800624c:	60c6      	str	r6, [r0, #12]
 800624e:	692e      	ldr	r6, [r5, #16]
 8006250:	f104 0014 	add.w	r0, r4, #20
 8006254:	f105 0914 	add.w	r9, r5, #20
 8006258:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800625c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006260:	3410      	adds	r4, #16
 8006262:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006266:	f859 3b04 	ldr.w	r3, [r9], #4
 800626a:	fa1f f18b 	uxth.w	r1, fp
 800626e:	4461      	add	r1, ip
 8006270:	fa1f fc83 	uxth.w	ip, r3
 8006274:	0c1b      	lsrs	r3, r3, #16
 8006276:	eba1 010c 	sub.w	r1, r1, ip
 800627a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800627e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006282:	b289      	uxth	r1, r1
 8006284:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8006288:	454e      	cmp	r6, r9
 800628a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800628e:	f84a 1b04 	str.w	r1, [sl], #4
 8006292:	d8e6      	bhi.n	8006262 <__mdiff+0x7e>
 8006294:	1b73      	subs	r3, r6, r5
 8006296:	3b15      	subs	r3, #21
 8006298:	f023 0303 	bic.w	r3, r3, #3
 800629c:	3515      	adds	r5, #21
 800629e:	3304      	adds	r3, #4
 80062a0:	42ae      	cmp	r6, r5
 80062a2:	bf38      	it	cc
 80062a4:	2304      	movcc	r3, #4
 80062a6:	4418      	add	r0, r3
 80062a8:	4443      	add	r3, r8
 80062aa:	461e      	mov	r6, r3
 80062ac:	4605      	mov	r5, r0
 80062ae:	4575      	cmp	r5, lr
 80062b0:	d30e      	bcc.n	80062d0 <__mdiff+0xec>
 80062b2:	f10e 0103 	add.w	r1, lr, #3
 80062b6:	1a09      	subs	r1, r1, r0
 80062b8:	f021 0103 	bic.w	r1, r1, #3
 80062bc:	3803      	subs	r0, #3
 80062be:	4586      	cmp	lr, r0
 80062c0:	bf38      	it	cc
 80062c2:	2100      	movcc	r1, #0
 80062c4:	440b      	add	r3, r1
 80062c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062ca:	b189      	cbz	r1, 80062f0 <__mdiff+0x10c>
 80062cc:	6117      	str	r7, [r2, #16]
 80062ce:	e7a3      	b.n	8006218 <__mdiff+0x34>
 80062d0:	f855 8b04 	ldr.w	r8, [r5], #4
 80062d4:	fa1f f188 	uxth.w	r1, r8
 80062d8:	4461      	add	r1, ip
 80062da:	140c      	asrs	r4, r1, #16
 80062dc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062e0:	b289      	uxth	r1, r1
 80062e2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80062e6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80062ea:	f846 1b04 	str.w	r1, [r6], #4
 80062ee:	e7de      	b.n	80062ae <__mdiff+0xca>
 80062f0:	3f01      	subs	r7, #1
 80062f2:	e7e8      	b.n	80062c6 <__mdiff+0xe2>
 80062f4:	08007e8a 	.word	0x08007e8a
 80062f8:	08007e9b 	.word	0x08007e9b

080062fc <__d2b>:
 80062fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062fe:	2101      	movs	r1, #1
 8006300:	4617      	mov	r7, r2
 8006302:	461c      	mov	r4, r3
 8006304:	9e08      	ldr	r6, [sp, #32]
 8006306:	f7ff fcd7 	bl	8005cb8 <_Balloc>
 800630a:	4605      	mov	r5, r0
 800630c:	b930      	cbnz	r0, 800631c <__d2b+0x20>
 800630e:	4602      	mov	r2, r0
 8006310:	f240 310f 	movw	r1, #783	; 0x30f
 8006314:	4b22      	ldr	r3, [pc, #136]	; (80063a0 <__d2b+0xa4>)
 8006316:	4823      	ldr	r0, [pc, #140]	; (80063a4 <__d2b+0xa8>)
 8006318:	f000 fa70 	bl	80067fc <__assert_func>
 800631c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006320:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006324:	bb24      	cbnz	r4, 8006370 <__d2b+0x74>
 8006326:	2f00      	cmp	r7, #0
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	d026      	beq.n	800637a <__d2b+0x7e>
 800632c:	4668      	mov	r0, sp
 800632e:	9700      	str	r7, [sp, #0]
 8006330:	f7ff fd8a 	bl	8005e48 <__lo0bits>
 8006334:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006338:	b1e8      	cbz	r0, 8006376 <__d2b+0x7a>
 800633a:	f1c0 0320 	rsb	r3, r0, #32
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	430b      	orrs	r3, r1
 8006344:	40c2      	lsrs	r2, r0
 8006346:	616b      	str	r3, [r5, #20]
 8006348:	9201      	str	r2, [sp, #4]
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	bf14      	ite	ne
 8006350:	2102      	movne	r1, #2
 8006352:	2101      	moveq	r1, #1
 8006354:	61ab      	str	r3, [r5, #24]
 8006356:	6129      	str	r1, [r5, #16]
 8006358:	b1bc      	cbz	r4, 800638a <__d2b+0x8e>
 800635a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800635e:	4404      	add	r4, r0
 8006360:	6034      	str	r4, [r6, #0]
 8006362:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006368:	6018      	str	r0, [r3, #0]
 800636a:	4628      	mov	r0, r5
 800636c:	b003      	add	sp, #12
 800636e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006374:	e7d7      	b.n	8006326 <__d2b+0x2a>
 8006376:	6169      	str	r1, [r5, #20]
 8006378:	e7e7      	b.n	800634a <__d2b+0x4e>
 800637a:	a801      	add	r0, sp, #4
 800637c:	f7ff fd64 	bl	8005e48 <__lo0bits>
 8006380:	9b01      	ldr	r3, [sp, #4]
 8006382:	2101      	movs	r1, #1
 8006384:	616b      	str	r3, [r5, #20]
 8006386:	3020      	adds	r0, #32
 8006388:	e7e5      	b.n	8006356 <__d2b+0x5a>
 800638a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800638e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8006392:	6030      	str	r0, [r6, #0]
 8006394:	6918      	ldr	r0, [r3, #16]
 8006396:	f7ff fd37 	bl	8005e08 <__hi0bits>
 800639a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800639e:	e7e2      	b.n	8006366 <__d2b+0x6a>
 80063a0:	08007e8a 	.word	0x08007e8a
 80063a4:	08007e9b 	.word	0x08007e9b

080063a8 <__ssputs_r>:
 80063a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	461f      	mov	r7, r3
 80063ae:	688e      	ldr	r6, [r1, #8]
 80063b0:	4682      	mov	sl, r0
 80063b2:	42be      	cmp	r6, r7
 80063b4:	460c      	mov	r4, r1
 80063b6:	4690      	mov	r8, r2
 80063b8:	680b      	ldr	r3, [r1, #0]
 80063ba:	d82c      	bhi.n	8006416 <__ssputs_r+0x6e>
 80063bc:	898a      	ldrh	r2, [r1, #12]
 80063be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063c2:	d026      	beq.n	8006412 <__ssputs_r+0x6a>
 80063c4:	6965      	ldr	r5, [r4, #20]
 80063c6:	6909      	ldr	r1, [r1, #16]
 80063c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063cc:	eba3 0901 	sub.w	r9, r3, r1
 80063d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063d4:	1c7b      	adds	r3, r7, #1
 80063d6:	444b      	add	r3, r9
 80063d8:	106d      	asrs	r5, r5, #1
 80063da:	429d      	cmp	r5, r3
 80063dc:	bf38      	it	cc
 80063de:	461d      	movcc	r5, r3
 80063e0:	0553      	lsls	r3, r2, #21
 80063e2:	d527      	bpl.n	8006434 <__ssputs_r+0x8c>
 80063e4:	4629      	mov	r1, r5
 80063e6:	f7fd ff03 	bl	80041f0 <_malloc_r>
 80063ea:	4606      	mov	r6, r0
 80063ec:	b360      	cbz	r0, 8006448 <__ssputs_r+0xa0>
 80063ee:	464a      	mov	r2, r9
 80063f0:	6921      	ldr	r1, [r4, #16]
 80063f2:	f000 f9f5 	bl	80067e0 <memcpy>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006400:	81a3      	strh	r3, [r4, #12]
 8006402:	6126      	str	r6, [r4, #16]
 8006404:	444e      	add	r6, r9
 8006406:	6026      	str	r6, [r4, #0]
 8006408:	463e      	mov	r6, r7
 800640a:	6165      	str	r5, [r4, #20]
 800640c:	eba5 0509 	sub.w	r5, r5, r9
 8006410:	60a5      	str	r5, [r4, #8]
 8006412:	42be      	cmp	r6, r7
 8006414:	d900      	bls.n	8006418 <__ssputs_r+0x70>
 8006416:	463e      	mov	r6, r7
 8006418:	4632      	mov	r2, r6
 800641a:	4641      	mov	r1, r8
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	f000 f9c5 	bl	80067ac <memmove>
 8006422:	2000      	movs	r0, #0
 8006424:	68a3      	ldr	r3, [r4, #8]
 8006426:	1b9b      	subs	r3, r3, r6
 8006428:	60a3      	str	r3, [r4, #8]
 800642a:	6823      	ldr	r3, [r4, #0]
 800642c:	4433      	add	r3, r6
 800642e:	6023      	str	r3, [r4, #0]
 8006430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006434:	462a      	mov	r2, r5
 8006436:	f000 fa25 	bl	8006884 <_realloc_r>
 800643a:	4606      	mov	r6, r0
 800643c:	2800      	cmp	r0, #0
 800643e:	d1e0      	bne.n	8006402 <__ssputs_r+0x5a>
 8006440:	4650      	mov	r0, sl
 8006442:	6921      	ldr	r1, [r4, #16]
 8006444:	f7ff fbf0 	bl	8005c28 <_free_r>
 8006448:	230c      	movs	r3, #12
 800644a:	f8ca 3000 	str.w	r3, [sl]
 800644e:	89a3      	ldrh	r3, [r4, #12]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	e7e9      	b.n	8006430 <__ssputs_r+0x88>

0800645c <_svfiprintf_r>:
 800645c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006460:	4698      	mov	r8, r3
 8006462:	898b      	ldrh	r3, [r1, #12]
 8006464:	4607      	mov	r7, r0
 8006466:	061b      	lsls	r3, r3, #24
 8006468:	460d      	mov	r5, r1
 800646a:	4614      	mov	r4, r2
 800646c:	b09d      	sub	sp, #116	; 0x74
 800646e:	d50e      	bpl.n	800648e <_svfiprintf_r+0x32>
 8006470:	690b      	ldr	r3, [r1, #16]
 8006472:	b963      	cbnz	r3, 800648e <_svfiprintf_r+0x32>
 8006474:	2140      	movs	r1, #64	; 0x40
 8006476:	f7fd febb 	bl	80041f0 <_malloc_r>
 800647a:	6028      	str	r0, [r5, #0]
 800647c:	6128      	str	r0, [r5, #16]
 800647e:	b920      	cbnz	r0, 800648a <_svfiprintf_r+0x2e>
 8006480:	230c      	movs	r3, #12
 8006482:	603b      	str	r3, [r7, #0]
 8006484:	f04f 30ff 	mov.w	r0, #4294967295
 8006488:	e0d0      	b.n	800662c <_svfiprintf_r+0x1d0>
 800648a:	2340      	movs	r3, #64	; 0x40
 800648c:	616b      	str	r3, [r5, #20]
 800648e:	2300      	movs	r3, #0
 8006490:	9309      	str	r3, [sp, #36]	; 0x24
 8006492:	2320      	movs	r3, #32
 8006494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006498:	2330      	movs	r3, #48	; 0x30
 800649a:	f04f 0901 	mov.w	r9, #1
 800649e:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006644 <_svfiprintf_r+0x1e8>
 80064a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064aa:	4623      	mov	r3, r4
 80064ac:	469a      	mov	sl, r3
 80064ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b2:	b10a      	cbz	r2, 80064b8 <_svfiprintf_r+0x5c>
 80064b4:	2a25      	cmp	r2, #37	; 0x25
 80064b6:	d1f9      	bne.n	80064ac <_svfiprintf_r+0x50>
 80064b8:	ebba 0b04 	subs.w	fp, sl, r4
 80064bc:	d00b      	beq.n	80064d6 <_svfiprintf_r+0x7a>
 80064be:	465b      	mov	r3, fp
 80064c0:	4622      	mov	r2, r4
 80064c2:	4629      	mov	r1, r5
 80064c4:	4638      	mov	r0, r7
 80064c6:	f7ff ff6f 	bl	80063a8 <__ssputs_r>
 80064ca:	3001      	adds	r0, #1
 80064cc:	f000 80a9 	beq.w	8006622 <_svfiprintf_r+0x1c6>
 80064d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d2:	445a      	add	r2, fp
 80064d4:	9209      	str	r2, [sp, #36]	; 0x24
 80064d6:	f89a 3000 	ldrb.w	r3, [sl]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80a1 	beq.w	8006622 <_svfiprintf_r+0x1c6>
 80064e0:	2300      	movs	r3, #0
 80064e2:	f04f 32ff 	mov.w	r2, #4294967295
 80064e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ea:	f10a 0a01 	add.w	sl, sl, #1
 80064ee:	9304      	str	r3, [sp, #16]
 80064f0:	9307      	str	r3, [sp, #28]
 80064f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064f6:	931a      	str	r3, [sp, #104]	; 0x68
 80064f8:	4654      	mov	r4, sl
 80064fa:	2205      	movs	r2, #5
 80064fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006500:	4850      	ldr	r0, [pc, #320]	; (8006644 <_svfiprintf_r+0x1e8>)
 8006502:	f7fe fd14 	bl	8004f2e <memchr>
 8006506:	9a04      	ldr	r2, [sp, #16]
 8006508:	b9d8      	cbnz	r0, 8006542 <_svfiprintf_r+0xe6>
 800650a:	06d0      	lsls	r0, r2, #27
 800650c:	bf44      	itt	mi
 800650e:	2320      	movmi	r3, #32
 8006510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006514:	0711      	lsls	r1, r2, #28
 8006516:	bf44      	itt	mi
 8006518:	232b      	movmi	r3, #43	; 0x2b
 800651a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651e:	f89a 3000 	ldrb.w	r3, [sl]
 8006522:	2b2a      	cmp	r3, #42	; 0x2a
 8006524:	d015      	beq.n	8006552 <_svfiprintf_r+0xf6>
 8006526:	4654      	mov	r4, sl
 8006528:	2000      	movs	r0, #0
 800652a:	f04f 0c0a 	mov.w	ip, #10
 800652e:	9a07      	ldr	r2, [sp, #28]
 8006530:	4621      	mov	r1, r4
 8006532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006536:	3b30      	subs	r3, #48	; 0x30
 8006538:	2b09      	cmp	r3, #9
 800653a:	d94d      	bls.n	80065d8 <_svfiprintf_r+0x17c>
 800653c:	b1b0      	cbz	r0, 800656c <_svfiprintf_r+0x110>
 800653e:	9207      	str	r2, [sp, #28]
 8006540:	e014      	b.n	800656c <_svfiprintf_r+0x110>
 8006542:	eba0 0308 	sub.w	r3, r0, r8
 8006546:	fa09 f303 	lsl.w	r3, r9, r3
 800654a:	4313      	orrs	r3, r2
 800654c:	46a2      	mov	sl, r4
 800654e:	9304      	str	r3, [sp, #16]
 8006550:	e7d2      	b.n	80064f8 <_svfiprintf_r+0x9c>
 8006552:	9b03      	ldr	r3, [sp, #12]
 8006554:	1d19      	adds	r1, r3, #4
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	9103      	str	r1, [sp, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	bfbb      	ittet	lt
 800655e:	425b      	neglt	r3, r3
 8006560:	f042 0202 	orrlt.w	r2, r2, #2
 8006564:	9307      	strge	r3, [sp, #28]
 8006566:	9307      	strlt	r3, [sp, #28]
 8006568:	bfb8      	it	lt
 800656a:	9204      	strlt	r2, [sp, #16]
 800656c:	7823      	ldrb	r3, [r4, #0]
 800656e:	2b2e      	cmp	r3, #46	; 0x2e
 8006570:	d10c      	bne.n	800658c <_svfiprintf_r+0x130>
 8006572:	7863      	ldrb	r3, [r4, #1]
 8006574:	2b2a      	cmp	r3, #42	; 0x2a
 8006576:	d134      	bne.n	80065e2 <_svfiprintf_r+0x186>
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	3402      	adds	r4, #2
 800657c:	1d1a      	adds	r2, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9203      	str	r2, [sp, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfb8      	it	lt
 8006586:	f04f 33ff 	movlt.w	r3, #4294967295
 800658a:	9305      	str	r3, [sp, #20]
 800658c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006648 <_svfiprintf_r+0x1ec>
 8006590:	2203      	movs	r2, #3
 8006592:	4650      	mov	r0, sl
 8006594:	7821      	ldrb	r1, [r4, #0]
 8006596:	f7fe fcca 	bl	8004f2e <memchr>
 800659a:	b138      	cbz	r0, 80065ac <_svfiprintf_r+0x150>
 800659c:	2240      	movs	r2, #64	; 0x40
 800659e:	9b04      	ldr	r3, [sp, #16]
 80065a0:	eba0 000a 	sub.w	r0, r0, sl
 80065a4:	4082      	lsls	r2, r0
 80065a6:	4313      	orrs	r3, r2
 80065a8:	3401      	adds	r4, #1
 80065aa:	9304      	str	r3, [sp, #16]
 80065ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b0:	2206      	movs	r2, #6
 80065b2:	4826      	ldr	r0, [pc, #152]	; (800664c <_svfiprintf_r+0x1f0>)
 80065b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065b8:	f7fe fcb9 	bl	8004f2e <memchr>
 80065bc:	2800      	cmp	r0, #0
 80065be:	d038      	beq.n	8006632 <_svfiprintf_r+0x1d6>
 80065c0:	4b23      	ldr	r3, [pc, #140]	; (8006650 <_svfiprintf_r+0x1f4>)
 80065c2:	bb1b      	cbnz	r3, 800660c <_svfiprintf_r+0x1b0>
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	3307      	adds	r3, #7
 80065c8:	f023 0307 	bic.w	r3, r3, #7
 80065cc:	3308      	adds	r3, #8
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d2:	4433      	add	r3, r6
 80065d4:	9309      	str	r3, [sp, #36]	; 0x24
 80065d6:	e768      	b.n	80064aa <_svfiprintf_r+0x4e>
 80065d8:	460c      	mov	r4, r1
 80065da:	2001      	movs	r0, #1
 80065dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e0:	e7a6      	b.n	8006530 <_svfiprintf_r+0xd4>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f04f 0c0a 	mov.w	ip, #10
 80065e8:	4619      	mov	r1, r3
 80065ea:	3401      	adds	r4, #1
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	4620      	mov	r0, r4
 80065f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065f4:	3a30      	subs	r2, #48	; 0x30
 80065f6:	2a09      	cmp	r2, #9
 80065f8:	d903      	bls.n	8006602 <_svfiprintf_r+0x1a6>
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0c6      	beq.n	800658c <_svfiprintf_r+0x130>
 80065fe:	9105      	str	r1, [sp, #20]
 8006600:	e7c4      	b.n	800658c <_svfiprintf_r+0x130>
 8006602:	4604      	mov	r4, r0
 8006604:	2301      	movs	r3, #1
 8006606:	fb0c 2101 	mla	r1, ip, r1, r2
 800660a:	e7f0      	b.n	80065ee <_svfiprintf_r+0x192>
 800660c:	ab03      	add	r3, sp, #12
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	462a      	mov	r2, r5
 8006612:	4638      	mov	r0, r7
 8006614:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <_svfiprintf_r+0x1f8>)
 8006616:	a904      	add	r1, sp, #16
 8006618:	f7fd ff12 	bl	8004440 <_printf_float>
 800661c:	1c42      	adds	r2, r0, #1
 800661e:	4606      	mov	r6, r0
 8006620:	d1d6      	bne.n	80065d0 <_svfiprintf_r+0x174>
 8006622:	89ab      	ldrh	r3, [r5, #12]
 8006624:	065b      	lsls	r3, r3, #25
 8006626:	f53f af2d 	bmi.w	8006484 <_svfiprintf_r+0x28>
 800662a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800662c:	b01d      	add	sp, #116	; 0x74
 800662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006632:	ab03      	add	r3, sp, #12
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	462a      	mov	r2, r5
 8006638:	4638      	mov	r0, r7
 800663a:	4b06      	ldr	r3, [pc, #24]	; (8006654 <_svfiprintf_r+0x1f8>)
 800663c:	a904      	add	r1, sp, #16
 800663e:	f7fe f99f 	bl	8004980 <_printf_i>
 8006642:	e7eb      	b.n	800661c <_svfiprintf_r+0x1c0>
 8006644:	08007ff4 	.word	0x08007ff4
 8006648:	08007ffa 	.word	0x08007ffa
 800664c:	08007ffe 	.word	0x08007ffe
 8006650:	08004441 	.word	0x08004441
 8006654:	080063a9 	.word	0x080063a9

08006658 <__sflush_r>:
 8006658:	898a      	ldrh	r2, [r1, #12]
 800665a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665c:	4605      	mov	r5, r0
 800665e:	0710      	lsls	r0, r2, #28
 8006660:	460c      	mov	r4, r1
 8006662:	d457      	bmi.n	8006714 <__sflush_r+0xbc>
 8006664:	684b      	ldr	r3, [r1, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	dc04      	bgt.n	8006674 <__sflush_r+0x1c>
 800666a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	dc01      	bgt.n	8006674 <__sflush_r+0x1c>
 8006670:	2000      	movs	r0, #0
 8006672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006674:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006676:	2e00      	cmp	r6, #0
 8006678:	d0fa      	beq.n	8006670 <__sflush_r+0x18>
 800667a:	2300      	movs	r3, #0
 800667c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006680:	682f      	ldr	r7, [r5, #0]
 8006682:	6a21      	ldr	r1, [r4, #32]
 8006684:	602b      	str	r3, [r5, #0]
 8006686:	d032      	beq.n	80066ee <__sflush_r+0x96>
 8006688:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800668a:	89a3      	ldrh	r3, [r4, #12]
 800668c:	075a      	lsls	r2, r3, #29
 800668e:	d505      	bpl.n	800669c <__sflush_r+0x44>
 8006690:	6863      	ldr	r3, [r4, #4]
 8006692:	1ac0      	subs	r0, r0, r3
 8006694:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006696:	b10b      	cbz	r3, 800669c <__sflush_r+0x44>
 8006698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800669a:	1ac0      	subs	r0, r0, r3
 800669c:	2300      	movs	r3, #0
 800669e:	4602      	mov	r2, r0
 80066a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066a2:	4628      	mov	r0, r5
 80066a4:	6a21      	ldr	r1, [r4, #32]
 80066a6:	47b0      	blx	r6
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	d106      	bne.n	80066bc <__sflush_r+0x64>
 80066ae:	6829      	ldr	r1, [r5, #0]
 80066b0:	291d      	cmp	r1, #29
 80066b2:	d82b      	bhi.n	800670c <__sflush_r+0xb4>
 80066b4:	4a28      	ldr	r2, [pc, #160]	; (8006758 <__sflush_r+0x100>)
 80066b6:	410a      	asrs	r2, r1
 80066b8:	07d6      	lsls	r6, r2, #31
 80066ba:	d427      	bmi.n	800670c <__sflush_r+0xb4>
 80066bc:	2200      	movs	r2, #0
 80066be:	6062      	str	r2, [r4, #4]
 80066c0:	6922      	ldr	r2, [r4, #16]
 80066c2:	04d9      	lsls	r1, r3, #19
 80066c4:	6022      	str	r2, [r4, #0]
 80066c6:	d504      	bpl.n	80066d2 <__sflush_r+0x7a>
 80066c8:	1c42      	adds	r2, r0, #1
 80066ca:	d101      	bne.n	80066d0 <__sflush_r+0x78>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	b903      	cbnz	r3, 80066d2 <__sflush_r+0x7a>
 80066d0:	6560      	str	r0, [r4, #84]	; 0x54
 80066d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066d4:	602f      	str	r7, [r5, #0]
 80066d6:	2900      	cmp	r1, #0
 80066d8:	d0ca      	beq.n	8006670 <__sflush_r+0x18>
 80066da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066de:	4299      	cmp	r1, r3
 80066e0:	d002      	beq.n	80066e8 <__sflush_r+0x90>
 80066e2:	4628      	mov	r0, r5
 80066e4:	f7ff faa0 	bl	8005c28 <_free_r>
 80066e8:	2000      	movs	r0, #0
 80066ea:	6360      	str	r0, [r4, #52]	; 0x34
 80066ec:	e7c1      	b.n	8006672 <__sflush_r+0x1a>
 80066ee:	2301      	movs	r3, #1
 80066f0:	4628      	mov	r0, r5
 80066f2:	47b0      	blx	r6
 80066f4:	1c41      	adds	r1, r0, #1
 80066f6:	d1c8      	bne.n	800668a <__sflush_r+0x32>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0c5      	beq.n	800668a <__sflush_r+0x32>
 80066fe:	2b1d      	cmp	r3, #29
 8006700:	d001      	beq.n	8006706 <__sflush_r+0xae>
 8006702:	2b16      	cmp	r3, #22
 8006704:	d101      	bne.n	800670a <__sflush_r+0xb2>
 8006706:	602f      	str	r7, [r5, #0]
 8006708:	e7b2      	b.n	8006670 <__sflush_r+0x18>
 800670a:	89a3      	ldrh	r3, [r4, #12]
 800670c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	e7ae      	b.n	8006672 <__sflush_r+0x1a>
 8006714:	690f      	ldr	r7, [r1, #16]
 8006716:	2f00      	cmp	r7, #0
 8006718:	d0aa      	beq.n	8006670 <__sflush_r+0x18>
 800671a:	0793      	lsls	r3, r2, #30
 800671c:	bf18      	it	ne
 800671e:	2300      	movne	r3, #0
 8006720:	680e      	ldr	r6, [r1, #0]
 8006722:	bf08      	it	eq
 8006724:	694b      	ldreq	r3, [r1, #20]
 8006726:	1bf6      	subs	r6, r6, r7
 8006728:	600f      	str	r7, [r1, #0]
 800672a:	608b      	str	r3, [r1, #8]
 800672c:	2e00      	cmp	r6, #0
 800672e:	dd9f      	ble.n	8006670 <__sflush_r+0x18>
 8006730:	4633      	mov	r3, r6
 8006732:	463a      	mov	r2, r7
 8006734:	4628      	mov	r0, r5
 8006736:	6a21      	ldr	r1, [r4, #32]
 8006738:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800673c:	47e0      	blx	ip
 800673e:	2800      	cmp	r0, #0
 8006740:	dc06      	bgt.n	8006750 <__sflush_r+0xf8>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674c:	81a3      	strh	r3, [r4, #12]
 800674e:	e790      	b.n	8006672 <__sflush_r+0x1a>
 8006750:	4407      	add	r7, r0
 8006752:	1a36      	subs	r6, r6, r0
 8006754:	e7ea      	b.n	800672c <__sflush_r+0xd4>
 8006756:	bf00      	nop
 8006758:	dfbffffe 	.word	0xdfbffffe

0800675c <_fflush_r>:
 800675c:	b538      	push	{r3, r4, r5, lr}
 800675e:	690b      	ldr	r3, [r1, #16]
 8006760:	4605      	mov	r5, r0
 8006762:	460c      	mov	r4, r1
 8006764:	b913      	cbnz	r3, 800676c <_fflush_r+0x10>
 8006766:	2500      	movs	r5, #0
 8006768:	4628      	mov	r0, r5
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	b118      	cbz	r0, 8006776 <_fflush_r+0x1a>
 800676e:	6a03      	ldr	r3, [r0, #32]
 8006770:	b90b      	cbnz	r3, 8006776 <_fflush_r+0x1a>
 8006772:	f7fe fab3 	bl	8004cdc <__sinit>
 8006776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0f3      	beq.n	8006766 <_fflush_r+0xa>
 800677e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006780:	07d0      	lsls	r0, r2, #31
 8006782:	d404      	bmi.n	800678e <_fflush_r+0x32>
 8006784:	0599      	lsls	r1, r3, #22
 8006786:	d402      	bmi.n	800678e <_fflush_r+0x32>
 8006788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678a:	f7fe fbce 	bl	8004f2a <__retarget_lock_acquire_recursive>
 800678e:	4628      	mov	r0, r5
 8006790:	4621      	mov	r1, r4
 8006792:	f7ff ff61 	bl	8006658 <__sflush_r>
 8006796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006798:	4605      	mov	r5, r0
 800679a:	07da      	lsls	r2, r3, #31
 800679c:	d4e4      	bmi.n	8006768 <_fflush_r+0xc>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	059b      	lsls	r3, r3, #22
 80067a2:	d4e1      	bmi.n	8006768 <_fflush_r+0xc>
 80067a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a6:	f7fe fbc1 	bl	8004f2c <__retarget_lock_release_recursive>
 80067aa:	e7dd      	b.n	8006768 <_fflush_r+0xc>

080067ac <memmove>:
 80067ac:	4288      	cmp	r0, r1
 80067ae:	b510      	push	{r4, lr}
 80067b0:	eb01 0402 	add.w	r4, r1, r2
 80067b4:	d902      	bls.n	80067bc <memmove+0x10>
 80067b6:	4284      	cmp	r4, r0
 80067b8:	4623      	mov	r3, r4
 80067ba:	d807      	bhi.n	80067cc <memmove+0x20>
 80067bc:	1e43      	subs	r3, r0, #1
 80067be:	42a1      	cmp	r1, r4
 80067c0:	d008      	beq.n	80067d4 <memmove+0x28>
 80067c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067ca:	e7f8      	b.n	80067be <memmove+0x12>
 80067cc:	4601      	mov	r1, r0
 80067ce:	4402      	add	r2, r0
 80067d0:	428a      	cmp	r2, r1
 80067d2:	d100      	bne.n	80067d6 <memmove+0x2a>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067de:	e7f7      	b.n	80067d0 <memmove+0x24>

080067e0 <memcpy>:
 80067e0:	440a      	add	r2, r1
 80067e2:	4291      	cmp	r1, r2
 80067e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80067e8:	d100      	bne.n	80067ec <memcpy+0xc>
 80067ea:	4770      	bx	lr
 80067ec:	b510      	push	{r4, lr}
 80067ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f2:	4291      	cmp	r1, r2
 80067f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f8:	d1f9      	bne.n	80067ee <memcpy+0xe>
 80067fa:	bd10      	pop	{r4, pc}

080067fc <__assert_func>:
 80067fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067fe:	4614      	mov	r4, r2
 8006800:	461a      	mov	r2, r3
 8006802:	4b09      	ldr	r3, [pc, #36]	; (8006828 <__assert_func+0x2c>)
 8006804:	4605      	mov	r5, r0
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68d8      	ldr	r0, [r3, #12]
 800680a:	b14c      	cbz	r4, 8006820 <__assert_func+0x24>
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <__assert_func+0x30>)
 800680e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006812:	9100      	str	r1, [sp, #0]
 8006814:	462b      	mov	r3, r5
 8006816:	4906      	ldr	r1, [pc, #24]	; (8006830 <__assert_func+0x34>)
 8006818:	f000 f870 	bl	80068fc <fiprintf>
 800681c:	f000 f880 	bl	8006920 <abort>
 8006820:	4b04      	ldr	r3, [pc, #16]	; (8006834 <__assert_func+0x38>)
 8006822:	461c      	mov	r4, r3
 8006824:	e7f3      	b.n	800680e <__assert_func+0x12>
 8006826:	bf00      	nop
 8006828:	20000068 	.word	0x20000068
 800682c:	0800800f 	.word	0x0800800f
 8006830:	0800801c 	.word	0x0800801c
 8006834:	0800804a 	.word	0x0800804a

08006838 <_calloc_r>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	fba1 5402 	umull	r5, r4, r1, r2
 800683e:	b934      	cbnz	r4, 800684e <_calloc_r+0x16>
 8006840:	4629      	mov	r1, r5
 8006842:	f7fd fcd5 	bl	80041f0 <_malloc_r>
 8006846:	4606      	mov	r6, r0
 8006848:	b928      	cbnz	r0, 8006856 <_calloc_r+0x1e>
 800684a:	4630      	mov	r0, r6
 800684c:	bd70      	pop	{r4, r5, r6, pc}
 800684e:	220c      	movs	r2, #12
 8006850:	2600      	movs	r6, #0
 8006852:	6002      	str	r2, [r0, #0]
 8006854:	e7f9      	b.n	800684a <_calloc_r+0x12>
 8006856:	462a      	mov	r2, r5
 8006858:	4621      	mov	r1, r4
 800685a:	f7fe fad8 	bl	8004e0e <memset>
 800685e:	e7f4      	b.n	800684a <_calloc_r+0x12>

08006860 <__ascii_mbtowc>:
 8006860:	b082      	sub	sp, #8
 8006862:	b901      	cbnz	r1, 8006866 <__ascii_mbtowc+0x6>
 8006864:	a901      	add	r1, sp, #4
 8006866:	b142      	cbz	r2, 800687a <__ascii_mbtowc+0x1a>
 8006868:	b14b      	cbz	r3, 800687e <__ascii_mbtowc+0x1e>
 800686a:	7813      	ldrb	r3, [r2, #0]
 800686c:	600b      	str	r3, [r1, #0]
 800686e:	7812      	ldrb	r2, [r2, #0]
 8006870:	1e10      	subs	r0, r2, #0
 8006872:	bf18      	it	ne
 8006874:	2001      	movne	r0, #1
 8006876:	b002      	add	sp, #8
 8006878:	4770      	bx	lr
 800687a:	4610      	mov	r0, r2
 800687c:	e7fb      	b.n	8006876 <__ascii_mbtowc+0x16>
 800687e:	f06f 0001 	mvn.w	r0, #1
 8006882:	e7f8      	b.n	8006876 <__ascii_mbtowc+0x16>

08006884 <_realloc_r>:
 8006884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006888:	4680      	mov	r8, r0
 800688a:	4614      	mov	r4, r2
 800688c:	460e      	mov	r6, r1
 800688e:	b921      	cbnz	r1, 800689a <_realloc_r+0x16>
 8006890:	4611      	mov	r1, r2
 8006892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006896:	f7fd bcab 	b.w	80041f0 <_malloc_r>
 800689a:	b92a      	cbnz	r2, 80068a8 <_realloc_r+0x24>
 800689c:	f7ff f9c4 	bl	8005c28 <_free_r>
 80068a0:	4625      	mov	r5, r4
 80068a2:	4628      	mov	r0, r5
 80068a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a8:	f000 f841 	bl	800692e <_malloc_usable_size_r>
 80068ac:	4284      	cmp	r4, r0
 80068ae:	4607      	mov	r7, r0
 80068b0:	d802      	bhi.n	80068b8 <_realloc_r+0x34>
 80068b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068b6:	d812      	bhi.n	80068de <_realloc_r+0x5a>
 80068b8:	4621      	mov	r1, r4
 80068ba:	4640      	mov	r0, r8
 80068bc:	f7fd fc98 	bl	80041f0 <_malloc_r>
 80068c0:	4605      	mov	r5, r0
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d0ed      	beq.n	80068a2 <_realloc_r+0x1e>
 80068c6:	42bc      	cmp	r4, r7
 80068c8:	4622      	mov	r2, r4
 80068ca:	4631      	mov	r1, r6
 80068cc:	bf28      	it	cs
 80068ce:	463a      	movcs	r2, r7
 80068d0:	f7ff ff86 	bl	80067e0 <memcpy>
 80068d4:	4631      	mov	r1, r6
 80068d6:	4640      	mov	r0, r8
 80068d8:	f7ff f9a6 	bl	8005c28 <_free_r>
 80068dc:	e7e1      	b.n	80068a2 <_realloc_r+0x1e>
 80068de:	4635      	mov	r5, r6
 80068e0:	e7df      	b.n	80068a2 <_realloc_r+0x1e>

080068e2 <__ascii_wctomb>:
 80068e2:	4603      	mov	r3, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	b141      	cbz	r1, 80068fa <__ascii_wctomb+0x18>
 80068e8:	2aff      	cmp	r2, #255	; 0xff
 80068ea:	d904      	bls.n	80068f6 <__ascii_wctomb+0x14>
 80068ec:	228a      	movs	r2, #138	; 0x8a
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	4770      	bx	lr
 80068f6:	2001      	movs	r0, #1
 80068f8:	700a      	strb	r2, [r1, #0]
 80068fa:	4770      	bx	lr

080068fc <fiprintf>:
 80068fc:	b40e      	push	{r1, r2, r3}
 80068fe:	b503      	push	{r0, r1, lr}
 8006900:	4601      	mov	r1, r0
 8006902:	ab03      	add	r3, sp, #12
 8006904:	4805      	ldr	r0, [pc, #20]	; (800691c <fiprintf+0x20>)
 8006906:	f853 2b04 	ldr.w	r2, [r3], #4
 800690a:	6800      	ldr	r0, [r0, #0]
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	f000 f83d 	bl	800698c <_vfiprintf_r>
 8006912:	b002      	add	sp, #8
 8006914:	f85d eb04 	ldr.w	lr, [sp], #4
 8006918:	b003      	add	sp, #12
 800691a:	4770      	bx	lr
 800691c:	20000068 	.word	0x20000068

08006920 <abort>:
 8006920:	2006      	movs	r0, #6
 8006922:	b508      	push	{r3, lr}
 8006924:	f000 fa0a 	bl	8006d3c <raise>
 8006928:	2001      	movs	r0, #1
 800692a:	f7fa ffbc 	bl	80018a6 <_exit>

0800692e <_malloc_usable_size_r>:
 800692e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006932:	1f18      	subs	r0, r3, #4
 8006934:	2b00      	cmp	r3, #0
 8006936:	bfbc      	itt	lt
 8006938:	580b      	ldrlt	r3, [r1, r0]
 800693a:	18c0      	addlt	r0, r0, r3
 800693c:	4770      	bx	lr

0800693e <__sfputc_r>:
 800693e:	6893      	ldr	r3, [r2, #8]
 8006940:	b410      	push	{r4}
 8006942:	3b01      	subs	r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	6093      	str	r3, [r2, #8]
 8006948:	da07      	bge.n	800695a <__sfputc_r+0x1c>
 800694a:	6994      	ldr	r4, [r2, #24]
 800694c:	42a3      	cmp	r3, r4
 800694e:	db01      	blt.n	8006954 <__sfputc_r+0x16>
 8006950:	290a      	cmp	r1, #10
 8006952:	d102      	bne.n	800695a <__sfputc_r+0x1c>
 8006954:	bc10      	pop	{r4}
 8006956:	f000 b933 	b.w	8006bc0 <__swbuf_r>
 800695a:	6813      	ldr	r3, [r2, #0]
 800695c:	1c58      	adds	r0, r3, #1
 800695e:	6010      	str	r0, [r2, #0]
 8006960:	7019      	strb	r1, [r3, #0]
 8006962:	4608      	mov	r0, r1
 8006964:	bc10      	pop	{r4}
 8006966:	4770      	bx	lr

08006968 <__sfputs_r>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	4614      	mov	r4, r2
 8006970:	18d5      	adds	r5, r2, r3
 8006972:	42ac      	cmp	r4, r5
 8006974:	d101      	bne.n	800697a <__sfputs_r+0x12>
 8006976:	2000      	movs	r0, #0
 8006978:	e007      	b.n	800698a <__sfputs_r+0x22>
 800697a:	463a      	mov	r2, r7
 800697c:	4630      	mov	r0, r6
 800697e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006982:	f7ff ffdc 	bl	800693e <__sfputc_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d1f3      	bne.n	8006972 <__sfputs_r+0xa>
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800698c <_vfiprintf_r>:
 800698c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006990:	460d      	mov	r5, r1
 8006992:	4614      	mov	r4, r2
 8006994:	4698      	mov	r8, r3
 8006996:	4606      	mov	r6, r0
 8006998:	b09d      	sub	sp, #116	; 0x74
 800699a:	b118      	cbz	r0, 80069a4 <_vfiprintf_r+0x18>
 800699c:	6a03      	ldr	r3, [r0, #32]
 800699e:	b90b      	cbnz	r3, 80069a4 <_vfiprintf_r+0x18>
 80069a0:	f7fe f99c 	bl	8004cdc <__sinit>
 80069a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069a6:	07d9      	lsls	r1, r3, #31
 80069a8:	d405      	bmi.n	80069b6 <_vfiprintf_r+0x2a>
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	059a      	lsls	r2, r3, #22
 80069ae:	d402      	bmi.n	80069b6 <_vfiprintf_r+0x2a>
 80069b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069b2:	f7fe faba 	bl	8004f2a <__retarget_lock_acquire_recursive>
 80069b6:	89ab      	ldrh	r3, [r5, #12]
 80069b8:	071b      	lsls	r3, r3, #28
 80069ba:	d501      	bpl.n	80069c0 <_vfiprintf_r+0x34>
 80069bc:	692b      	ldr	r3, [r5, #16]
 80069be:	b99b      	cbnz	r3, 80069e8 <_vfiprintf_r+0x5c>
 80069c0:	4629      	mov	r1, r5
 80069c2:	4630      	mov	r0, r6
 80069c4:	f000 f93a 	bl	8006c3c <__swsetup_r>
 80069c8:	b170      	cbz	r0, 80069e8 <_vfiprintf_r+0x5c>
 80069ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069cc:	07dc      	lsls	r4, r3, #31
 80069ce:	d504      	bpl.n	80069da <_vfiprintf_r+0x4e>
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	b01d      	add	sp, #116	; 0x74
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	89ab      	ldrh	r3, [r5, #12]
 80069dc:	0598      	lsls	r0, r3, #22
 80069de:	d4f7      	bmi.n	80069d0 <_vfiprintf_r+0x44>
 80069e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069e2:	f7fe faa3 	bl	8004f2c <__retarget_lock_release_recursive>
 80069e6:	e7f3      	b.n	80069d0 <_vfiprintf_r+0x44>
 80069e8:	2300      	movs	r3, #0
 80069ea:	9309      	str	r3, [sp, #36]	; 0x24
 80069ec:	2320      	movs	r3, #32
 80069ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069f2:	2330      	movs	r3, #48	; 0x30
 80069f4:	f04f 0901 	mov.w	r9, #1
 80069f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80069fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006bac <_vfiprintf_r+0x220>
 8006a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a04:	4623      	mov	r3, r4
 8006a06:	469a      	mov	sl, r3
 8006a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a0c:	b10a      	cbz	r2, 8006a12 <_vfiprintf_r+0x86>
 8006a0e:	2a25      	cmp	r2, #37	; 0x25
 8006a10:	d1f9      	bne.n	8006a06 <_vfiprintf_r+0x7a>
 8006a12:	ebba 0b04 	subs.w	fp, sl, r4
 8006a16:	d00b      	beq.n	8006a30 <_vfiprintf_r+0xa4>
 8006a18:	465b      	mov	r3, fp
 8006a1a:	4622      	mov	r2, r4
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4630      	mov	r0, r6
 8006a20:	f7ff ffa2 	bl	8006968 <__sfputs_r>
 8006a24:	3001      	adds	r0, #1
 8006a26:	f000 80a9 	beq.w	8006b7c <_vfiprintf_r+0x1f0>
 8006a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a2c:	445a      	add	r2, fp
 8006a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a30:	f89a 3000 	ldrb.w	r3, [sl]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80a1 	beq.w	8006b7c <_vfiprintf_r+0x1f0>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a44:	f10a 0a01 	add.w	sl, sl, #1
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	9307      	str	r3, [sp, #28]
 8006a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a50:	931a      	str	r3, [sp, #104]	; 0x68
 8006a52:	4654      	mov	r4, sl
 8006a54:	2205      	movs	r2, #5
 8006a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a5a:	4854      	ldr	r0, [pc, #336]	; (8006bac <_vfiprintf_r+0x220>)
 8006a5c:	f7fe fa67 	bl	8004f2e <memchr>
 8006a60:	9a04      	ldr	r2, [sp, #16]
 8006a62:	b9d8      	cbnz	r0, 8006a9c <_vfiprintf_r+0x110>
 8006a64:	06d1      	lsls	r1, r2, #27
 8006a66:	bf44      	itt	mi
 8006a68:	2320      	movmi	r3, #32
 8006a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a6e:	0713      	lsls	r3, r2, #28
 8006a70:	bf44      	itt	mi
 8006a72:	232b      	movmi	r3, #43	; 0x2b
 8006a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a78:	f89a 3000 	ldrb.w	r3, [sl]
 8006a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a7e:	d015      	beq.n	8006aac <_vfiprintf_r+0x120>
 8006a80:	4654      	mov	r4, sl
 8006a82:	2000      	movs	r0, #0
 8006a84:	f04f 0c0a 	mov.w	ip, #10
 8006a88:	9a07      	ldr	r2, [sp, #28]
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a90:	3b30      	subs	r3, #48	; 0x30
 8006a92:	2b09      	cmp	r3, #9
 8006a94:	d94d      	bls.n	8006b32 <_vfiprintf_r+0x1a6>
 8006a96:	b1b0      	cbz	r0, 8006ac6 <_vfiprintf_r+0x13a>
 8006a98:	9207      	str	r2, [sp, #28]
 8006a9a:	e014      	b.n	8006ac6 <_vfiprintf_r+0x13a>
 8006a9c:	eba0 0308 	sub.w	r3, r0, r8
 8006aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	46a2      	mov	sl, r4
 8006aa8:	9304      	str	r3, [sp, #16]
 8006aaa:	e7d2      	b.n	8006a52 <_vfiprintf_r+0xc6>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	1d19      	adds	r1, r3, #4
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	9103      	str	r1, [sp, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bfbb      	ittet	lt
 8006ab8:	425b      	neglt	r3, r3
 8006aba:	f042 0202 	orrlt.w	r2, r2, #2
 8006abe:	9307      	strge	r3, [sp, #28]
 8006ac0:	9307      	strlt	r3, [sp, #28]
 8006ac2:	bfb8      	it	lt
 8006ac4:	9204      	strlt	r2, [sp, #16]
 8006ac6:	7823      	ldrb	r3, [r4, #0]
 8006ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8006aca:	d10c      	bne.n	8006ae6 <_vfiprintf_r+0x15a>
 8006acc:	7863      	ldrb	r3, [r4, #1]
 8006ace:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad0:	d134      	bne.n	8006b3c <_vfiprintf_r+0x1b0>
 8006ad2:	9b03      	ldr	r3, [sp, #12]
 8006ad4:	3402      	adds	r4, #2
 8006ad6:	1d1a      	adds	r2, r3, #4
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	9203      	str	r2, [sp, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	bfb8      	it	lt
 8006ae0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ae4:	9305      	str	r3, [sp, #20]
 8006ae6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006bb0 <_vfiprintf_r+0x224>
 8006aea:	2203      	movs	r2, #3
 8006aec:	4650      	mov	r0, sl
 8006aee:	7821      	ldrb	r1, [r4, #0]
 8006af0:	f7fe fa1d 	bl	8004f2e <memchr>
 8006af4:	b138      	cbz	r0, 8006b06 <_vfiprintf_r+0x17a>
 8006af6:	2240      	movs	r2, #64	; 0x40
 8006af8:	9b04      	ldr	r3, [sp, #16]
 8006afa:	eba0 000a 	sub.w	r0, r0, sl
 8006afe:	4082      	lsls	r2, r0
 8006b00:	4313      	orrs	r3, r2
 8006b02:	3401      	adds	r4, #1
 8006b04:	9304      	str	r3, [sp, #16]
 8006b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b0a:	2206      	movs	r2, #6
 8006b0c:	4829      	ldr	r0, [pc, #164]	; (8006bb4 <_vfiprintf_r+0x228>)
 8006b0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b12:	f7fe fa0c 	bl	8004f2e <memchr>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d03f      	beq.n	8006b9a <_vfiprintf_r+0x20e>
 8006b1a:	4b27      	ldr	r3, [pc, #156]	; (8006bb8 <_vfiprintf_r+0x22c>)
 8006b1c:	bb1b      	cbnz	r3, 8006b66 <_vfiprintf_r+0x1da>
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	3307      	adds	r3, #7
 8006b22:	f023 0307 	bic.w	r3, r3, #7
 8006b26:	3308      	adds	r3, #8
 8006b28:	9303      	str	r3, [sp, #12]
 8006b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2c:	443b      	add	r3, r7
 8006b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b30:	e768      	b.n	8006a04 <_vfiprintf_r+0x78>
 8006b32:	460c      	mov	r4, r1
 8006b34:	2001      	movs	r0, #1
 8006b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b3a:	e7a6      	b.n	8006a8a <_vfiprintf_r+0xfe>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f04f 0c0a 	mov.w	ip, #10
 8006b42:	4619      	mov	r1, r3
 8006b44:	3401      	adds	r4, #1
 8006b46:	9305      	str	r3, [sp, #20]
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b4e:	3a30      	subs	r2, #48	; 0x30
 8006b50:	2a09      	cmp	r2, #9
 8006b52:	d903      	bls.n	8006b5c <_vfiprintf_r+0x1d0>
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0c6      	beq.n	8006ae6 <_vfiprintf_r+0x15a>
 8006b58:	9105      	str	r1, [sp, #20]
 8006b5a:	e7c4      	b.n	8006ae6 <_vfiprintf_r+0x15a>
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	2301      	movs	r3, #1
 8006b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b64:	e7f0      	b.n	8006b48 <_vfiprintf_r+0x1bc>
 8006b66:	ab03      	add	r3, sp, #12
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	462a      	mov	r2, r5
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <_vfiprintf_r+0x230>)
 8006b70:	a904      	add	r1, sp, #16
 8006b72:	f7fd fc65 	bl	8004440 <_printf_float>
 8006b76:	4607      	mov	r7, r0
 8006b78:	1c78      	adds	r0, r7, #1
 8006b7a:	d1d6      	bne.n	8006b2a <_vfiprintf_r+0x19e>
 8006b7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b7e:	07d9      	lsls	r1, r3, #31
 8006b80:	d405      	bmi.n	8006b8e <_vfiprintf_r+0x202>
 8006b82:	89ab      	ldrh	r3, [r5, #12]
 8006b84:	059a      	lsls	r2, r3, #22
 8006b86:	d402      	bmi.n	8006b8e <_vfiprintf_r+0x202>
 8006b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b8a:	f7fe f9cf 	bl	8004f2c <__retarget_lock_release_recursive>
 8006b8e:	89ab      	ldrh	r3, [r5, #12]
 8006b90:	065b      	lsls	r3, r3, #25
 8006b92:	f53f af1d 	bmi.w	80069d0 <_vfiprintf_r+0x44>
 8006b96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b98:	e71c      	b.n	80069d4 <_vfiprintf_r+0x48>
 8006b9a:	ab03      	add	r3, sp, #12
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	462a      	mov	r2, r5
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <_vfiprintf_r+0x230>)
 8006ba4:	a904      	add	r1, sp, #16
 8006ba6:	f7fd feeb 	bl	8004980 <_printf_i>
 8006baa:	e7e4      	b.n	8006b76 <_vfiprintf_r+0x1ea>
 8006bac:	08007ff4 	.word	0x08007ff4
 8006bb0:	08007ffa 	.word	0x08007ffa
 8006bb4:	08007ffe 	.word	0x08007ffe
 8006bb8:	08004441 	.word	0x08004441
 8006bbc:	08006969 	.word	0x08006969

08006bc0 <__swbuf_r>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	460e      	mov	r6, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	b118      	cbz	r0, 8006bd2 <__swbuf_r+0x12>
 8006bca:	6a03      	ldr	r3, [r0, #32]
 8006bcc:	b90b      	cbnz	r3, 8006bd2 <__swbuf_r+0x12>
 8006bce:	f7fe f885 	bl	8004cdc <__sinit>
 8006bd2:	69a3      	ldr	r3, [r4, #24]
 8006bd4:	60a3      	str	r3, [r4, #8]
 8006bd6:	89a3      	ldrh	r3, [r4, #12]
 8006bd8:	071a      	lsls	r2, r3, #28
 8006bda:	d525      	bpl.n	8006c28 <__swbuf_r+0x68>
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	b31b      	cbz	r3, 8006c28 <__swbuf_r+0x68>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	6922      	ldr	r2, [r4, #16]
 8006be4:	b2f6      	uxtb	r6, r6
 8006be6:	1a98      	subs	r0, r3, r2
 8006be8:	6963      	ldr	r3, [r4, #20]
 8006bea:	4637      	mov	r7, r6
 8006bec:	4283      	cmp	r3, r0
 8006bee:	dc04      	bgt.n	8006bfa <__swbuf_r+0x3a>
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f7ff fdb2 	bl	800675c <_fflush_r>
 8006bf8:	b9e0      	cbnz	r0, 8006c34 <__swbuf_r+0x74>
 8006bfa:	68a3      	ldr	r3, [r4, #8]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	60a3      	str	r3, [r4, #8]
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	6022      	str	r2, [r4, #0]
 8006c06:	701e      	strb	r6, [r3, #0]
 8006c08:	6962      	ldr	r2, [r4, #20]
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d004      	beq.n	8006c1a <__swbuf_r+0x5a>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	07db      	lsls	r3, r3, #31
 8006c14:	d506      	bpl.n	8006c24 <__swbuf_r+0x64>
 8006c16:	2e0a      	cmp	r6, #10
 8006c18:	d104      	bne.n	8006c24 <__swbuf_r+0x64>
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	f7ff fd9d 	bl	800675c <_fflush_r>
 8006c22:	b938      	cbnz	r0, 8006c34 <__swbuf_r+0x74>
 8006c24:	4638      	mov	r0, r7
 8006c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c28:	4621      	mov	r1, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 f806 	bl	8006c3c <__swsetup_r>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d0d5      	beq.n	8006be0 <__swbuf_r+0x20>
 8006c34:	f04f 37ff 	mov.w	r7, #4294967295
 8006c38:	e7f4      	b.n	8006c24 <__swbuf_r+0x64>
	...

08006c3c <__swsetup_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4b2a      	ldr	r3, [pc, #168]	; (8006ce8 <__swsetup_r+0xac>)
 8006c40:	4605      	mov	r5, r0
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	460c      	mov	r4, r1
 8006c46:	b118      	cbz	r0, 8006c50 <__swsetup_r+0x14>
 8006c48:	6a03      	ldr	r3, [r0, #32]
 8006c4a:	b90b      	cbnz	r3, 8006c50 <__swsetup_r+0x14>
 8006c4c:	f7fe f846 	bl	8004cdc <__sinit>
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c56:	0718      	lsls	r0, r3, #28
 8006c58:	d422      	bmi.n	8006ca0 <__swsetup_r+0x64>
 8006c5a:	06d9      	lsls	r1, r3, #27
 8006c5c:	d407      	bmi.n	8006c6e <__swsetup_r+0x32>
 8006c5e:	2309      	movs	r3, #9
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c66:	f04f 30ff 	mov.w	r0, #4294967295
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	e034      	b.n	8006cd8 <__swsetup_r+0x9c>
 8006c6e:	0758      	lsls	r0, r3, #29
 8006c70:	d512      	bpl.n	8006c98 <__swsetup_r+0x5c>
 8006c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c74:	b141      	cbz	r1, 8006c88 <__swsetup_r+0x4c>
 8006c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c7a:	4299      	cmp	r1, r3
 8006c7c:	d002      	beq.n	8006c84 <__swsetup_r+0x48>
 8006c7e:	4628      	mov	r0, r5
 8006c80:	f7fe ffd2 	bl	8005c28 <_free_r>
 8006c84:	2300      	movs	r3, #0
 8006c86:	6363      	str	r3, [r4, #52]	; 0x34
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	2300      	movs	r3, #0
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	6023      	str	r3, [r4, #0]
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f043 0308 	orr.w	r3, r3, #8
 8006c9e:	81a3      	strh	r3, [r4, #12]
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	b94b      	cbnz	r3, 8006cb8 <__swsetup_r+0x7c>
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cae:	d003      	beq.n	8006cb8 <__swsetup_r+0x7c>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 f883 	bl	8006dbe <__smakebuf_r>
 8006cb8:	89a0      	ldrh	r0, [r4, #12]
 8006cba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cbe:	f010 0301 	ands.w	r3, r0, #1
 8006cc2:	d00a      	beq.n	8006cda <__swsetup_r+0x9e>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	60a3      	str	r3, [r4, #8]
 8006cc8:	6963      	ldr	r3, [r4, #20]
 8006cca:	425b      	negs	r3, r3
 8006ccc:	61a3      	str	r3, [r4, #24]
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	b943      	cbnz	r3, 8006ce4 <__swsetup_r+0xa8>
 8006cd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006cd6:	d1c4      	bne.n	8006c62 <__swsetup_r+0x26>
 8006cd8:	bd38      	pop	{r3, r4, r5, pc}
 8006cda:	0781      	lsls	r1, r0, #30
 8006cdc:	bf58      	it	pl
 8006cde:	6963      	ldrpl	r3, [r4, #20]
 8006ce0:	60a3      	str	r3, [r4, #8]
 8006ce2:	e7f4      	b.n	8006cce <__swsetup_r+0x92>
 8006ce4:	2000      	movs	r0, #0
 8006ce6:	e7f7      	b.n	8006cd8 <__swsetup_r+0x9c>
 8006ce8:	20000068 	.word	0x20000068

08006cec <_raise_r>:
 8006cec:	291f      	cmp	r1, #31
 8006cee:	b538      	push	{r3, r4, r5, lr}
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	460d      	mov	r5, r1
 8006cf4:	d904      	bls.n	8006d00 <_raise_r+0x14>
 8006cf6:	2316      	movs	r3, #22
 8006cf8:	6003      	str	r3, [r0, #0]
 8006cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006d02:	b112      	cbz	r2, 8006d0a <_raise_r+0x1e>
 8006d04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d08:	b94b      	cbnz	r3, 8006d1e <_raise_r+0x32>
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f000 f830 	bl	8006d70 <_getpid_r>
 8006d10:	462a      	mov	r2, r5
 8006d12:	4601      	mov	r1, r0
 8006d14:	4620      	mov	r0, r4
 8006d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d1a:	f000 b817 	b.w	8006d4c <_kill_r>
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d00a      	beq.n	8006d38 <_raise_r+0x4c>
 8006d22:	1c59      	adds	r1, r3, #1
 8006d24:	d103      	bne.n	8006d2e <_raise_r+0x42>
 8006d26:	2316      	movs	r3, #22
 8006d28:	6003      	str	r3, [r0, #0]
 8006d2a:	2001      	movs	r0, #1
 8006d2c:	e7e7      	b.n	8006cfe <_raise_r+0x12>
 8006d2e:	2400      	movs	r4, #0
 8006d30:	4628      	mov	r0, r5
 8006d32:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d36:	4798      	blx	r3
 8006d38:	2000      	movs	r0, #0
 8006d3a:	e7e0      	b.n	8006cfe <_raise_r+0x12>

08006d3c <raise>:
 8006d3c:	4b02      	ldr	r3, [pc, #8]	; (8006d48 <raise+0xc>)
 8006d3e:	4601      	mov	r1, r0
 8006d40:	6818      	ldr	r0, [r3, #0]
 8006d42:	f7ff bfd3 	b.w	8006cec <_raise_r>
 8006d46:	bf00      	nop
 8006d48:	20000068 	.word	0x20000068

08006d4c <_kill_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4d06      	ldr	r5, [pc, #24]	; (8006d6c <_kill_r+0x20>)
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	f7fa fd94 	bl	8001886 <_kill>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d102      	bne.n	8006d68 <_kill_r+0x1c>
 8006d62:	682b      	ldr	r3, [r5, #0]
 8006d64:	b103      	cbz	r3, 8006d68 <_kill_r+0x1c>
 8006d66:	6023      	str	r3, [r4, #0]
 8006d68:	bd38      	pop	{r3, r4, r5, pc}
 8006d6a:	bf00      	nop
 8006d6c:	2000043c 	.word	0x2000043c

08006d70 <_getpid_r>:
 8006d70:	f7fa bd82 	b.w	8001878 <_getpid>

08006d74 <__swhatbuf_r>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	460c      	mov	r4, r1
 8006d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7c:	4615      	mov	r5, r2
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	461e      	mov	r6, r3
 8006d82:	b096      	sub	sp, #88	; 0x58
 8006d84:	da0c      	bge.n	8006da0 <__swhatbuf_r+0x2c>
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	2100      	movs	r1, #0
 8006d8a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d8e:	bf0c      	ite	eq
 8006d90:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d94:	2340      	movne	r3, #64	; 0x40
 8006d96:	2000      	movs	r0, #0
 8006d98:	6031      	str	r1, [r6, #0]
 8006d9a:	602b      	str	r3, [r5, #0]
 8006d9c:	b016      	add	sp, #88	; 0x58
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	466a      	mov	r2, sp
 8006da2:	f000 f849 	bl	8006e38 <_fstat_r>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	dbed      	blt.n	8006d86 <__swhatbuf_r+0x12>
 8006daa:	9901      	ldr	r1, [sp, #4]
 8006dac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006db0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006db4:	4259      	negs	r1, r3
 8006db6:	4159      	adcs	r1, r3
 8006db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dbc:	e7eb      	b.n	8006d96 <__swhatbuf_r+0x22>

08006dbe <__smakebuf_r>:
 8006dbe:	898b      	ldrh	r3, [r1, #12]
 8006dc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006dc2:	079d      	lsls	r5, r3, #30
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	d507      	bpl.n	8006dda <__smakebuf_r+0x1c>
 8006dca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	6123      	str	r3, [r4, #16]
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	6163      	str	r3, [r4, #20]
 8006dd6:	b002      	add	sp, #8
 8006dd8:	bd70      	pop	{r4, r5, r6, pc}
 8006dda:	466a      	mov	r2, sp
 8006ddc:	ab01      	add	r3, sp, #4
 8006dde:	f7ff ffc9 	bl	8006d74 <__swhatbuf_r>
 8006de2:	9900      	ldr	r1, [sp, #0]
 8006de4:	4605      	mov	r5, r0
 8006de6:	4630      	mov	r0, r6
 8006de8:	f7fd fa02 	bl	80041f0 <_malloc_r>
 8006dec:	b948      	cbnz	r0, 8006e02 <__smakebuf_r+0x44>
 8006dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df2:	059a      	lsls	r2, r3, #22
 8006df4:	d4ef      	bmi.n	8006dd6 <__smakebuf_r+0x18>
 8006df6:	f023 0303 	bic.w	r3, r3, #3
 8006dfa:	f043 0302 	orr.w	r3, r3, #2
 8006dfe:	81a3      	strh	r3, [r4, #12]
 8006e00:	e7e3      	b.n	8006dca <__smakebuf_r+0xc>
 8006e02:	89a3      	ldrh	r3, [r4, #12]
 8006e04:	6020      	str	r0, [r4, #0]
 8006e06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	9b00      	ldr	r3, [sp, #0]
 8006e0e:	6120      	str	r0, [r4, #16]
 8006e10:	6163      	str	r3, [r4, #20]
 8006e12:	9b01      	ldr	r3, [sp, #4]
 8006e14:	b15b      	cbz	r3, 8006e2e <__smakebuf_r+0x70>
 8006e16:	4630      	mov	r0, r6
 8006e18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e1c:	f000 f81e 	bl	8006e5c <_isatty_r>
 8006e20:	b128      	cbz	r0, 8006e2e <__smakebuf_r+0x70>
 8006e22:	89a3      	ldrh	r3, [r4, #12]
 8006e24:	f023 0303 	bic.w	r3, r3, #3
 8006e28:	f043 0301 	orr.w	r3, r3, #1
 8006e2c:	81a3      	strh	r3, [r4, #12]
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	431d      	orrs	r5, r3
 8006e32:	81a5      	strh	r5, [r4, #12]
 8006e34:	e7cf      	b.n	8006dd6 <__smakebuf_r+0x18>
	...

08006e38 <_fstat_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4d06      	ldr	r5, [pc, #24]	; (8006e58 <_fstat_r+0x20>)
 8006e3e:	4604      	mov	r4, r0
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	602b      	str	r3, [r5, #0]
 8006e46:	f7fa fd7c 	bl	8001942 <_fstat>
 8006e4a:	1c43      	adds	r3, r0, #1
 8006e4c:	d102      	bne.n	8006e54 <_fstat_r+0x1c>
 8006e4e:	682b      	ldr	r3, [r5, #0]
 8006e50:	b103      	cbz	r3, 8006e54 <_fstat_r+0x1c>
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	bd38      	pop	{r3, r4, r5, pc}
 8006e56:	bf00      	nop
 8006e58:	2000043c 	.word	0x2000043c

08006e5c <_isatty_r>:
 8006e5c:	b538      	push	{r3, r4, r5, lr}
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4d05      	ldr	r5, [pc, #20]	; (8006e78 <_isatty_r+0x1c>)
 8006e62:	4604      	mov	r4, r0
 8006e64:	4608      	mov	r0, r1
 8006e66:	602b      	str	r3, [r5, #0]
 8006e68:	f7fa fd7a 	bl	8001960 <_isatty>
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	d102      	bne.n	8006e76 <_isatty_r+0x1a>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	b103      	cbz	r3, 8006e76 <_isatty_r+0x1a>
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	bd38      	pop	{r3, r4, r5, pc}
 8006e78:	2000043c 	.word	0x2000043c

08006e7c <pow>:
 8006e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e80:	4614      	mov	r4, r2
 8006e82:	461d      	mov	r5, r3
 8006e84:	4680      	mov	r8, r0
 8006e86:	4689      	mov	r9, r1
 8006e88:	f000 f866 	bl	8006f58 <__ieee754_pow>
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460f      	mov	r7, r1
 8006e92:	462b      	mov	r3, r5
 8006e94:	4620      	mov	r0, r4
 8006e96:	4629      	mov	r1, r5
 8006e98:	f7f9 fdb8 	bl	8000a0c <__aeabi_dcmpun>
 8006e9c:	bbc8      	cbnz	r0, 8006f12 <pow+0x96>
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	4649      	mov	r1, r9
 8006ea6:	f7f9 fd7f 	bl	80009a8 <__aeabi_dcmpeq>
 8006eaa:	b1b8      	cbz	r0, 8006edc <pow+0x60>
 8006eac:	2200      	movs	r2, #0
 8006eae:	2300      	movs	r3, #0
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	f7f9 fd78 	bl	80009a8 <__aeabi_dcmpeq>
 8006eb8:	2800      	cmp	r0, #0
 8006eba:	d141      	bne.n	8006f40 <pow+0xc4>
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	f000 f844 	bl	8006f4c <finite>
 8006ec4:	b328      	cbz	r0, 8006f12 <pow+0x96>
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4620      	mov	r0, r4
 8006ecc:	4629      	mov	r1, r5
 8006ece:	f7f9 fd75 	bl	80009bc <__aeabi_dcmplt>
 8006ed2:	b1f0      	cbz	r0, 8006f12 <pow+0x96>
 8006ed4:	f7fd fffe 	bl	8004ed4 <__errno>
 8006ed8:	2322      	movs	r3, #34	; 0x22
 8006eda:	e019      	b.n	8006f10 <pow+0x94>
 8006edc:	4630      	mov	r0, r6
 8006ede:	4639      	mov	r1, r7
 8006ee0:	f000 f834 	bl	8006f4c <finite>
 8006ee4:	b9c8      	cbnz	r0, 8006f1a <pow+0x9e>
 8006ee6:	4640      	mov	r0, r8
 8006ee8:	4649      	mov	r1, r9
 8006eea:	f000 f82f 	bl	8006f4c <finite>
 8006eee:	b1a0      	cbz	r0, 8006f1a <pow+0x9e>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f000 f82a 	bl	8006f4c <finite>
 8006ef8:	b178      	cbz	r0, 8006f1a <pow+0x9e>
 8006efa:	4632      	mov	r2, r6
 8006efc:	463b      	mov	r3, r7
 8006efe:	4630      	mov	r0, r6
 8006f00:	4639      	mov	r1, r7
 8006f02:	f7f9 fd83 	bl	8000a0c <__aeabi_dcmpun>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d0e4      	beq.n	8006ed4 <pow+0x58>
 8006f0a:	f7fd ffe3 	bl	8004ed4 <__errno>
 8006f0e:	2321      	movs	r3, #33	; 0x21
 8006f10:	6003      	str	r3, [r0, #0]
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4639      	mov	r1, r7
 8006f22:	f7f9 fd41 	bl	80009a8 <__aeabi_dcmpeq>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d0f3      	beq.n	8006f12 <pow+0x96>
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	4649      	mov	r1, r9
 8006f2e:	f000 f80d 	bl	8006f4c <finite>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d0ed      	beq.n	8006f12 <pow+0x96>
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f000 f807 	bl	8006f4c <finite>
 8006f3e:	e7c8      	b.n	8006ed2 <pow+0x56>
 8006f40:	2600      	movs	r6, #0
 8006f42:	4f01      	ldr	r7, [pc, #4]	; (8006f48 <pow+0xcc>)
 8006f44:	e7e5      	b.n	8006f12 <pow+0x96>
 8006f46:	bf00      	nop
 8006f48:	3ff00000 	.word	0x3ff00000

08006f4c <finite>:
 8006f4c:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006f50:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006f54:	0fc0      	lsrs	r0, r0, #31
 8006f56:	4770      	bx	lr

08006f58 <__ieee754_pow>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	b093      	sub	sp, #76	; 0x4c
 8006f5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f62:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006f66:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006f6a:	4689      	mov	r9, r1
 8006f6c:	ea56 0102 	orrs.w	r1, r6, r2
 8006f70:	4680      	mov	r8, r0
 8006f72:	d111      	bne.n	8006f98 <__ieee754_pow+0x40>
 8006f74:	1803      	adds	r3, r0, r0
 8006f76:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006f7a:	4152      	adcs	r2, r2
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	4b82      	ldr	r3, [pc, #520]	; (8007188 <__ieee754_pow+0x230>)
 8006f80:	4193      	sbcs	r3, r2
 8006f82:	f080 84ba 	bcs.w	80078fa <__ieee754_pow+0x9a2>
 8006f86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	4649      	mov	r1, r9
 8006f8e:	f7f9 f8ed 	bl	800016c <__adddf3>
 8006f92:	4683      	mov	fp, r0
 8006f94:	468c      	mov	ip, r1
 8006f96:	e06f      	b.n	8007078 <__ieee754_pow+0x120>
 8006f98:	4b7c      	ldr	r3, [pc, #496]	; (800718c <__ieee754_pow+0x234>)
 8006f9a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006f9e:	429c      	cmp	r4, r3
 8006fa0:	464d      	mov	r5, r9
 8006fa2:	4682      	mov	sl, r0
 8006fa4:	dc06      	bgt.n	8006fb4 <__ieee754_pow+0x5c>
 8006fa6:	d101      	bne.n	8006fac <__ieee754_pow+0x54>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d1ec      	bne.n	8006f86 <__ieee754_pow+0x2e>
 8006fac:	429e      	cmp	r6, r3
 8006fae:	dc01      	bgt.n	8006fb4 <__ieee754_pow+0x5c>
 8006fb0:	d10f      	bne.n	8006fd2 <__ieee754_pow+0x7a>
 8006fb2:	b172      	cbz	r2, 8006fd2 <__ieee754_pow+0x7a>
 8006fb4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006fb8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006fbc:	ea55 050a 	orrs.w	r5, r5, sl
 8006fc0:	d1e1      	bne.n	8006f86 <__ieee754_pow+0x2e>
 8006fc2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006fc6:	18db      	adds	r3, r3, r3
 8006fc8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006fcc:	4152      	adcs	r2, r2
 8006fce:	429d      	cmp	r5, r3
 8006fd0:	e7d5      	b.n	8006f7e <__ieee754_pow+0x26>
 8006fd2:	2d00      	cmp	r5, #0
 8006fd4:	da39      	bge.n	800704a <__ieee754_pow+0xf2>
 8006fd6:	4b6e      	ldr	r3, [pc, #440]	; (8007190 <__ieee754_pow+0x238>)
 8006fd8:	429e      	cmp	r6, r3
 8006fda:	dc52      	bgt.n	8007082 <__ieee754_pow+0x12a>
 8006fdc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006fe0:	429e      	cmp	r6, r3
 8006fe2:	f340 849d 	ble.w	8007920 <__ieee754_pow+0x9c8>
 8006fe6:	1533      	asrs	r3, r6, #20
 8006fe8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006fec:	2b14      	cmp	r3, #20
 8006fee:	dd0f      	ble.n	8007010 <__ieee754_pow+0xb8>
 8006ff0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006ff4:	fa22 f103 	lsr.w	r1, r2, r3
 8006ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	f040 848f 	bne.w	8007920 <__ieee754_pow+0x9c8>
 8007002:	f001 0101 	and.w	r1, r1, #1
 8007006:	f1c1 0302 	rsb	r3, r1, #2
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	b182      	cbz	r2, 8007030 <__ieee754_pow+0xd8>
 800700e:	e05d      	b.n	80070cc <__ieee754_pow+0x174>
 8007010:	2a00      	cmp	r2, #0
 8007012:	d159      	bne.n	80070c8 <__ieee754_pow+0x170>
 8007014:	f1c3 0314 	rsb	r3, r3, #20
 8007018:	fa46 f103 	asr.w	r1, r6, r3
 800701c:	fa01 f303 	lsl.w	r3, r1, r3
 8007020:	42b3      	cmp	r3, r6
 8007022:	f040 847a 	bne.w	800791a <__ieee754_pow+0x9c2>
 8007026:	f001 0101 	and.w	r1, r1, #1
 800702a:	f1c1 0302 	rsb	r3, r1, #2
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4b58      	ldr	r3, [pc, #352]	; (8007194 <__ieee754_pow+0x23c>)
 8007032:	429e      	cmp	r6, r3
 8007034:	d132      	bne.n	800709c <__ieee754_pow+0x144>
 8007036:	2f00      	cmp	r7, #0
 8007038:	f280 846b 	bge.w	8007912 <__ieee754_pow+0x9ba>
 800703c:	4642      	mov	r2, r8
 800703e:	464b      	mov	r3, r9
 8007040:	2000      	movs	r0, #0
 8007042:	4954      	ldr	r1, [pc, #336]	; (8007194 <__ieee754_pow+0x23c>)
 8007044:	f7f9 fb72 	bl	800072c <__aeabi_ddiv>
 8007048:	e7a3      	b.n	8006f92 <__ieee754_pow+0x3a>
 800704a:	2300      	movs	r3, #0
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	2a00      	cmp	r2, #0
 8007050:	d13c      	bne.n	80070cc <__ieee754_pow+0x174>
 8007052:	4b4e      	ldr	r3, [pc, #312]	; (800718c <__ieee754_pow+0x234>)
 8007054:	429e      	cmp	r6, r3
 8007056:	d1eb      	bne.n	8007030 <__ieee754_pow+0xd8>
 8007058:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800705c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007060:	ea53 030a 	orrs.w	r3, r3, sl
 8007064:	f000 8449 	beq.w	80078fa <__ieee754_pow+0x9a2>
 8007068:	4b4b      	ldr	r3, [pc, #300]	; (8007198 <__ieee754_pow+0x240>)
 800706a:	429c      	cmp	r4, r3
 800706c:	dd0b      	ble.n	8007086 <__ieee754_pow+0x12e>
 800706e:	2f00      	cmp	r7, #0
 8007070:	f2c0 8449 	blt.w	8007906 <__ieee754_pow+0x9ae>
 8007074:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8007078:	4658      	mov	r0, fp
 800707a:	4661      	mov	r1, ip
 800707c:	b013      	add	sp, #76	; 0x4c
 800707e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007082:	2302      	movs	r3, #2
 8007084:	e7e2      	b.n	800704c <__ieee754_pow+0xf4>
 8007086:	2f00      	cmp	r7, #0
 8007088:	f04f 0b00 	mov.w	fp, #0
 800708c:	f04f 0c00 	mov.w	ip, #0
 8007090:	daf2      	bge.n	8007078 <__ieee754_pow+0x120>
 8007092:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8007096:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800709a:	e7ed      	b.n	8007078 <__ieee754_pow+0x120>
 800709c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80070a0:	d106      	bne.n	80070b0 <__ieee754_pow+0x158>
 80070a2:	4642      	mov	r2, r8
 80070a4:	464b      	mov	r3, r9
 80070a6:	4640      	mov	r0, r8
 80070a8:	4649      	mov	r1, r9
 80070aa:	f7f9 fa15 	bl	80004d8 <__aeabi_dmul>
 80070ae:	e770      	b.n	8006f92 <__ieee754_pow+0x3a>
 80070b0:	4b3a      	ldr	r3, [pc, #232]	; (800719c <__ieee754_pow+0x244>)
 80070b2:	429f      	cmp	r7, r3
 80070b4:	d10a      	bne.n	80070cc <__ieee754_pow+0x174>
 80070b6:	2d00      	cmp	r5, #0
 80070b8:	db08      	blt.n	80070cc <__ieee754_pow+0x174>
 80070ba:	4640      	mov	r0, r8
 80070bc:	4649      	mov	r1, r9
 80070be:	b013      	add	sp, #76	; 0x4c
 80070c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	f000 bd0a 	b.w	8007adc <__ieee754_sqrt>
 80070c8:	2300      	movs	r3, #0
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4640      	mov	r0, r8
 80070ce:	4649      	mov	r1, r9
 80070d0:	f000 fc58 	bl	8007984 <fabs>
 80070d4:	4683      	mov	fp, r0
 80070d6:	468c      	mov	ip, r1
 80070d8:	f1ba 0f00 	cmp.w	sl, #0
 80070dc:	d128      	bne.n	8007130 <__ieee754_pow+0x1d8>
 80070de:	b124      	cbz	r4, 80070ea <__ieee754_pow+0x192>
 80070e0:	4b2c      	ldr	r3, [pc, #176]	; (8007194 <__ieee754_pow+0x23c>)
 80070e2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d122      	bne.n	8007130 <__ieee754_pow+0x1d8>
 80070ea:	2f00      	cmp	r7, #0
 80070ec:	da07      	bge.n	80070fe <__ieee754_pow+0x1a6>
 80070ee:	465a      	mov	r2, fp
 80070f0:	4663      	mov	r3, ip
 80070f2:	2000      	movs	r0, #0
 80070f4:	4927      	ldr	r1, [pc, #156]	; (8007194 <__ieee754_pow+0x23c>)
 80070f6:	f7f9 fb19 	bl	800072c <__aeabi_ddiv>
 80070fa:	4683      	mov	fp, r0
 80070fc:	468c      	mov	ip, r1
 80070fe:	2d00      	cmp	r5, #0
 8007100:	daba      	bge.n	8007078 <__ieee754_pow+0x120>
 8007102:	9b00      	ldr	r3, [sp, #0]
 8007104:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007108:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800710c:	431c      	orrs	r4, r3
 800710e:	d108      	bne.n	8007122 <__ieee754_pow+0x1ca>
 8007110:	465a      	mov	r2, fp
 8007112:	4663      	mov	r3, ip
 8007114:	4658      	mov	r0, fp
 8007116:	4661      	mov	r1, ip
 8007118:	f7f9 f826 	bl	8000168 <__aeabi_dsub>
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	e790      	b.n	8007044 <__ieee754_pow+0xec>
 8007122:	9b00      	ldr	r3, [sp, #0]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d1a7      	bne.n	8007078 <__ieee754_pow+0x120>
 8007128:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800712c:	469c      	mov	ip, r3
 800712e:	e7a3      	b.n	8007078 <__ieee754_pow+0x120>
 8007130:	0feb      	lsrs	r3, r5, #31
 8007132:	3b01      	subs	r3, #1
 8007134:	930c      	str	r3, [sp, #48]	; 0x30
 8007136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007138:	9b00      	ldr	r3, [sp, #0]
 800713a:	4313      	orrs	r3, r2
 800713c:	d104      	bne.n	8007148 <__ieee754_pow+0x1f0>
 800713e:	4642      	mov	r2, r8
 8007140:	464b      	mov	r3, r9
 8007142:	4640      	mov	r0, r8
 8007144:	4649      	mov	r1, r9
 8007146:	e7e7      	b.n	8007118 <__ieee754_pow+0x1c0>
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <__ieee754_pow+0x248>)
 800714a:	429e      	cmp	r6, r3
 800714c:	f340 80f6 	ble.w	800733c <__ieee754_pow+0x3e4>
 8007150:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007154:	429e      	cmp	r6, r3
 8007156:	4b10      	ldr	r3, [pc, #64]	; (8007198 <__ieee754_pow+0x240>)
 8007158:	dd09      	ble.n	800716e <__ieee754_pow+0x216>
 800715a:	429c      	cmp	r4, r3
 800715c:	dc0c      	bgt.n	8007178 <__ieee754_pow+0x220>
 800715e:	2f00      	cmp	r7, #0
 8007160:	da0c      	bge.n	800717c <__ieee754_pow+0x224>
 8007162:	2000      	movs	r0, #0
 8007164:	b013      	add	sp, #76	; 0x4c
 8007166:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716a:	f000 bcb2 	b.w	8007ad2 <__math_oflow>
 800716e:	429c      	cmp	r4, r3
 8007170:	dbf5      	blt.n	800715e <__ieee754_pow+0x206>
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <__ieee754_pow+0x23c>)
 8007174:	429c      	cmp	r4, r3
 8007176:	dd15      	ble.n	80071a4 <__ieee754_pow+0x24c>
 8007178:	2f00      	cmp	r7, #0
 800717a:	dcf2      	bgt.n	8007162 <__ieee754_pow+0x20a>
 800717c:	2000      	movs	r0, #0
 800717e:	b013      	add	sp, #76	; 0x4c
 8007180:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	f000 bca0 	b.w	8007ac8 <__math_uflow>
 8007188:	fff00000 	.word	0xfff00000
 800718c:	7ff00000 	.word	0x7ff00000
 8007190:	433fffff 	.word	0x433fffff
 8007194:	3ff00000 	.word	0x3ff00000
 8007198:	3fefffff 	.word	0x3fefffff
 800719c:	3fe00000 	.word	0x3fe00000
 80071a0:	41e00000 	.word	0x41e00000
 80071a4:	4661      	mov	r1, ip
 80071a6:	2200      	movs	r2, #0
 80071a8:	4658      	mov	r0, fp
 80071aa:	4b5f      	ldr	r3, [pc, #380]	; (8007328 <__ieee754_pow+0x3d0>)
 80071ac:	f7f8 ffdc 	bl	8000168 <__aeabi_dsub>
 80071b0:	a355      	add	r3, pc, #340	; (adr r3, 8007308 <__ieee754_pow+0x3b0>)
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	4604      	mov	r4, r0
 80071b8:	460d      	mov	r5, r1
 80071ba:	f7f9 f98d 	bl	80004d8 <__aeabi_dmul>
 80071be:	a354      	add	r3, pc, #336	; (adr r3, 8007310 <__ieee754_pow+0x3b8>)
 80071c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c4:	4606      	mov	r6, r0
 80071c6:	460f      	mov	r7, r1
 80071c8:	4620      	mov	r0, r4
 80071ca:	4629      	mov	r1, r5
 80071cc:	f7f9 f984 	bl	80004d8 <__aeabi_dmul>
 80071d0:	2200      	movs	r2, #0
 80071d2:	4682      	mov	sl, r0
 80071d4:	468b      	mov	fp, r1
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	4b54      	ldr	r3, [pc, #336]	; (800732c <__ieee754_pow+0x3d4>)
 80071dc:	f7f9 f97c 	bl	80004d8 <__aeabi_dmul>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	a14c      	add	r1, pc, #304	; (adr r1, 8007318 <__ieee754_pow+0x3c0>)
 80071e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ea:	f7f8 ffbd 	bl	8000168 <__aeabi_dsub>
 80071ee:	4622      	mov	r2, r4
 80071f0:	462b      	mov	r3, r5
 80071f2:	f7f9 f971 	bl	80004d8 <__aeabi_dmul>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	2000      	movs	r0, #0
 80071fc:	494c      	ldr	r1, [pc, #304]	; (8007330 <__ieee754_pow+0x3d8>)
 80071fe:	f7f8 ffb3 	bl	8000168 <__aeabi_dsub>
 8007202:	4622      	mov	r2, r4
 8007204:	462b      	mov	r3, r5
 8007206:	4680      	mov	r8, r0
 8007208:	4689      	mov	r9, r1
 800720a:	4620      	mov	r0, r4
 800720c:	4629      	mov	r1, r5
 800720e:	f7f9 f963 	bl	80004d8 <__aeabi_dmul>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4640      	mov	r0, r8
 8007218:	4649      	mov	r1, r9
 800721a:	f7f9 f95d 	bl	80004d8 <__aeabi_dmul>
 800721e:	a340      	add	r3, pc, #256	; (adr r3, 8007320 <__ieee754_pow+0x3c8>)
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f9 f958 	bl	80004d8 <__aeabi_dmul>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4650      	mov	r0, sl
 800722e:	4659      	mov	r1, fp
 8007230:	f7f8 ff9a 	bl	8000168 <__aeabi_dsub>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f8 ff94 	bl	800016c <__adddf3>
 8007244:	2000      	movs	r0, #0
 8007246:	4632      	mov	r2, r6
 8007248:	463b      	mov	r3, r7
 800724a:	4682      	mov	sl, r0
 800724c:	468b      	mov	fp, r1
 800724e:	f7f8 ff8b 	bl	8000168 <__aeabi_dsub>
 8007252:	4602      	mov	r2, r0
 8007254:	460b      	mov	r3, r1
 8007256:	4620      	mov	r0, r4
 8007258:	4629      	mov	r1, r5
 800725a:	f7f8 ff85 	bl	8000168 <__aeabi_dsub>
 800725e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007262:	9b00      	ldr	r3, [sp, #0]
 8007264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007266:	3b01      	subs	r3, #1
 8007268:	4313      	orrs	r3, r2
 800726a:	f04f 0600 	mov.w	r6, #0
 800726e:	f04f 0200 	mov.w	r2, #0
 8007272:	bf0c      	ite	eq
 8007274:	4b2f      	ldreq	r3, [pc, #188]	; (8007334 <__ieee754_pow+0x3dc>)
 8007276:	4b2c      	ldrne	r3, [pc, #176]	; (8007328 <__ieee754_pow+0x3d0>)
 8007278:	4604      	mov	r4, r0
 800727a:	460d      	mov	r5, r1
 800727c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007280:	e9cd 2300 	strd	r2, r3, [sp]
 8007284:	4632      	mov	r2, r6
 8007286:	463b      	mov	r3, r7
 8007288:	f7f8 ff6e 	bl	8000168 <__aeabi_dsub>
 800728c:	4652      	mov	r2, sl
 800728e:	465b      	mov	r3, fp
 8007290:	f7f9 f922 	bl	80004d8 <__aeabi_dmul>
 8007294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007298:	4680      	mov	r8, r0
 800729a:	4689      	mov	r9, r1
 800729c:	4620      	mov	r0, r4
 800729e:	4629      	mov	r1, r5
 80072a0:	f7f9 f91a 	bl	80004d8 <__aeabi_dmul>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4640      	mov	r0, r8
 80072aa:	4649      	mov	r1, r9
 80072ac:	f7f8 ff5e 	bl	800016c <__adddf3>
 80072b0:	4632      	mov	r2, r6
 80072b2:	463b      	mov	r3, r7
 80072b4:	4680      	mov	r8, r0
 80072b6:	4689      	mov	r9, r1
 80072b8:	4650      	mov	r0, sl
 80072ba:	4659      	mov	r1, fp
 80072bc:	f7f9 f90c 	bl	80004d8 <__aeabi_dmul>
 80072c0:	4604      	mov	r4, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	460b      	mov	r3, r1
 80072c6:	4602      	mov	r2, r0
 80072c8:	4649      	mov	r1, r9
 80072ca:	4640      	mov	r0, r8
 80072cc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80072d0:	f7f8 ff4c 	bl	800016c <__adddf3>
 80072d4:	4b18      	ldr	r3, [pc, #96]	; (8007338 <__ieee754_pow+0x3e0>)
 80072d6:	4682      	mov	sl, r0
 80072d8:	4299      	cmp	r1, r3
 80072da:	460f      	mov	r7, r1
 80072dc:	460e      	mov	r6, r1
 80072de:	f340 82e7 	ble.w	80078b0 <__ieee754_pow+0x958>
 80072e2:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80072e6:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80072ea:	4303      	orrs	r3, r0
 80072ec:	f000 81e2 	beq.w	80076b4 <__ieee754_pow+0x75c>
 80072f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2300      	movs	r3, #0
 80072f8:	f7f9 fb60 	bl	80009bc <__aeabi_dcmplt>
 80072fc:	3800      	subs	r0, #0
 80072fe:	bf18      	it	ne
 8007300:	2001      	movne	r0, #1
 8007302:	e72f      	b.n	8007164 <__ieee754_pow+0x20c>
 8007304:	f3af 8000 	nop.w
 8007308:	60000000 	.word	0x60000000
 800730c:	3ff71547 	.word	0x3ff71547
 8007310:	f85ddf44 	.word	0xf85ddf44
 8007314:	3e54ae0b 	.word	0x3e54ae0b
 8007318:	55555555 	.word	0x55555555
 800731c:	3fd55555 	.word	0x3fd55555
 8007320:	652b82fe 	.word	0x652b82fe
 8007324:	3ff71547 	.word	0x3ff71547
 8007328:	3ff00000 	.word	0x3ff00000
 800732c:	3fd00000 	.word	0x3fd00000
 8007330:	3fe00000 	.word	0x3fe00000
 8007334:	bff00000 	.word	0xbff00000
 8007338:	408fffff 	.word	0x408fffff
 800733c:	4bd4      	ldr	r3, [pc, #848]	; (8007690 <__ieee754_pow+0x738>)
 800733e:	2200      	movs	r2, #0
 8007340:	402b      	ands	r3, r5
 8007342:	b943      	cbnz	r3, 8007356 <__ieee754_pow+0x3fe>
 8007344:	4658      	mov	r0, fp
 8007346:	4661      	mov	r1, ip
 8007348:	4bd2      	ldr	r3, [pc, #840]	; (8007694 <__ieee754_pow+0x73c>)
 800734a:	f7f9 f8c5 	bl	80004d8 <__aeabi_dmul>
 800734e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007352:	4683      	mov	fp, r0
 8007354:	460c      	mov	r4, r1
 8007356:	1523      	asrs	r3, r4, #20
 8007358:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800735c:	4413      	add	r3, r2
 800735e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007360:	4bcd      	ldr	r3, [pc, #820]	; (8007698 <__ieee754_pow+0x740>)
 8007362:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007366:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800736a:	429c      	cmp	r4, r3
 800736c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007370:	dd08      	ble.n	8007384 <__ieee754_pow+0x42c>
 8007372:	4bca      	ldr	r3, [pc, #808]	; (800769c <__ieee754_pow+0x744>)
 8007374:	429c      	cmp	r4, r3
 8007376:	f340 8164 	ble.w	8007642 <__ieee754_pow+0x6ea>
 800737a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800737c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007380:	3301      	adds	r3, #1
 8007382:	930b      	str	r3, [sp, #44]	; 0x2c
 8007384:	2600      	movs	r6, #0
 8007386:	00f3      	lsls	r3, r6, #3
 8007388:	930d      	str	r3, [sp, #52]	; 0x34
 800738a:	4bc5      	ldr	r3, [pc, #788]	; (80076a0 <__ieee754_pow+0x748>)
 800738c:	4658      	mov	r0, fp
 800738e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007392:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007396:	4629      	mov	r1, r5
 8007398:	461a      	mov	r2, r3
 800739a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800739e:	4623      	mov	r3, r4
 80073a0:	f7f8 fee2 	bl	8000168 <__aeabi_dsub>
 80073a4:	46da      	mov	sl, fp
 80073a6:	462b      	mov	r3, r5
 80073a8:	4652      	mov	r2, sl
 80073aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80073ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80073b2:	f7f8 fedb 	bl	800016c <__adddf3>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	2000      	movs	r0, #0
 80073bc:	49b9      	ldr	r1, [pc, #740]	; (80076a4 <__ieee754_pow+0x74c>)
 80073be:	f7f9 f9b5 	bl	800072c <__aeabi_ddiv>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80073ca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80073ce:	f7f9 f883 	bl	80004d8 <__aeabi_dmul>
 80073d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073d6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80073da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80073de:	2300      	movs	r3, #0
 80073e0:	2200      	movs	r2, #0
 80073e2:	46ab      	mov	fp, r5
 80073e4:	106d      	asrs	r5, r5, #1
 80073e6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80073f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80073f4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80073f8:	4640      	mov	r0, r8
 80073fa:	4649      	mov	r1, r9
 80073fc:	4614      	mov	r4, r2
 80073fe:	461d      	mov	r5, r3
 8007400:	f7f9 f86a 	bl	80004d8 <__aeabi_dmul>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800740c:	f7f8 feac 	bl	8000168 <__aeabi_dsub>
 8007410:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007414:	4606      	mov	r6, r0
 8007416:	460f      	mov	r7, r1
 8007418:	4620      	mov	r0, r4
 800741a:	4629      	mov	r1, r5
 800741c:	f7f8 fea4 	bl	8000168 <__aeabi_dsub>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4650      	mov	r0, sl
 8007426:	4659      	mov	r1, fp
 8007428:	f7f8 fe9e 	bl	8000168 <__aeabi_dsub>
 800742c:	4642      	mov	r2, r8
 800742e:	464b      	mov	r3, r9
 8007430:	f7f9 f852 	bl	80004d8 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f8 fe94 	bl	8000168 <__aeabi_dsub>
 8007440:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007444:	f7f9 f848 	bl	80004d8 <__aeabi_dmul>
 8007448:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800744c:	4682      	mov	sl, r0
 800744e:	468b      	mov	fp, r1
 8007450:	4610      	mov	r0, r2
 8007452:	4619      	mov	r1, r3
 8007454:	f7f9 f840 	bl	80004d8 <__aeabi_dmul>
 8007458:	a37b      	add	r3, pc, #492	; (adr r3, 8007648 <__ieee754_pow+0x6f0>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	f7f9 f839 	bl	80004d8 <__aeabi_dmul>
 8007466:	a37a      	add	r3, pc, #488	; (adr r3, 8007650 <__ieee754_pow+0x6f8>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 fe7e 	bl	800016c <__adddf3>
 8007470:	4622      	mov	r2, r4
 8007472:	462b      	mov	r3, r5
 8007474:	f7f9 f830 	bl	80004d8 <__aeabi_dmul>
 8007478:	a377      	add	r3, pc, #476	; (adr r3, 8007658 <__ieee754_pow+0x700>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f8 fe75 	bl	800016c <__adddf3>
 8007482:	4622      	mov	r2, r4
 8007484:	462b      	mov	r3, r5
 8007486:	f7f9 f827 	bl	80004d8 <__aeabi_dmul>
 800748a:	a375      	add	r3, pc, #468	; (adr r3, 8007660 <__ieee754_pow+0x708>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fe6c 	bl	800016c <__adddf3>
 8007494:	4622      	mov	r2, r4
 8007496:	462b      	mov	r3, r5
 8007498:	f7f9 f81e 	bl	80004d8 <__aeabi_dmul>
 800749c:	a372      	add	r3, pc, #456	; (adr r3, 8007668 <__ieee754_pow+0x710>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fe63 	bl	800016c <__adddf3>
 80074a6:	4622      	mov	r2, r4
 80074a8:	462b      	mov	r3, r5
 80074aa:	f7f9 f815 	bl	80004d8 <__aeabi_dmul>
 80074ae:	a370      	add	r3, pc, #448	; (adr r3, 8007670 <__ieee754_pow+0x718>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	f7f8 fe5a 	bl	800016c <__adddf3>
 80074b8:	4622      	mov	r2, r4
 80074ba:	4606      	mov	r6, r0
 80074bc:	460f      	mov	r7, r1
 80074be:	462b      	mov	r3, r5
 80074c0:	4620      	mov	r0, r4
 80074c2:	4629      	mov	r1, r5
 80074c4:	f7f9 f808 	bl	80004d8 <__aeabi_dmul>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4630      	mov	r0, r6
 80074ce:	4639      	mov	r1, r7
 80074d0:	f7f9 f802 	bl	80004d8 <__aeabi_dmul>
 80074d4:	4604      	mov	r4, r0
 80074d6:	460d      	mov	r5, r1
 80074d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074dc:	4642      	mov	r2, r8
 80074de:	464b      	mov	r3, r9
 80074e0:	f7f8 fe44 	bl	800016c <__adddf3>
 80074e4:	4652      	mov	r2, sl
 80074e6:	465b      	mov	r3, fp
 80074e8:	f7f8 fff6 	bl	80004d8 <__aeabi_dmul>
 80074ec:	4622      	mov	r2, r4
 80074ee:	462b      	mov	r3, r5
 80074f0:	f7f8 fe3c 	bl	800016c <__adddf3>
 80074f4:	4642      	mov	r2, r8
 80074f6:	4606      	mov	r6, r0
 80074f8:	460f      	mov	r7, r1
 80074fa:	464b      	mov	r3, r9
 80074fc:	4640      	mov	r0, r8
 80074fe:	4649      	mov	r1, r9
 8007500:	f7f8 ffea 	bl	80004d8 <__aeabi_dmul>
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800750c:	2200      	movs	r2, #0
 800750e:	4b66      	ldr	r3, [pc, #408]	; (80076a8 <__ieee754_pow+0x750>)
 8007510:	f7f8 fe2c 	bl	800016c <__adddf3>
 8007514:	4632      	mov	r2, r6
 8007516:	463b      	mov	r3, r7
 8007518:	f7f8 fe28 	bl	800016c <__adddf3>
 800751c:	2400      	movs	r4, #0
 800751e:	460d      	mov	r5, r1
 8007520:	4622      	mov	r2, r4
 8007522:	460b      	mov	r3, r1
 8007524:	4640      	mov	r0, r8
 8007526:	4649      	mov	r1, r9
 8007528:	f7f8 ffd6 	bl	80004d8 <__aeabi_dmul>
 800752c:	2200      	movs	r2, #0
 800752e:	4680      	mov	r8, r0
 8007530:	4689      	mov	r9, r1
 8007532:	4620      	mov	r0, r4
 8007534:	4629      	mov	r1, r5
 8007536:	4b5c      	ldr	r3, [pc, #368]	; (80076a8 <__ieee754_pow+0x750>)
 8007538:	f7f8 fe16 	bl	8000168 <__aeabi_dsub>
 800753c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007540:	f7f8 fe12 	bl	8000168 <__aeabi_dsub>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4630      	mov	r0, r6
 800754a:	4639      	mov	r1, r7
 800754c:	f7f8 fe0c 	bl	8000168 <__aeabi_dsub>
 8007550:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007554:	f7f8 ffc0 	bl	80004d8 <__aeabi_dmul>
 8007558:	4622      	mov	r2, r4
 800755a:	4606      	mov	r6, r0
 800755c:	460f      	mov	r7, r1
 800755e:	462b      	mov	r3, r5
 8007560:	4650      	mov	r0, sl
 8007562:	4659      	mov	r1, fp
 8007564:	f7f8 ffb8 	bl	80004d8 <__aeabi_dmul>
 8007568:	4602      	mov	r2, r0
 800756a:	460b      	mov	r3, r1
 800756c:	4630      	mov	r0, r6
 800756e:	4639      	mov	r1, r7
 8007570:	f7f8 fdfc 	bl	800016c <__adddf3>
 8007574:	2400      	movs	r4, #0
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	4602      	mov	r2, r0
 800757c:	460b      	mov	r3, r1
 800757e:	4640      	mov	r0, r8
 8007580:	4649      	mov	r1, r9
 8007582:	f7f8 fdf3 	bl	800016c <__adddf3>
 8007586:	a33c      	add	r3, pc, #240	; (adr r3, 8007678 <__ieee754_pow+0x720>)
 8007588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758c:	4620      	mov	r0, r4
 800758e:	460d      	mov	r5, r1
 8007590:	f7f8 ffa2 	bl	80004d8 <__aeabi_dmul>
 8007594:	4642      	mov	r2, r8
 8007596:	464b      	mov	r3, r9
 8007598:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f8 fde2 	bl	8000168 <__aeabi_dsub>
 80075a4:	4602      	mov	r2, r0
 80075a6:	460b      	mov	r3, r1
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f8 fddc 	bl	8000168 <__aeabi_dsub>
 80075b0:	a333      	add	r3, pc, #204	; (adr r3, 8007680 <__ieee754_pow+0x728>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	f7f8 ff8f 	bl	80004d8 <__aeabi_dmul>
 80075ba:	a333      	add	r3, pc, #204	; (adr r3, 8007688 <__ieee754_pow+0x730>)
 80075bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c0:	4606      	mov	r6, r0
 80075c2:	460f      	mov	r7, r1
 80075c4:	4620      	mov	r0, r4
 80075c6:	4629      	mov	r1, r5
 80075c8:	f7f8 ff86 	bl	80004d8 <__aeabi_dmul>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4630      	mov	r0, r6
 80075d2:	4639      	mov	r1, r7
 80075d4:	f7f8 fdca 	bl	800016c <__adddf3>
 80075d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075da:	4b34      	ldr	r3, [pc, #208]	; (80076ac <__ieee754_pow+0x754>)
 80075dc:	4413      	add	r3, r2
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f8 fdc3 	bl	800016c <__adddf3>
 80075e6:	4680      	mov	r8, r0
 80075e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80075ea:	4689      	mov	r9, r1
 80075ec:	f7f8 ff0a 	bl	8000404 <__aeabi_i2d>
 80075f0:	4604      	mov	r4, r0
 80075f2:	460d      	mov	r5, r1
 80075f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075fa:	4b2d      	ldr	r3, [pc, #180]	; (80076b0 <__ieee754_pow+0x758>)
 80075fc:	4413      	add	r3, r2
 80075fe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007602:	4642      	mov	r2, r8
 8007604:	464b      	mov	r3, r9
 8007606:	f7f8 fdb1 	bl	800016c <__adddf3>
 800760a:	4632      	mov	r2, r6
 800760c:	463b      	mov	r3, r7
 800760e:	f7f8 fdad 	bl	800016c <__adddf3>
 8007612:	4622      	mov	r2, r4
 8007614:	462b      	mov	r3, r5
 8007616:	f7f8 fda9 	bl	800016c <__adddf3>
 800761a:	2000      	movs	r0, #0
 800761c:	4622      	mov	r2, r4
 800761e:	462b      	mov	r3, r5
 8007620:	4682      	mov	sl, r0
 8007622:	468b      	mov	fp, r1
 8007624:	f7f8 fda0 	bl	8000168 <__aeabi_dsub>
 8007628:	4632      	mov	r2, r6
 800762a:	463b      	mov	r3, r7
 800762c:	f7f8 fd9c 	bl	8000168 <__aeabi_dsub>
 8007630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007634:	f7f8 fd98 	bl	8000168 <__aeabi_dsub>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4640      	mov	r0, r8
 800763e:	4649      	mov	r1, r9
 8007640:	e60b      	b.n	800725a <__ieee754_pow+0x302>
 8007642:	2601      	movs	r6, #1
 8007644:	e69f      	b.n	8007386 <__ieee754_pow+0x42e>
 8007646:	bf00      	nop
 8007648:	4a454eef 	.word	0x4a454eef
 800764c:	3fca7e28 	.word	0x3fca7e28
 8007650:	93c9db65 	.word	0x93c9db65
 8007654:	3fcd864a 	.word	0x3fcd864a
 8007658:	a91d4101 	.word	0xa91d4101
 800765c:	3fd17460 	.word	0x3fd17460
 8007660:	518f264d 	.word	0x518f264d
 8007664:	3fd55555 	.word	0x3fd55555
 8007668:	db6fabff 	.word	0xdb6fabff
 800766c:	3fdb6db6 	.word	0x3fdb6db6
 8007670:	33333303 	.word	0x33333303
 8007674:	3fe33333 	.word	0x3fe33333
 8007678:	e0000000 	.word	0xe0000000
 800767c:	3feec709 	.word	0x3feec709
 8007680:	dc3a03fd 	.word	0xdc3a03fd
 8007684:	3feec709 	.word	0x3feec709
 8007688:	145b01f5 	.word	0x145b01f5
 800768c:	be3e2fe0 	.word	0xbe3e2fe0
 8007690:	7ff00000 	.word	0x7ff00000
 8007694:	43400000 	.word	0x43400000
 8007698:	0003988e 	.word	0x0003988e
 800769c:	000bb679 	.word	0x000bb679
 80076a0:	08008150 	.word	0x08008150
 80076a4:	3ff00000 	.word	0x3ff00000
 80076a8:	40080000 	.word	0x40080000
 80076ac:	08008170 	.word	0x08008170
 80076b0:	08008160 	.word	0x08008160
 80076b4:	a39c      	add	r3, pc, #624	; (adr r3, 8007928 <__ieee754_pow+0x9d0>)
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 fd55 	bl	800016c <__adddf3>
 80076c2:	4622      	mov	r2, r4
 80076c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076c8:	462b      	mov	r3, r5
 80076ca:	4650      	mov	r0, sl
 80076cc:	4639      	mov	r1, r7
 80076ce:	f7f8 fd4b 	bl	8000168 <__aeabi_dsub>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076da:	f7f9 f98d 	bl	80009f8 <__aeabi_dcmpgt>
 80076de:	2800      	cmp	r0, #0
 80076e0:	f47f ae06 	bne.w	80072f0 <__ieee754_pow+0x398>
 80076e4:	4aa2      	ldr	r2, [pc, #648]	; (8007970 <__ieee754_pow+0xa18>)
 80076e6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80076ea:	4293      	cmp	r3, r2
 80076ec:	f340 8100 	ble.w	80078f0 <__ieee754_pow+0x998>
 80076f0:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80076f4:	151b      	asrs	r3, r3, #20
 80076f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80076fa:	fa4a fa03 	asr.w	sl, sl, r3
 80076fe:	44b2      	add	sl, r6
 8007700:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8007704:	489b      	ldr	r0, [pc, #620]	; (8007974 <__ieee754_pow+0xa1c>)
 8007706:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800770a:	4108      	asrs	r0, r1
 800770c:	ea00 030a 	and.w	r3, r0, sl
 8007710:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007714:	f1c1 0114 	rsb	r1, r1, #20
 8007718:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800771c:	fa4a fa01 	asr.w	sl, sl, r1
 8007720:	2e00      	cmp	r6, #0
 8007722:	f04f 0200 	mov.w	r2, #0
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	bfb8      	it	lt
 800772c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007730:	f7f8 fd1a 	bl	8000168 <__aeabi_dsub>
 8007734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800773c:	2400      	movs	r4, #0
 800773e:	4642      	mov	r2, r8
 8007740:	464b      	mov	r3, r9
 8007742:	f7f8 fd13 	bl	800016c <__adddf3>
 8007746:	a37a      	add	r3, pc, #488	; (adr r3, 8007930 <__ieee754_pow+0x9d8>)
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	4620      	mov	r0, r4
 800774e:	460d      	mov	r5, r1
 8007750:	f7f8 fec2 	bl	80004d8 <__aeabi_dmul>
 8007754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007758:	4606      	mov	r6, r0
 800775a:	460f      	mov	r7, r1
 800775c:	4620      	mov	r0, r4
 800775e:	4629      	mov	r1, r5
 8007760:	f7f8 fd02 	bl	8000168 <__aeabi_dsub>
 8007764:	4602      	mov	r2, r0
 8007766:	460b      	mov	r3, r1
 8007768:	4640      	mov	r0, r8
 800776a:	4649      	mov	r1, r9
 800776c:	f7f8 fcfc 	bl	8000168 <__aeabi_dsub>
 8007770:	a371      	add	r3, pc, #452	; (adr r3, 8007938 <__ieee754_pow+0x9e0>)
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f8 feaf 	bl	80004d8 <__aeabi_dmul>
 800777a:	a371      	add	r3, pc, #452	; (adr r3, 8007940 <__ieee754_pow+0x9e8>)
 800777c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007780:	4680      	mov	r8, r0
 8007782:	4689      	mov	r9, r1
 8007784:	4620      	mov	r0, r4
 8007786:	4629      	mov	r1, r5
 8007788:	f7f8 fea6 	bl	80004d8 <__aeabi_dmul>
 800778c:	4602      	mov	r2, r0
 800778e:	460b      	mov	r3, r1
 8007790:	4640      	mov	r0, r8
 8007792:	4649      	mov	r1, r9
 8007794:	f7f8 fcea 	bl	800016c <__adddf3>
 8007798:	4604      	mov	r4, r0
 800779a:	460d      	mov	r5, r1
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f8 fce2 	bl	800016c <__adddf3>
 80077a8:	4632      	mov	r2, r6
 80077aa:	463b      	mov	r3, r7
 80077ac:	4680      	mov	r8, r0
 80077ae:	4689      	mov	r9, r1
 80077b0:	f7f8 fcda 	bl	8000168 <__aeabi_dsub>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4620      	mov	r0, r4
 80077ba:	4629      	mov	r1, r5
 80077bc:	f7f8 fcd4 	bl	8000168 <__aeabi_dsub>
 80077c0:	4642      	mov	r2, r8
 80077c2:	4606      	mov	r6, r0
 80077c4:	460f      	mov	r7, r1
 80077c6:	464b      	mov	r3, r9
 80077c8:	4640      	mov	r0, r8
 80077ca:	4649      	mov	r1, r9
 80077cc:	f7f8 fe84 	bl	80004d8 <__aeabi_dmul>
 80077d0:	a35d      	add	r3, pc, #372	; (adr r3, 8007948 <__ieee754_pow+0x9f0>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	4604      	mov	r4, r0
 80077d8:	460d      	mov	r5, r1
 80077da:	f7f8 fe7d 	bl	80004d8 <__aeabi_dmul>
 80077de:	a35c      	add	r3, pc, #368	; (adr r3, 8007950 <__ieee754_pow+0x9f8>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 fcc0 	bl	8000168 <__aeabi_dsub>
 80077e8:	4622      	mov	r2, r4
 80077ea:	462b      	mov	r3, r5
 80077ec:	f7f8 fe74 	bl	80004d8 <__aeabi_dmul>
 80077f0:	a359      	add	r3, pc, #356	; (adr r3, 8007958 <__ieee754_pow+0xa00>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 fcb9 	bl	800016c <__adddf3>
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	f7f8 fe6b 	bl	80004d8 <__aeabi_dmul>
 8007802:	a357      	add	r3, pc, #348	; (adr r3, 8007960 <__ieee754_pow+0xa08>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f8 fcae 	bl	8000168 <__aeabi_dsub>
 800780c:	4622      	mov	r2, r4
 800780e:	462b      	mov	r3, r5
 8007810:	f7f8 fe62 	bl	80004d8 <__aeabi_dmul>
 8007814:	a354      	add	r3, pc, #336	; (adr r3, 8007968 <__ieee754_pow+0xa10>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f8 fca7 	bl	800016c <__adddf3>
 800781e:	4622      	mov	r2, r4
 8007820:	462b      	mov	r3, r5
 8007822:	f7f8 fe59 	bl	80004d8 <__aeabi_dmul>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4640      	mov	r0, r8
 800782c:	4649      	mov	r1, r9
 800782e:	f7f8 fc9b 	bl	8000168 <__aeabi_dsub>
 8007832:	4604      	mov	r4, r0
 8007834:	460d      	mov	r5, r1
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4640      	mov	r0, r8
 800783c:	4649      	mov	r1, r9
 800783e:	f7f8 fe4b 	bl	80004d8 <__aeabi_dmul>
 8007842:	2200      	movs	r2, #0
 8007844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800784c:	4620      	mov	r0, r4
 800784e:	4629      	mov	r1, r5
 8007850:	f7f8 fc8a 	bl	8000168 <__aeabi_dsub>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800785c:	f7f8 ff66 	bl	800072c <__aeabi_ddiv>
 8007860:	4632      	mov	r2, r6
 8007862:	4604      	mov	r4, r0
 8007864:	460d      	mov	r5, r1
 8007866:	463b      	mov	r3, r7
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	f7f8 fe34 	bl	80004d8 <__aeabi_dmul>
 8007870:	4632      	mov	r2, r6
 8007872:	463b      	mov	r3, r7
 8007874:	f7f8 fc7a 	bl	800016c <__adddf3>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4620      	mov	r0, r4
 800787e:	4629      	mov	r1, r5
 8007880:	f7f8 fc72 	bl	8000168 <__aeabi_dsub>
 8007884:	4642      	mov	r2, r8
 8007886:	464b      	mov	r3, r9
 8007888:	f7f8 fc6e 	bl	8000168 <__aeabi_dsub>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	2000      	movs	r0, #0
 8007892:	4939      	ldr	r1, [pc, #228]	; (8007978 <__ieee754_pow+0xa20>)
 8007894:	f7f8 fc68 	bl	8000168 <__aeabi_dsub>
 8007898:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800789c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80078a0:	da29      	bge.n	80078f6 <__ieee754_pow+0x99e>
 80078a2:	4652      	mov	r2, sl
 80078a4:	f000 f874 	bl	8007990 <scalbn>
 80078a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ac:	f7ff bbfd 	b.w	80070aa <__ieee754_pow+0x152>
 80078b0:	4b32      	ldr	r3, [pc, #200]	; (800797c <__ieee754_pow+0xa24>)
 80078b2:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80078b6:	429f      	cmp	r7, r3
 80078b8:	f77f af14 	ble.w	80076e4 <__ieee754_pow+0x78c>
 80078bc:	4b30      	ldr	r3, [pc, #192]	; (8007980 <__ieee754_pow+0xa28>)
 80078be:	440b      	add	r3, r1
 80078c0:	4303      	orrs	r3, r0
 80078c2:	d009      	beq.n	80078d8 <__ieee754_pow+0x980>
 80078c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078c8:	2200      	movs	r2, #0
 80078ca:	2300      	movs	r3, #0
 80078cc:	f7f9 f876 	bl	80009bc <__aeabi_dcmplt>
 80078d0:	3800      	subs	r0, #0
 80078d2:	bf18      	it	ne
 80078d4:	2001      	movne	r0, #1
 80078d6:	e452      	b.n	800717e <__ieee754_pow+0x226>
 80078d8:	4622      	mov	r2, r4
 80078da:	462b      	mov	r3, r5
 80078dc:	f7f8 fc44 	bl	8000168 <__aeabi_dsub>
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	f7f9 f87e 	bl	80009e4 <__aeabi_dcmpge>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f43f aefb 	beq.w	80076e4 <__ieee754_pow+0x78c>
 80078ee:	e7e9      	b.n	80078c4 <__ieee754_pow+0x96c>
 80078f0:	f04f 0a00 	mov.w	sl, #0
 80078f4:	e720      	b.n	8007738 <__ieee754_pow+0x7e0>
 80078f6:	4621      	mov	r1, r4
 80078f8:	e7d6      	b.n	80078a8 <__ieee754_pow+0x950>
 80078fa:	f04f 0b00 	mov.w	fp, #0
 80078fe:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007978 <__ieee754_pow+0xa20>
 8007902:	f7ff bbb9 	b.w	8007078 <__ieee754_pow+0x120>
 8007906:	f04f 0b00 	mov.w	fp, #0
 800790a:	f04f 0c00 	mov.w	ip, #0
 800790e:	f7ff bbb3 	b.w	8007078 <__ieee754_pow+0x120>
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7ff bb3c 	b.w	8006f92 <__ieee754_pow+0x3a>
 800791a:	9200      	str	r2, [sp, #0]
 800791c:	f7ff bb88 	b.w	8007030 <__ieee754_pow+0xd8>
 8007920:	2300      	movs	r3, #0
 8007922:	f7ff bb72 	b.w	800700a <__ieee754_pow+0xb2>
 8007926:	bf00      	nop
 8007928:	652b82fe 	.word	0x652b82fe
 800792c:	3c971547 	.word	0x3c971547
 8007930:	00000000 	.word	0x00000000
 8007934:	3fe62e43 	.word	0x3fe62e43
 8007938:	fefa39ef 	.word	0xfefa39ef
 800793c:	3fe62e42 	.word	0x3fe62e42
 8007940:	0ca86c39 	.word	0x0ca86c39
 8007944:	be205c61 	.word	0xbe205c61
 8007948:	72bea4d0 	.word	0x72bea4d0
 800794c:	3e663769 	.word	0x3e663769
 8007950:	c5d26bf1 	.word	0xc5d26bf1
 8007954:	3ebbbd41 	.word	0x3ebbbd41
 8007958:	af25de2c 	.word	0xaf25de2c
 800795c:	3f11566a 	.word	0x3f11566a
 8007960:	16bebd93 	.word	0x16bebd93
 8007964:	3f66c16c 	.word	0x3f66c16c
 8007968:	5555553e 	.word	0x5555553e
 800796c:	3fc55555 	.word	0x3fc55555
 8007970:	3fe00000 	.word	0x3fe00000
 8007974:	fff00000 	.word	0xfff00000
 8007978:	3ff00000 	.word	0x3ff00000
 800797c:	4090cbff 	.word	0x4090cbff
 8007980:	3f6f3400 	.word	0x3f6f3400

08007984 <fabs>:
 8007984:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007988:	4619      	mov	r1, r3
 800798a:	4770      	bx	lr
 800798c:	0000      	movs	r0, r0
	...

08007990 <scalbn>:
 8007990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007992:	4616      	mov	r6, r2
 8007994:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007998:	4604      	mov	r4, r0
 800799a:	460d      	mov	r5, r1
 800799c:	460b      	mov	r3, r1
 800799e:	b992      	cbnz	r2, 80079c6 <scalbn+0x36>
 80079a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80079a4:	4303      	orrs	r3, r0
 80079a6:	d03c      	beq.n	8007a22 <scalbn+0x92>
 80079a8:	4b31      	ldr	r3, [pc, #196]	; (8007a70 <scalbn+0xe0>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	f7f8 fd94 	bl	80004d8 <__aeabi_dmul>
 80079b0:	4b30      	ldr	r3, [pc, #192]	; (8007a74 <scalbn+0xe4>)
 80079b2:	4604      	mov	r4, r0
 80079b4:	429e      	cmp	r6, r3
 80079b6:	460d      	mov	r5, r1
 80079b8:	da0f      	bge.n	80079da <scalbn+0x4a>
 80079ba:	a329      	add	r3, pc, #164	; (adr r3, 8007a60 <scalbn+0xd0>)
 80079bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c0:	f7f8 fd8a 	bl	80004d8 <__aeabi_dmul>
 80079c4:	e006      	b.n	80079d4 <scalbn+0x44>
 80079c6:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80079ca:	42ba      	cmp	r2, r7
 80079cc:	d109      	bne.n	80079e2 <scalbn+0x52>
 80079ce:	4602      	mov	r2, r0
 80079d0:	f7f8 fbcc 	bl	800016c <__adddf3>
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	e023      	b.n	8007a22 <scalbn+0x92>
 80079da:	460b      	mov	r3, r1
 80079dc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079e0:	3a36      	subs	r2, #54	; 0x36
 80079e2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80079e6:	428e      	cmp	r6, r1
 80079e8:	dd0e      	ble.n	8007a08 <scalbn+0x78>
 80079ea:	a31f      	add	r3, pc, #124	; (adr r3, 8007a68 <scalbn+0xd8>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80079f4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 80079f8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 80079fc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007a00:	481d      	ldr	r0, [pc, #116]	; (8007a78 <scalbn+0xe8>)
 8007a02:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007a06:	e7db      	b.n	80079c0 <scalbn+0x30>
 8007a08:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007a0c:	4432      	add	r2, r6
 8007a0e:	428a      	cmp	r2, r1
 8007a10:	dceb      	bgt.n	80079ea <scalbn+0x5a>
 8007a12:	2a00      	cmp	r2, #0
 8007a14:	dd08      	ble.n	8007a28 <scalbn+0x98>
 8007a16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a1e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a22:	4620      	mov	r0, r4
 8007a24:	4629      	mov	r1, r5
 8007a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a28:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a2c:	da0c      	bge.n	8007a48 <scalbn+0xb8>
 8007a2e:	a30c      	add	r3, pc, #48	; (adr r3, 8007a60 <scalbn+0xd0>)
 8007a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a34:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007a38:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007a3c:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007a40:	480e      	ldr	r0, [pc, #56]	; (8007a7c <scalbn+0xec>)
 8007a42:	f041 011f 	orr.w	r1, r1, #31
 8007a46:	e7bb      	b.n	80079c0 <scalbn+0x30>
 8007a48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a4c:	3236      	adds	r2, #54	; 0x36
 8007a4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a56:	4620      	mov	r0, r4
 8007a58:	4629      	mov	r1, r5
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <scalbn+0xf0>)
 8007a5e:	e7af      	b.n	80079c0 <scalbn+0x30>
 8007a60:	c2f8f359 	.word	0xc2f8f359
 8007a64:	01a56e1f 	.word	0x01a56e1f
 8007a68:	8800759c 	.word	0x8800759c
 8007a6c:	7e37e43c 	.word	0x7e37e43c
 8007a70:	43500000 	.word	0x43500000
 8007a74:	ffff3cb0 	.word	0xffff3cb0
 8007a78:	8800759c 	.word	0x8800759c
 8007a7c:	c2f8f359 	.word	0xc2f8f359
 8007a80:	3c900000 	.word	0x3c900000

08007a84 <with_errno>:
 8007a84:	b570      	push	{r4, r5, r6, lr}
 8007a86:	4604      	mov	r4, r0
 8007a88:	460d      	mov	r5, r1
 8007a8a:	4616      	mov	r6, r2
 8007a8c:	f7fd fa22 	bl	8004ed4 <__errno>
 8007a90:	4629      	mov	r1, r5
 8007a92:	6006      	str	r6, [r0, #0]
 8007a94:	4620      	mov	r0, r4
 8007a96:	bd70      	pop	{r4, r5, r6, pc}

08007a98 <xflow>:
 8007a98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a9a:	4615      	mov	r5, r2
 8007a9c:	461c      	mov	r4, r3
 8007a9e:	b180      	cbz	r0, 8007ac2 <xflow+0x2a>
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007aa6:	e9cd 0100 	strd	r0, r1, [sp]
 8007aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aae:	4628      	mov	r0, r5
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	f7f8 fd11 	bl	80004d8 <__aeabi_dmul>
 8007ab6:	2222      	movs	r2, #34	; 0x22
 8007ab8:	b003      	add	sp, #12
 8007aba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007abe:	f7ff bfe1 	b.w	8007a84 <with_errno>
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	e7ee      	b.n	8007aa6 <xflow+0xe>

08007ac8 <__math_uflow>:
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ace:	f7ff bfe3 	b.w	8007a98 <xflow>

08007ad2 <__math_oflow>:
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007ad8:	f7ff bfde 	b.w	8007a98 <xflow>

08007adc <__ieee754_sqrt>:
 8007adc:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007c80 <__ieee754_sqrt+0x1a4>
 8007ae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae4:	ea3c 0c01 	bics.w	ip, ip, r1
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4606      	mov	r6, r0
 8007aec:	460d      	mov	r5, r1
 8007aee:	460a      	mov	r2, r1
 8007af0:	4604      	mov	r4, r0
 8007af2:	d10e      	bne.n	8007b12 <__ieee754_sqrt+0x36>
 8007af4:	4602      	mov	r2, r0
 8007af6:	f7f8 fcef 	bl	80004d8 <__aeabi_dmul>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4630      	mov	r0, r6
 8007b00:	4629      	mov	r1, r5
 8007b02:	f7f8 fb33 	bl	800016c <__adddf3>
 8007b06:	4606      	mov	r6, r0
 8007b08:	460d      	mov	r5, r1
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	4629      	mov	r1, r5
 8007b0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	2900      	cmp	r1, #0
 8007b14:	dc0d      	bgt.n	8007b32 <__ieee754_sqrt+0x56>
 8007b16:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007b1a:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007b1e:	d0f4      	beq.n	8007b0a <__ieee754_sqrt+0x2e>
 8007b20:	b139      	cbz	r1, 8007b32 <__ieee754_sqrt+0x56>
 8007b22:	4602      	mov	r2, r0
 8007b24:	f7f8 fb20 	bl	8000168 <__aeabi_dsub>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	f7f8 fdfe 	bl	800072c <__aeabi_ddiv>
 8007b30:	e7e9      	b.n	8007b06 <__ieee754_sqrt+0x2a>
 8007b32:	1512      	asrs	r2, r2, #20
 8007b34:	f000 8089 	beq.w	8007c4a <__ieee754_sqrt+0x16e>
 8007b38:	2500      	movs	r5, #0
 8007b3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b3e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b46:	07d2      	lsls	r2, r2, #31
 8007b48:	bf5c      	itt	pl
 8007b4a:	005b      	lslpl	r3, r3, #1
 8007b4c:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007b54:	bf58      	it	pl
 8007b56:	0064      	lslpl	r4, r4, #1
 8007b58:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007b5c:	0062      	lsls	r2, r4, #1
 8007b5e:	2016      	movs	r0, #22
 8007b60:	4629      	mov	r1, r5
 8007b62:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007b66:	1076      	asrs	r6, r6, #1
 8007b68:	190f      	adds	r7, r1, r4
 8007b6a:	429f      	cmp	r7, r3
 8007b6c:	bfde      	ittt	le
 8007b6e:	1bdb      	suble	r3, r3, r7
 8007b70:	1939      	addle	r1, r7, r4
 8007b72:	192d      	addle	r5, r5, r4
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	3801      	subs	r0, #1
 8007b78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007b7c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007b80:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007b84:	d1f0      	bne.n	8007b68 <__ieee754_sqrt+0x8c>
 8007b86:	4604      	mov	r4, r0
 8007b88:	2720      	movs	r7, #32
 8007b8a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007b8e:	428b      	cmp	r3, r1
 8007b90:	eb0c 0e00 	add.w	lr, ip, r0
 8007b94:	dc02      	bgt.n	8007b9c <__ieee754_sqrt+0xc0>
 8007b96:	d113      	bne.n	8007bc0 <__ieee754_sqrt+0xe4>
 8007b98:	4596      	cmp	lr, r2
 8007b9a:	d811      	bhi.n	8007bc0 <__ieee754_sqrt+0xe4>
 8007b9c:	f1be 0f00 	cmp.w	lr, #0
 8007ba0:	eb0e 000c 	add.w	r0, lr, ip
 8007ba4:	da56      	bge.n	8007c54 <__ieee754_sqrt+0x178>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	db54      	blt.n	8007c54 <__ieee754_sqrt+0x178>
 8007baa:	f101 0801 	add.w	r8, r1, #1
 8007bae:	1a5b      	subs	r3, r3, r1
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	4596      	cmp	lr, r2
 8007bb4:	bf88      	it	hi
 8007bb6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007bba:	eba2 020e 	sub.w	r2, r2, lr
 8007bbe:	4464      	add	r4, ip
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	3f01      	subs	r7, #1
 8007bc4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007bc8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007bcc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007bd0:	d1dd      	bne.n	8007b8e <__ieee754_sqrt+0xb2>
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	d01b      	beq.n	8007c0e <__ieee754_sqrt+0x132>
 8007bd6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007c84 <__ieee754_sqrt+0x1a8>
 8007bda:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007c88 <__ieee754_sqrt+0x1ac>
 8007bde:	e9da 0100 	ldrd	r0, r1, [sl]
 8007be2:	e9db 2300 	ldrd	r2, r3, [fp]
 8007be6:	f7f8 fabf 	bl	8000168 <__aeabi_dsub>
 8007bea:	e9da 8900 	ldrd	r8, r9, [sl]
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	f7f8 feeb 	bl	80009d0 <__aeabi_dcmple>
 8007bfa:	b140      	cbz	r0, 8007c0e <__ieee754_sqrt+0x132>
 8007bfc:	e9da 0100 	ldrd	r0, r1, [sl]
 8007c00:	e9db 2300 	ldrd	r2, r3, [fp]
 8007c04:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007c08:	d126      	bne.n	8007c58 <__ieee754_sqrt+0x17c>
 8007c0a:	463c      	mov	r4, r7
 8007c0c:	3501      	adds	r5, #1
 8007c0e:	106b      	asrs	r3, r5, #1
 8007c10:	0864      	lsrs	r4, r4, #1
 8007c12:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007c16:	07ea      	lsls	r2, r5, #31
 8007c18:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007c1c:	bf48      	it	mi
 8007c1e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8007c22:	4620      	mov	r0, r4
 8007c24:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007c28:	e76d      	b.n	8007b06 <__ieee754_sqrt+0x2a>
 8007c2a:	0ae3      	lsrs	r3, r4, #11
 8007c2c:	3915      	subs	r1, #21
 8007c2e:	0564      	lsls	r4, r4, #21
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0fa      	beq.n	8007c2a <__ieee754_sqrt+0x14e>
 8007c34:	02d8      	lsls	r0, r3, #11
 8007c36:	d50a      	bpl.n	8007c4e <__ieee754_sqrt+0x172>
 8007c38:	f1c2 0020 	rsb	r0, r2, #32
 8007c3c:	fa24 f000 	lsr.w	r0, r4, r0
 8007c40:	1e55      	subs	r5, r2, #1
 8007c42:	4094      	lsls	r4, r2
 8007c44:	4303      	orrs	r3, r0
 8007c46:	1b4a      	subs	r2, r1, r5
 8007c48:	e776      	b.n	8007b38 <__ieee754_sqrt+0x5c>
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	e7f0      	b.n	8007c30 <__ieee754_sqrt+0x154>
 8007c4e:	005b      	lsls	r3, r3, #1
 8007c50:	3201      	adds	r2, #1
 8007c52:	e7ef      	b.n	8007c34 <__ieee754_sqrt+0x158>
 8007c54:	4688      	mov	r8, r1
 8007c56:	e7aa      	b.n	8007bae <__ieee754_sqrt+0xd2>
 8007c58:	f7f8 fa88 	bl	800016c <__adddf3>
 8007c5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4640      	mov	r0, r8
 8007c66:	4649      	mov	r1, r9
 8007c68:	f7f8 fea8 	bl	80009bc <__aeabi_dcmplt>
 8007c6c:	b120      	cbz	r0, 8007c78 <__ieee754_sqrt+0x19c>
 8007c6e:	1ca1      	adds	r1, r4, #2
 8007c70:	bf08      	it	eq
 8007c72:	3501      	addeq	r5, #1
 8007c74:	3402      	adds	r4, #2
 8007c76:	e7ca      	b.n	8007c0e <__ieee754_sqrt+0x132>
 8007c78:	3401      	adds	r4, #1
 8007c7a:	f024 0401 	bic.w	r4, r4, #1
 8007c7e:	e7c6      	b.n	8007c0e <__ieee754_sqrt+0x132>
 8007c80:	7ff00000 	.word	0x7ff00000
 8007c84:	200001d8 	.word	0x200001d8
 8007c88:	200001e0 	.word	0x200001e0

08007c8c <_init>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr

08007c98 <_fini>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr
