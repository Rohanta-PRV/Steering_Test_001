
Steering_Test_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  08007f00  08007f00  00017f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083f8  080083f8  000201f8  2**0
                  CONTENTS
  4 .ARM          00000000  080083f8  080083f8  000201f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080083f8  080083f8  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083f8  080083f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083fc  080083fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08008400  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  200001f8  080085f8  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  080085f8  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020221  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b38  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bca  00000000  00000000  00029d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006c0  00000000  00000000  0002c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017706  00000000  00000000  0002c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b206  00000000  00000000  0004400e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087016  00000000  00000000  0004f214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003888  00000000  00000000  000d622c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000d9ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f8 	.word	0x200001f8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007ee4 	.word	0x08007ee4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001fc 	.word	0x200001fc
 800014c:	08007ee4 	.word	0x08007ee4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__gesf2>:
 8000d44:	f04f 3cff 	mov.w	ip, #4294967295
 8000d48:	e006      	b.n	8000d58 <__cmpsf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__lesf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	e002      	b.n	8000d58 <__cmpsf2+0x4>
 8000d52:	bf00      	nop

08000d54 <__cmpsf2>:
 8000d54:	f04f 0c01 	mov.w	ip, #1
 8000d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d68:	bf18      	it	ne
 8000d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d6e:	d011      	beq.n	8000d94 <__cmpsf2+0x40>
 8000d70:	b001      	add	sp, #4
 8000d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000d76:	bf18      	it	ne
 8000d78:	ea90 0f01 	teqne	r0, r1
 8000d7c:	bf58      	it	pl
 8000d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000d82:	bf88      	it	hi
 8000d84:	17c8      	asrhi	r0, r1, #31
 8000d86:	bf38      	it	cc
 8000d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000d8c:	bf18      	it	ne
 8000d8e:	f040 0001 	orrne.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	d102      	bne.n	8000da0 <__cmpsf2+0x4c>
 8000d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000d9e:	d105      	bne.n	8000dac <__cmpsf2+0x58>
 8000da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000da4:	d1e4      	bne.n	8000d70 <__cmpsf2+0x1c>
 8000da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000daa:	d0e1      	beq.n	8000d70 <__cmpsf2+0x1c>
 8000dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_cfrcmple>:
 8000db4:	4684      	mov	ip, r0
 8000db6:	4608      	mov	r0, r1
 8000db8:	4661      	mov	r1, ip
 8000dba:	e7ff      	b.n	8000dbc <__aeabi_cfcmpeq>

08000dbc <__aeabi_cfcmpeq>:
 8000dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dbe:	f7ff ffc9 	bl	8000d54 <__cmpsf2>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	bf48      	it	mi
 8000dc6:	f110 0f00 	cmnmi.w	r0, #0
 8000dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000dcc <__aeabi_fcmpeq>:
 8000dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dd0:	f7ff fff4 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dd4:	bf0c      	ite	eq
 8000dd6:	2001      	moveq	r0, #1
 8000dd8:	2000      	movne	r0, #0
 8000dda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dde:	bf00      	nop

08000de0 <__aeabi_fcmplt>:
 8000de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000de4:	f7ff ffea 	bl	8000dbc <__aeabi_cfcmpeq>
 8000de8:	bf34      	ite	cc
 8000dea:	2001      	movcc	r0, #1
 8000dec:	2000      	movcs	r0, #0
 8000dee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000df2:	bf00      	nop

08000df4 <__aeabi_fcmple>:
 8000df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df8:	f7ff ffe0 	bl	8000dbc <__aeabi_cfcmpeq>
 8000dfc:	bf94      	ite	ls
 8000dfe:	2001      	movls	r0, #1
 8000e00:	2000      	movhi	r0, #0
 8000e02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e06:	bf00      	nop

08000e08 <__aeabi_fcmpge>:
 8000e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e0c:	f7ff ffd2 	bl	8000db4 <__aeabi_cfrcmple>
 8000e10:	bf94      	ite	ls
 8000e12:	2001      	movls	r0, #1
 8000e14:	2000      	movhi	r0, #0
 8000e16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1a:	bf00      	nop

08000e1c <__aeabi_fcmpgt>:
 8000e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e20:	f7ff ffc8 	bl	8000db4 <__aeabi_cfrcmple>
 8000e24:	bf34      	ite	cc
 8000e26:	2001      	movcc	r0, #1
 8000e28:	2000      	movcs	r0, #0
 8000e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e2e:	bf00      	nop

08000e30 <__aeabi_f2iz>:
 8000e30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e38:	d30f      	bcc.n	8000e5a <__aeabi_f2iz+0x2a>
 8000e3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e42:	d90d      	bls.n	8000e60 <__aeabi_f2iz+0x30>
 8000e44:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e4c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e50:	fa23 f002 	lsr.w	r0, r3, r2
 8000e54:	bf18      	it	ne
 8000e56:	4240      	negne	r0, r0
 8000e58:	4770      	bx	lr
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	4770      	bx	lr
 8000e60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e64:	d101      	bne.n	8000e6a <__aeabi_f2iz+0x3a>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	d105      	bne.n	8000e76 <__aeabi_f2iz+0x46>
 8000e6a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e6e:	bf08      	it	eq
 8000e70:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f04f 0000 	mov.w	r0, #0
 8000e7a:	4770      	bx	lr

08000e7c <NXT_SendNum>:

uint8_t cmd_end[3] = {0xFF, 0xFF, 0xFF};
char msg[50];

//	Predefined functions for sending different data to display
void NXT_SendNum(char *obj, int32_t num){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET); // Enable onboard led to signify starting of transmission
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e8c:	4814      	ldr	r0, [pc, #80]	; (8000ee0 <NXT_SendNum+0x64>)
 8000e8e:	f002 f86d 	bl	8002f6c <HAL_GPIO_WritePin>
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000e92:	201e      	movs	r0, #30
 8000e94:	f003 faa8 	bl	80043e8 <malloc>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60fb      	str	r3, [r7, #12]
	int len = sprintf((char *) buffer, "%s.val=%ld", obj, num); //change to %ld
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	4910      	ldr	r1, [pc, #64]	; (8000ee4 <NXT_SendNum+0x68>)
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f004 f87c 	bl	8004fa0 <siprintf>
 8000ea8:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart1, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eb2:	68f9      	ldr	r1, [r7, #12]
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <NXT_SendNum+0x6c>)
 8000eb6:	f002 fcd1 	bl	800385c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
 8000eba:	2364      	movs	r3, #100	; 0x64
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	490b      	ldr	r1, [pc, #44]	; (8000eec <NXT_SendNum+0x70>)
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <NXT_SendNum+0x6c>)
 8000ec2:	f002 fccb 	bl	800385c <HAL_UART_Transmit>
	free(buffer);
 8000ec6:	68f8      	ldr	r0, [r7, #12]
 8000ec8:	f003 fa96 	bl	80043f8 <free>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <NXT_SendNum+0x64>)
 8000ed4:	f002 f84a 	bl	8002f6c <HAL_GPIO_WritePin>

}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	08007f28 	.word	0x08007f28
 8000ee8:	2000023c 	.word	0x2000023c
 8000eec:	20000010 	.word	0x20000010

08000ef0 <NXT_SendFloat>:

void NXT_SendFloat(char *obj, float num, int dp){
 8000ef0:	b5b0      	push	{r4, r5, r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f02:	482e      	ldr	r0, [pc, #184]	; (8000fbc <NXT_SendFloat+0xcc>)
 8000f04:	f002 f832 	bl	8002f6c <HAL_GPIO_WritePin>
	int32_t number = num * (pow(10,dp));
 8000f08:	68b8      	ldr	r0, [r7, #8]
 8000f0a:	f7ff fa8d 	bl	8000428 <__aeabi_f2d>
 8000f0e:	4604      	mov	r4, r0
 8000f10:	460d      	mov	r5, r1
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fa76 	bl	8000404 <__aeabi_i2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	f04f 0000 	mov.w	r0, #0
 8000f20:	4927      	ldr	r1, [pc, #156]	; (8000fc0 <NXT_SendFloat+0xd0>)
 8000f22:	f006 f8d7 	bl	80070d4 <pow>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff fad3 	bl	80004d8 <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fd7d 	bl	8000a38 <__aeabi_d2iz>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000f42:	201e      	movs	r0, #30
 8000f44:	f003 fa50 	bl	80043e8 <malloc>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	61bb      	str	r3, [r7, #24]
	int len = sprintf((char *)buffer, "%s.vvs1=%d", obj, dp);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	491c      	ldr	r1, [pc, #112]	; (8000fc4 <NXT_SendFloat+0xd4>)
 8000f52:	69b8      	ldr	r0, [r7, #24]
 8000f54:	f004 f824 	bl	8004fa0 <siprintf>
 8000f58:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart1, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f62:	69b9      	ldr	r1, [r7, #24]
 8000f64:	4818      	ldr	r0, [pc, #96]	; (8000fc8 <NXT_SendFloat+0xd8>)
 8000f66:	f002 fc79 	bl	800385c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4917      	ldr	r1, [pc, #92]	; (8000fcc <NXT_SendFloat+0xdc>)
 8000f70:	4815      	ldr	r0, [pc, #84]	; (8000fc8 <NXT_SendFloat+0xd8>)
 8000f72:	f002 fc73 	bl	800385c <HAL_UART_Transmit>

	len = sprintf((char *)buffer, "%s.val=%ld", obj, number);
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4915      	ldr	r1, [pc, #84]	; (8000fd0 <NXT_SendFloat+0xe0>)
 8000f7c:	69b8      	ldr	r0, [r7, #24]
 8000f7e:	f004 f80f 	bl	8004fa0 <siprintf>
 8000f82:	6178      	str	r0, [r7, #20]
	HAL_UART_Transmit(&huart1, buffer, len, 1000); // hal_uart1, uint8_t data, uint16_t size, uint32_t timeout
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8c:	69b9      	ldr	r1, [r7, #24]
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <NXT_SendFloat+0xd8>)
 8000f90:	f002 fc64 	bl	800385c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	2203      	movs	r2, #3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <NXT_SendFloat+0xdc>)
 8000f9a:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <NXT_SendFloat+0xd8>)
 8000f9c:	f002 fc5e 	bl	800385c <HAL_UART_Transmit>
	free(buffer);
 8000fa0:	69b8      	ldr	r0, [r7, #24]
 8000fa2:	f003 fa29 	bl	80043f8 <free>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fac:	4803      	ldr	r0, [pc, #12]	; (8000fbc <NXT_SendFloat+0xcc>)
 8000fae:	f001 ffdd 	bl	8002f6c <HAL_GPIO_WritePin>

}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40240000 	.word	0x40240000
 8000fc4:	08007f34 	.word	0x08007f34
 8000fc8:	2000023c 	.word	0x2000023c
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	08007f28 	.word	0x08007f28

08000fd4 <NXT_SendTXT>:
	free(buffer);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

}

void NXT_SendTXT(char *obj, char val[]){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe4:	4814      	ldr	r0, [pc, #80]	; (8001038 <NXT_SendTXT+0x64>)
 8000fe6:	f001 ffc1 	bl	8002f6c <HAL_GPIO_WritePin>
	uint8_t *buffer = malloc(30 * sizeof(char));
 8000fea:	201e      	movs	r0, #30
 8000fec:	f003 f9fc 	bl	80043e8 <malloc>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]

	int len = sprintf((char *)buffer, "%s.txt=\"%s\"", obj, val);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	4910      	ldr	r1, [pc, #64]	; (800103c <NXT_SendTXT+0x68>)
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f003 ffd0 	bl	8004fa0 <siprintf>
 8001000:	60b8      	str	r0, [r7, #8]
	HAL_UART_Transmit(&huart1, buffer, len, 1000);
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	b29a      	uxth	r2, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	68f9      	ldr	r1, [r7, #12]
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <NXT_SendTXT+0x6c>)
 800100e:	f002 fc25 	bl	800385c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, cmd_end, 3, 100);
 8001012:	2364      	movs	r3, #100	; 0x64
 8001014:	2203      	movs	r2, #3
 8001016:	490b      	ldr	r1, [pc, #44]	; (8001044 <NXT_SendTXT+0x70>)
 8001018:	4809      	ldr	r0, [pc, #36]	; (8001040 <NXT_SendTXT+0x6c>)
 800101a:	f002 fc1f 	bl	800385c <HAL_UART_Transmit>
	free(buffer);
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f003 f9ea 	bl	80043f8 <free>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <NXT_SendTXT+0x64>)
 800102c:	f001 ff9e 	bl	8002f6c <HAL_GPIO_WritePin>

}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40011000 	.word	0x40011000
 800103c:	08007f48 	.word	0x08007f48
 8001040:	2000023c 	.word	0x2000023c
 8001044:	20000010 	.word	0x20000010

08001048 <HC595write>:

}*/

//LED DRIVING CODE 2
void HC595write()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001054:	4824      	ldr	r0, [pc, #144]	; (80010e8 <HC595write+0xa0>)
 8001056:	f001 ff89 	bl	8002f6c <HAL_GPIO_WritePin>
  HAL_Delay(1); // Ensure the register is cleared
 800105a:	2001      	movs	r0, #1
 800105c:	f000 fe86 	bl	8001d6c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001060:	2201      	movs	r2, #1
 8001062:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001066:	4820      	ldr	r0, [pc, #128]	; (80010e8 <HC595write+0xa0>)
 8001068:	f001 ff80 	bl	8002f6c <HAL_GPIO_WritePin>

    for(int i=0; i<8; i++)
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	e029      	b.n	80010c6 <HC595write+0x7e>
    {
    	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
    	//HAL_Delay(900);
    	currentVal = currentVal >> 1;
 8001072:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <HC595write+0xa4>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <HC595write+0xa4>)
 800107c:	701a      	strb	r2, [r3, #0]
    	if(currentVal & (1<<i))
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <HC595write+0xa4>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	fa42 f303 	asr.w	r3, r2, r3
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d005      	beq.n	800109e <HC595write+0x56>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001092:	2201      	movs	r2, #1
 8001094:	2140      	movs	r1, #64	; 0x40
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <HC595write+0xa0>)
 8001098:	f001 ff68 	bl	8002f6c <HAL_GPIO_WritePin>
 800109c:	e004      	b.n	80010a8 <HC595write+0x60>

        else
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800109e:	2200      	movs	r2, #0
 80010a0:	2140      	movs	r1, #64	; 0x40
 80010a2:	4811      	ldr	r0, [pc, #68]	; (80010e8 <HC595write+0xa0>)
 80010a4:	f001 ff62 	bl	8002f6c <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	480e      	ldr	r0, [pc, #56]	; (80010e8 <HC595write+0xa0>)
 80010b0:	f001 ff5c 	bl	8002f6c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HC595write+0xa0>)
 80010bc:	f001 ff56 	bl	8002f6c <HAL_GPIO_WritePin>
    for(int i=0; i<8; i++)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b07      	cmp	r3, #7
 80010ca:	ddd2      	ble.n	8001072 <HC595write+0x2a>
        //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
        //HAL_Delay(900);
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2180      	movs	r1, #128	; 0x80
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HC595write+0xa0>)
 80010d2:	f001 ff4b 	bl	8002f6c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	4803      	ldr	r0, [pc, #12]	; (80010e8 <HC595write+0xa0>)
 80010dc:	f001 ff46 	bl	8002f6c <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40010c00 	.word	0x40010c00
 80010ec:	20000289 	.word	0x20000289

080010f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
}

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	NXT_SendTXT("rad_state", "EMPTY"); HAL_Delay(2000);
 80010f8:	49ad      	ldr	r1, [pc, #692]	; (80013b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c0>)
 80010fa:	48ae      	ldr	r0, [pc, #696]	; (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 80010fc:	f7ff ff6a 	bl	8000fd4 <NXT_SendTXT>
 8001100:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001104:	f000 fe32 	bl	8001d6c <HAL_Delay>
	while(! HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO1));
 8001108:	bf00      	nop
 800110a:	2101      	movs	r1, #1
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f001 f97a 	bl	8002406 <HAL_CAN_GetRxFifoFillLevel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f8      	beq.n	800110a <HAL_CAN_RxFifo1MsgPendingCallback+0x1a>
	NXT_SendTXT("rad_state", "FILL"); HAL_Delay(2000);
 8001118:	49a7      	ldr	r1, [pc, #668]	; (80013b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c8>)
 800111a:	48a6      	ldr	r0, [pc, #664]	; (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 800111c:	f7ff ff5a 	bl	8000fd4 <NXT_SendTXT>
 8001120:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001124:	f000 fe22 	bl	8001d6c <HAL_Delay>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, canData) != HAL_OK)
 8001128:	4ba4      	ldr	r3, [pc, #656]	; (80013bc <HAL_CAN_RxFifo1MsgPendingCallback+0x2cc>)
 800112a:	4aa5      	ldr	r2, [pc, #660]	; (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800112c:	2101      	movs	r1, #1
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f001 f848 	bl	80021c4 <HAL_CAN_GetRxMessage>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_CAN_RxFifo1MsgPendingCallback+0x4e>
    {
    	Error_Handler();
 800113a:	f000 fba3 	bl	8001884 <Error_Handler>
    }
    NXT_SendTXT("rad_state", "ERH"); HAL_Delay(2000);
 800113e:	49a1      	ldr	r1, [pc, #644]	; (80013c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d4>)
 8001140:	489c      	ldr	r0, [pc, #624]	; (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 8001142:	f7ff ff47 	bl	8000fd4 <NXT_SendTXT>
 8001146:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800114a:	f000 fe0f 	bl	8001d6c <HAL_Delay>
    if(RxHeader.ExtId == 0x18F00400){
 800114e:	4b9c      	ldr	r3, [pc, #624]	; (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4a9d      	ldr	r2, [pc, #628]	; (80013c8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d8>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d124      	bne.n	80011a2 <HAL_CAN_RxFifo1MsgPendingCallback+0xb2>
    		// RPM (uint16_t)
    	value1 = (float)(*z_value)*0.125;
 8001158:	4b9c      	ldr	r3, [pc, #624]	; (80013cc <HAL_CAN_RxFifo1MsgPendingCallback+0x2dc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	881b      	ldrh	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd97 	bl	8000c94 <__aeabi_ui2f>
 8001166:	4603      	mov	r3, r0
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f95d 	bl	8000428 <__aeabi_f2d>
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001176:	f7ff f9af 	bl	80004d8 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fc81 	bl	8000a88 <__aeabi_d2f>
 8001186:	4603      	mov	r3, r0
 8001188:	4a91      	ldr	r2, [pc, #580]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800118a:	6013      	str	r3, [r2, #0]
    	NXT_SendNum("rpm", (int32_t)value1);
 800118c:	4b90      	ldr	r3, [pc, #576]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fe4d 	bl	8000e30 <__aeabi_f2iz>
 8001196:	4603      	mov	r3, r0
 8001198:	4619      	mov	r1, r3
 800119a:	488e      	ldr	r0, [pc, #568]	; (80013d4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e4>)
 800119c:	f7ff fe6e 	bl	8000e7c <NXT_SendNum>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
    	sprintf(msg,"ID : %lu \r\n",RxHeader.ExtId);
   		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
    }

}
 80011a0:	e102      	b.n	80013a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2b8>
    else if(RxHeader.ExtId == 0x18FEEE00){
 80011a2:	4b87      	ldr	r3, [pc, #540]	; (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4a8c      	ldr	r2, [pc, #560]	; (80013d8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d156      	bne.n	800125a <HAL_CAN_RxFifo1MsgPendingCallback+0x16a>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b2:	488a      	ldr	r0, [pc, #552]	; (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 80011b4:	f001 feda 	bl	8002f6c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 80011b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011bc:	f000 fdd6 	bl	8001d6c <HAL_Delay>
   		value1 = (float)(*c_value)*1;
 80011c0:	4b87      	ldr	r3, [pc, #540]	; (80013e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fd64 	bl	8000c94 <__aeabi_ui2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a80      	ldr	r2, [pc, #512]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 80011d0:	6013      	str	r3, [r2, #0]
   		NXT_SendFloat("oil_temp", value1, 2);
 80011d2:	4b7f      	ldr	r3, [pc, #508]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2202      	movs	r2, #2
 80011d8:	4619      	mov	r1, r3
 80011da:	4882      	ldr	r0, [pc, #520]	; (80013e4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f4>)
 80011dc:	f7ff fe88 	bl	8000ef0 <NXT_SendFloat>
   		sprintf(msg,"oil_temp : %0.2f\n",value1);
 80011e0:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f91f 	bl	8000428 <__aeabi_f2d>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	497e      	ldr	r1, [pc, #504]	; (80013e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f8>)
 80011f0:	487e      	ldr	r0, [pc, #504]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 80011f2:	f003 fed5 	bl	8004fa0 <siprintf>
   		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 80011f6:	487d      	ldr	r0, [pc, #500]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 80011f8:	f7fe ffaa 	bl	8000150 <strlen>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b29a      	uxth	r2, r3
 8001200:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001204:	4979      	ldr	r1, [pc, #484]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8001206:	487a      	ldr	r0, [pc, #488]	; (80013f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 8001208:	f002 fb28 	bl	800385c <HAL_UART_Transmit>
    	if(value1 > 80){
 800120c:	4b70      	ldr	r3, [pc, #448]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4978      	ldr	r1, [pc, #480]	; (80013f4 <HAL_CAN_RxFifo1MsgPendingCallback+0x304>)
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fe02 	bl	8000e1c <__aeabi_fcmpgt>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d012      	beq.n	8001244 <HAL_CAN_RxFifo1MsgPendingCallback+0x154>
    		NXT_SendTXT("rad_state", "ON");
 800121e:	4976      	ldr	r1, [pc, #472]	; (80013f8 <HAL_CAN_RxFifo1MsgPendingCallback+0x308>)
 8001220:	4864      	ldr	r0, [pc, #400]	; (80013b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c4>)
 8001222:	f7ff fed7 	bl	8000fd4 <NXT_SendTXT>
    		sprintf(msg,"rad_state : ON\n");
 8001226:	4975      	ldr	r1, [pc, #468]	; (80013fc <HAL_CAN_RxFifo1MsgPendingCallback+0x30c>)
 8001228:	4870      	ldr	r0, [pc, #448]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 800122a:	f003 feb9 	bl	8004fa0 <siprintf>
    		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 800122e:	486f      	ldr	r0, [pc, #444]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8001230:	f7fe ff8e 	bl	8000150 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	496b      	ldr	r1, [pc, #428]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 800123e:	486c      	ldr	r0, [pc, #432]	; (80013f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 8001240:	f002 fb0c 	bl	800385c <HAL_UART_Transmit>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124a:	4864      	ldr	r0, [pc, #400]	; (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 800124c:	f001 fe8e 	bl	8002f6c <HAL_GPIO_WritePin>
    	HAL_Delay(1000);
 8001250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001254:	f000 fd8a 	bl	8001d6c <HAL_Delay>
}
 8001258:	e0a6      	b.n	80013a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2b8>
    else if(RxHeader.ExtId == 0x18FEF717){
 800125a:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4a68      	ldr	r2, [pc, #416]	; (8001400 <HAL_CAN_RxFifo1MsgPendingCallback+0x310>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d124      	bne.n	80012ae <HAL_CAN_RxFifo1MsgPendingCallback+0x1be>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001264:	2201      	movs	r2, #1
 8001266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800126a:	485c      	ldr	r0, [pc, #368]	; (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 800126c:	f001 fe7e 	bl	8002f6c <HAL_GPIO_WritePin>
    	  HAL_Delay(1000);
 8001270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001274:	f000 fd7a 	bl	8001d6c <HAL_Delay>
    	value1 = (float)(*e_value)*1;
 8001278:	4b62      	ldr	r3, [pc, #392]	; (8001404 <HAL_CAN_RxFifo1MsgPendingCallback+0x314>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fd08 	bl	8000c94 <__aeabi_ui2f>
 8001284:	4603      	mov	r3, r0
 8001286:	4a52      	ldr	r2, [pc, #328]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8001288:	6013      	str	r3, [r2, #0]
    	NXT_SendFloat("bat_v", value1, 2);
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2202      	movs	r2, #2
 8001290:	4619      	mov	r1, r3
 8001292:	485d      	ldr	r0, [pc, #372]	; (8001408 <HAL_CAN_RxFifo1MsgPendingCallback+0x318>)
 8001294:	f7ff fe2c 	bl	8000ef0 <NXT_SendFloat>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129e:	484f      	ldr	r0, [pc, #316]	; (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 80012a0:	f001 fe64 	bl	8002f6c <HAL_GPIO_WritePin>
    	HAL_Delay(1000);
 80012a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a8:	f000 fd60 	bl	8001d6c <HAL_Delay>
}
 80012ac:	e07c      	b.n	80013a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2b8>
    else if(RxHeader.ExtId == 0x050){
 80012ae:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	2b50      	cmp	r3, #80	; 0x50
 80012b4:	d11d      	bne.n	80012f2 <HAL_CAN_RxFifo1MsgPendingCallback+0x202>
    		gear = (char)(*a_value);
 80012b6:	4b55      	ldr	r3, [pc, #340]	; (800140c <HAL_CAN_RxFifo1MsgPendingCallback+0x31c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	4b54      	ldr	r3, [pc, #336]	; (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x320>)
 80012be:	701a      	strb	r2, [r3, #0]
    		NXT_SendNum("gear", (int32_t)gear);
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x320>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4853      	ldr	r0, [pc, #332]	; (8001414 <HAL_CAN_RxFifo1MsgPendingCallback+0x324>)
 80012c8:	f7ff fdd8 	bl	8000e7c <NXT_SendNum>
    		sprintf(msg,"Gear : %d \r\n",gear);
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_CAN_RxFifo1MsgPendingCallback+0x320>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4951      	ldr	r1, [pc, #324]	; (8001418 <HAL_CAN_RxFifo1MsgPendingCallback+0x328>)
 80012d4:	4845      	ldr	r0, [pc, #276]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 80012d6:	f003 fe63 	bl	8004fa0 <siprintf>
    		HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg),1000);
 80012da:	4844      	ldr	r0, [pc, #272]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 80012dc:	f7fe ff38 	bl	8000150 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	4940      	ldr	r1, [pc, #256]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 80012ea:	4841      	ldr	r0, [pc, #260]	; (80013f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 80012ec:	f002 fab6 	bl	800385c <HAL_UART_Transmit>
}
 80012f0:	e05a      	b.n	80013a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2b8>
    else if(RxHeader.ExtId == 0x0CF00301){
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a49      	ldr	r2, [pc, #292]	; (800141c <HAL_CAN_RxFifo1MsgPendingCallback+0x32c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d13d      	bne.n	8001378 <HAL_CAN_RxFifo1MsgPendingCallback+0x288>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001302:	4836      	ldr	r0, [pc, #216]	; (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8001304:	f001 fe32 	bl	8002f6c <HAL_GPIO_WritePin>
    	HAL_Delay(1000);
 8001308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800130c:	f000 fd2e 	bl	8001d6c <HAL_Delay>
    	value1 = (float)(*c_value)*1;
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2f0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fcbc 	bl	8000c94 <__aeabi_ui2f>
 800131c:	4603      	mov	r3, r0
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8001320:	6013      	str	r3, [r2, #0]
    	NXT_SendNum("tpsbar", (int32_t)value1);
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fd82 	bl	8000e30 <__aeabi_f2iz>
 800132c:	4603      	mov	r3, r0
 800132e:	4619      	mov	r1, r3
 8001330:	483b      	ldr	r0, [pc, #236]	; (8001420 <HAL_CAN_RxFifo1MsgPendingCallback+0x330>)
 8001332:	f7ff fda3 	bl	8000e7c <NXT_SendNum>
    	sprintf(msg,"TPS : %0.2f per\r\n",value1);
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2e0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f874 	bl	8000428 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4937      	ldr	r1, [pc, #220]	; (8001424 <HAL_CAN_RxFifo1MsgPendingCallback+0x334>)
 8001346:	4829      	ldr	r0, [pc, #164]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8001348:	f003 fe2a 	bl	8004fa0 <siprintf>
    	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 800134c:	4827      	ldr	r0, [pc, #156]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 800134e:	f7fe feff 	bl	8000150 <strlen>
 8001352:	4603      	mov	r3, r0
 8001354:	b29a      	uxth	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	4924      	ldr	r1, [pc, #144]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 800135c:	4824      	ldr	r0, [pc, #144]	; (80013f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 800135e:	f002 fa7d 	bl	800385c <HAL_UART_Transmit>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001368:	481c      	ldr	r0, [pc, #112]	; (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 800136a:	f001 fdff 	bl	8002f6c <HAL_GPIO_WritePin>
    	HAL_Delay(1000);
 800136e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001372:	f000 fcfb 	bl	8001d6c <HAL_Delay>
}
 8001376:	e017      	b.n	80013a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x2b8>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <HAL_CAN_RxFifo1MsgPendingCallback+0x2ec>)
 8001380:	f001 fdf4 	bl	8002f6c <HAL_GPIO_WritePin>
    	sprintf(msg,"ID : %lu \r\n",RxHeader.ExtId);
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x2d0>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	461a      	mov	r2, r3
 800138a:	4927      	ldr	r1, [pc, #156]	; (8001428 <HAL_CAN_RxFifo1MsgPendingCallback+0x338>)
 800138c:	4817      	ldr	r0, [pc, #92]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 800138e:	f003 fe07 	bl	8004fa0 <siprintf>
   		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 1000);
 8001392:	4816      	ldr	r0, [pc, #88]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 8001394:	f7fe fedc 	bl	8000150 <strlen>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	4912      	ldr	r1, [pc, #72]	; (80013ec <HAL_CAN_RxFifo1MsgPendingCallback+0x2fc>)
 80013a2:	4813      	ldr	r0, [pc, #76]	; (80013f0 <HAL_CAN_RxFifo1MsgPendingCallback+0x300>)
 80013a4:	f002 fa5a 	bl	800385c <HAL_UART_Transmit>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	08007f54 	.word	0x08007f54
 80013b4:	08007f5c 	.word	0x08007f5c
 80013b8:	08007f68 	.word	0x08007f68
 80013bc:	2000028c 	.word	0x2000028c
 80013c0:	20000294 	.word	0x20000294
 80013c4:	08007f70 	.word	0x08007f70
 80013c8:	18f00400 	.word	0x18f00400
 80013cc:	2000000c 	.word	0x2000000c
 80013d0:	20000284 	.word	0x20000284
 80013d4:	08007f74 	.word	0x08007f74
 80013d8:	18feee00 	.word	0x18feee00
 80013dc:	40011000 	.word	0x40011000
 80013e0:	20000004 	.word	0x20000004
 80013e4:	08007f78 	.word	0x08007f78
 80013e8:	08007f84 	.word	0x08007f84
 80013ec:	200002b0 	.word	0x200002b0
 80013f0:	2000023c 	.word	0x2000023c
 80013f4:	42a00000 	.word	0x42a00000
 80013f8:	08007f98 	.word	0x08007f98
 80013fc:	08007f9c 	.word	0x08007f9c
 8001400:	18fef717 	.word	0x18fef717
 8001404:	20000008 	.word	0x20000008
 8001408:	08007fac 	.word	0x08007fac
 800140c:	20000000 	.word	0x20000000
 8001410:	20000288 	.word	0x20000288
 8001414:	08007fb4 	.word	0x08007fb4
 8001418:	08007fbc 	.word	0x08007fbc
 800141c:	0cf00301 	.word	0x0cf00301
 8001420:	08007fcc 	.word	0x08007fcc
 8001424:	08007fd4 	.word	0x08007fd4
 8001428:	08007fe8 	.word	0x08007fe8

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f000 fc39 	bl	8001ca8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 f8ab 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f000 f97b 	bl	8001734 <MX_GPIO_Init>
  MX_CAN_Init();
 800143e:	f000 f8f9 	bl	8001634 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8001442:	f000 f94d 	bl	80016e0 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001446:	f000 f8e8 	bl	800161a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  NXT_SendTXT("rad_state", "");
 800144a:	493b      	ldr	r1, [pc, #236]	; (8001538 <main+0x10c>)
 800144c:	483b      	ldr	r0, [pc, #236]	; (800153c <main+0x110>)
 800144e:	f7ff fdc1 	bl	8000fd4 <NXT_SendTXT>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001452:	2110      	movs	r1, #16
 8001454:	483a      	ldr	r0, [pc, #232]	; (8001540 <main+0x114>)
 8001456:	f000 fffd 	bl	8002454 <HAL_CAN_ActivateNotification>

  currentVal = (0b01111111);
 800145a:	4b3a      	ldr	r3, [pc, #232]	; (8001544 <main+0x118>)
 800145c:	227f      	movs	r2, #127	; 0x7f
 800145e:	701a      	strb	r2, [r3, #0]
  HC595write();
 8001460:	f7ff fdf2 	bl	8001048 <HC595write>
  currentVal1 = (0b11111111);
 8001464:	4b38      	ldr	r3, [pc, #224]	; (8001548 <main+0x11c>)
 8001466:	22ff      	movs	r2, #255	; 0xff
 8001468:	701a      	strb	r2, [r3, #0]
  //HC595write1();

  // INITIALIZING THE VALUES FOR STARTUP
  NXT_SendTXT("t4", "BPS");
 800146a:	4938      	ldr	r1, [pc, #224]	; (800154c <main+0x120>)
 800146c:	4838      	ldr	r0, [pc, #224]	; (8001550 <main+0x124>)
 800146e:	f7ff fdb1 	bl	8000fd4 <NXT_SendTXT>
  NXT_SendTXT("t5", "TPS");
 8001472:	4938      	ldr	r1, [pc, #224]	; (8001554 <main+0x128>)
 8001474:	4838      	ldr	r0, [pc, #224]	; (8001558 <main+0x12c>)
 8001476:	f7ff fdad 	bl	8000fd4 <NXT_SendTXT>

  NXT_SendNum("rpm", 0);
 800147a:	2100      	movs	r1, #0
 800147c:	4837      	ldr	r0, [pc, #220]	; (800155c <main+0x130>)
 800147e:	f7ff fcfd 	bl	8000e7c <NXT_SendNum>
  NXT_SendNum("speed", 0);
 8001482:	2100      	movs	r1, #0
 8001484:	4836      	ldr	r0, [pc, #216]	; (8001560 <main+0x134>)
 8001486:	f7ff fcf9 	bl	8000e7c <NXT_SendNum>
  NXT_SendNum("map", 0);
 800148a:	2100      	movs	r1, #0
 800148c:	4835      	ldr	r0, [pc, #212]	; (8001564 <main+0x138>)
 800148e:	f7ff fcf5 	bl	8000e7c <NXT_SendNum>

  NXT_SendNum("bbar", 0);
 8001492:	2100      	movs	r1, #0
 8001494:	4834      	ldr	r0, [pc, #208]	; (8001568 <main+0x13c>)
 8001496:	f7ff fcf1 	bl	8000e7c <NXT_SendNum>
  NXT_SendNum("tpsbar", 0);
 800149a:	2100      	movs	r1, #0
 800149c:	4833      	ldr	r0, [pc, #204]	; (800156c <main+0x140>)
 800149e:	f7ff fced 	bl	8000e7c <NXT_SendNum>

  NXT_SendTXT("gear", "");
 80014a2:	4925      	ldr	r1, [pc, #148]	; (8001538 <main+0x10c>)
 80014a4:	4832      	ldr	r0, [pc, #200]	; (8001570 <main+0x144>)
 80014a6:	f7ff fd95 	bl	8000fd4 <NXT_SendTXT>
  NXT_SendTXT("rad_state", "OFF");
 80014aa:	4932      	ldr	r1, [pc, #200]	; (8001574 <main+0x148>)
 80014ac:	4823      	ldr	r0, [pc, #140]	; (800153c <main+0x110>)
 80014ae:	f7ff fd91 	bl	8000fd4 <NXT_SendTXT>
  NXT_SendFloat("afr", 1.00, 2);
 80014b2:	2202      	movs	r2, #2
 80014b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80014b8:	482f      	ldr	r0, [pc, #188]	; (8001578 <main+0x14c>)
 80014ba:	f7ff fd19 	bl	8000ef0 <NXT_SendFloat>
  NXT_SendFloat("bat_v", 1.00, 2);
 80014be:	2202      	movs	r2, #2
 80014c0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80014c4:	482d      	ldr	r0, [pc, #180]	; (800157c <main+0x150>)
 80014c6:	f7ff fd13 	bl	8000ef0 <NXT_SendFloat>
  NXT_SendFloat("oil_temp", 1.00, 2);
 80014ca:	2202      	movs	r2, #2
 80014cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80014d0:	482b      	ldr	r0, [pc, #172]	; (8001580 <main+0x154>)
 80014d2:	f7ff fd0d 	bl	8000ef0 <NXT_SendFloat>
  // fill in with the other values. This will signify that the code has started.

  if(HAL_CAN_Start(&hcan) != HAL_OK)
 80014d6:	481a      	ldr	r0, [pc, #104]	; (8001540 <main+0x114>)
 80014d8:	f000 fe30 	bl	800213c <HAL_CAN_Start>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d005      	beq.n	80014ee <main+0xc2>
  {
  	  NXT_SendTXT("gear", "!CAN");
 80014e2:	4928      	ldr	r1, [pc, #160]	; (8001584 <main+0x158>)
 80014e4:	4822      	ldr	r0, [pc, #136]	; (8001570 <main+0x144>)
 80014e6:	f7ff fd75 	bl	8000fd4 <NXT_SendTXT>
  	  Error_Handler();
 80014ea:	f000 f9cb 	bl	8001884 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int b=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  while(1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  NXT_SendNum("tpsbar", (b+10)%100);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	330a      	adds	r3, #10
 80014f6:	4a24      	ldr	r2, [pc, #144]	; (8001588 <main+0x15c>)
 80014f8:	fb82 1203 	smull	r1, r2, r2, r3
 80014fc:	1151      	asrs	r1, r2, #5
 80014fe:	17da      	asrs	r2, r3, #31
 8001500:	1a8a      	subs	r2, r1, r2
 8001502:	2164      	movs	r1, #100	; 0x64
 8001504:	fb01 f202 	mul.w	r2, r1, r2
 8001508:	1a9a      	subs	r2, r3, r2
 800150a:	4611      	mov	r1, r2
 800150c:	4817      	ldr	r0, [pc, #92]	; (800156c <main+0x140>)
 800150e:	f7ff fcb5 	bl	8000e7c <NXT_SendNum>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001518:	481c      	ldr	r0, [pc, #112]	; (800158c <main+0x160>)
 800151a:	f001 fd27 	bl	8002f6c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 800151e:	20c8      	movs	r0, #200	; 0xc8
 8001520:	f000 fc24 	bl	8001d6c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001524:	2200      	movs	r2, #0
 8001526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <main+0x160>)
 800152c:	f001 fd1e 	bl	8002f6c <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001530:	20c8      	movs	r0, #200	; 0xc8
 8001532:	f000 fc1b 	bl	8001d6c <HAL_Delay>
	  NXT_SendNum("tpsbar", (b+10)%100);
 8001536:	e7dc      	b.n	80014f2 <main+0xc6>
 8001538:	08007ff4 	.word	0x08007ff4
 800153c:	08007f5c 	.word	0x08007f5c
 8001540:	20000214 	.word	0x20000214
 8001544:	20000289 	.word	0x20000289
 8001548:	2000028a 	.word	0x2000028a
 800154c:	08007ff8 	.word	0x08007ff8
 8001550:	08007ffc 	.word	0x08007ffc
 8001554:	08008000 	.word	0x08008000
 8001558:	08008004 	.word	0x08008004
 800155c:	08007f74 	.word	0x08007f74
 8001560:	08008008 	.word	0x08008008
 8001564:	08008010 	.word	0x08008010
 8001568:	08008014 	.word	0x08008014
 800156c:	08007fcc 	.word	0x08007fcc
 8001570:	08007fb4 	.word	0x08007fb4
 8001574:	0800801c 	.word	0x0800801c
 8001578:	08008020 	.word	0x08008020
 800157c:	08007fac 	.word	0x08007fac
 8001580:	08007f78 	.word	0x08007f78
 8001584:	08008024 	.word	0x08008024
 8001588:	51eb851f 	.word	0x51eb851f
 800158c:	40011000 	.word	0x40011000

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b090      	sub	sp, #64	; 0x40
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	2228      	movs	r2, #40	; 0x28
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fd61 	bl	8005066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c4:	2302      	movs	r3, #2
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015ce:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4618      	mov	r0, r3
 80015da:	f001 fcdf 	bl	8002f9c <HAL_RCC_OscConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015e4:	f000 f94e 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e8:	230f      	movs	r3, #15
 80015ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ec:	2302      	movs	r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2102      	movs	r1, #2
 8001602:	4618      	mov	r0, r3
 8001604:	f001 ff4c 	bl	80034a0 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800160e:	f000 f939 	bl	8001884 <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3740      	adds	r7, #64	; 0x40
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	2025      	movs	r0, #37	; 0x25
 8001624:	f001 fa35 	bl	8002a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001628:	2025      	movs	r0, #37	; 0x25
 800162a:	f001 fa4e 	bl	8002aca <HAL_NVIC_EnableIRQ>
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <MX_CAN_Init+0xa4>)
 800163c:	4a27      	ldr	r2, [pc, #156]	; (80016dc <MX_CAN_Init+0xa8>)
 800163e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <MX_CAN_Init+0xa4>)
 8001642:	2210      	movs	r2, #16
 8001644:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <MX_CAN_Init+0xa4>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <MX_CAN_Init+0xa4>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_16TQ;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_CAN_Init+0xa4>)
 8001654:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8001658:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800165a:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_CAN_Init+0xa4>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_CAN_Init+0xa4>)
 8001662:	2200      	movs	r2, #0
 8001664:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_CAN_Init+0xa4>)
 8001668:	2200      	movs	r2, #0
 800166a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_CAN_Init+0xa4>)
 800166e:	2200      	movs	r2, #0
 8001670:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_CAN_Init+0xa4>)
 8001674:	2200      	movs	r2, #0
 8001676:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_CAN_Init+0xa4>)
 800167a:	2200      	movs	r2, #0
 800167c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <MX_CAN_Init+0xa4>)
 8001680:	2200      	movs	r2, #0
 8001682:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001684:	4814      	ldr	r0, [pc, #80]	; (80016d8 <MX_CAN_Init+0xa4>)
 8001686:	f000 fb95 	bl	8001db4 <HAL_CAN_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001690:	f000 f8f8 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef can_filter_init;

  	can_filter_init.FilterActivation = CAN_FILTER_ENABLE;
 8001694:	2301      	movs	r3, #1
 8001696:	623b      	str	r3, [r7, #32]
  	can_filter_init.FilterBank = 10;  // Filter 0 (contains 2 32 bit Reg scans preferred ID)
 8001698:	230a      	movs	r3, #10
 800169a:	617b      	str	r3, [r7, #20]
  	can_filter_init.FilterFIFOAssignment = CAN_FILTER_FIFO1;  // FIFO1
 800169c:	2301      	movs	r3, #1
 800169e:	613b      	str	r3, [r7, #16]
  	can_filter_init.FilterIdHigh = 0x0000;
 80016a0:	2300      	movs	r3, #0
 80016a2:	603b      	str	r3, [r7, #0]
  	can_filter_init.FilterIdLow = 0x0000;
 80016a4:	2300      	movs	r3, #0
 80016a6:	607b      	str	r3, [r7, #4]
  	can_filter_init.FilterMaskIdHigh = 0x0000;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  	can_filter_init.FilterMaskIdLow = 0x0000;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  	can_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	61bb      	str	r3, [r7, #24]
  	can_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61fb      	str	r3, [r7, #28]
  	can_filter_init.SlaveStartFilterBank = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	; 0x24

  	if(HAL_CAN_ConfigFilter(&hcan, &can_filter_init) != HAL_OK)
 80016bc:	463b      	mov	r3, r7
 80016be:	4619      	mov	r1, r3
 80016c0:	4805      	ldr	r0, [pc, #20]	; (80016d8 <MX_CAN_Init+0xa4>)
 80016c2:	f000 fc72 	bl	8001faa <HAL_CAN_ConfigFilter>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_CAN_Init+0x9c>
  	{
  		Error_Handler();
 80016cc:	f000 f8da 	bl	8001884 <Error_Handler>
  	}
  /* USER CODE END CAN_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	3728      	adds	r7, #40	; 0x28
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000214 	.word	0x20000214
 80016dc:	40006400 	.word	0x40006400

080016e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_USART1_UART_Init+0x4c>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_USART1_UART_Init+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_USART1_UART_Init+0x4c>)
 80016ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_USART1_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_USART1_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_USART1_UART_Init+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_USART1_UART_Init+0x4c>)
 8001706:	220c      	movs	r2, #12
 8001708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_USART1_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <MX_USART1_UART_Init+0x4c>)
 8001718:	f002 f850 	bl	80037bc <HAL_UART_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001722:	f000 f8af 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000023c 	.word	0x2000023c
 8001730:	40013800 	.word	0x40013800

08001734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173a:	f107 0310 	add.w	r3, r7, #16
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <MX_GPIO_Init+0x140>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a49      	ldr	r2, [pc, #292]	; (8001874 <MX_GPIO_Init+0x140>)
 800174e:	f043 0310 	orr.w	r3, r3, #16
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b47      	ldr	r3, [pc, #284]	; (8001874 <MX_GPIO_Init+0x140>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001760:	4b44      	ldr	r3, [pc, #272]	; (8001874 <MX_GPIO_Init+0x140>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	4a43      	ldr	r2, [pc, #268]	; (8001874 <MX_GPIO_Init+0x140>)
 8001766:	f043 0320 	orr.w	r3, r3, #32
 800176a:	6193      	str	r3, [r2, #24]
 800176c:	4b41      	ldr	r3, [pc, #260]	; (8001874 <MX_GPIO_Init+0x140>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	f003 0320 	and.w	r3, r3, #32
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	4b3e      	ldr	r3, [pc, #248]	; (8001874 <MX_GPIO_Init+0x140>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a3d      	ldr	r2, [pc, #244]	; (8001874 <MX_GPIO_Init+0x140>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b3b      	ldr	r3, [pc, #236]	; (8001874 <MX_GPIO_Init+0x140>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <MX_GPIO_Init+0x140>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a37      	ldr	r2, [pc, #220]	; (8001874 <MX_GPIO_Init+0x140>)
 8001796:	f043 0308 	orr.w	r3, r3, #8
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b35      	ldr	r3, [pc, #212]	; (8001874 <MX_GPIO_Init+0x140>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ae:	4832      	ldr	r0, [pc, #200]	; (8001878 <MX_GPIO_Init+0x144>)
 80017b0:	f001 fbdc 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ba:	4830      	ldr	r0, [pc, #192]	; (800187c <MX_GPIO_Init+0x148>)
 80017bc:	f001 fbd6 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7
 80017c0:	2200      	movs	r2, #0
 80017c2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80017c6:	482e      	ldr	r0, [pc, #184]	; (8001880 <MX_GPIO_Init+0x14c>)
 80017c8:	f001 fbd0 	bl	8002f6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 7108 	mov.w	r1, #544	; 0x220
 80017d2:	482b      	ldr	r0, [pc, #172]	; (8001880 <MX_GPIO_Init+0x14c>)
 80017d4:	f001 fbca 	bl	8002f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ea:	f107 0310 	add.w	r3, r7, #16
 80017ee:	4619      	mov	r1, r3
 80017f0:	4821      	ldr	r0, [pc, #132]	; (8001878 <MX_GPIO_Init+0x144>)
 80017f2:	f001 fa37 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	481b      	ldr	r0, [pc, #108]	; (800187c <MX_GPIO_Init+0x148>)
 8001810:	f001 fa28 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001814:	2318      	movs	r3, #24
 8001816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2302      	movs	r3, #2
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 0310 	add.w	r3, r7, #16
 8001828:	4619      	mov	r1, r3
 800182a:	4815      	ldr	r0, [pc, #84]	; (8001880 <MX_GPIO_Init+0x14c>)
 800182c:	f001 fa1a 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8001830:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183e:	2303      	movs	r3, #3
 8001840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0310 	add.w	r3, r7, #16
 8001846:	4619      	mov	r1, r3
 8001848:	480d      	ldr	r0, [pc, #52]	; (8001880 <MX_GPIO_Init+0x14c>)
 800184a:	f001 fa0b 	bl	8002c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800184e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800185c:	2303      	movs	r3, #3
 800185e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <MX_GPIO_Init+0x14c>)
 8001868:	f001 f9fc 	bl	8002c64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800186c:	bf00      	nop
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	40011000 	.word	0x40011000
 800187c:	40010800 	.word	0x40010800
 8001880:	40010c00 	.word	0x40010c00

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <HAL_MspInit+0x5c>)
 8001898:	699b      	ldr	r3, [r3, #24]
 800189a:	4a14      	ldr	r2, [pc, #80]	; (80018ec <HAL_MspInit+0x5c>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6193      	str	r3, [r2, #24]
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_MspInit+0x5c>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_MspInit+0x5c>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	4a0e      	ldr	r2, [pc, #56]	; (80018ec <HAL_MspInit+0x5c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	61d3      	str	r3, [r2, #28]
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_MspInit+0x5c>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <HAL_MspInit+0x60>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_MspInit+0x60>)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000

080018f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a24      	ldr	r2, [pc, #144]	; (80019a0 <HAL_CAN_MspInit+0xac>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d141      	bne.n	8001998 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_CAN_MspInit+0xb0>)
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <HAL_CAN_MspInit+0xb0>)
 800191a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191e:	61d3      	str	r3, [r2, #28]
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_CAN_MspInit+0xb0>)
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_CAN_MspInit+0xb0>)
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <HAL_CAN_MspInit+0xb0>)
 8001932:	f043 0304 	orr.w	r3, r3, #4
 8001936:	6193      	str	r3, [r2, #24]
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_CAN_MspInit+0xb0>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f003 0304 	and.w	r3, r3, #4
 8001940:	60bb      	str	r3, [r7, #8]
 8001942:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001948:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194e:	2301      	movs	r3, #1
 8001950:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4619      	mov	r1, r3
 8001958:	4813      	ldr	r0, [pc, #76]	; (80019a8 <HAL_CAN_MspInit+0xb4>)
 800195a:	f001 f983 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800195e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001962:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	4619      	mov	r1, r3
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <HAL_CAN_MspInit+0xb4>)
 8001974:	f001 f976 	bl	8002c64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 1, 0);
 8001978:	2200      	movs	r2, #0
 800197a:	2101      	movs	r1, #1
 800197c:	2015      	movs	r0, #21
 800197e:	f001 f888 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001982:	2015      	movs	r0, #21
 8001984:	f001 f8a1 	bl	8002aca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 1, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2101      	movs	r1, #1
 800198c:	2016      	movs	r0, #22
 800198e:	f001 f880 	bl	8002a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001992:	2016      	movs	r0, #22
 8001994:	f001 f899 	bl	8002aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001998:	bf00      	nop
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	40006400 	.word	0x40006400
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010800 	.word	0x40010800

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0310 	add.w	r3, r7, #16
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <HAL_UART_MspInit+0x8c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d131      	bne.n	8001a30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_UART_MspInit+0x90>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a1a      	ldr	r2, [pc, #104]	; (8001a3c <HAL_UART_MspInit+0x90>)
 80019d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0x90>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_UART_MspInit+0x90>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a14      	ldr	r2, [pc, #80]	; (8001a3c <HAL_UART_MspInit+0x90>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_UART_MspInit+0x90>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480b      	ldr	r0, [pc, #44]	; (8001a40 <HAL_UART_MspInit+0x94>)
 8001a12:	f001 f927 	bl	8002c64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <HAL_UART_MspInit+0x94>)
 8001a2c:	f001 f91a 	bl	8002c64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010800 	.word	0x40010800

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <MemManage_Handler+0x4>

08001a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler+0x4>

08001a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <UsageFault_Handler+0x4>

08001a62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a8a:	f000 f953 	bl	8001d34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <CAN1_RX1_IRQHandler+0x10>)
 8001a9a:	f000 fd00 	bl	800249e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000214 	.word	0x20000214

08001aa8 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <CAN1_SCE_IRQHandler+0x10>)
 8001aae:	f000 fcf6 	bl	800249e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000214 	.word	0x20000214

08001abc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <USART1_IRQHandler+0x10>)
 8001ac2:	f001 ff57 	bl	8003974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000023c 	.word	0x2000023c

08001ad0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return 1;
 8001ad4:	2301      	movs	r3, #1
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr

08001ade <_kill>:

int _kill(int pid, int sig)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae8:	f003 fb20 	bl	800512c <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2216      	movs	r2, #22
 8001af0:	601a      	str	r2, [r3, #0]
  return -1;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <_exit>:

void _exit (int status)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b06:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffe7 	bl	8001ade <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b10:	e7fe      	b.n	8001b10 <_exit+0x12>

08001b12 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	60f8      	str	r0, [r7, #12]
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	e00a      	b.n	8001b3a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b24:	f3af 8000 	nop.w
 8001b28:	4601      	mov	r1, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	60ba      	str	r2, [r7, #8]
 8001b30:	b2ca      	uxtb	r2, r1
 8001b32:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	3301      	adds	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	dbf0      	blt.n	8001b24 <_read+0x12>
  }

  return len;
 8001b42:	687b      	ldr	r3, [r7, #4]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
 8001b5c:	e009      	b.n	8001b72 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	60ba      	str	r2, [r7, #8]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697a      	ldr	r2, [r7, #20]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dbf1      	blt.n	8001b5e <_write+0x12>
  }
  return len;
 8001b7a:	687b      	ldr	r3, [r7, #4]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_close>:

int _close(int file)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001baa:	605a      	str	r2, [r3, #4]
  return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <_isatty>:

int _isatty(int file)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <_sbrk+0x5c>)
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <_sbrk+0x60>)
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d102      	bne.n	8001c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <_sbrk+0x64>)
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <_sbrk+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d207      	bcs.n	8001c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c14:	f003 fa8a 	bl	800512c <__errno>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e009      	b.n	8001c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <_sbrk+0x64>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	4a05      	ldr	r2, [pc, #20]	; (8001c48 <_sbrk+0x64>)
 8001c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3718      	adds	r7, #24
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20005000 	.word	0x20005000
 8001c44:	00000400 	.word	0x00000400
 8001c48:	200002e4 	.word	0x200002e4
 8001c4c:	20000438 	.word	0x20000438

08001c50 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bc80      	pop	{r7}
 8001c5a:	4770      	bx	lr

08001c5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c5c:	f7ff fff8 	bl	8001c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c62:	490c      	ldr	r1, [pc, #48]	; (8001c94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c78:	4c09      	ldr	r4, [pc, #36]	; (8001ca0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c86:	f003 fa57 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c8a:	f7ff fbcf 	bl	800142c <main>
  bx lr
 8001c8e:	4770      	bx	lr
  ldr r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c94:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001c98:	08008400 	.word	0x08008400
  ldr r2, =_sbss
 8001c9c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001ca0:	20000438 	.word	0x20000438

08001ca4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca4:	e7fe      	b.n	8001ca4 <ADC1_2_IRQHandler>
	...

08001ca8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cac:	4b08      	ldr	r3, [pc, #32]	; (8001cd0 <HAL_Init+0x28>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a07      	ldr	r2, [pc, #28]	; (8001cd0 <HAL_Init+0x28>)
 8001cb2:	f043 0310 	orr.w	r3, r3, #16
 8001cb6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 fedf 	bl	8002a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f000 f808 	bl	8001cd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc4:	f7ff fde4 	bl	8001890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40022000 	.word	0x40022000

08001cd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x54>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_InitTick+0x58>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fef7 	bl	8002ae6 <HAL_SYSTICK_Config>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e00e      	b.n	8001d20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d80a      	bhi.n	8001d1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f000 febf 	bl	8002a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d14:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <HAL_InitTick+0x5c>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000014 	.word	0x20000014
 8001d2c:	2000001c 	.word	0x2000001c
 8001d30:	20000018 	.word	0x20000018

08001d34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d38:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_IncTick+0x1c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_IncTick+0x20>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <HAL_IncTick+0x20>)
 8001d46:	6013      	str	r3, [r2, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	2000001c 	.word	0x2000001c
 8001d54:	200002e8 	.word	0x200002e8

08001d58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d5c:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <HAL_GetTick+0x10>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	200002e8 	.word	0x200002e8

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff fff0 	bl	8001d58 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d005      	beq.n	8001d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_Delay+0x44>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d92:	bf00      	nop
 8001d94:	f7ff ffe0 	bl	8001d58 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8f7      	bhi.n	8001d94 <HAL_Delay+0x28>
  {
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000001c 	.word	0x2000001c

08001db4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0ed      	b.n	8001fa2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d102      	bne.n	8001dd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7ff fd8e 	bl	80018f4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0201 	orr.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de8:	f7ff ffb6 	bl	8001d58 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dee:	e012      	b.n	8001e16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df0:	f7ff ffb2 	bl	8001d58 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b0a      	cmp	r3, #10
 8001dfc:	d90b      	bls.n	8001e16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0c5      	b.n	8001fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0e5      	beq.n	8001df0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0202 	bic.w	r2, r2, #2
 8001e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e34:	f7ff ff90 	bl	8001d58 <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e3a:	e012      	b.n	8001e62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e3c:	f7ff ff8c 	bl	8001d58 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b0a      	cmp	r3, #10
 8001e48:	d90b      	bls.n	8001e62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2205      	movs	r2, #5
 8001e5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e09f      	b.n	8001fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e5      	bne.n	8001e3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7e1b      	ldrb	r3, [r3, #24]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	e007      	b.n	8001e9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	7e5b      	ldrb	r3, [r3, #25]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d108      	bne.n	8001eb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e007      	b.n	8001ec4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7e9b      	ldrb	r3, [r3, #26]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 0220 	orr.w	r2, r2, #32
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e007      	b.n	8001eee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0220 	bic.w	r2, r2, #32
 8001eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	7edb      	ldrb	r3, [r3, #27]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d108      	bne.n	8001f08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0210 	bic.w	r2, r2, #16
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f042 0210 	orr.w	r2, r2, #16
 8001f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	7f1b      	ldrb	r3, [r3, #28]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0208 	orr.w	r2, r2, #8
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e007      	b.n	8001f42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0208 	bic.w	r2, r2, #8
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	7f5b      	ldrb	r3, [r3, #29]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d108      	bne.n	8001f5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0204 	orr.w	r2, r2, #4
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	e007      	b.n	8001f6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0204 	bic.w	r2, r2, #4
 8001f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	ea42 0103 	orr.w	r1, r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b087      	sub	sp, #28
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
 8001fb2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fc0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d003      	beq.n	8001fd0 <HAL_CAN_ConfigFilter+0x26>
 8001fc8:	7cfb      	ldrb	r3, [r7, #19]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	f040 80aa 	bne.w	8002124 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	695b      	ldr	r3, [r3, #20]
 8001fe4:	f003 031f 	and.w	r3, r3, #31
 8001fe8:	2201      	movs	r2, #1
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d123      	bne.n	8002052 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	43db      	mvns	r3, r3
 8002014:	401a      	ands	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800202c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3248      	adds	r2, #72	; 0x48
 8002032:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002046:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002048:	6979      	ldr	r1, [r7, #20]
 800204a:	3348      	adds	r3, #72	; 0x48
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d122      	bne.n	80020a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	431a      	orrs	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002076:	683a      	ldr	r2, [r7, #0]
 8002078:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800207a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3248      	adds	r2, #72	; 0x48
 8002080:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002094:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002096:	6979      	ldr	r1, [r7, #20]
 8002098:	3348      	adds	r3, #72	; 0x48
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	440b      	add	r3, r1
 800209e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020ba:	e007      	b.n	80020cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d109      	bne.n	80020e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80020e6:	e007      	b.n	80020f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	431a      	orrs	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002116:	f023 0201 	bic.w	r2, r3, #1
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	e006      	b.n	8002132 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b01      	cmp	r3, #1
 800214e:	d12e      	bne.n	80021ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002168:	f7ff fdf6 	bl	8001d58 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800216e:	e012      	b.n	8002196 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002170:	f7ff fdf2 	bl	8001d58 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b0a      	cmp	r3, #10
 800217c:	d90b      	bls.n	8002196 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2205      	movs	r2, #5
 800218e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e012      	b.n	80021bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1e5      	bne.n	8002170 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e006      	b.n	80021bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
  }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021d8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021da:	7dfb      	ldrb	r3, [r7, #23]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d003      	beq.n	80021e8 <HAL_CAN_GetRxMessage+0x24>
 80021e0:	7dfb      	ldrb	r3, [r7, #23]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	f040 8103 	bne.w	80023ee <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10e      	bne.n	800220c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d116      	bne.n	800222a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002200:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0f7      	b.n	80023fc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0e8      	b.n	80023fc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	331b      	adds	r3, #27
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	4413      	add	r3, r2
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0204 	and.w	r2, r3, #4
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10c      	bne.n	8002262 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	331b      	adds	r3, #27
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	4413      	add	r3, r2
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0d5b      	lsrs	r3, r3, #21
 8002258:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e00b      	b.n	800227a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	331b      	adds	r3, #27
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	331b      	adds	r3, #27
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4413      	add	r3, r2
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0202 	and.w	r2, r3, #2
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	331b      	adds	r3, #27
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2208      	movs	r2, #8
 80022ac:	611a      	str	r2, [r3, #16]
 80022ae:	e00b      	b.n	80022c8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	331b      	adds	r3, #27
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 020f 	and.w	r2, r3, #15
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	331b      	adds	r3, #27
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	331b      	adds	r3, #27
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	4413      	add	r3, r2
 80022ec:	3304      	adds	r3, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4413      	add	r3, r2
 8002302:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	b2da      	uxtb	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0a1a      	lsrs	r2, r3, #8
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0c1a      	lsrs	r2, r3, #16
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3302      	adds	r3, #2
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e1a      	lsrs	r2, r3, #24
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	3303      	adds	r3, #3
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	4413      	add	r3, r2
 8002366:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	3304      	adds	r3, #4
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0a1a      	lsrs	r2, r3, #8
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	3305      	adds	r3, #5
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	4413      	add	r3, r2
 8002398:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	0c1a      	lsrs	r2, r3, #16
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	3306      	adds	r3, #6
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e1a      	lsrs	r2, r3, #24
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	3307      	adds	r3, #7
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d108      	bne.n	80023da <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0220 	orr.w	r2, r2, #32
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	e007      	b.n	80023ea <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e006      	b.n	80023fc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800241c:	7afb      	ldrb	r3, [r7, #11]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d002      	beq.n	8002428 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002422:	7afb      	ldrb	r3, [r7, #11]
 8002424:	2b02      	cmp	r3, #2
 8002426:	d10f      	bne.n	8002448 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e005      	b.n	8002448 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002448:	68fb      	ldr	r3, [r7, #12]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002464:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002466:	7bfb      	ldrb	r3, [r7, #15]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d002      	beq.n	8002472 <HAL_CAN_ActivateNotification+0x1e>
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d109      	bne.n	8002486 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6959      	ldr	r1, [r3, #20]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002482:	2300      	movs	r3, #0
 8002484:	e006      	b.n	8002494 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bc80      	pop	{r7}
 800249c:	4770      	bx	lr

0800249e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b08a      	sub	sp, #40	; 0x28
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024da:	6a3b      	ldr	r3, [r7, #32]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d07c      	beq.n	80025de <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d023      	beq.n	8002536 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f983 	bl	800280c <HAL_CAN_TxMailbox0CompleteCallback>
 8002506:	e016      	b.n	8002536 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
 800251a:	e00c      	b.n	8002536 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	f003 0308 	and.w	r3, r3, #8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d004      	beq.n	8002530 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800252c:	627b      	str	r3, [r7, #36]	; 0x24
 800252e:	e002      	b.n	8002536 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f986 	bl	8002842 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d024      	beq.n	800258a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002548:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f962 	bl	800281e <HAL_CAN_TxMailbox1CompleteCallback>
 800255a:	e016      	b.n	800258a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	e00c      	b.n	800258a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002576:	2b00      	cmp	r3, #0
 8002578:	d004      	beq.n	8002584 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
 8002582:	e002      	b.n	800258a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f965 	bl	8002854 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d024      	beq.n	80025de <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800259c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f941 	bl	8002830 <HAL_CAN_TxMailbox2CompleteCallback>
 80025ae:	e016      	b.n	80025de <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
 80025c2:	e00c      	b.n	80025de <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d004      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	e002      	b.n	80025de <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f944 	bl	8002866 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	f003 0308 	and.w	r3, r3, #8
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00c      	beq.n	8002602 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d007      	beq.n	8002602 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2210      	movs	r2, #16
 8002600:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2208      	movs	r2, #8
 800261c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f933 	bl	800288a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f91b 	bl	8002878 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d007      	beq.n	8002666 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2210      	movs	r2, #16
 8002664:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00b      	beq.n	8002688 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d006      	beq.n	8002688 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2208      	movs	r2, #8
 8002680:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f90a 	bl	800289c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	d009      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fe fd25 	bl	80010f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00b      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2210      	movs	r2, #16
 80026c0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8f3 	bl	80028ae <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d006      	beq.n	80026ea <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2208      	movs	r2, #8
 80026e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8eb 	bl	80028c0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d07b      	beq.n	80027ec <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d072      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002758:	2b00      	cmp	r3, #0
 800275a:	d043      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002762:	2b00      	cmp	r3, #0
 8002764:	d03e      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800276c:	2b60      	cmp	r3, #96	; 0x60
 800276e:	d02b      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x32a>
 8002770:	2b60      	cmp	r3, #96	; 0x60
 8002772:	d82e      	bhi.n	80027d2 <HAL_CAN_IRQHandler+0x334>
 8002774:	2b50      	cmp	r3, #80	; 0x50
 8002776:	d022      	beq.n	80027be <HAL_CAN_IRQHandler+0x320>
 8002778:	2b50      	cmp	r3, #80	; 0x50
 800277a:	d82a      	bhi.n	80027d2 <HAL_CAN_IRQHandler+0x334>
 800277c:	2b40      	cmp	r3, #64	; 0x40
 800277e:	d019      	beq.n	80027b4 <HAL_CAN_IRQHandler+0x316>
 8002780:	2b40      	cmp	r3, #64	; 0x40
 8002782:	d826      	bhi.n	80027d2 <HAL_CAN_IRQHandler+0x334>
 8002784:	2b30      	cmp	r3, #48	; 0x30
 8002786:	d010      	beq.n	80027aa <HAL_CAN_IRQHandler+0x30c>
 8002788:	2b30      	cmp	r3, #48	; 0x30
 800278a:	d822      	bhi.n	80027d2 <HAL_CAN_IRQHandler+0x334>
 800278c:	2b10      	cmp	r3, #16
 800278e:	d002      	beq.n	8002796 <HAL_CAN_IRQHandler+0x2f8>
 8002790:	2b20      	cmp	r3, #32
 8002792:	d005      	beq.n	80027a0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002794:	e01d      	b.n	80027d2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	f043 0308 	orr.w	r3, r3, #8
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800279e:	e019      	b.n	80027d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f043 0310 	orr.w	r3, r3, #16
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027a8:	e014      	b.n	80027d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	f043 0320 	orr.w	r3, r3, #32
 80027b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027b2:	e00f      	b.n	80027d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027bc:	e00a      	b.n	80027d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027c4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027c6:	e005      	b.n	80027d4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027d0:	e000      	b.n	80027d4 <HAL_CAN_IRQHandler+0x336>
            break;
 80027d2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027e2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2204      	movs	r2, #4
 80027ea:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f867 	bl	80028d2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002804:	bf00      	nop
 8002806:	3728      	adds	r7, #40	; 0x28
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr

0800281e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002900:	4013      	ands	r3, r2
 8002902:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800290c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002914:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002916:	4a04      	ldr	r2, [pc, #16]	; (8002928 <__NVIC_SetPriorityGrouping+0x44>)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	60d3      	str	r3, [r2, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <__NVIC_GetPriorityGrouping+0x18>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	f003 0307 	and.w	r3, r3, #7
}
 800293a:	4618      	mov	r0, r3
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	2b00      	cmp	r3, #0
 8002958:	db0b      	blt.n	8002972 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	f003 021f 	and.w	r2, r3, #31
 8002960:	4906      	ldr	r1, [pc, #24]	; (800297c <__NVIC_EnableIRQ+0x34>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	2001      	movs	r0, #1
 800296a:	fa00 f202 	lsl.w	r2, r0, r2
 800296e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	e000e100 	.word	0xe000e100

08002980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	6039      	str	r1, [r7, #0]
 800298a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002990:	2b00      	cmp	r3, #0
 8002992:	db0a      	blt.n	80029aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	b2da      	uxtb	r2, r3
 8002998:	490c      	ldr	r1, [pc, #48]	; (80029cc <__NVIC_SetPriority+0x4c>)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	0112      	lsls	r2, r2, #4
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	440b      	add	r3, r1
 80029a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a8:	e00a      	b.n	80029c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4908      	ldr	r1, [pc, #32]	; (80029d0 <__NVIC_SetPriority+0x50>)
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3b04      	subs	r3, #4
 80029b8:	0112      	lsls	r2, r2, #4
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	440b      	add	r3, r1
 80029be:	761a      	strb	r2, [r3, #24]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b089      	sub	sp, #36	; 0x24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f1c3 0307 	rsb	r3, r3, #7
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	bf28      	it	cs
 80029f2:	2304      	movcs	r3, #4
 80029f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3304      	adds	r3, #4
 80029fa:	2b06      	cmp	r3, #6
 80029fc:	d902      	bls.n	8002a04 <NVIC_EncodePriority+0x30>
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3b03      	subs	r3, #3
 8002a02:	e000      	b.n	8002a06 <NVIC_EncodePriority+0x32>
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43da      	mvns	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	401a      	ands	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
 8002a26:	43d9      	mvns	r1, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a2c:	4313      	orrs	r3, r2
         );
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	; 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a48:	d301      	bcc.n	8002a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4e:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <SysTick_Config+0x40>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a56:	210f      	movs	r1, #15
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f7ff ff90 	bl	8002980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <SysTick_Config+0x40>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a66:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <SysTick_Config+0x40>)
 8002a68:	2207      	movs	r2, #7
 8002a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	e000e010 	.word	0xe000e010

08002a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff ff2d 	bl	80028e4 <__NVIC_SetPriorityGrouping>
}
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b086      	sub	sp, #24
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa4:	f7ff ff42 	bl	800292c <__NVIC_GetPriorityGrouping>
 8002aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	6978      	ldr	r0, [r7, #20]
 8002ab0:	f7ff ff90 	bl	80029d4 <NVIC_EncodePriority>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5f 	bl	8002980 <__NVIC_SetPriority>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff35 	bl	8002948 <__NVIC_EnableIRQ>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffa2 	bl	8002a38 <SysTick_Config>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b085      	sub	sp, #20
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d008      	beq.n	8002b28 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e020      	b.n	8002b6a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 020e 	bic.w	r2, r2, #14
 8002b36:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	2101      	movs	r1, #1
 8002b52:	fa01 f202 	lsl.w	r2, r1, r2
 8002b56:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr

08002b74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d005      	beq.n	8002b98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	73fb      	strb	r3, [r7, #15]
 8002b96:	e051      	b.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 020e 	bic.w	r2, r2, #14
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_DMA_Abort_IT+0xd4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d029      	beq.n	8002c16 <HAL_DMA_Abort_IT+0xa2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <HAL_DMA_Abort_IT+0xd8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <HAL_DMA_Abort_IT+0x9e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_DMA_Abort_IT+0xdc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01a      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x98>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1e      	ldr	r2, [pc, #120]	; (8002c54 <HAL_DMA_Abort_IT+0xe0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d012      	beq.n	8002c06 <HAL_DMA_Abort_IT+0x92>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <HAL_DMA_Abort_IT+0xe4>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00a      	beq.n	8002c00 <HAL_DMA_Abort_IT+0x8c>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_DMA_Abort_IT+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d102      	bne.n	8002bfa <HAL_DMA_Abort_IT+0x86>
 8002bf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bf8:	e00e      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002bfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bfe:	e00b      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c04:	e008      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0a:	e005      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c10:	e002      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c12:	2310      	movs	r3, #16
 8002c14:	e000      	b.n	8002c18 <HAL_DMA_Abort_IT+0xa4>
 8002c16:	2301      	movs	r3, #1
 8002c18:	4a11      	ldr	r2, [pc, #68]	; (8002c60 <HAL_DMA_Abort_IT+0xec>)
 8002c1a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
    } 
  }
  return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40020008 	.word	0x40020008
 8002c4c:	4002001c 	.word	0x4002001c
 8002c50:	40020030 	.word	0x40020030
 8002c54:	40020044 	.word	0x40020044
 8002c58:	40020058 	.word	0x40020058
 8002c5c:	4002006c 	.word	0x4002006c
 8002c60:	40020000 	.word	0x40020000

08002c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b08b      	sub	sp, #44	; 0x2c
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c76:	e169      	b.n	8002f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	f040 8158 	bne.w	8002f46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a9a      	ldr	r2, [pc, #616]	; (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d05e      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002ca0:	4a98      	ldr	r2, [pc, #608]	; (8002f04 <HAL_GPIO_Init+0x2a0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d875      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002ca6:	4a98      	ldr	r2, [pc, #608]	; (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d058      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cac:	4a96      	ldr	r2, [pc, #600]	; (8002f08 <HAL_GPIO_Init+0x2a4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d86f      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cb2:	4a96      	ldr	r2, [pc, #600]	; (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d052      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cb8:	4a94      	ldr	r2, [pc, #592]	; (8002f0c <HAL_GPIO_Init+0x2a8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d869      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cbe:	4a94      	ldr	r2, [pc, #592]	; (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d04c      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cc4:	4a92      	ldr	r2, [pc, #584]	; (8002f10 <HAL_GPIO_Init+0x2ac>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d863      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cca:	4a92      	ldr	r2, [pc, #584]	; (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d046      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
 8002cd0:	4a90      	ldr	r2, [pc, #576]	; (8002f14 <HAL_GPIO_Init+0x2b0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d85d      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cd6:	2b12      	cmp	r3, #18
 8002cd8:	d82a      	bhi.n	8002d30 <HAL_GPIO_Init+0xcc>
 8002cda:	2b12      	cmp	r3, #18
 8002cdc:	d859      	bhi.n	8002d92 <HAL_GPIO_Init+0x12e>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <HAL_GPIO_Init+0x80>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002d5f 	.word	0x08002d5f
 8002ce8:	08002d39 	.word	0x08002d39
 8002cec:	08002d4b 	.word	0x08002d4b
 8002cf0:	08002d8d 	.word	0x08002d8d
 8002cf4:	08002d93 	.word	0x08002d93
 8002cf8:	08002d93 	.word	0x08002d93
 8002cfc:	08002d93 	.word	0x08002d93
 8002d00:	08002d93 	.word	0x08002d93
 8002d04:	08002d93 	.word	0x08002d93
 8002d08:	08002d93 	.word	0x08002d93
 8002d0c:	08002d93 	.word	0x08002d93
 8002d10:	08002d93 	.word	0x08002d93
 8002d14:	08002d93 	.word	0x08002d93
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d93 	.word	0x08002d93
 8002d20:	08002d93 	.word	0x08002d93
 8002d24:	08002d93 	.word	0x08002d93
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d55 	.word	0x08002d55
 8002d30:	4a79      	ldr	r2, [pc, #484]	; (8002f18 <HAL_GPIO_Init+0x2b4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d36:	e02c      	b.n	8002d92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	623b      	str	r3, [r7, #32]
          break;
 8002d3e:	e029      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	3304      	adds	r3, #4
 8002d46:	623b      	str	r3, [r7, #32]
          break;
 8002d48:	e024      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	3308      	adds	r3, #8
 8002d50:	623b      	str	r3, [r7, #32]
          break;
 8002d52:	e01f      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	623b      	str	r3, [r7, #32]
          break;
 8002d5c:	e01a      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d102      	bne.n	8002d6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d66:	2304      	movs	r3, #4
 8002d68:	623b      	str	r3, [r7, #32]
          break;
 8002d6a:	e013      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d105      	bne.n	8002d80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d74:	2308      	movs	r3, #8
 8002d76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	611a      	str	r2, [r3, #16]
          break;
 8002d7e:	e009      	b.n	8002d94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d80:	2308      	movs	r3, #8
 8002d82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69fa      	ldr	r2, [r7, #28]
 8002d88:	615a      	str	r2, [r3, #20]
          break;
 8002d8a:	e003      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e000      	b.n	8002d94 <HAL_GPIO_Init+0x130>
          break;
 8002d92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2bff      	cmp	r3, #255	; 0xff
 8002d98:	d801      	bhi.n	8002d9e <HAL_GPIO_Init+0x13a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_Init+0x13e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3304      	adds	r3, #4
 8002da2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d802      	bhi.n	8002db0 <HAL_GPIO_Init+0x14c>
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	e002      	b.n	8002db6 <HAL_GPIO_Init+0x152>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	3b08      	subs	r3, #8
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 80b1 	beq.w	8002f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002de4:	4b4d      	ldr	r3, [pc, #308]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	4a4c      	ldr	r2, [pc, #304]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6193      	str	r3, [r2, #24]
 8002df0:	4b4a      	ldr	r3, [pc, #296]	; (8002f1c <HAL_GPIO_Init+0x2b8>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a40      	ldr	r2, [pc, #256]	; (8002f24 <HAL_GPIO_Init+0x2c0>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d013      	beq.n	8002e50 <HAL_GPIO_Init+0x1ec>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3f      	ldr	r2, [pc, #252]	; (8002f28 <HAL_GPIO_Init+0x2c4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00d      	beq.n	8002e4c <HAL_GPIO_Init+0x1e8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3e      	ldr	r2, [pc, #248]	; (8002f2c <HAL_GPIO_Init+0x2c8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <HAL_GPIO_Init+0x1e4>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3d      	ldr	r2, [pc, #244]	; (8002f30 <HAL_GPIO_Init+0x2cc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d101      	bne.n	8002e44 <HAL_GPIO_Init+0x1e0>
 8002e40:	2303      	movs	r3, #3
 8002e42:	e006      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e004      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e000      	b.n	8002e52 <HAL_GPIO_Init+0x1ee>
 8002e50:	2300      	movs	r3, #0
 8002e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e54:	f002 0203 	and.w	r2, r2, #3
 8002e58:	0092      	lsls	r2, r2, #2
 8002e5a:	4093      	lsls	r3, r2
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e62:	492f      	ldr	r1, [pc, #188]	; (8002f20 <HAL_GPIO_Init+0x2bc>)
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	3302      	adds	r3, #2
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	492c      	ldr	r1, [pc, #176]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	608b      	str	r3, [r1, #8]
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4928      	ldr	r1, [pc, #160]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ea4:	4b23      	ldr	r3, [pc, #140]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4922      	ldr	r1, [pc, #136]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	60cb      	str	r3, [r1, #12]
 8002eb0:	e006      	b.n	8002ec0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002eb2:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	491e      	ldr	r1, [pc, #120]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4918      	ldr	r1, [pc, #96]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	604b      	str	r3, [r1, #4]
 8002ed8:	e006      	b.n	8002ee8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002eda:	4b16      	ldr	r3, [pc, #88]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	4914      	ldr	r1, [pc, #80]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ef4:	4b0f      	ldr	r3, [pc, #60]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	490e      	ldr	r1, [pc, #56]	; (8002f34 <HAL_GPIO_Init+0x2d0>)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
 8002f00:	e021      	b.n	8002f46 <HAL_GPIO_Init+0x2e2>
 8002f02:	bf00      	nop
 8002f04:	10320000 	.word	0x10320000
 8002f08:	10310000 	.word	0x10310000
 8002f0c:	10220000 	.word	0x10220000
 8002f10:	10210000 	.word	0x10210000
 8002f14:	10120000 	.word	0x10120000
 8002f18:	10110000 	.word	0x10110000
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40010800 	.word	0x40010800
 8002f28:	40010c00 	.word	0x40010c00
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f38:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4909      	ldr	r1, [pc, #36]	; (8002f68 <HAL_GPIO_Init+0x304>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	3301      	adds	r3, #1
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f47f ae8e 	bne.w	8002c78 <HAL_GPIO_Init+0x14>
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	372c      	adds	r7, #44	; 0x2c
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	40010400 	.word	0x40010400

08002f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f7c:	787b      	ldrb	r3, [r7, #1]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f82:	887a      	ldrh	r2, [r7, #2]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f88:	e003      	b.n	8002f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f8a:	887b      	ldrh	r3, [r7, #2]
 8002f8c:	041a      	lsls	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e272      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8087 	beq.w	80030ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fbc:	4b92      	ldr	r3, [pc, #584]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002fc8:	4b8f      	ldr	r3, [pc, #572]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 030c 	and.w	r3, r3, #12
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d112      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5e>
 8002fd4:	4b8c      	ldr	r3, [pc, #560]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fe0:	d10b      	bne.n	8002ffa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe2:	4b89      	ldr	r3, [pc, #548]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d06c      	beq.n	80030c8 <HAL_RCC_OscConfig+0x12c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d168      	bne.n	80030c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e24c      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003002:	d106      	bne.n	8003012 <HAL_RCC_OscConfig+0x76>
 8003004:	4b80      	ldr	r3, [pc, #512]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a7f      	ldr	r2, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e02e      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10c      	bne.n	8003034 <HAL_RCC_OscConfig+0x98>
 800301a:	4b7b      	ldr	r3, [pc, #492]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7a      	ldr	r2, [pc, #488]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003020:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	4b78      	ldr	r3, [pc, #480]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a77      	ldr	r2, [pc, #476]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800302c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	e01d      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800303c:	d10c      	bne.n	8003058 <HAL_RCC_OscConfig+0xbc>
 800303e:	4b72      	ldr	r3, [pc, #456]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a71      	ldr	r2, [pc, #452]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b6f      	ldr	r3, [pc, #444]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a6e      	ldr	r2, [pc, #440]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	e00b      	b.n	8003070 <HAL_RCC_OscConfig+0xd4>
 8003058:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a6a      	ldr	r2, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800305e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a67      	ldr	r2, [pc, #412]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800306a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d013      	beq.n	80030a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fe6e 	bl	8001d58 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003080:	f7fe fe6a 	bl	8001d58 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b64      	cmp	r3, #100	; 0x64
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e200      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	4b5d      	ldr	r3, [pc, #372]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f0      	beq.n	8003080 <HAL_RCC_OscConfig+0xe4>
 800309e:	e014      	b.n	80030ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a0:	f7fe fe5a 	bl	8001d58 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030a8:	f7fe fe56 	bl	8001d58 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b64      	cmp	r3, #100	; 0x64
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e1ec      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	4b53      	ldr	r3, [pc, #332]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x10c>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d063      	beq.n	800319e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00b      	beq.n	80030fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80030e2:	4b49      	ldr	r3, [pc, #292]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d11c      	bne.n	8003128 <HAL_RCC_OscConfig+0x18c>
 80030ee:	4b46      	ldr	r3, [pc, #280]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d116      	bne.n	8003128 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030fa:	4b43      	ldr	r3, [pc, #268]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_RCC_OscConfig+0x176>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d001      	beq.n	8003112 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e1c0      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003112:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4939      	ldr	r1, [pc, #228]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003122:	4313      	orrs	r3, r2
 8003124:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003126:	e03a      	b.n	800319e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d020      	beq.n	8003172 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003130:	4b36      	ldr	r3, [pc, #216]	; (800320c <HAL_RCC_OscConfig+0x270>)
 8003132:	2201      	movs	r2, #1
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7fe fe0f 	bl	8001d58 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800313e:	f7fe fe0b 	bl	8001d58 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e1a1      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	4b2d      	ldr	r3, [pc, #180]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f0      	beq.n	800313e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800315c:	4b2a      	ldr	r3, [pc, #168]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4927      	ldr	r1, [pc, #156]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 800316c:	4313      	orrs	r3, r2
 800316e:	600b      	str	r3, [r1, #0]
 8003170:	e015      	b.n	800319e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_OscConfig+0x270>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7fe fdee 	bl	8001d58 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003180:	f7fe fdea 	bl	8001d58 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e180      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d03a      	beq.n	8003220 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_RCC_OscConfig+0x274>)
 80031b4:	2201      	movs	r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fdce 	bl	8001d58 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c0:	f7fe fdca 	bl	8001d58 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e160      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80031de:	2001      	movs	r0, #1
 80031e0:	f000 face 	bl	8003780 <RCC_Delay>
 80031e4:	e01c      	b.n	8003220 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e6:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <HAL_RCC_OscConfig+0x274>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7fe fdb4 	bl	8001d58 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f2:	e00f      	b.n	8003214 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe fdb0 	bl	8001d58 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d908      	bls.n	8003214 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e146      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	42420000 	.word	0x42420000
 8003210:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003214:	4b92      	ldr	r3, [pc, #584]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e9      	bne.n	80031f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 80a6 	beq.w	800337a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b8b      	ldr	r3, [pc, #556]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10d      	bne.n	800325a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b88      	ldr	r3, [pc, #544]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a87      	ldr	r2, [pc, #540]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	61d3      	str	r3, [r2, #28]
 800324a:	4b85      	ldr	r3, [pc, #532]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003256:	2301      	movs	r3, #1
 8003258:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b82      	ldr	r3, [pc, #520]	; (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d118      	bne.n	8003298 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003266:	4b7f      	ldr	r3, [pc, #508]	; (8003464 <HAL_RCC_OscConfig+0x4c8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a7e      	ldr	r2, [pc, #504]	; (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7fe fd71 	bl	8001d58 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327a:	f7fe fd6d 	bl	8001d58 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b64      	cmp	r3, #100	; 0x64
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e103      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328c:	4b75      	ldr	r3, [pc, #468]	; (8003464 <HAL_RCC_OscConfig+0x4c8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x312>
 80032a0:	4b6f      	ldr	r3, [pc, #444]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	4a6e      	ldr	r2, [pc, #440]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6213      	str	r3, [r2, #32]
 80032ac:	e02d      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x334>
 80032b6:	4b6a      	ldr	r3, [pc, #424]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	4a69      	ldr	r2, [pc, #420]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6213      	str	r3, [r2, #32]
 80032c2:	4b67      	ldr	r3, [pc, #412]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	4a66      	ldr	r2, [pc, #408]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6213      	str	r3, [r2, #32]
 80032ce:	e01c      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCC_OscConfig+0x356>
 80032d8:	4b61      	ldr	r3, [pc, #388]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032da:	6a1b      	ldr	r3, [r3, #32]
 80032dc:	4a60      	ldr	r2, [pc, #384]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	6213      	str	r3, [r2, #32]
 80032e4:	4b5e      	ldr	r3, [pc, #376]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a5d      	ldr	r2, [pc, #372]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6213      	str	r3, [r2, #32]
 80032f0:	e00b      	b.n	800330a <HAL_RCC_OscConfig+0x36e>
 80032f2:	4b5b      	ldr	r3, [pc, #364]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a5a      	ldr	r2, [pc, #360]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6213      	str	r3, [r2, #32]
 80032fe:	4b58      	ldr	r3, [pc, #352]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4a57      	ldr	r2, [pc, #348]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d015      	beq.n	800333e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003312:	f7fe fd21 	bl	8001d58 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fe fd1d 	bl	8001d58 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e0b1      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	4b4b      	ldr	r3, [pc, #300]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ee      	beq.n	800331a <HAL_RCC_OscConfig+0x37e>
 800333c:	e014      	b.n	8003368 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800333e:	f7fe fd0b 	bl	8001d58 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fe fd07 	bl	8001d58 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e09b      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800335c:	4b40      	ldr	r3, [pc, #256]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1ee      	bne.n	8003346 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003368:	7dfb      	ldrb	r3, [r7, #23]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336e:	4b3c      	ldr	r3, [pc, #240]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4a3b      	ldr	r2, [pc, #236]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003378:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 8087 	beq.w	8003492 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003384:	4b36      	ldr	r3, [pc, #216]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b08      	cmp	r3, #8
 800338e:	d061      	beq.n	8003454 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d146      	bne.n	8003426 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003398:	4b33      	ldr	r3, [pc, #204]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339e:	f7fe fcdb 	bl	8001d58 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe fcd7 	bl	8001d58 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e06d      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b8:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f0      	bne.n	80033a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033cc:	d108      	bne.n	80033e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80033ce:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4921      	ldr	r1, [pc, #132]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e0:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a19      	ldr	r1, [r3, #32]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	430b      	orrs	r3, r1
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe fcab 	bl	8001d58 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003406:	f7fe fca7 	bl	8001d58 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e03d      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x46a>
 8003424:	e035      	b.n	8003492 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_RCC_OscConfig+0x4cc>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fc94 	bl	8001d58 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe fc90 	bl	8001d58 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e026      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_OscConfig+0x4c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x498>
 8003452:	e01e      	b.n	8003492 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e019      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
 8003460:	40021000 	.word	0x40021000
 8003464:	40007000 	.word	0x40007000
 8003468:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_OscConfig+0x500>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	429a      	cmp	r2, r3
 800347e:	d106      	bne.n	800348e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000

080034a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e0d0      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b6a      	ldr	r3, [pc, #424]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d910      	bls.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c2:	4b67      	ldr	r3, [pc, #412]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f023 0207 	bic.w	r2, r3, #7
 80034ca:	4965      	ldr	r1, [pc, #404]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0b8      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d020      	beq.n	8003532 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034fc:	4b59      	ldr	r3, [pc, #356]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4a58      	ldr	r2, [pc, #352]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003506:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a52      	ldr	r2, [pc, #328]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800351e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b50      	ldr	r3, [pc, #320]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	494d      	ldr	r1, [pc, #308]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800352e:	4313      	orrs	r3, r2
 8003530:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d040      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b47      	ldr	r3, [pc, #284]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d115      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e07f      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e073      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356e:	4b3d      	ldr	r3, [pc, #244]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06b      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800357e:	4b39      	ldr	r3, [pc, #228]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f023 0203 	bic.w	r2, r3, #3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	4936      	ldr	r1, [pc, #216]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003590:	f7fe fbe2 	bl	8001d58 <HAL_GetTick>
 8003594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003596:	e00a      	b.n	80035ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003598:	f7fe fbde 	bl	8001d58 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e053      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	4b2d      	ldr	r3, [pc, #180]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 020c 	and.w	r2, r3, #12
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	429a      	cmp	r2, r3
 80035be:	d1eb      	bne.n	8003598 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035c0:	4b27      	ldr	r3, [pc, #156]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d210      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ce:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 0207 	bic.w	r2, r3, #7
 80035d6:	4922      	ldr	r1, [pc, #136]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	4313      	orrs	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d001      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e032      	b.n	8003656 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4916      	ldr	r1, [pc, #88]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800360a:	4313      	orrs	r3, r2
 800360c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	490e      	ldr	r1, [pc, #56]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 800362a:	4313      	orrs	r3, r2
 800362c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362e:	f000 f821 	bl	8003674 <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_ClockConfig+0x1c4>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	490a      	ldr	r1, [pc, #40]	; (8003668 <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <HAL_RCC_ClockConfig+0x1cc>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <HAL_RCC_ClockConfig+0x1d0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7fe fb40 	bl	8001cd4 <HAL_InitTick>

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40022000 	.word	0x40022000
 8003664:	40021000 	.word	0x40021000
 8003668:	0800802c 	.word	0x0800802c
 800366c:	20000014 	.word	0x20000014
 8003670:	20000018 	.word	0x20000018

08003674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	2300      	movs	r3, #0
 8003680:	60bb      	str	r3, [r7, #8]
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800368e:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <HAL_RCC_GetSysClockFreq+0x94>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b04      	cmp	r3, #4
 800369c:	d002      	beq.n	80036a4 <HAL_RCC_GetSysClockFreq+0x30>
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d003      	beq.n	80036aa <HAL_RCC_GetSysClockFreq+0x36>
 80036a2:	e027      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036a6:	613b      	str	r3, [r7, #16]
      break;
 80036a8:	e027      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	0c9b      	lsrs	r3, r3, #18
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	4a17      	ldr	r2, [pc, #92]	; (8003710 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036b4:	5cd3      	ldrb	r3, [r2, r3]
 80036b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <HAL_RCC_GetSysClockFreq+0x94>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0c5b      	lsrs	r3, r3, #17
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	4a11      	ldr	r2, [pc, #68]	; (8003714 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0d      	ldr	r2, [pc, #52]	; (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036d6:	fb03 f202 	mul.w	r2, r3, r2
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e004      	b.n	80036ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <HAL_RCC_GetSysClockFreq+0xa4>)
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	613b      	str	r3, [r7, #16]
      break;
 80036f2:	e002      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <HAL_RCC_GetSysClockFreq+0x98>)
 80036f6:	613b      	str	r3, [r7, #16]
      break;
 80036f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036fa:	693b      	ldr	r3, [r7, #16]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	bc80      	pop	{r7}
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000
 800370c:	007a1200 	.word	0x007a1200
 8003710:	08008044 	.word	0x08008044
 8003714:	08008054 	.word	0x08008054
 8003718:	003d0900 	.word	0x003d0900

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b02      	ldr	r3, [pc, #8]	; (800372c <HAL_RCC_GetHCLKFreq+0x10>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	20000014 	.word	0x20000014

08003730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003734:	f7ff fff2 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003738:	4602      	mov	r2, r0
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	4903      	ldr	r1, [pc, #12]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003746:	5ccb      	ldrb	r3, [r1, r3]
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	0800803c 	.word	0x0800803c

08003758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800375c:	f7ff ffde 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	0adb      	lsrs	r3, r3, #11
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	4903      	ldr	r1, [pc, #12]	; (800377c <HAL_RCC_GetPCLK2Freq+0x24>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	0800803c 	.word	0x0800803c

08003780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <RCC_Delay+0x34>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0a      	ldr	r2, [pc, #40]	; (80037b8 <RCC_Delay+0x38>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0a5b      	lsrs	r3, r3, #9
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800379c:	bf00      	nop
  }
  while (Delay --);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1e5a      	subs	r2, r3, #1
 80037a2:	60fa      	str	r2, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f9      	bne.n	800379c <RCC_Delay+0x1c>
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	20000014 	.word	0x20000014
 80037b8:	10624dd3 	.word	0x10624dd3

080037bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e042      	b.n	8003854 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fe f8e2 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2224      	movs	r2, #36	; 0x24
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 fd63 	bl	80042cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003814:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003824:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003834:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b20      	cmp	r3, #32
 800387a:	d175      	bne.n	8003968 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_UART_Transmit+0x2c>
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e06e      	b.n	800396a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2221      	movs	r2, #33	; 0x21
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800389a:	f7fe fa5d 	bl	8001d58 <HAL_GetTick>
 800389e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	88fa      	ldrh	r2, [r7, #6]
 80038aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b4:	d108      	bne.n	80038c8 <HAL_UART_Transmit+0x6c>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d104      	bne.n	80038c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	e003      	b.n	80038d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038d0:	e02e      	b.n	8003930 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 fb01 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e03a      	b.n	800396a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10b      	bne.n	8003912 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	3302      	adds	r3, #2
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e007      	b.n	8003922 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	781a      	ldrb	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3301      	adds	r3, #1
 8003920:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1cb      	bne.n	80038d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2140      	movs	r1, #64	; 0x40
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 facd 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e006      	b.n	800396a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	4618      	mov	r0, r3
 800396c:	3720      	adds	r7, #32
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b0ba      	sub	sp, #232	; 0xe8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800399a:	2300      	movs	r3, #0
 800399c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80039b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_UART_IRQHandler+0x66>
 80039c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ca:	f003 0320 	and.w	r3, r3, #32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fbbc 	bl	8004150 <UART_Receive_IT>
      return;
 80039d8:	e25b      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80de 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x22c>
 80039e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d106      	bne.n	80039fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 80d1 	beq.w	8003ba0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xae>
 8003a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0201 	orr.w	r2, r3, #1
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_UART_IRQHandler+0xd2>
 8003a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0202 	orr.w	r2, r3, #2
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_UART_IRQHandler+0xf6>
 8003a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	f043 0204 	orr.w	r2, r3, #4
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d011      	beq.n	8003a9a <HAL_UART_IRQHandler+0x126>
 8003a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f043 0208 	orr.w	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 81f2 	beq.w	8003e88 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x14e>
 8003ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fb47 	bl	8004150 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_UART_IRQHandler+0x17a>
 8003ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04f      	beq.n	8003b8e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa51 	bl	8003f96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d041      	beq.n	8003b86 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3314      	adds	r3, #20
 8003b08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003b10:	e853 3f00 	ldrex	r3, [r3]
 8003b14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003b18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3314      	adds	r3, #20
 8003b2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1d9      	bne.n	8003b02 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d013      	beq.n	8003b7e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5a:	4a7e      	ldr	r2, [pc, #504]	; (8003d54 <HAL_UART_IRQHandler+0x3e0>)
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f806 	bl	8002b74 <HAL_DMA_Abort_IT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b78:	4610      	mov	r0, r2
 8003b7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	e00e      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f99c 	bl	8003ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b84:	e00a      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 f998 	bl	8003ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b8c:	e006      	b.n	8003b9c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f994 	bl	8003ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b9a:	e175      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	bf00      	nop
    return;
 8003b9e:	e173      	b.n	8003e88 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 814f 	bne.w	8003e48 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	f003 0310 	and.w	r3, r3, #16
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8148 	beq.w	8003e48 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8141 	beq.w	8003e48 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80b6 	beq.w	8003d58 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 8145 	beq.w	8003e8c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	f080 813e 	bcs.w	8003e8c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003c16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	f000 8088 	beq.w	8003d34 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c50:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c60:	e841 2300 	strex	r3, r2, [r1]
 8003c64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1d9      	bne.n	8003c24 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3314      	adds	r3, #20
 8003c76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c82:	f023 0301 	bic.w	r3, r3, #1
 8003c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3314      	adds	r3, #20
 8003c90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e1      	bne.n	8003c70 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	3314      	adds	r3, #20
 8003ccc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003cd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003cd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003cd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e3      	bne.n	8003cac <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d04:	f023 0310 	bic.w	r3, r3, #16
 8003d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003d16:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d18:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d1e:	e841 2300 	strex	r3, r2, [r1]
 8003d22:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1e3      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe fee5 	bl	8002afe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2202      	movs	r2, #2
 8003d38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8bf 	bl	8003ece <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d50:	e09c      	b.n	8003e8c <HAL_UART_IRQHandler+0x518>
 8003d52:	bf00      	nop
 8003d54:	0800405b 	.word	0x0800405b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 808e 	beq.w	8003e90 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 8089 	beq.w	8003e90 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	e853 3f00 	ldrex	r3, [r3]
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003da2:	647a      	str	r2, [r7, #68]	; 0x44
 8003da4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003da8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e3      	bne.n	8003d7e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	623b      	str	r3, [r7, #32]
   return(result);
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	3314      	adds	r3, #20
 8003dd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dda:	633a      	str	r2, [r7, #48]	; 0x30
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e3      	bne.n	8003db6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0310 	bic.w	r3, r3, #16
 8003e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003e20:	61fa      	str	r2, [r7, #28]
 8003e22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	69b9      	ldr	r1, [r7, #24]
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e3      	bne.n	8003dfc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f844 	bl	8003ece <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e46:	e023      	b.n	8003e90 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d009      	beq.n	8003e68 <HAL_UART_IRQHandler+0x4f4>
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f90e 	bl	8004082 <UART_Transmit_IT>
    return;
 8003e66:	e014      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <HAL_UART_IRQHandler+0x51e>
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f94d 	bl	8004120 <UART_EndTransmit_IT>
    return;
 8003e86:	e004      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e88:	bf00      	nop
 8003e8a:	e002      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e8c:	bf00      	nop
 8003e8e:	e000      	b.n	8003e92 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e90:	bf00      	nop
  }
}
 8003e92:	37e8      	adds	r7, #232	; 0xe8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	e03b      	b.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d037      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efe:	f7fd ff2b 	bl	8001d58 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d302      	bcc.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e03a      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d023      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b80      	cmp	r3, #128	; 0x80
 8003f2a:	d020      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d01d      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d116      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f81d 	bl	8003f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e00f      	b.n	8003f8e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	4013      	ands	r3, r2
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	bf0c      	ite	eq
 8003f7e:	2301      	moveq	r3, #1
 8003f80:	2300      	movne	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d0b4      	beq.n	8003ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b095      	sub	sp, #84	; 0x54
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fbe:	643a      	str	r2, [r7, #64]	; 0x40
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e5      	bne.n	8003f9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3314      	adds	r3, #20
 8003fd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3314      	adds	r3, #20
 8003ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ffa:	e841 2300 	strex	r3, r2, [r1]
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1e5      	bne.n	8003fd2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400a:	2b01      	cmp	r3, #1
 800400c:	d119      	bne.n	8004042 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	330c      	adds	r3, #12
 8004014:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	e853 3f00 	ldrex	r3, [r3]
 800401c:	60bb      	str	r3, [r7, #8]
   return(result);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f023 0310 	bic.w	r3, r3, #16
 8004024:	647b      	str	r3, [r7, #68]	; 0x44
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800402e:	61ba      	str	r2, [r7, #24]
 8004030:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004032:	6979      	ldr	r1, [r7, #20]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	e841 2300 	strex	r3, r2, [r1]
 800403a:	613b      	str	r3, [r7, #16]
   return(result);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1e5      	bne.n	800400e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004050:	bf00      	nop
 8004052:	3754      	adds	r7, #84	; 0x54
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff ff21 	bl	8003ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b21      	cmp	r3, #33	; 0x21
 8004094:	d13e      	bne.n	8004114 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409e:	d114      	bne.n	80040ca <UART_Transmit_IT+0x48>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d110      	bne.n	80040ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	881b      	ldrh	r3, [r3, #0]
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	1c9a      	adds	r2, r3, #2
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	621a      	str	r2, [r3, #32]
 80040c8:	e008      	b.n	80040dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	1c59      	adds	r1, r3, #1
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6211      	str	r1, [r2, #32]
 80040d4:	781a      	ldrb	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	4619      	mov	r1, r3
 80040ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10f      	bne.n	8004110 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e000      	b.n	8004116 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004136:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fea9 	bl	8003e98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08c      	sub	sp, #48	; 0x30
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b22      	cmp	r3, #34	; 0x22
 8004162:	f040 80ae 	bne.w	80042c2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	d117      	bne.n	80041a0 <UART_Receive_IT+0x50>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d113      	bne.n	80041a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	b29a      	uxth	r2, r3
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	1c9a      	adds	r2, r3, #2
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	629a      	str	r2, [r3, #40]	; 0x28
 800419e:	e026      	b.n	80041ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80041a6:	2300      	movs	r3, #0
 80041a8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b2:	d007      	beq.n	80041c4 <UART_Receive_IT+0x74>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <UART_Receive_IT+0x82>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d106      	bne.n	80041d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	e008      	b.n	80041e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	4619      	mov	r1, r3
 80041fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d15d      	bne.n	80042be <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0220 	bic.w	r2, r2, #32
 8004210:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004220:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	2b01      	cmp	r3, #1
 8004246:	d135      	bne.n	80042b4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	330c      	adds	r3, #12
 8004254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	613b      	str	r3, [r7, #16]
   return(result);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f023 0310 	bic.w	r3, r3, #16
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	623a      	str	r2, [r7, #32]
 8004270:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004272:	69f9      	ldr	r1, [r7, #28]
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	61bb      	str	r3, [r7, #24]
   return(result);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e5      	bne.n	800424e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0310 	and.w	r3, r3, #16
 800428c:	2b10      	cmp	r3, #16
 800428e:	d10a      	bne.n	80042a6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042aa:	4619      	mov	r1, r3
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff fe0e 	bl	8003ece <HAL_UARTEx_RxEventCallback>
 80042b2:	e002      	b.n	80042ba <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff fdf8 	bl	8003eaa <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e002      	b.n	80042c4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	e000      	b.n	80042c4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80042c2:	2302      	movs	r3, #2
  }
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3730      	adds	r7, #48	; 0x30
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004306:	f023 030c 	bic.w	r3, r3, #12
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	430b      	orrs	r3, r1
 8004312:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699a      	ldr	r2, [r3, #24]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a2c      	ldr	r2, [pc, #176]	; (80043e0 <UART_SetConfig+0x114>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d103      	bne.n	800433c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004334:	f7ff fa10 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	e002      	b.n	8004342 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800433c:	f7ff f9f8 	bl	8003730 <HAL_RCC_GetPCLK1Freq>
 8004340:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009a      	lsls	r2, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <UART_SetConfig+0x118>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	095b      	lsrs	r3, r3, #5
 8004360:	0119      	lsls	r1, r3, #4
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009a      	lsls	r2, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	fbb2 f2f3 	udiv	r2, r2, r3
 8004378:	4b1a      	ldr	r3, [pc, #104]	; (80043e4 <UART_SetConfig+0x118>)
 800437a:	fba3 0302 	umull	r0, r3, r3, r2
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	2064      	movs	r0, #100	; 0x64
 8004382:	fb00 f303 	mul.w	r3, r0, r3
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	3332      	adds	r3, #50	; 0x32
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <UART_SetConfig+0x118>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004398:	4419      	add	r1, r3
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009a      	lsls	r2, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b0:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <UART_SetConfig+0x118>)
 80043b2:	fba3 0302 	umull	r0, r3, r3, r2
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2064      	movs	r0, #100	; 0x64
 80043ba:	fb00 f303 	mul.w	r3, r0, r3
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	3332      	adds	r3, #50	; 0x32
 80043c4:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <UART_SetConfig+0x118>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	095b      	lsrs	r3, r3, #5
 80043cc:	f003 020f 	and.w	r2, r3, #15
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	440a      	add	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80043d8:	bf00      	nop
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40013800 	.word	0x40013800
 80043e4:	51eb851f 	.word	0x51eb851f

080043e8 <malloc>:
 80043e8:	4b02      	ldr	r3, [pc, #8]	; (80043f4 <malloc+0xc>)
 80043ea:	4601      	mov	r1, r0
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f000 b82b 	b.w	8004448 <_malloc_r>
 80043f2:	bf00      	nop
 80043f4:	20000078 	.word	0x20000078

080043f8 <free>:
 80043f8:	4b02      	ldr	r3, [pc, #8]	; (8004404 <free+0xc>)
 80043fa:	4601      	mov	r1, r0
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	f001 bd3f 	b.w	8005e80 <_free_r>
 8004402:	bf00      	nop
 8004404:	20000078 	.word	0x20000078

08004408 <sbrk_aligned>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4e0e      	ldr	r6, [pc, #56]	; (8004444 <sbrk_aligned+0x3c>)
 800440c:	460c      	mov	r4, r1
 800440e:	6831      	ldr	r1, [r6, #0]
 8004410:	4605      	mov	r5, r0
 8004412:	b911      	cbnz	r1, 800441a <sbrk_aligned+0x12>
 8004414:	f000 fe68 	bl	80050e8 <_sbrk_r>
 8004418:	6030      	str	r0, [r6, #0]
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 fe63 	bl	80050e8 <_sbrk_r>
 8004422:	1c43      	adds	r3, r0, #1
 8004424:	d00a      	beq.n	800443c <sbrk_aligned+0x34>
 8004426:	1cc4      	adds	r4, r0, #3
 8004428:	f024 0403 	bic.w	r4, r4, #3
 800442c:	42a0      	cmp	r0, r4
 800442e:	d007      	beq.n	8004440 <sbrk_aligned+0x38>
 8004430:	1a21      	subs	r1, r4, r0
 8004432:	4628      	mov	r0, r5
 8004434:	f000 fe58 	bl	80050e8 <_sbrk_r>
 8004438:	3001      	adds	r0, #1
 800443a:	d101      	bne.n	8004440 <sbrk_aligned+0x38>
 800443c:	f04f 34ff 	mov.w	r4, #4294967295
 8004440:	4620      	mov	r0, r4
 8004442:	bd70      	pop	{r4, r5, r6, pc}
 8004444:	200002f0 	.word	0x200002f0

08004448 <_malloc_r>:
 8004448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800444c:	1ccd      	adds	r5, r1, #3
 800444e:	f025 0503 	bic.w	r5, r5, #3
 8004452:	3508      	adds	r5, #8
 8004454:	2d0c      	cmp	r5, #12
 8004456:	bf38      	it	cc
 8004458:	250c      	movcc	r5, #12
 800445a:	2d00      	cmp	r5, #0
 800445c:	4607      	mov	r7, r0
 800445e:	db01      	blt.n	8004464 <_malloc_r+0x1c>
 8004460:	42a9      	cmp	r1, r5
 8004462:	d905      	bls.n	8004470 <_malloc_r+0x28>
 8004464:	230c      	movs	r3, #12
 8004466:	2600      	movs	r6, #0
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4630      	mov	r0, r6
 800446c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004470:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004544 <_malloc_r+0xfc>
 8004474:	f000 f868 	bl	8004548 <__malloc_lock>
 8004478:	f8d8 3000 	ldr.w	r3, [r8]
 800447c:	461c      	mov	r4, r3
 800447e:	bb5c      	cbnz	r4, 80044d8 <_malloc_r+0x90>
 8004480:	4629      	mov	r1, r5
 8004482:	4638      	mov	r0, r7
 8004484:	f7ff ffc0 	bl	8004408 <sbrk_aligned>
 8004488:	1c43      	adds	r3, r0, #1
 800448a:	4604      	mov	r4, r0
 800448c:	d155      	bne.n	800453a <_malloc_r+0xf2>
 800448e:	f8d8 4000 	ldr.w	r4, [r8]
 8004492:	4626      	mov	r6, r4
 8004494:	2e00      	cmp	r6, #0
 8004496:	d145      	bne.n	8004524 <_malloc_r+0xdc>
 8004498:	2c00      	cmp	r4, #0
 800449a:	d048      	beq.n	800452e <_malloc_r+0xe6>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	4631      	mov	r1, r6
 80044a0:	4638      	mov	r0, r7
 80044a2:	eb04 0903 	add.w	r9, r4, r3
 80044a6:	f000 fe1f 	bl	80050e8 <_sbrk_r>
 80044aa:	4581      	cmp	r9, r0
 80044ac:	d13f      	bne.n	800452e <_malloc_r+0xe6>
 80044ae:	6821      	ldr	r1, [r4, #0]
 80044b0:	4638      	mov	r0, r7
 80044b2:	1a6d      	subs	r5, r5, r1
 80044b4:	4629      	mov	r1, r5
 80044b6:	f7ff ffa7 	bl	8004408 <sbrk_aligned>
 80044ba:	3001      	adds	r0, #1
 80044bc:	d037      	beq.n	800452e <_malloc_r+0xe6>
 80044be:	6823      	ldr	r3, [r4, #0]
 80044c0:	442b      	add	r3, r5
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	f8d8 3000 	ldr.w	r3, [r8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d038      	beq.n	800453e <_malloc_r+0xf6>
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	42a2      	cmp	r2, r4
 80044d0:	d12b      	bne.n	800452a <_malloc_r+0xe2>
 80044d2:	2200      	movs	r2, #0
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	e00f      	b.n	80044f8 <_malloc_r+0xb0>
 80044d8:	6822      	ldr	r2, [r4, #0]
 80044da:	1b52      	subs	r2, r2, r5
 80044dc:	d41f      	bmi.n	800451e <_malloc_r+0xd6>
 80044de:	2a0b      	cmp	r2, #11
 80044e0:	d917      	bls.n	8004512 <_malloc_r+0xca>
 80044e2:	1961      	adds	r1, r4, r5
 80044e4:	42a3      	cmp	r3, r4
 80044e6:	6025      	str	r5, [r4, #0]
 80044e8:	bf18      	it	ne
 80044ea:	6059      	strne	r1, [r3, #4]
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	bf08      	it	eq
 80044f0:	f8c8 1000 	streq.w	r1, [r8]
 80044f4:	5162      	str	r2, [r4, r5]
 80044f6:	604b      	str	r3, [r1, #4]
 80044f8:	4638      	mov	r0, r7
 80044fa:	f104 060b 	add.w	r6, r4, #11
 80044fe:	f000 f829 	bl	8004554 <__malloc_unlock>
 8004502:	f026 0607 	bic.w	r6, r6, #7
 8004506:	1d23      	adds	r3, r4, #4
 8004508:	1af2      	subs	r2, r6, r3
 800450a:	d0ae      	beq.n	800446a <_malloc_r+0x22>
 800450c:	1b9b      	subs	r3, r3, r6
 800450e:	50a3      	str	r3, [r4, r2]
 8004510:	e7ab      	b.n	800446a <_malloc_r+0x22>
 8004512:	42a3      	cmp	r3, r4
 8004514:	6862      	ldr	r2, [r4, #4]
 8004516:	d1dd      	bne.n	80044d4 <_malloc_r+0x8c>
 8004518:	f8c8 2000 	str.w	r2, [r8]
 800451c:	e7ec      	b.n	80044f8 <_malloc_r+0xb0>
 800451e:	4623      	mov	r3, r4
 8004520:	6864      	ldr	r4, [r4, #4]
 8004522:	e7ac      	b.n	800447e <_malloc_r+0x36>
 8004524:	4634      	mov	r4, r6
 8004526:	6876      	ldr	r6, [r6, #4]
 8004528:	e7b4      	b.n	8004494 <_malloc_r+0x4c>
 800452a:	4613      	mov	r3, r2
 800452c:	e7cc      	b.n	80044c8 <_malloc_r+0x80>
 800452e:	230c      	movs	r3, #12
 8004530:	4638      	mov	r0, r7
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	f000 f80e 	bl	8004554 <__malloc_unlock>
 8004538:	e797      	b.n	800446a <_malloc_r+0x22>
 800453a:	6025      	str	r5, [r4, #0]
 800453c:	e7dc      	b.n	80044f8 <_malloc_r+0xb0>
 800453e:	605b      	str	r3, [r3, #4]
 8004540:	deff      	udf	#255	; 0xff
 8004542:	bf00      	nop
 8004544:	200002ec 	.word	0x200002ec

08004548 <__malloc_lock>:
 8004548:	4801      	ldr	r0, [pc, #4]	; (8004550 <__malloc_lock+0x8>)
 800454a:	f000 be1a 	b.w	8005182 <__retarget_lock_acquire_recursive>
 800454e:	bf00      	nop
 8004550:	20000434 	.word	0x20000434

08004554 <__malloc_unlock>:
 8004554:	4801      	ldr	r0, [pc, #4]	; (800455c <__malloc_unlock+0x8>)
 8004556:	f000 be15 	b.w	8005184 <__retarget_lock_release_recursive>
 800455a:	bf00      	nop
 800455c:	20000434 	.word	0x20000434

08004560 <__cvt>:
 8004560:	2b00      	cmp	r3, #0
 8004562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004566:	461f      	mov	r7, r3
 8004568:	bfbb      	ittet	lt
 800456a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800456e:	461f      	movlt	r7, r3
 8004570:	2300      	movge	r3, #0
 8004572:	232d      	movlt	r3, #45	; 0x2d
 8004574:	b088      	sub	sp, #32
 8004576:	4614      	mov	r4, r2
 8004578:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800457a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800457c:	7013      	strb	r3, [r2, #0]
 800457e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004580:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004584:	f023 0820 	bic.w	r8, r3, #32
 8004588:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800458c:	d005      	beq.n	800459a <__cvt+0x3a>
 800458e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004592:	d100      	bne.n	8004596 <__cvt+0x36>
 8004594:	3501      	adds	r5, #1
 8004596:	2302      	movs	r3, #2
 8004598:	e000      	b.n	800459c <__cvt+0x3c>
 800459a:	2303      	movs	r3, #3
 800459c:	aa07      	add	r2, sp, #28
 800459e:	9204      	str	r2, [sp, #16]
 80045a0:	aa06      	add	r2, sp, #24
 80045a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045a6:	e9cd 3500 	strd	r3, r5, [sp]
 80045aa:	4622      	mov	r2, r4
 80045ac:	463b      	mov	r3, r7
 80045ae:	f000 fe83 	bl	80052b8 <_dtoa_r>
 80045b2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045b6:	4606      	mov	r6, r0
 80045b8:	d102      	bne.n	80045c0 <__cvt+0x60>
 80045ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045bc:	07db      	lsls	r3, r3, #31
 80045be:	d522      	bpl.n	8004606 <__cvt+0xa6>
 80045c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045c4:	eb06 0905 	add.w	r9, r6, r5
 80045c8:	d110      	bne.n	80045ec <__cvt+0x8c>
 80045ca:	7833      	ldrb	r3, [r6, #0]
 80045cc:	2b30      	cmp	r3, #48	; 0x30
 80045ce:	d10a      	bne.n	80045e6 <__cvt+0x86>
 80045d0:	2200      	movs	r2, #0
 80045d2:	2300      	movs	r3, #0
 80045d4:	4620      	mov	r0, r4
 80045d6:	4639      	mov	r1, r7
 80045d8:	f7fc f9e6 	bl	80009a8 <__aeabi_dcmpeq>
 80045dc:	b918      	cbnz	r0, 80045e6 <__cvt+0x86>
 80045de:	f1c5 0501 	rsb	r5, r5, #1
 80045e2:	f8ca 5000 	str.w	r5, [sl]
 80045e6:	f8da 3000 	ldr.w	r3, [sl]
 80045ea:	4499      	add	r9, r3
 80045ec:	2200      	movs	r2, #0
 80045ee:	2300      	movs	r3, #0
 80045f0:	4620      	mov	r0, r4
 80045f2:	4639      	mov	r1, r7
 80045f4:	f7fc f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80045f8:	b108      	cbz	r0, 80045fe <__cvt+0x9e>
 80045fa:	f8cd 901c 	str.w	r9, [sp, #28]
 80045fe:	2230      	movs	r2, #48	; 0x30
 8004600:	9b07      	ldr	r3, [sp, #28]
 8004602:	454b      	cmp	r3, r9
 8004604:	d307      	bcc.n	8004616 <__cvt+0xb6>
 8004606:	4630      	mov	r0, r6
 8004608:	9b07      	ldr	r3, [sp, #28]
 800460a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800460c:	1b9b      	subs	r3, r3, r6
 800460e:	6013      	str	r3, [r2, #0]
 8004610:	b008      	add	sp, #32
 8004612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004616:	1c59      	adds	r1, r3, #1
 8004618:	9107      	str	r1, [sp, #28]
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	e7f0      	b.n	8004600 <__cvt+0xa0>

0800461e <__exponent>:
 800461e:	4603      	mov	r3, r0
 8004620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004622:	2900      	cmp	r1, #0
 8004624:	f803 2b02 	strb.w	r2, [r3], #2
 8004628:	bfb6      	itet	lt
 800462a:	222d      	movlt	r2, #45	; 0x2d
 800462c:	222b      	movge	r2, #43	; 0x2b
 800462e:	4249      	neglt	r1, r1
 8004630:	2909      	cmp	r1, #9
 8004632:	7042      	strb	r2, [r0, #1]
 8004634:	dd2a      	ble.n	800468c <__exponent+0x6e>
 8004636:	f10d 0207 	add.w	r2, sp, #7
 800463a:	4617      	mov	r7, r2
 800463c:	260a      	movs	r6, #10
 800463e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004642:	4694      	mov	ip, r2
 8004644:	fb06 1415 	mls	r4, r6, r5, r1
 8004648:	3430      	adds	r4, #48	; 0x30
 800464a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800464e:	460c      	mov	r4, r1
 8004650:	2c63      	cmp	r4, #99	; 0x63
 8004652:	4629      	mov	r1, r5
 8004654:	f102 32ff 	add.w	r2, r2, #4294967295
 8004658:	dcf1      	bgt.n	800463e <__exponent+0x20>
 800465a:	3130      	adds	r1, #48	; 0x30
 800465c:	f1ac 0402 	sub.w	r4, ip, #2
 8004660:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004664:	4622      	mov	r2, r4
 8004666:	1c41      	adds	r1, r0, #1
 8004668:	42ba      	cmp	r2, r7
 800466a:	d30a      	bcc.n	8004682 <__exponent+0x64>
 800466c:	f10d 0209 	add.w	r2, sp, #9
 8004670:	eba2 020c 	sub.w	r2, r2, ip
 8004674:	42bc      	cmp	r4, r7
 8004676:	bf88      	it	hi
 8004678:	2200      	movhi	r2, #0
 800467a:	4413      	add	r3, r2
 800467c:	1a18      	subs	r0, r3, r0
 800467e:	b003      	add	sp, #12
 8004680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004682:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004686:	f801 5f01 	strb.w	r5, [r1, #1]!
 800468a:	e7ed      	b.n	8004668 <__exponent+0x4a>
 800468c:	2330      	movs	r3, #48	; 0x30
 800468e:	3130      	adds	r1, #48	; 0x30
 8004690:	7083      	strb	r3, [r0, #2]
 8004692:	70c1      	strb	r1, [r0, #3]
 8004694:	1d03      	adds	r3, r0, #4
 8004696:	e7f1      	b.n	800467c <__exponent+0x5e>

08004698 <_printf_float>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	b091      	sub	sp, #68	; 0x44
 800469e:	460c      	mov	r4, r1
 80046a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80046a4:	4616      	mov	r6, r2
 80046a6:	461f      	mov	r7, r3
 80046a8:	4605      	mov	r5, r0
 80046aa:	f000 fce5 	bl	8005078 <_localeconv_r>
 80046ae:	6803      	ldr	r3, [r0, #0]
 80046b0:	4618      	mov	r0, r3
 80046b2:	9309      	str	r3, [sp, #36]	; 0x24
 80046b4:	f7fb fd4c 	bl	8000150 <strlen>
 80046b8:	2300      	movs	r3, #0
 80046ba:	930e      	str	r3, [sp, #56]	; 0x38
 80046bc:	f8d8 3000 	ldr.w	r3, [r8]
 80046c0:	900a      	str	r0, [sp, #40]	; 0x28
 80046c2:	3307      	adds	r3, #7
 80046c4:	f023 0307 	bic.w	r3, r3, #7
 80046c8:	f103 0208 	add.w	r2, r3, #8
 80046cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046d0:	f8d4 b000 	ldr.w	fp, [r4]
 80046d4:	f8c8 2000 	str.w	r2, [r8]
 80046d8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80046dc:	4652      	mov	r2, sl
 80046de:	4643      	mov	r3, r8
 80046e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046e4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80046e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80046ea:	f04f 32ff 	mov.w	r2, #4294967295
 80046ee:	4650      	mov	r0, sl
 80046f0:	4b9c      	ldr	r3, [pc, #624]	; (8004964 <_printf_float+0x2cc>)
 80046f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046f4:	f7fc f98a 	bl	8000a0c <__aeabi_dcmpun>
 80046f8:	bb70      	cbnz	r0, 8004758 <_printf_float+0xc0>
 80046fa:	f04f 32ff 	mov.w	r2, #4294967295
 80046fe:	4650      	mov	r0, sl
 8004700:	4b98      	ldr	r3, [pc, #608]	; (8004964 <_printf_float+0x2cc>)
 8004702:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004704:	f7fc f964 	bl	80009d0 <__aeabi_dcmple>
 8004708:	bb30      	cbnz	r0, 8004758 <_printf_float+0xc0>
 800470a:	2200      	movs	r2, #0
 800470c:	2300      	movs	r3, #0
 800470e:	4650      	mov	r0, sl
 8004710:	4641      	mov	r1, r8
 8004712:	f7fc f953 	bl	80009bc <__aeabi_dcmplt>
 8004716:	b110      	cbz	r0, 800471e <_printf_float+0x86>
 8004718:	232d      	movs	r3, #45	; 0x2d
 800471a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471e:	4a92      	ldr	r2, [pc, #584]	; (8004968 <_printf_float+0x2d0>)
 8004720:	4b92      	ldr	r3, [pc, #584]	; (800496c <_printf_float+0x2d4>)
 8004722:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004726:	bf94      	ite	ls
 8004728:	4690      	movls	r8, r2
 800472a:	4698      	movhi	r8, r3
 800472c:	2303      	movs	r3, #3
 800472e:	f04f 0a00 	mov.w	sl, #0
 8004732:	6123      	str	r3, [r4, #16]
 8004734:	f02b 0304 	bic.w	r3, fp, #4
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	4633      	mov	r3, r6
 800473c:	4621      	mov	r1, r4
 800473e:	4628      	mov	r0, r5
 8004740:	9700      	str	r7, [sp, #0]
 8004742:	aa0f      	add	r2, sp, #60	; 0x3c
 8004744:	f000 f9d6 	bl	8004af4 <_printf_common>
 8004748:	3001      	adds	r0, #1
 800474a:	f040 8090 	bne.w	800486e <_printf_float+0x1d6>
 800474e:	f04f 30ff 	mov.w	r0, #4294967295
 8004752:	b011      	add	sp, #68	; 0x44
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004758:	4652      	mov	r2, sl
 800475a:	4643      	mov	r3, r8
 800475c:	4650      	mov	r0, sl
 800475e:	4641      	mov	r1, r8
 8004760:	f7fc f954 	bl	8000a0c <__aeabi_dcmpun>
 8004764:	b148      	cbz	r0, 800477a <_printf_float+0xe2>
 8004766:	f1b8 0f00 	cmp.w	r8, #0
 800476a:	bfb8      	it	lt
 800476c:	232d      	movlt	r3, #45	; 0x2d
 800476e:	4a80      	ldr	r2, [pc, #512]	; (8004970 <_printf_float+0x2d8>)
 8004770:	bfb8      	it	lt
 8004772:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004776:	4b7f      	ldr	r3, [pc, #508]	; (8004974 <_printf_float+0x2dc>)
 8004778:	e7d3      	b.n	8004722 <_printf_float+0x8a>
 800477a:	6863      	ldr	r3, [r4, #4]
 800477c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	d142      	bne.n	800480a <_printf_float+0x172>
 8004784:	2306      	movs	r3, #6
 8004786:	6063      	str	r3, [r4, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	9206      	str	r2, [sp, #24]
 800478c:	aa0e      	add	r2, sp, #56	; 0x38
 800478e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004792:	aa0d      	add	r2, sp, #52	; 0x34
 8004794:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004798:	9203      	str	r2, [sp, #12]
 800479a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800479e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047a2:	6023      	str	r3, [r4, #0]
 80047a4:	6863      	ldr	r3, [r4, #4]
 80047a6:	4652      	mov	r2, sl
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	4628      	mov	r0, r5
 80047ac:	4643      	mov	r3, r8
 80047ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80047b0:	f7ff fed6 	bl	8004560 <__cvt>
 80047b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047b6:	4680      	mov	r8, r0
 80047b8:	2947      	cmp	r1, #71	; 0x47
 80047ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047bc:	d108      	bne.n	80047d0 <_printf_float+0x138>
 80047be:	1cc8      	adds	r0, r1, #3
 80047c0:	db02      	blt.n	80047c8 <_printf_float+0x130>
 80047c2:	6863      	ldr	r3, [r4, #4]
 80047c4:	4299      	cmp	r1, r3
 80047c6:	dd40      	ble.n	800484a <_printf_float+0x1b2>
 80047c8:	f1a9 0902 	sub.w	r9, r9, #2
 80047cc:	fa5f f989 	uxtb.w	r9, r9
 80047d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047d4:	d81f      	bhi.n	8004816 <_printf_float+0x17e>
 80047d6:	464a      	mov	r2, r9
 80047d8:	3901      	subs	r1, #1
 80047da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047de:	910d      	str	r1, [sp, #52]	; 0x34
 80047e0:	f7ff ff1d 	bl	800461e <__exponent>
 80047e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047e6:	4682      	mov	sl, r0
 80047e8:	1813      	adds	r3, r2, r0
 80047ea:	2a01      	cmp	r2, #1
 80047ec:	6123      	str	r3, [r4, #16]
 80047ee:	dc02      	bgt.n	80047f6 <_printf_float+0x15e>
 80047f0:	6822      	ldr	r2, [r4, #0]
 80047f2:	07d2      	lsls	r2, r2, #31
 80047f4:	d501      	bpl.n	80047fa <_printf_float+0x162>
 80047f6:	3301      	adds	r3, #1
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d09b      	beq.n	800473a <_printf_float+0xa2>
 8004802:	232d      	movs	r3, #45	; 0x2d
 8004804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004808:	e797      	b.n	800473a <_printf_float+0xa2>
 800480a:	2947      	cmp	r1, #71	; 0x47
 800480c:	d1bc      	bne.n	8004788 <_printf_float+0xf0>
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ba      	bne.n	8004788 <_printf_float+0xf0>
 8004812:	2301      	movs	r3, #1
 8004814:	e7b7      	b.n	8004786 <_printf_float+0xee>
 8004816:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800481a:	d118      	bne.n	800484e <_printf_float+0x1b6>
 800481c:	2900      	cmp	r1, #0
 800481e:	6863      	ldr	r3, [r4, #4]
 8004820:	dd0b      	ble.n	800483a <_printf_float+0x1a2>
 8004822:	6121      	str	r1, [r4, #16]
 8004824:	b913      	cbnz	r3, 800482c <_printf_float+0x194>
 8004826:	6822      	ldr	r2, [r4, #0]
 8004828:	07d0      	lsls	r0, r2, #31
 800482a:	d502      	bpl.n	8004832 <_printf_float+0x19a>
 800482c:	3301      	adds	r3, #1
 800482e:	440b      	add	r3, r1
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	f04f 0a00 	mov.w	sl, #0
 8004836:	65a1      	str	r1, [r4, #88]	; 0x58
 8004838:	e7df      	b.n	80047fa <_printf_float+0x162>
 800483a:	b913      	cbnz	r3, 8004842 <_printf_float+0x1aa>
 800483c:	6822      	ldr	r2, [r4, #0]
 800483e:	07d2      	lsls	r2, r2, #31
 8004840:	d501      	bpl.n	8004846 <_printf_float+0x1ae>
 8004842:	3302      	adds	r3, #2
 8004844:	e7f4      	b.n	8004830 <_printf_float+0x198>
 8004846:	2301      	movs	r3, #1
 8004848:	e7f2      	b.n	8004830 <_printf_float+0x198>
 800484a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800484e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004850:	4299      	cmp	r1, r3
 8004852:	db05      	blt.n	8004860 <_printf_float+0x1c8>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	6121      	str	r1, [r4, #16]
 8004858:	07d8      	lsls	r0, r3, #31
 800485a:	d5ea      	bpl.n	8004832 <_printf_float+0x19a>
 800485c:	1c4b      	adds	r3, r1, #1
 800485e:	e7e7      	b.n	8004830 <_printf_float+0x198>
 8004860:	2900      	cmp	r1, #0
 8004862:	bfcc      	ite	gt
 8004864:	2201      	movgt	r2, #1
 8004866:	f1c1 0202 	rsble	r2, r1, #2
 800486a:	4413      	add	r3, r2
 800486c:	e7e0      	b.n	8004830 <_printf_float+0x198>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	055a      	lsls	r2, r3, #21
 8004872:	d407      	bmi.n	8004884 <_printf_float+0x1ec>
 8004874:	6923      	ldr	r3, [r4, #16]
 8004876:	4642      	mov	r2, r8
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	d12b      	bne.n	80048da <_printf_float+0x242>
 8004882:	e764      	b.n	800474e <_printf_float+0xb6>
 8004884:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004888:	f240 80dd 	bls.w	8004a46 <_printf_float+0x3ae>
 800488c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004890:	2200      	movs	r2, #0
 8004892:	2300      	movs	r3, #0
 8004894:	f7fc f888 	bl	80009a8 <__aeabi_dcmpeq>
 8004898:	2800      	cmp	r0, #0
 800489a:	d033      	beq.n	8004904 <_printf_float+0x26c>
 800489c:	2301      	movs	r3, #1
 800489e:	4631      	mov	r1, r6
 80048a0:	4628      	mov	r0, r5
 80048a2:	4a35      	ldr	r2, [pc, #212]	; (8004978 <_printf_float+0x2e0>)
 80048a4:	47b8      	blx	r7
 80048a6:	3001      	adds	r0, #1
 80048a8:	f43f af51 	beq.w	800474e <_printf_float+0xb6>
 80048ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048b0:	429a      	cmp	r2, r3
 80048b2:	db02      	blt.n	80048ba <_printf_float+0x222>
 80048b4:	6823      	ldr	r3, [r4, #0]
 80048b6:	07d8      	lsls	r0, r3, #31
 80048b8:	d50f      	bpl.n	80048da <_printf_float+0x242>
 80048ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048be:	4631      	mov	r1, r6
 80048c0:	4628      	mov	r0, r5
 80048c2:	47b8      	blx	r7
 80048c4:	3001      	adds	r0, #1
 80048c6:	f43f af42 	beq.w	800474e <_printf_float+0xb6>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	f104 091a 	add.w	r9, r4, #26
 80048d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048d4:	3b01      	subs	r3, #1
 80048d6:	4543      	cmp	r3, r8
 80048d8:	dc09      	bgt.n	80048ee <_printf_float+0x256>
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	079b      	lsls	r3, r3, #30
 80048de:	f100 8104 	bmi.w	8004aea <_printf_float+0x452>
 80048e2:	68e0      	ldr	r0, [r4, #12]
 80048e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048e6:	4298      	cmp	r0, r3
 80048e8:	bfb8      	it	lt
 80048ea:	4618      	movlt	r0, r3
 80048ec:	e731      	b.n	8004752 <_printf_float+0xba>
 80048ee:	2301      	movs	r3, #1
 80048f0:	464a      	mov	r2, r9
 80048f2:	4631      	mov	r1, r6
 80048f4:	4628      	mov	r0, r5
 80048f6:	47b8      	blx	r7
 80048f8:	3001      	adds	r0, #1
 80048fa:	f43f af28 	beq.w	800474e <_printf_float+0xb6>
 80048fe:	f108 0801 	add.w	r8, r8, #1
 8004902:	e7e6      	b.n	80048d2 <_printf_float+0x23a>
 8004904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004906:	2b00      	cmp	r3, #0
 8004908:	dc38      	bgt.n	800497c <_printf_float+0x2e4>
 800490a:	2301      	movs	r3, #1
 800490c:	4631      	mov	r1, r6
 800490e:	4628      	mov	r0, r5
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <_printf_float+0x2e0>)
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	f43f af1a 	beq.w	800474e <_printf_float+0xb6>
 800491a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800491e:	4313      	orrs	r3, r2
 8004920:	d102      	bne.n	8004928 <_printf_float+0x290>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	07d9      	lsls	r1, r3, #31
 8004926:	d5d8      	bpl.n	80048da <_printf_float+0x242>
 8004928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800492c:	4631      	mov	r1, r6
 800492e:	4628      	mov	r0, r5
 8004930:	47b8      	blx	r7
 8004932:	3001      	adds	r0, #1
 8004934:	f43f af0b 	beq.w	800474e <_printf_float+0xb6>
 8004938:	f04f 0900 	mov.w	r9, #0
 800493c:	f104 0a1a 	add.w	sl, r4, #26
 8004940:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004942:	425b      	negs	r3, r3
 8004944:	454b      	cmp	r3, r9
 8004946:	dc01      	bgt.n	800494c <_printf_float+0x2b4>
 8004948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800494a:	e794      	b.n	8004876 <_printf_float+0x1de>
 800494c:	2301      	movs	r3, #1
 800494e:	4652      	mov	r2, sl
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f aef9 	beq.w	800474e <_printf_float+0xb6>
 800495c:	f109 0901 	add.w	r9, r9, #1
 8004960:	e7ee      	b.n	8004940 <_printf_float+0x2a8>
 8004962:	bf00      	nop
 8004964:	7fefffff 	.word	0x7fefffff
 8004968:	08008056 	.word	0x08008056
 800496c:	0800805a 	.word	0x0800805a
 8004970:	0800805e 	.word	0x0800805e
 8004974:	08008062 	.word	0x08008062
 8004978:	08008066 	.word	0x08008066
 800497c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800497e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004980:	429a      	cmp	r2, r3
 8004982:	bfa8      	it	ge
 8004984:	461a      	movge	r2, r3
 8004986:	2a00      	cmp	r2, #0
 8004988:	4691      	mov	r9, r2
 800498a:	dc37      	bgt.n	80049fc <_printf_float+0x364>
 800498c:	f04f 0b00 	mov.w	fp, #0
 8004990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004994:	f104 021a 	add.w	r2, r4, #26
 8004998:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800499c:	ebaa 0309 	sub.w	r3, sl, r9
 80049a0:	455b      	cmp	r3, fp
 80049a2:	dc33      	bgt.n	8004a0c <_printf_float+0x374>
 80049a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049a8:	429a      	cmp	r2, r3
 80049aa:	db3b      	blt.n	8004a24 <_printf_float+0x38c>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	07da      	lsls	r2, r3, #31
 80049b0:	d438      	bmi.n	8004a24 <_printf_float+0x38c>
 80049b2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80049b6:	eba2 0903 	sub.w	r9, r2, r3
 80049ba:	eba2 020a 	sub.w	r2, r2, sl
 80049be:	4591      	cmp	r9, r2
 80049c0:	bfa8      	it	ge
 80049c2:	4691      	movge	r9, r2
 80049c4:	f1b9 0f00 	cmp.w	r9, #0
 80049c8:	dc34      	bgt.n	8004a34 <_printf_float+0x39c>
 80049ca:	f04f 0800 	mov.w	r8, #0
 80049ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049d2:	f104 0a1a 	add.w	sl, r4, #26
 80049d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	eba3 0309 	sub.w	r3, r3, r9
 80049e0:	4543      	cmp	r3, r8
 80049e2:	f77f af7a 	ble.w	80048da <_printf_float+0x242>
 80049e6:	2301      	movs	r3, #1
 80049e8:	4652      	mov	r2, sl
 80049ea:	4631      	mov	r1, r6
 80049ec:	4628      	mov	r0, r5
 80049ee:	47b8      	blx	r7
 80049f0:	3001      	adds	r0, #1
 80049f2:	f43f aeac 	beq.w	800474e <_printf_float+0xb6>
 80049f6:	f108 0801 	add.w	r8, r8, #1
 80049fa:	e7ec      	b.n	80049d6 <_printf_float+0x33e>
 80049fc:	4613      	mov	r3, r2
 80049fe:	4631      	mov	r1, r6
 8004a00:	4642      	mov	r2, r8
 8004a02:	4628      	mov	r0, r5
 8004a04:	47b8      	blx	r7
 8004a06:	3001      	adds	r0, #1
 8004a08:	d1c0      	bne.n	800498c <_printf_float+0x2f4>
 8004a0a:	e6a0      	b.n	800474e <_printf_float+0xb6>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a14:	47b8      	blx	r7
 8004a16:	3001      	adds	r0, #1
 8004a18:	f43f ae99 	beq.w	800474e <_printf_float+0xb6>
 8004a1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a1e:	f10b 0b01 	add.w	fp, fp, #1
 8004a22:	e7b9      	b.n	8004998 <_printf_float+0x300>
 8004a24:	4631      	mov	r1, r6
 8004a26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	47b8      	blx	r7
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d1bf      	bne.n	80049b2 <_printf_float+0x31a>
 8004a32:	e68c      	b.n	800474e <_printf_float+0xb6>
 8004a34:	464b      	mov	r3, r9
 8004a36:	4631      	mov	r1, r6
 8004a38:	4628      	mov	r0, r5
 8004a3a:	eb08 020a 	add.w	r2, r8, sl
 8004a3e:	47b8      	blx	r7
 8004a40:	3001      	adds	r0, #1
 8004a42:	d1c2      	bne.n	80049ca <_printf_float+0x332>
 8004a44:	e683      	b.n	800474e <_printf_float+0xb6>
 8004a46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a48:	2a01      	cmp	r2, #1
 8004a4a:	dc01      	bgt.n	8004a50 <_printf_float+0x3b8>
 8004a4c:	07db      	lsls	r3, r3, #31
 8004a4e:	d539      	bpl.n	8004ac4 <_printf_float+0x42c>
 8004a50:	2301      	movs	r3, #1
 8004a52:	4642      	mov	r2, r8
 8004a54:	4631      	mov	r1, r6
 8004a56:	4628      	mov	r0, r5
 8004a58:	47b8      	blx	r7
 8004a5a:	3001      	adds	r0, #1
 8004a5c:	f43f ae77 	beq.w	800474e <_printf_float+0xb6>
 8004a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a64:	4631      	mov	r1, r6
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b8      	blx	r7
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	f43f ae6f 	beq.w	800474e <_printf_float+0xb6>
 8004a70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a74:	2200      	movs	r2, #0
 8004a76:	2300      	movs	r3, #0
 8004a78:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004a7c:	f7fb ff94 	bl	80009a8 <__aeabi_dcmpeq>
 8004a80:	b9d8      	cbnz	r0, 8004aba <_printf_float+0x422>
 8004a82:	f109 33ff 	add.w	r3, r9, #4294967295
 8004a86:	f108 0201 	add.w	r2, r8, #1
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4628      	mov	r0, r5
 8004a8e:	47b8      	blx	r7
 8004a90:	3001      	adds	r0, #1
 8004a92:	d10e      	bne.n	8004ab2 <_printf_float+0x41a>
 8004a94:	e65b      	b.n	800474e <_printf_float+0xb6>
 8004a96:	2301      	movs	r3, #1
 8004a98:	464a      	mov	r2, r9
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	47b8      	blx	r7
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f43f ae54 	beq.w	800474e <_printf_float+0xb6>
 8004aa6:	f108 0801 	add.w	r8, r8, #1
 8004aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aac:	3b01      	subs	r3, #1
 8004aae:	4543      	cmp	r3, r8
 8004ab0:	dcf1      	bgt.n	8004a96 <_printf_float+0x3fe>
 8004ab2:	4653      	mov	r3, sl
 8004ab4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ab8:	e6de      	b.n	8004878 <_printf_float+0x1e0>
 8004aba:	f04f 0800 	mov.w	r8, #0
 8004abe:	f104 091a 	add.w	r9, r4, #26
 8004ac2:	e7f2      	b.n	8004aaa <_printf_float+0x412>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	e7df      	b.n	8004a8a <_printf_float+0x3f2>
 8004aca:	2301      	movs	r3, #1
 8004acc:	464a      	mov	r2, r9
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b8      	blx	r7
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f43f ae3a 	beq.w	800474e <_printf_float+0xb6>
 8004ada:	f108 0801 	add.w	r8, r8, #1
 8004ade:	68e3      	ldr	r3, [r4, #12]
 8004ae0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ae2:	1a5b      	subs	r3, r3, r1
 8004ae4:	4543      	cmp	r3, r8
 8004ae6:	dcf0      	bgt.n	8004aca <_printf_float+0x432>
 8004ae8:	e6fb      	b.n	80048e2 <_printf_float+0x24a>
 8004aea:	f04f 0800 	mov.w	r8, #0
 8004aee:	f104 0919 	add.w	r9, r4, #25
 8004af2:	e7f4      	b.n	8004ade <_printf_float+0x446>

08004af4 <_printf_common>:
 8004af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004af8:	4616      	mov	r6, r2
 8004afa:	4699      	mov	r9, r3
 8004afc:	688a      	ldr	r2, [r1, #8]
 8004afe:	690b      	ldr	r3, [r1, #16]
 8004b00:	4607      	mov	r7, r0
 8004b02:	4293      	cmp	r3, r2
 8004b04:	bfb8      	it	lt
 8004b06:	4613      	movlt	r3, r2
 8004b08:	6033      	str	r3, [r6, #0]
 8004b0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b0e:	460c      	mov	r4, r1
 8004b10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b14:	b10a      	cbz	r2, 8004b1a <_printf_common+0x26>
 8004b16:	3301      	adds	r3, #1
 8004b18:	6033      	str	r3, [r6, #0]
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	0699      	lsls	r1, r3, #26
 8004b1e:	bf42      	ittt	mi
 8004b20:	6833      	ldrmi	r3, [r6, #0]
 8004b22:	3302      	addmi	r3, #2
 8004b24:	6033      	strmi	r3, [r6, #0]
 8004b26:	6825      	ldr	r5, [r4, #0]
 8004b28:	f015 0506 	ands.w	r5, r5, #6
 8004b2c:	d106      	bne.n	8004b3c <_printf_common+0x48>
 8004b2e:	f104 0a19 	add.w	sl, r4, #25
 8004b32:	68e3      	ldr	r3, [r4, #12]
 8004b34:	6832      	ldr	r2, [r6, #0]
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	42ab      	cmp	r3, r5
 8004b3a:	dc2b      	bgt.n	8004b94 <_printf_common+0xa0>
 8004b3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b40:	1e13      	subs	r3, r2, #0
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	bf18      	it	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	0692      	lsls	r2, r2, #26
 8004b4a:	d430      	bmi.n	8004bae <_printf_common+0xba>
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	4638      	mov	r0, r7
 8004b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b54:	47c0      	blx	r8
 8004b56:	3001      	adds	r0, #1
 8004b58:	d023      	beq.n	8004ba2 <_printf_common+0xae>
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	6922      	ldr	r2, [r4, #16]
 8004b5e:	f003 0306 	and.w	r3, r3, #6
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	bf14      	ite	ne
 8004b66:	2500      	movne	r5, #0
 8004b68:	6833      	ldreq	r3, [r6, #0]
 8004b6a:	f04f 0600 	mov.w	r6, #0
 8004b6e:	bf08      	it	eq
 8004b70:	68e5      	ldreq	r5, [r4, #12]
 8004b72:	f104 041a 	add.w	r4, r4, #26
 8004b76:	bf08      	it	eq
 8004b78:	1aed      	subeq	r5, r5, r3
 8004b7a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b7e:	bf08      	it	eq
 8004b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b84:	4293      	cmp	r3, r2
 8004b86:	bfc4      	itt	gt
 8004b88:	1a9b      	subgt	r3, r3, r2
 8004b8a:	18ed      	addgt	r5, r5, r3
 8004b8c:	42b5      	cmp	r5, r6
 8004b8e:	d11a      	bne.n	8004bc6 <_printf_common+0xd2>
 8004b90:	2000      	movs	r0, #0
 8004b92:	e008      	b.n	8004ba6 <_printf_common+0xb2>
 8004b94:	2301      	movs	r3, #1
 8004b96:	4652      	mov	r2, sl
 8004b98:	4649      	mov	r1, r9
 8004b9a:	4638      	mov	r0, r7
 8004b9c:	47c0      	blx	r8
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d103      	bne.n	8004baa <_printf_common+0xb6>
 8004ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004baa:	3501      	adds	r5, #1
 8004bac:	e7c1      	b.n	8004b32 <_printf_common+0x3e>
 8004bae:	2030      	movs	r0, #48	; 0x30
 8004bb0:	18e1      	adds	r1, r4, r3
 8004bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bbc:	4422      	add	r2, r4
 8004bbe:	3302      	adds	r3, #2
 8004bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bc4:	e7c2      	b.n	8004b4c <_printf_common+0x58>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4649      	mov	r1, r9
 8004bcc:	4638      	mov	r0, r7
 8004bce:	47c0      	blx	r8
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d0e6      	beq.n	8004ba2 <_printf_common+0xae>
 8004bd4:	3601      	adds	r6, #1
 8004bd6:	e7d9      	b.n	8004b8c <_printf_common+0x98>

08004bd8 <_printf_i>:
 8004bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bdc:	7e0f      	ldrb	r7, [r1, #24]
 8004bde:	4691      	mov	r9, r2
 8004be0:	2f78      	cmp	r7, #120	; 0x78
 8004be2:	4680      	mov	r8, r0
 8004be4:	460c      	mov	r4, r1
 8004be6:	469a      	mov	sl, r3
 8004be8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bee:	d807      	bhi.n	8004c00 <_printf_i+0x28>
 8004bf0:	2f62      	cmp	r7, #98	; 0x62
 8004bf2:	d80a      	bhi.n	8004c0a <_printf_i+0x32>
 8004bf4:	2f00      	cmp	r7, #0
 8004bf6:	f000 80d5 	beq.w	8004da4 <_printf_i+0x1cc>
 8004bfa:	2f58      	cmp	r7, #88	; 0x58
 8004bfc:	f000 80c1 	beq.w	8004d82 <_printf_i+0x1aa>
 8004c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c08:	e03a      	b.n	8004c80 <_printf_i+0xa8>
 8004c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c0e:	2b15      	cmp	r3, #21
 8004c10:	d8f6      	bhi.n	8004c00 <_printf_i+0x28>
 8004c12:	a101      	add	r1, pc, #4	; (adr r1, 8004c18 <_printf_i+0x40>)
 8004c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c18:	08004c71 	.word	0x08004c71
 8004c1c:	08004c85 	.word	0x08004c85
 8004c20:	08004c01 	.word	0x08004c01
 8004c24:	08004c01 	.word	0x08004c01
 8004c28:	08004c01 	.word	0x08004c01
 8004c2c:	08004c01 	.word	0x08004c01
 8004c30:	08004c85 	.word	0x08004c85
 8004c34:	08004c01 	.word	0x08004c01
 8004c38:	08004c01 	.word	0x08004c01
 8004c3c:	08004c01 	.word	0x08004c01
 8004c40:	08004c01 	.word	0x08004c01
 8004c44:	08004d8b 	.word	0x08004d8b
 8004c48:	08004cb1 	.word	0x08004cb1
 8004c4c:	08004d45 	.word	0x08004d45
 8004c50:	08004c01 	.word	0x08004c01
 8004c54:	08004c01 	.word	0x08004c01
 8004c58:	08004dad 	.word	0x08004dad
 8004c5c:	08004c01 	.word	0x08004c01
 8004c60:	08004cb1 	.word	0x08004cb1
 8004c64:	08004c01 	.word	0x08004c01
 8004c68:	08004c01 	.word	0x08004c01
 8004c6c:	08004d4d 	.word	0x08004d4d
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	1d1a      	adds	r2, r3, #4
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	602a      	str	r2, [r5, #0]
 8004c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0a0      	b.n	8004dc6 <_printf_i+0x1ee>
 8004c84:	6820      	ldr	r0, [r4, #0]
 8004c86:	682b      	ldr	r3, [r5, #0]
 8004c88:	0607      	lsls	r7, r0, #24
 8004c8a:	f103 0104 	add.w	r1, r3, #4
 8004c8e:	6029      	str	r1, [r5, #0]
 8004c90:	d501      	bpl.n	8004c96 <_printf_i+0xbe>
 8004c92:	681e      	ldr	r6, [r3, #0]
 8004c94:	e003      	b.n	8004c9e <_printf_i+0xc6>
 8004c96:	0646      	lsls	r6, r0, #25
 8004c98:	d5fb      	bpl.n	8004c92 <_printf_i+0xba>
 8004c9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c9e:	2e00      	cmp	r6, #0
 8004ca0:	da03      	bge.n	8004caa <_printf_i+0xd2>
 8004ca2:	232d      	movs	r3, #45	; 0x2d
 8004ca4:	4276      	negs	r6, r6
 8004ca6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004caa:	230a      	movs	r3, #10
 8004cac:	4859      	ldr	r0, [pc, #356]	; (8004e14 <_printf_i+0x23c>)
 8004cae:	e012      	b.n	8004cd6 <_printf_i+0xfe>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	6820      	ldr	r0, [r4, #0]
 8004cb4:	1d19      	adds	r1, r3, #4
 8004cb6:	6029      	str	r1, [r5, #0]
 8004cb8:	0605      	lsls	r5, r0, #24
 8004cba:	d501      	bpl.n	8004cc0 <_printf_i+0xe8>
 8004cbc:	681e      	ldr	r6, [r3, #0]
 8004cbe:	e002      	b.n	8004cc6 <_printf_i+0xee>
 8004cc0:	0641      	lsls	r1, r0, #25
 8004cc2:	d5fb      	bpl.n	8004cbc <_printf_i+0xe4>
 8004cc4:	881e      	ldrh	r6, [r3, #0]
 8004cc6:	2f6f      	cmp	r7, #111	; 0x6f
 8004cc8:	bf0c      	ite	eq
 8004cca:	2308      	moveq	r3, #8
 8004ccc:	230a      	movne	r3, #10
 8004cce:	4851      	ldr	r0, [pc, #324]	; (8004e14 <_printf_i+0x23c>)
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cd6:	6865      	ldr	r5, [r4, #4]
 8004cd8:	2d00      	cmp	r5, #0
 8004cda:	bfa8      	it	ge
 8004cdc:	6821      	ldrge	r1, [r4, #0]
 8004cde:	60a5      	str	r5, [r4, #8]
 8004ce0:	bfa4      	itt	ge
 8004ce2:	f021 0104 	bicge.w	r1, r1, #4
 8004ce6:	6021      	strge	r1, [r4, #0]
 8004ce8:	b90e      	cbnz	r6, 8004cee <_printf_i+0x116>
 8004cea:	2d00      	cmp	r5, #0
 8004cec:	d04b      	beq.n	8004d86 <_printf_i+0x1ae>
 8004cee:	4615      	mov	r5, r2
 8004cf0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cf4:	fb03 6711 	mls	r7, r3, r1, r6
 8004cf8:	5dc7      	ldrb	r7, [r0, r7]
 8004cfa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cfe:	4637      	mov	r7, r6
 8004d00:	42bb      	cmp	r3, r7
 8004d02:	460e      	mov	r6, r1
 8004d04:	d9f4      	bls.n	8004cf0 <_printf_i+0x118>
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d10b      	bne.n	8004d22 <_printf_i+0x14a>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	07de      	lsls	r6, r3, #31
 8004d0e:	d508      	bpl.n	8004d22 <_printf_i+0x14a>
 8004d10:	6923      	ldr	r3, [r4, #16]
 8004d12:	6861      	ldr	r1, [r4, #4]
 8004d14:	4299      	cmp	r1, r3
 8004d16:	bfde      	ittt	le
 8004d18:	2330      	movle	r3, #48	; 0x30
 8004d1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d22:	1b52      	subs	r2, r2, r5
 8004d24:	6122      	str	r2, [r4, #16]
 8004d26:	464b      	mov	r3, r9
 8004d28:	4621      	mov	r1, r4
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	f8cd a000 	str.w	sl, [sp]
 8004d30:	aa03      	add	r2, sp, #12
 8004d32:	f7ff fedf 	bl	8004af4 <_printf_common>
 8004d36:	3001      	adds	r0, #1
 8004d38:	d14a      	bne.n	8004dd0 <_printf_i+0x1f8>
 8004d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d3e:	b004      	add	sp, #16
 8004d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	f043 0320 	orr.w	r3, r3, #32
 8004d4a:	6023      	str	r3, [r4, #0]
 8004d4c:	2778      	movs	r7, #120	; 0x78
 8004d4e:	4832      	ldr	r0, [pc, #200]	; (8004e18 <_printf_i+0x240>)
 8004d50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	6829      	ldr	r1, [r5, #0]
 8004d58:	061f      	lsls	r7, r3, #24
 8004d5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d5e:	d402      	bmi.n	8004d66 <_printf_i+0x18e>
 8004d60:	065f      	lsls	r7, r3, #25
 8004d62:	bf48      	it	mi
 8004d64:	b2b6      	uxthmi	r6, r6
 8004d66:	07df      	lsls	r7, r3, #31
 8004d68:	bf48      	it	mi
 8004d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d6e:	6029      	str	r1, [r5, #0]
 8004d70:	bf48      	it	mi
 8004d72:	6023      	strmi	r3, [r4, #0]
 8004d74:	b91e      	cbnz	r6, 8004d7e <_printf_i+0x1a6>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	f023 0320 	bic.w	r3, r3, #32
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	2310      	movs	r3, #16
 8004d80:	e7a6      	b.n	8004cd0 <_printf_i+0xf8>
 8004d82:	4824      	ldr	r0, [pc, #144]	; (8004e14 <_printf_i+0x23c>)
 8004d84:	e7e4      	b.n	8004d50 <_printf_i+0x178>
 8004d86:	4615      	mov	r5, r2
 8004d88:	e7bd      	b.n	8004d06 <_printf_i+0x12e>
 8004d8a:	682b      	ldr	r3, [r5, #0]
 8004d8c:	6826      	ldr	r6, [r4, #0]
 8004d8e:	1d18      	adds	r0, r3, #4
 8004d90:	6961      	ldr	r1, [r4, #20]
 8004d92:	6028      	str	r0, [r5, #0]
 8004d94:	0635      	lsls	r5, r6, #24
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	d501      	bpl.n	8004d9e <_printf_i+0x1c6>
 8004d9a:	6019      	str	r1, [r3, #0]
 8004d9c:	e002      	b.n	8004da4 <_printf_i+0x1cc>
 8004d9e:	0670      	lsls	r0, r6, #25
 8004da0:	d5fb      	bpl.n	8004d9a <_printf_i+0x1c2>
 8004da2:	8019      	strh	r1, [r3, #0]
 8004da4:	2300      	movs	r3, #0
 8004da6:	4615      	mov	r5, r2
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	e7bc      	b.n	8004d26 <_printf_i+0x14e>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	2100      	movs	r1, #0
 8004db0:	1d1a      	adds	r2, r3, #4
 8004db2:	602a      	str	r2, [r5, #0]
 8004db4:	681d      	ldr	r5, [r3, #0]
 8004db6:	6862      	ldr	r2, [r4, #4]
 8004db8:	4628      	mov	r0, r5
 8004dba:	f000 f9e4 	bl	8005186 <memchr>
 8004dbe:	b108      	cbz	r0, 8004dc4 <_printf_i+0x1ec>
 8004dc0:	1b40      	subs	r0, r0, r5
 8004dc2:	6060      	str	r0, [r4, #4]
 8004dc4:	6863      	ldr	r3, [r4, #4]
 8004dc6:	6123      	str	r3, [r4, #16]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dce:	e7aa      	b.n	8004d26 <_printf_i+0x14e>
 8004dd0:	462a      	mov	r2, r5
 8004dd2:	4649      	mov	r1, r9
 8004dd4:	4640      	mov	r0, r8
 8004dd6:	6923      	ldr	r3, [r4, #16]
 8004dd8:	47d0      	blx	sl
 8004dda:	3001      	adds	r0, #1
 8004ddc:	d0ad      	beq.n	8004d3a <_printf_i+0x162>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	079b      	lsls	r3, r3, #30
 8004de2:	d413      	bmi.n	8004e0c <_printf_i+0x234>
 8004de4:	68e0      	ldr	r0, [r4, #12]
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	4298      	cmp	r0, r3
 8004dea:	bfb8      	it	lt
 8004dec:	4618      	movlt	r0, r3
 8004dee:	e7a6      	b.n	8004d3e <_printf_i+0x166>
 8004df0:	2301      	movs	r3, #1
 8004df2:	4632      	mov	r2, r6
 8004df4:	4649      	mov	r1, r9
 8004df6:	4640      	mov	r0, r8
 8004df8:	47d0      	blx	sl
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	d09d      	beq.n	8004d3a <_printf_i+0x162>
 8004dfe:	3501      	adds	r5, #1
 8004e00:	68e3      	ldr	r3, [r4, #12]
 8004e02:	9903      	ldr	r1, [sp, #12]
 8004e04:	1a5b      	subs	r3, r3, r1
 8004e06:	42ab      	cmp	r3, r5
 8004e08:	dcf2      	bgt.n	8004df0 <_printf_i+0x218>
 8004e0a:	e7eb      	b.n	8004de4 <_printf_i+0x20c>
 8004e0c:	2500      	movs	r5, #0
 8004e0e:	f104 0619 	add.w	r6, r4, #25
 8004e12:	e7f5      	b.n	8004e00 <_printf_i+0x228>
 8004e14:	08008068 	.word	0x08008068
 8004e18:	08008079 	.word	0x08008079

08004e1c <std>:
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	b510      	push	{r4, lr}
 8004e20:	4604      	mov	r4, r0
 8004e22:	e9c0 3300 	strd	r3, r3, [r0]
 8004e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e2a:	6083      	str	r3, [r0, #8]
 8004e2c:	8181      	strh	r1, [r0, #12]
 8004e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8004e30:	81c2      	strh	r2, [r0, #14]
 8004e32:	6183      	str	r3, [r0, #24]
 8004e34:	4619      	mov	r1, r3
 8004e36:	2208      	movs	r2, #8
 8004e38:	305c      	adds	r0, #92	; 0x5c
 8004e3a:	f000 f914 	bl	8005066 <memset>
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <std+0x58>)
 8004e40:	6224      	str	r4, [r4, #32]
 8004e42:	6263      	str	r3, [r4, #36]	; 0x24
 8004e44:	4b0c      	ldr	r3, [pc, #48]	; (8004e78 <std+0x5c>)
 8004e46:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <std+0x60>)
 8004e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e4c:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <std+0x64>)
 8004e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e50:	4b0c      	ldr	r3, [pc, #48]	; (8004e84 <std+0x68>)
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d006      	beq.n	8004e64 <std+0x48>
 8004e56:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004e5a:	4294      	cmp	r4, r2
 8004e5c:	d002      	beq.n	8004e64 <std+0x48>
 8004e5e:	33d0      	adds	r3, #208	; 0xd0
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d105      	bne.n	8004e70 <std+0x54>
 8004e64:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	f000 b988 	b.w	8005180 <__retarget_lock_init_recursive>
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	bf00      	nop
 8004e74:	08004fe1 	.word	0x08004fe1
 8004e78:	08005003 	.word	0x08005003
 8004e7c:	0800503b 	.word	0x0800503b
 8004e80:	0800505f 	.word	0x0800505f
 8004e84:	200002f4 	.word	0x200002f4

08004e88 <stdio_exit_handler>:
 8004e88:	4a02      	ldr	r2, [pc, #8]	; (8004e94 <stdio_exit_handler+0xc>)
 8004e8a:	4903      	ldr	r1, [pc, #12]	; (8004e98 <stdio_exit_handler+0x10>)
 8004e8c:	4803      	ldr	r0, [pc, #12]	; (8004e9c <stdio_exit_handler+0x14>)
 8004e8e:	f000 b869 	b.w	8004f64 <_fwalk_sglue>
 8004e92:	bf00      	nop
 8004e94:	20000020 	.word	0x20000020
 8004e98:	080069b5 	.word	0x080069b5
 8004e9c:	2000002c 	.word	0x2000002c

08004ea0 <cleanup_stdio>:
 8004ea0:	6841      	ldr	r1, [r0, #4]
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <cleanup_stdio+0x34>)
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	4299      	cmp	r1, r3
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	d001      	beq.n	8004eb0 <cleanup_stdio+0x10>
 8004eac:	f001 fd82 	bl	80069b4 <_fflush_r>
 8004eb0:	68a1      	ldr	r1, [r4, #8]
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <cleanup_stdio+0x38>)
 8004eb4:	4299      	cmp	r1, r3
 8004eb6:	d002      	beq.n	8004ebe <cleanup_stdio+0x1e>
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f001 fd7b 	bl	80069b4 <_fflush_r>
 8004ebe:	68e1      	ldr	r1, [r4, #12]
 8004ec0:	4b06      	ldr	r3, [pc, #24]	; (8004edc <cleanup_stdio+0x3c>)
 8004ec2:	4299      	cmp	r1, r3
 8004ec4:	d004      	beq.n	8004ed0 <cleanup_stdio+0x30>
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ecc:	f001 bd72 	b.w	80069b4 <_fflush_r>
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	bf00      	nop
 8004ed4:	200002f4 	.word	0x200002f4
 8004ed8:	2000035c 	.word	0x2000035c
 8004edc:	200003c4 	.word	0x200003c4

08004ee0 <global_stdio_init.part.0>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <global_stdio_init.part.0+0x30>)
 8004ee4:	4c0b      	ldr	r4, [pc, #44]	; (8004f14 <global_stdio_init.part.0+0x34>)
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	; (8004f18 <global_stdio_init.part.0+0x38>)
 8004ee8:	4620      	mov	r0, r4
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	2104      	movs	r1, #4
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f7ff ff94 	bl	8004e1c <std>
 8004ef4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2109      	movs	r1, #9
 8004efc:	f7ff ff8e 	bl	8004e1c <std>
 8004f00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004f04:	2202      	movs	r2, #2
 8004f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f0a:	2112      	movs	r1, #18
 8004f0c:	f7ff bf86 	b.w	8004e1c <std>
 8004f10:	2000042c 	.word	0x2000042c
 8004f14:	200002f4 	.word	0x200002f4
 8004f18:	08004e89 	.word	0x08004e89

08004f1c <__sfp_lock_acquire>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__sfp_lock_acquire+0x8>)
 8004f1e:	f000 b930 	b.w	8005182 <__retarget_lock_acquire_recursive>
 8004f22:	bf00      	nop
 8004f24:	20000435 	.word	0x20000435

08004f28 <__sfp_lock_release>:
 8004f28:	4801      	ldr	r0, [pc, #4]	; (8004f30 <__sfp_lock_release+0x8>)
 8004f2a:	f000 b92b 	b.w	8005184 <__retarget_lock_release_recursive>
 8004f2e:	bf00      	nop
 8004f30:	20000435 	.word	0x20000435

08004f34 <__sinit>:
 8004f34:	b510      	push	{r4, lr}
 8004f36:	4604      	mov	r4, r0
 8004f38:	f7ff fff0 	bl	8004f1c <__sfp_lock_acquire>
 8004f3c:	6a23      	ldr	r3, [r4, #32]
 8004f3e:	b11b      	cbz	r3, 8004f48 <__sinit+0x14>
 8004f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f44:	f7ff bff0 	b.w	8004f28 <__sfp_lock_release>
 8004f48:	4b04      	ldr	r3, [pc, #16]	; (8004f5c <__sinit+0x28>)
 8004f4a:	6223      	str	r3, [r4, #32]
 8004f4c:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <__sinit+0x2c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f5      	bne.n	8004f40 <__sinit+0xc>
 8004f54:	f7ff ffc4 	bl	8004ee0 <global_stdio_init.part.0>
 8004f58:	e7f2      	b.n	8004f40 <__sinit+0xc>
 8004f5a:	bf00      	nop
 8004f5c:	08004ea1 	.word	0x08004ea1
 8004f60:	2000042c 	.word	0x2000042c

08004f64 <_fwalk_sglue>:
 8004f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f68:	4607      	mov	r7, r0
 8004f6a:	4688      	mov	r8, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f74:	f1b9 0901 	subs.w	r9, r9, #1
 8004f78:	d505      	bpl.n	8004f86 <_fwalk_sglue+0x22>
 8004f7a:	6824      	ldr	r4, [r4, #0]
 8004f7c:	2c00      	cmp	r4, #0
 8004f7e:	d1f7      	bne.n	8004f70 <_fwalk_sglue+0xc>
 8004f80:	4630      	mov	r0, r6
 8004f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f86:	89ab      	ldrh	r3, [r5, #12]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d907      	bls.n	8004f9c <_fwalk_sglue+0x38>
 8004f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f90:	3301      	adds	r3, #1
 8004f92:	d003      	beq.n	8004f9c <_fwalk_sglue+0x38>
 8004f94:	4629      	mov	r1, r5
 8004f96:	4638      	mov	r0, r7
 8004f98:	47c0      	blx	r8
 8004f9a:	4306      	orrs	r6, r0
 8004f9c:	3568      	adds	r5, #104	; 0x68
 8004f9e:	e7e9      	b.n	8004f74 <_fwalk_sglue+0x10>

08004fa0 <siprintf>:
 8004fa0:	b40e      	push	{r1, r2, r3}
 8004fa2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fa6:	b500      	push	{lr}
 8004fa8:	b09c      	sub	sp, #112	; 0x70
 8004faa:	ab1d      	add	r3, sp, #116	; 0x74
 8004fac:	9002      	str	r0, [sp, #8]
 8004fae:	9006      	str	r0, [sp, #24]
 8004fb0:	9107      	str	r1, [sp, #28]
 8004fb2:	9104      	str	r1, [sp, #16]
 8004fb4:	4808      	ldr	r0, [pc, #32]	; (8004fd8 <siprintf+0x38>)
 8004fb6:	4909      	ldr	r1, [pc, #36]	; (8004fdc <siprintf+0x3c>)
 8004fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fbc:	9105      	str	r1, [sp, #20]
 8004fbe:	6800      	ldr	r0, [r0, #0]
 8004fc0:	a902      	add	r1, sp, #8
 8004fc2:	9301      	str	r3, [sp, #4]
 8004fc4:	f001 fb76 	bl	80066b4 <_svfiprintf_r>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	9b02      	ldr	r3, [sp, #8]
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	b01c      	add	sp, #112	; 0x70
 8004fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fd4:	b003      	add	sp, #12
 8004fd6:	4770      	bx	lr
 8004fd8:	20000078 	.word	0x20000078
 8004fdc:	ffff0208 	.word	0xffff0208

08004fe0 <__sread>:
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fe8:	f000 f86c 	bl	80050c4 <_read_r>
 8004fec:	2800      	cmp	r0, #0
 8004fee:	bfab      	itete	ge
 8004ff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8004ff4:	181b      	addge	r3, r3, r0
 8004ff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004ffa:	bfac      	ite	ge
 8004ffc:	6563      	strge	r3, [r4, #84]	; 0x54
 8004ffe:	81a3      	strhlt	r3, [r4, #12]
 8005000:	bd10      	pop	{r4, pc}

08005002 <__swrite>:
 8005002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005006:	461f      	mov	r7, r3
 8005008:	898b      	ldrh	r3, [r1, #12]
 800500a:	4605      	mov	r5, r0
 800500c:	05db      	lsls	r3, r3, #23
 800500e:	460c      	mov	r4, r1
 8005010:	4616      	mov	r6, r2
 8005012:	d505      	bpl.n	8005020 <__swrite+0x1e>
 8005014:	2302      	movs	r3, #2
 8005016:	2200      	movs	r2, #0
 8005018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501c:	f000 f840 	bl	80050a0 <_lseek_r>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	4632      	mov	r2, r6
 8005024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005028:	81a3      	strh	r3, [r4, #12]
 800502a:	4628      	mov	r0, r5
 800502c:	463b      	mov	r3, r7
 800502e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005036:	f000 b867 	b.w	8005108 <_write_r>

0800503a <__sseek>:
 800503a:	b510      	push	{r4, lr}
 800503c:	460c      	mov	r4, r1
 800503e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005042:	f000 f82d 	bl	80050a0 <_lseek_r>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	bf15      	itete	ne
 800504c:	6560      	strne	r0, [r4, #84]	; 0x54
 800504e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005056:	81a3      	strheq	r3, [r4, #12]
 8005058:	bf18      	it	ne
 800505a:	81a3      	strhne	r3, [r4, #12]
 800505c:	bd10      	pop	{r4, pc}

0800505e <__sclose>:
 800505e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005062:	f000 b80d 	b.w	8005080 <_close_r>

08005066 <memset>:
 8005066:	4603      	mov	r3, r0
 8005068:	4402      	add	r2, r0
 800506a:	4293      	cmp	r3, r2
 800506c:	d100      	bne.n	8005070 <memset+0xa>
 800506e:	4770      	bx	lr
 8005070:	f803 1b01 	strb.w	r1, [r3], #1
 8005074:	e7f9      	b.n	800506a <memset+0x4>
	...

08005078 <_localeconv_r>:
 8005078:	4800      	ldr	r0, [pc, #0]	; (800507c <_localeconv_r+0x4>)
 800507a:	4770      	bx	lr
 800507c:	2000016c 	.word	0x2000016c

08005080 <_close_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	2300      	movs	r3, #0
 8005084:	4d05      	ldr	r5, [pc, #20]	; (800509c <_close_r+0x1c>)
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	f7fc fd7a 	bl	8001b84 <_close>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_close_r+0x1a>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	b103      	cbz	r3, 800509a <_close_r+0x1a>
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	20000430 	.word	0x20000430

080050a0 <_lseek_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4604      	mov	r4, r0
 80050a4:	4608      	mov	r0, r1
 80050a6:	4611      	mov	r1, r2
 80050a8:	2200      	movs	r2, #0
 80050aa:	4d05      	ldr	r5, [pc, #20]	; (80050c0 <_lseek_r+0x20>)
 80050ac:	602a      	str	r2, [r5, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f7fc fd8c 	bl	8001bcc <_lseek>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_lseek_r+0x1e>
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	b103      	cbz	r3, 80050be <_lseek_r+0x1e>
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	20000430 	.word	0x20000430

080050c4 <_read_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	2200      	movs	r2, #0
 80050ce:	4d05      	ldr	r5, [pc, #20]	; (80050e4 <_read_r+0x20>)
 80050d0:	602a      	str	r2, [r5, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f7fc fd1d 	bl	8001b12 <_read>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_read_r+0x1e>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_read_r+0x1e>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	20000430 	.word	0x20000430

080050e8 <_sbrk_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	2300      	movs	r3, #0
 80050ec:	4d05      	ldr	r5, [pc, #20]	; (8005104 <_sbrk_r+0x1c>)
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	602b      	str	r3, [r5, #0]
 80050f4:	f7fc fd76 	bl	8001be4 <_sbrk>
 80050f8:	1c43      	adds	r3, r0, #1
 80050fa:	d102      	bne.n	8005102 <_sbrk_r+0x1a>
 80050fc:	682b      	ldr	r3, [r5, #0]
 80050fe:	b103      	cbz	r3, 8005102 <_sbrk_r+0x1a>
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	bd38      	pop	{r3, r4, r5, pc}
 8005104:	20000430 	.word	0x20000430

08005108 <_write_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	4611      	mov	r1, r2
 8005110:	2200      	movs	r2, #0
 8005112:	4d05      	ldr	r5, [pc, #20]	; (8005128 <_write_r+0x20>)
 8005114:	602a      	str	r2, [r5, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	f7fc fd18 	bl	8001b4c <_write>
 800511c:	1c43      	adds	r3, r0, #1
 800511e:	d102      	bne.n	8005126 <_write_r+0x1e>
 8005120:	682b      	ldr	r3, [r5, #0]
 8005122:	b103      	cbz	r3, 8005126 <_write_r+0x1e>
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	bd38      	pop	{r3, r4, r5, pc}
 8005128:	20000430 	.word	0x20000430

0800512c <__errno>:
 800512c:	4b01      	ldr	r3, [pc, #4]	; (8005134 <__errno+0x8>)
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000078 	.word	0x20000078

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	2600      	movs	r6, #0
 800513c:	4d0c      	ldr	r5, [pc, #48]	; (8005170 <__libc_init_array+0x38>)
 800513e:	4c0d      	ldr	r4, [pc, #52]	; (8005174 <__libc_init_array+0x3c>)
 8005140:	1b64      	subs	r4, r4, r5
 8005142:	10a4      	asrs	r4, r4, #2
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	f002 fecc 	bl	8007ee4 <_init>
 800514c:	2600      	movs	r6, #0
 800514e:	4d0a      	ldr	r5, [pc, #40]	; (8005178 <__libc_init_array+0x40>)
 8005150:	4c0a      	ldr	r4, [pc, #40]	; (800517c <__libc_init_array+0x44>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	080083f8 	.word	0x080083f8
 8005174:	080083f8 	.word	0x080083f8
 8005178:	080083f8 	.word	0x080083f8
 800517c:	080083fc 	.word	0x080083fc

08005180 <__retarget_lock_init_recursive>:
 8005180:	4770      	bx	lr

08005182 <__retarget_lock_acquire_recursive>:
 8005182:	4770      	bx	lr

08005184 <__retarget_lock_release_recursive>:
 8005184:	4770      	bx	lr

08005186 <memchr>:
 8005186:	4603      	mov	r3, r0
 8005188:	b510      	push	{r4, lr}
 800518a:	b2c9      	uxtb	r1, r1
 800518c:	4402      	add	r2, r0
 800518e:	4293      	cmp	r3, r2
 8005190:	4618      	mov	r0, r3
 8005192:	d101      	bne.n	8005198 <memchr+0x12>
 8005194:	2000      	movs	r0, #0
 8005196:	e003      	b.n	80051a0 <memchr+0x1a>
 8005198:	7804      	ldrb	r4, [r0, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	428c      	cmp	r4, r1
 800519e:	d1f6      	bne.n	800518e <memchr+0x8>
 80051a0:	bd10      	pop	{r4, pc}

080051a2 <quorem>:
 80051a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a6:	6903      	ldr	r3, [r0, #16]
 80051a8:	690c      	ldr	r4, [r1, #16]
 80051aa:	4607      	mov	r7, r0
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	db7f      	blt.n	80052b0 <quorem+0x10e>
 80051b0:	3c01      	subs	r4, #1
 80051b2:	f100 0514 	add.w	r5, r0, #20
 80051b6:	f101 0814 	add.w	r8, r1, #20
 80051ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051c8:	3301      	adds	r3, #1
 80051ca:	429a      	cmp	r2, r3
 80051cc:	fbb2 f6f3 	udiv	r6, r2, r3
 80051d0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051d8:	d331      	bcc.n	800523e <quorem+0x9c>
 80051da:	f04f 0e00 	mov.w	lr, #0
 80051de:	4640      	mov	r0, r8
 80051e0:	46ac      	mov	ip, r5
 80051e2:	46f2      	mov	sl, lr
 80051e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80051e8:	b293      	uxth	r3, r2
 80051ea:	fb06 e303 	mla	r3, r6, r3, lr
 80051ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80051f2:	0c1a      	lsrs	r2, r3, #16
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	fb06 220e 	mla	r2, r6, lr, r2
 80051fa:	ebaa 0303 	sub.w	r3, sl, r3
 80051fe:	f8dc a000 	ldr.w	sl, [ip]
 8005202:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005206:	fa1f fa8a 	uxth.w	sl, sl
 800520a:	4453      	add	r3, sl
 800520c:	f8dc a000 	ldr.w	sl, [ip]
 8005210:	b292      	uxth	r2, r2
 8005212:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005216:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800521a:	b29b      	uxth	r3, r3
 800521c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005220:	4581      	cmp	r9, r0
 8005222:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005226:	f84c 3b04 	str.w	r3, [ip], #4
 800522a:	d2db      	bcs.n	80051e4 <quorem+0x42>
 800522c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005230:	b92b      	cbnz	r3, 800523e <quorem+0x9c>
 8005232:	9b01      	ldr	r3, [sp, #4]
 8005234:	3b04      	subs	r3, #4
 8005236:	429d      	cmp	r5, r3
 8005238:	461a      	mov	r2, r3
 800523a:	d32d      	bcc.n	8005298 <quorem+0xf6>
 800523c:	613c      	str	r4, [r7, #16]
 800523e:	4638      	mov	r0, r7
 8005240:	f001 f8e0 	bl	8006404 <__mcmp>
 8005244:	2800      	cmp	r0, #0
 8005246:	db23      	blt.n	8005290 <quorem+0xee>
 8005248:	4629      	mov	r1, r5
 800524a:	2000      	movs	r0, #0
 800524c:	3601      	adds	r6, #1
 800524e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005252:	f8d1 c000 	ldr.w	ip, [r1]
 8005256:	b293      	uxth	r3, r2
 8005258:	1ac3      	subs	r3, r0, r3
 800525a:	0c12      	lsrs	r2, r2, #16
 800525c:	fa1f f08c 	uxth.w	r0, ip
 8005260:	4403      	add	r3, r0
 8005262:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005266:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800526a:	b29b      	uxth	r3, r3
 800526c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005270:	45c1      	cmp	r9, r8
 8005272:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005276:	f841 3b04 	str.w	r3, [r1], #4
 800527a:	d2e8      	bcs.n	800524e <quorem+0xac>
 800527c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005280:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005284:	b922      	cbnz	r2, 8005290 <quorem+0xee>
 8005286:	3b04      	subs	r3, #4
 8005288:	429d      	cmp	r5, r3
 800528a:	461a      	mov	r2, r3
 800528c:	d30a      	bcc.n	80052a4 <quorem+0x102>
 800528e:	613c      	str	r4, [r7, #16]
 8005290:	4630      	mov	r0, r6
 8005292:	b003      	add	sp, #12
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	3b04      	subs	r3, #4
 800529c:	2a00      	cmp	r2, #0
 800529e:	d1cd      	bne.n	800523c <quorem+0x9a>
 80052a0:	3c01      	subs	r4, #1
 80052a2:	e7c8      	b.n	8005236 <quorem+0x94>
 80052a4:	6812      	ldr	r2, [r2, #0]
 80052a6:	3b04      	subs	r3, #4
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d1f0      	bne.n	800528e <quorem+0xec>
 80052ac:	3c01      	subs	r4, #1
 80052ae:	e7eb      	b.n	8005288 <quorem+0xe6>
 80052b0:	2000      	movs	r0, #0
 80052b2:	e7ee      	b.n	8005292 <quorem+0xf0>
 80052b4:	0000      	movs	r0, r0
	...

080052b8 <_dtoa_r>:
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	461f      	mov	r7, r3
 80052c0:	69c4      	ldr	r4, [r0, #28]
 80052c2:	b099      	sub	sp, #100	; 0x64
 80052c4:	4605      	mov	r5, r0
 80052c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80052ca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80052ce:	b974      	cbnz	r4, 80052ee <_dtoa_r+0x36>
 80052d0:	2010      	movs	r0, #16
 80052d2:	f7ff f889 	bl	80043e8 <malloc>
 80052d6:	4602      	mov	r2, r0
 80052d8:	61e8      	str	r0, [r5, #28]
 80052da:	b920      	cbnz	r0, 80052e6 <_dtoa_r+0x2e>
 80052dc:	21ef      	movs	r1, #239	; 0xef
 80052de:	4bac      	ldr	r3, [pc, #688]	; (8005590 <_dtoa_r+0x2d8>)
 80052e0:	48ac      	ldr	r0, [pc, #688]	; (8005594 <_dtoa_r+0x2dc>)
 80052e2:	f001 fbb7 	bl	8006a54 <__assert_func>
 80052e6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052ea:	6004      	str	r4, [r0, #0]
 80052ec:	60c4      	str	r4, [r0, #12]
 80052ee:	69eb      	ldr	r3, [r5, #28]
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	b151      	cbz	r1, 800530a <_dtoa_r+0x52>
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	2301      	movs	r3, #1
 80052f8:	4093      	lsls	r3, r2
 80052fa:	604a      	str	r2, [r1, #4]
 80052fc:	608b      	str	r3, [r1, #8]
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fe46 	bl	8005f90 <_Bfree>
 8005304:	2200      	movs	r2, #0
 8005306:	69eb      	ldr	r3, [r5, #28]
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	1e3b      	subs	r3, r7, #0
 800530c:	bfaf      	iteee	ge
 800530e:	2300      	movge	r3, #0
 8005310:	2201      	movlt	r2, #1
 8005312:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005316:	9305      	strlt	r3, [sp, #20]
 8005318:	bfa8      	it	ge
 800531a:	f8c8 3000 	strge.w	r3, [r8]
 800531e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005322:	4b9d      	ldr	r3, [pc, #628]	; (8005598 <_dtoa_r+0x2e0>)
 8005324:	bfb8      	it	lt
 8005326:	f8c8 2000 	strlt.w	r2, [r8]
 800532a:	ea33 0309 	bics.w	r3, r3, r9
 800532e:	d119      	bne.n	8005364 <_dtoa_r+0xac>
 8005330:	f242 730f 	movw	r3, #9999	; 0x270f
 8005334:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800533c:	4333      	orrs	r3, r6
 800533e:	f000 8589 	beq.w	8005e54 <_dtoa_r+0xb9c>
 8005342:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005344:	b953      	cbnz	r3, 800535c <_dtoa_r+0xa4>
 8005346:	4b95      	ldr	r3, [pc, #596]	; (800559c <_dtoa_r+0x2e4>)
 8005348:	e023      	b.n	8005392 <_dtoa_r+0xda>
 800534a:	4b95      	ldr	r3, [pc, #596]	; (80055a0 <_dtoa_r+0x2e8>)
 800534c:	9303      	str	r3, [sp, #12]
 800534e:	3308      	adds	r3, #8
 8005350:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	9803      	ldr	r0, [sp, #12]
 8005356:	b019      	add	sp, #100	; 0x64
 8005358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535c:	4b8f      	ldr	r3, [pc, #572]	; (800559c <_dtoa_r+0x2e4>)
 800535e:	9303      	str	r3, [sp, #12]
 8005360:	3303      	adds	r3, #3
 8005362:	e7f5      	b.n	8005350 <_dtoa_r+0x98>
 8005364:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005368:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800536c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005370:	2200      	movs	r2, #0
 8005372:	2300      	movs	r3, #0
 8005374:	f7fb fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8005378:	4680      	mov	r8, r0
 800537a:	b160      	cbz	r0, 8005396 <_dtoa_r+0xde>
 800537c:	2301      	movs	r3, #1
 800537e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8562 	beq.w	8005e4e <_dtoa_r+0xb96>
 800538a:	4b86      	ldr	r3, [pc, #536]	; (80055a4 <_dtoa_r+0x2ec>)
 800538c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	3b01      	subs	r3, #1
 8005392:	9303      	str	r3, [sp, #12]
 8005394:	e7de      	b.n	8005354 <_dtoa_r+0x9c>
 8005396:	ab16      	add	r3, sp, #88	; 0x58
 8005398:	9301      	str	r3, [sp, #4]
 800539a:	ab17      	add	r3, sp, #92	; 0x5c
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	4628      	mov	r0, r5
 80053a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80053a4:	f001 f8d6 	bl	8006554 <__d2b>
 80053a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80053ac:	4682      	mov	sl, r0
 80053ae:	2c00      	cmp	r4, #0
 80053b0:	d07e      	beq.n	80054b0 <_dtoa_r+0x1f8>
 80053b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053b8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80053bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053c0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80053c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80053c8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80053cc:	4619      	mov	r1, r3
 80053ce:	2200      	movs	r2, #0
 80053d0:	4b75      	ldr	r3, [pc, #468]	; (80055a8 <_dtoa_r+0x2f0>)
 80053d2:	f7fa fec9 	bl	8000168 <__aeabi_dsub>
 80053d6:	a368      	add	r3, pc, #416	; (adr r3, 8005578 <_dtoa_r+0x2c0>)
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f7fb f87c 	bl	80004d8 <__aeabi_dmul>
 80053e0:	a367      	add	r3, pc, #412	; (adr r3, 8005580 <_dtoa_r+0x2c8>)
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f7fa fec1 	bl	800016c <__adddf3>
 80053ea:	4606      	mov	r6, r0
 80053ec:	4620      	mov	r0, r4
 80053ee:	460f      	mov	r7, r1
 80053f0:	f7fb f808 	bl	8000404 <__aeabi_i2d>
 80053f4:	a364      	add	r3, pc, #400	; (adr r3, 8005588 <_dtoa_r+0x2d0>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f7fb f86d 	bl	80004d8 <__aeabi_dmul>
 80053fe:	4602      	mov	r2, r0
 8005400:	460b      	mov	r3, r1
 8005402:	4630      	mov	r0, r6
 8005404:	4639      	mov	r1, r7
 8005406:	f7fa feb1 	bl	800016c <__adddf3>
 800540a:	4606      	mov	r6, r0
 800540c:	460f      	mov	r7, r1
 800540e:	f7fb fb13 	bl	8000a38 <__aeabi_d2iz>
 8005412:	2200      	movs	r2, #0
 8005414:	4683      	mov	fp, r0
 8005416:	2300      	movs	r3, #0
 8005418:	4630      	mov	r0, r6
 800541a:	4639      	mov	r1, r7
 800541c:	f7fb face 	bl	80009bc <__aeabi_dcmplt>
 8005420:	b148      	cbz	r0, 8005436 <_dtoa_r+0x17e>
 8005422:	4658      	mov	r0, fp
 8005424:	f7fa ffee 	bl	8000404 <__aeabi_i2d>
 8005428:	4632      	mov	r2, r6
 800542a:	463b      	mov	r3, r7
 800542c:	f7fb fabc 	bl	80009a8 <__aeabi_dcmpeq>
 8005430:	b908      	cbnz	r0, 8005436 <_dtoa_r+0x17e>
 8005432:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005436:	f1bb 0f16 	cmp.w	fp, #22
 800543a:	d857      	bhi.n	80054ec <_dtoa_r+0x234>
 800543c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005440:	4b5a      	ldr	r3, [pc, #360]	; (80055ac <_dtoa_r+0x2f4>)
 8005442:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f7fb fab7 	bl	80009bc <__aeabi_dcmplt>
 800544e:	2800      	cmp	r0, #0
 8005450:	d04e      	beq.n	80054f0 <_dtoa_r+0x238>
 8005452:	2300      	movs	r3, #0
 8005454:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005458:	930f      	str	r3, [sp, #60]	; 0x3c
 800545a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800545c:	1b1b      	subs	r3, r3, r4
 800545e:	1e5a      	subs	r2, r3, #1
 8005460:	bf46      	itte	mi
 8005462:	f1c3 0901 	rsbmi	r9, r3, #1
 8005466:	2300      	movmi	r3, #0
 8005468:	f04f 0900 	movpl.w	r9, #0
 800546c:	9209      	str	r2, [sp, #36]	; 0x24
 800546e:	bf48      	it	mi
 8005470:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005472:	f1bb 0f00 	cmp.w	fp, #0
 8005476:	db3d      	blt.n	80054f4 <_dtoa_r+0x23c>
 8005478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800547a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800547e:	445b      	add	r3, fp
 8005480:	9309      	str	r3, [sp, #36]	; 0x24
 8005482:	2300      	movs	r3, #0
 8005484:	930a      	str	r3, [sp, #40]	; 0x28
 8005486:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005488:	2b09      	cmp	r3, #9
 800548a:	d867      	bhi.n	800555c <_dtoa_r+0x2a4>
 800548c:	2b05      	cmp	r3, #5
 800548e:	bfc4      	itt	gt
 8005490:	3b04      	subgt	r3, #4
 8005492:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005494:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005496:	bfc8      	it	gt
 8005498:	2400      	movgt	r4, #0
 800549a:	f1a3 0302 	sub.w	r3, r3, #2
 800549e:	bfd8      	it	le
 80054a0:	2401      	movle	r4, #1
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	f200 8086 	bhi.w	80055b4 <_dtoa_r+0x2fc>
 80054a8:	e8df f003 	tbb	[pc, r3]
 80054ac:	5637392c 	.word	0x5637392c
 80054b0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80054b4:	441c      	add	r4, r3
 80054b6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	bfc1      	itttt	gt
 80054be:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054c2:	fa09 f903 	lslgt.w	r9, r9, r3
 80054c6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80054ca:	fa26 f303 	lsrgt.w	r3, r6, r3
 80054ce:	bfd6      	itet	le
 80054d0:	f1c3 0320 	rsble	r3, r3, #32
 80054d4:	ea49 0003 	orrgt.w	r0, r9, r3
 80054d8:	fa06 f003 	lslle.w	r0, r6, r3
 80054dc:	f7fa ff82 	bl	80003e4 <__aeabi_ui2d>
 80054e0:	2201      	movs	r2, #1
 80054e2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80054e6:	3c01      	subs	r4, #1
 80054e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80054ea:	e76f      	b.n	80053cc <_dtoa_r+0x114>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e7b3      	b.n	8005458 <_dtoa_r+0x1a0>
 80054f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80054f2:	e7b2      	b.n	800545a <_dtoa_r+0x1a2>
 80054f4:	f1cb 0300 	rsb	r3, fp, #0
 80054f8:	930a      	str	r3, [sp, #40]	; 0x28
 80054fa:	2300      	movs	r3, #0
 80054fc:	eba9 090b 	sub.w	r9, r9, fp
 8005500:	930e      	str	r3, [sp, #56]	; 0x38
 8005502:	e7c0      	b.n	8005486 <_dtoa_r+0x1ce>
 8005504:	2300      	movs	r3, #0
 8005506:	930b      	str	r3, [sp, #44]	; 0x2c
 8005508:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800550a:	2b00      	cmp	r3, #0
 800550c:	dc55      	bgt.n	80055ba <_dtoa_r+0x302>
 800550e:	2301      	movs	r3, #1
 8005510:	461a      	mov	r2, r3
 8005512:	9306      	str	r3, [sp, #24]
 8005514:	9308      	str	r3, [sp, #32]
 8005516:	9223      	str	r2, [sp, #140]	; 0x8c
 8005518:	e00b      	b.n	8005532 <_dtoa_r+0x27a>
 800551a:	2301      	movs	r3, #1
 800551c:	e7f3      	b.n	8005506 <_dtoa_r+0x24e>
 800551e:	2300      	movs	r3, #0
 8005520:	930b      	str	r3, [sp, #44]	; 0x2c
 8005522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005524:	445b      	add	r3, fp
 8005526:	9306      	str	r3, [sp, #24]
 8005528:	3301      	adds	r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	9308      	str	r3, [sp, #32]
 800552e:	bfb8      	it	lt
 8005530:	2301      	movlt	r3, #1
 8005532:	2100      	movs	r1, #0
 8005534:	2204      	movs	r2, #4
 8005536:	69e8      	ldr	r0, [r5, #28]
 8005538:	f102 0614 	add.w	r6, r2, #20
 800553c:	429e      	cmp	r6, r3
 800553e:	d940      	bls.n	80055c2 <_dtoa_r+0x30a>
 8005540:	6041      	str	r1, [r0, #4]
 8005542:	4628      	mov	r0, r5
 8005544:	f000 fce4 	bl	8005f10 <_Balloc>
 8005548:	9003      	str	r0, [sp, #12]
 800554a:	2800      	cmp	r0, #0
 800554c:	d13c      	bne.n	80055c8 <_dtoa_r+0x310>
 800554e:	4602      	mov	r2, r0
 8005550:	f240 11af 	movw	r1, #431	; 0x1af
 8005554:	4b16      	ldr	r3, [pc, #88]	; (80055b0 <_dtoa_r+0x2f8>)
 8005556:	e6c3      	b.n	80052e0 <_dtoa_r+0x28>
 8005558:	2301      	movs	r3, #1
 800555a:	e7e1      	b.n	8005520 <_dtoa_r+0x268>
 800555c:	2401      	movs	r4, #1
 800555e:	2300      	movs	r3, #0
 8005560:	940b      	str	r4, [sp, #44]	; 0x2c
 8005562:	9322      	str	r3, [sp, #136]	; 0x88
 8005564:	f04f 33ff 	mov.w	r3, #4294967295
 8005568:	2200      	movs	r2, #0
 800556a:	9306      	str	r3, [sp, #24]
 800556c:	9308      	str	r3, [sp, #32]
 800556e:	2312      	movs	r3, #18
 8005570:	e7d1      	b.n	8005516 <_dtoa_r+0x25e>
 8005572:	bf00      	nop
 8005574:	f3af 8000 	nop.w
 8005578:	636f4361 	.word	0x636f4361
 800557c:	3fd287a7 	.word	0x3fd287a7
 8005580:	8b60c8b3 	.word	0x8b60c8b3
 8005584:	3fc68a28 	.word	0x3fc68a28
 8005588:	509f79fb 	.word	0x509f79fb
 800558c:	3fd34413 	.word	0x3fd34413
 8005590:	08008097 	.word	0x08008097
 8005594:	080080ae 	.word	0x080080ae
 8005598:	7ff00000 	.word	0x7ff00000
 800559c:	08008093 	.word	0x08008093
 80055a0:	0800808a 	.word	0x0800808a
 80055a4:	08008067 	.word	0x08008067
 80055a8:	3ff80000 	.word	0x3ff80000
 80055ac:	08008198 	.word	0x08008198
 80055b0:	08008106 	.word	0x08008106
 80055b4:	2301      	movs	r3, #1
 80055b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80055b8:	e7d4      	b.n	8005564 <_dtoa_r+0x2ac>
 80055ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055bc:	9306      	str	r3, [sp, #24]
 80055be:	9308      	str	r3, [sp, #32]
 80055c0:	e7b7      	b.n	8005532 <_dtoa_r+0x27a>
 80055c2:	3101      	adds	r1, #1
 80055c4:	0052      	lsls	r2, r2, #1
 80055c6:	e7b7      	b.n	8005538 <_dtoa_r+0x280>
 80055c8:	69eb      	ldr	r3, [r5, #28]
 80055ca:	9a03      	ldr	r2, [sp, #12]
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	9b08      	ldr	r3, [sp, #32]
 80055d0:	2b0e      	cmp	r3, #14
 80055d2:	f200 80a8 	bhi.w	8005726 <_dtoa_r+0x46e>
 80055d6:	2c00      	cmp	r4, #0
 80055d8:	f000 80a5 	beq.w	8005726 <_dtoa_r+0x46e>
 80055dc:	f1bb 0f00 	cmp.w	fp, #0
 80055e0:	dd34      	ble.n	800564c <_dtoa_r+0x394>
 80055e2:	4b9a      	ldr	r3, [pc, #616]	; (800584c <_dtoa_r+0x594>)
 80055e4:	f00b 020f 	and.w	r2, fp, #15
 80055e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80055f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80055f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80055f8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80055fc:	d016      	beq.n	800562c <_dtoa_r+0x374>
 80055fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005602:	4b93      	ldr	r3, [pc, #588]	; (8005850 <_dtoa_r+0x598>)
 8005604:	2703      	movs	r7, #3
 8005606:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800560a:	f7fb f88f 	bl	800072c <__aeabi_ddiv>
 800560e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005612:	f004 040f 	and.w	r4, r4, #15
 8005616:	4e8e      	ldr	r6, [pc, #568]	; (8005850 <_dtoa_r+0x598>)
 8005618:	b954      	cbnz	r4, 8005630 <_dtoa_r+0x378>
 800561a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800561e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005622:	f7fb f883 	bl	800072c <__aeabi_ddiv>
 8005626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800562a:	e029      	b.n	8005680 <_dtoa_r+0x3c8>
 800562c:	2702      	movs	r7, #2
 800562e:	e7f2      	b.n	8005616 <_dtoa_r+0x35e>
 8005630:	07e1      	lsls	r1, r4, #31
 8005632:	d508      	bpl.n	8005646 <_dtoa_r+0x38e>
 8005634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005638:	e9d6 2300 	ldrd	r2, r3, [r6]
 800563c:	f7fa ff4c 	bl	80004d8 <__aeabi_dmul>
 8005640:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005644:	3701      	adds	r7, #1
 8005646:	1064      	asrs	r4, r4, #1
 8005648:	3608      	adds	r6, #8
 800564a:	e7e5      	b.n	8005618 <_dtoa_r+0x360>
 800564c:	f000 80a5 	beq.w	800579a <_dtoa_r+0x4e2>
 8005650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005654:	f1cb 0400 	rsb	r4, fp, #0
 8005658:	4b7c      	ldr	r3, [pc, #496]	; (800584c <_dtoa_r+0x594>)
 800565a:	f004 020f 	and.w	r2, r4, #15
 800565e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f7fa ff37 	bl	80004d8 <__aeabi_dmul>
 800566a:	2702      	movs	r7, #2
 800566c:	2300      	movs	r3, #0
 800566e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005672:	4e77      	ldr	r6, [pc, #476]	; (8005850 <_dtoa_r+0x598>)
 8005674:	1124      	asrs	r4, r4, #4
 8005676:	2c00      	cmp	r4, #0
 8005678:	f040 8084 	bne.w	8005784 <_dtoa_r+0x4cc>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1d2      	bne.n	8005626 <_dtoa_r+0x36e>
 8005680:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005684:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005688:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8087 	beq.w	800579e <_dtoa_r+0x4e6>
 8005690:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005694:	2200      	movs	r2, #0
 8005696:	4b6f      	ldr	r3, [pc, #444]	; (8005854 <_dtoa_r+0x59c>)
 8005698:	f7fb f990 	bl	80009bc <__aeabi_dcmplt>
 800569c:	2800      	cmp	r0, #0
 800569e:	d07e      	beq.n	800579e <_dtoa_r+0x4e6>
 80056a0:	9b08      	ldr	r3, [sp, #32]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d07b      	beq.n	800579e <_dtoa_r+0x4e6>
 80056a6:	9b06      	ldr	r3, [sp, #24]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	dd38      	ble.n	800571e <_dtoa_r+0x466>
 80056ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056b0:	2200      	movs	r2, #0
 80056b2:	4b69      	ldr	r3, [pc, #420]	; (8005858 <_dtoa_r+0x5a0>)
 80056b4:	f7fa ff10 	bl	80004d8 <__aeabi_dmul>
 80056b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056bc:	9c06      	ldr	r4, [sp, #24]
 80056be:	f10b 38ff 	add.w	r8, fp, #4294967295
 80056c2:	3701      	adds	r7, #1
 80056c4:	4638      	mov	r0, r7
 80056c6:	f7fa fe9d 	bl	8000404 <__aeabi_i2d>
 80056ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056ce:	f7fa ff03 	bl	80004d8 <__aeabi_dmul>
 80056d2:	2200      	movs	r2, #0
 80056d4:	4b61      	ldr	r3, [pc, #388]	; (800585c <_dtoa_r+0x5a4>)
 80056d6:	f7fa fd49 	bl	800016c <__adddf3>
 80056da:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80056de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80056e2:	9611      	str	r6, [sp, #68]	; 0x44
 80056e4:	2c00      	cmp	r4, #0
 80056e6:	d15d      	bne.n	80057a4 <_dtoa_r+0x4ec>
 80056e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056ec:	2200      	movs	r2, #0
 80056ee:	4b5c      	ldr	r3, [pc, #368]	; (8005860 <_dtoa_r+0x5a8>)
 80056f0:	f7fa fd3a 	bl	8000168 <__aeabi_dsub>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056fc:	4633      	mov	r3, r6
 80056fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005700:	f7fb f97a 	bl	80009f8 <__aeabi_dcmpgt>
 8005704:	2800      	cmp	r0, #0
 8005706:	f040 8295 	bne.w	8005c34 <_dtoa_r+0x97c>
 800570a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800570e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005710:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005714:	f7fb f952 	bl	80009bc <__aeabi_dcmplt>
 8005718:	2800      	cmp	r0, #0
 800571a:	f040 8289 	bne.w	8005c30 <_dtoa_r+0x978>
 800571e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005722:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005728:	2b00      	cmp	r3, #0
 800572a:	f2c0 8151 	blt.w	80059d0 <_dtoa_r+0x718>
 800572e:	f1bb 0f0e 	cmp.w	fp, #14
 8005732:	f300 814d 	bgt.w	80059d0 <_dtoa_r+0x718>
 8005736:	4b45      	ldr	r3, [pc, #276]	; (800584c <_dtoa_r+0x594>)
 8005738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800573c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005740:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005744:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005746:	2b00      	cmp	r3, #0
 8005748:	f280 80da 	bge.w	8005900 <_dtoa_r+0x648>
 800574c:	9b08      	ldr	r3, [sp, #32]
 800574e:	2b00      	cmp	r3, #0
 8005750:	f300 80d6 	bgt.w	8005900 <_dtoa_r+0x648>
 8005754:	f040 826b 	bne.w	8005c2e <_dtoa_r+0x976>
 8005758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800575c:	2200      	movs	r2, #0
 800575e:	4b40      	ldr	r3, [pc, #256]	; (8005860 <_dtoa_r+0x5a8>)
 8005760:	f7fa feba 	bl	80004d8 <__aeabi_dmul>
 8005764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005768:	f7fb f93c 	bl	80009e4 <__aeabi_dcmpge>
 800576c:	9c08      	ldr	r4, [sp, #32]
 800576e:	4626      	mov	r6, r4
 8005770:	2800      	cmp	r0, #0
 8005772:	f040 8241 	bne.w	8005bf8 <_dtoa_r+0x940>
 8005776:	2331      	movs	r3, #49	; 0x31
 8005778:	9f03      	ldr	r7, [sp, #12]
 800577a:	f10b 0b01 	add.w	fp, fp, #1
 800577e:	f807 3b01 	strb.w	r3, [r7], #1
 8005782:	e23d      	b.n	8005c00 <_dtoa_r+0x948>
 8005784:	07e2      	lsls	r2, r4, #31
 8005786:	d505      	bpl.n	8005794 <_dtoa_r+0x4dc>
 8005788:	e9d6 2300 	ldrd	r2, r3, [r6]
 800578c:	f7fa fea4 	bl	80004d8 <__aeabi_dmul>
 8005790:	2301      	movs	r3, #1
 8005792:	3701      	adds	r7, #1
 8005794:	1064      	asrs	r4, r4, #1
 8005796:	3608      	adds	r6, #8
 8005798:	e76d      	b.n	8005676 <_dtoa_r+0x3be>
 800579a:	2702      	movs	r7, #2
 800579c:	e770      	b.n	8005680 <_dtoa_r+0x3c8>
 800579e:	46d8      	mov	r8, fp
 80057a0:	9c08      	ldr	r4, [sp, #32]
 80057a2:	e78f      	b.n	80056c4 <_dtoa_r+0x40c>
 80057a4:	9903      	ldr	r1, [sp, #12]
 80057a6:	4b29      	ldr	r3, [pc, #164]	; (800584c <_dtoa_r+0x594>)
 80057a8:	4421      	add	r1, r4
 80057aa:	9112      	str	r1, [sp, #72]	; 0x48
 80057ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80057b2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80057b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057ba:	2900      	cmp	r1, #0
 80057bc:	d054      	beq.n	8005868 <_dtoa_r+0x5b0>
 80057be:	2000      	movs	r0, #0
 80057c0:	4928      	ldr	r1, [pc, #160]	; (8005864 <_dtoa_r+0x5ac>)
 80057c2:	f7fa ffb3 	bl	800072c <__aeabi_ddiv>
 80057c6:	463b      	mov	r3, r7
 80057c8:	4632      	mov	r2, r6
 80057ca:	f7fa fccd 	bl	8000168 <__aeabi_dsub>
 80057ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057d2:	9f03      	ldr	r7, [sp, #12]
 80057d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d8:	f7fb f92e 	bl	8000a38 <__aeabi_d2iz>
 80057dc:	4604      	mov	r4, r0
 80057de:	f7fa fe11 	bl	8000404 <__aeabi_i2d>
 80057e2:	4602      	mov	r2, r0
 80057e4:	460b      	mov	r3, r1
 80057e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ea:	f7fa fcbd 	bl	8000168 <__aeabi_dsub>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	3430      	adds	r4, #48	; 0x30
 80057f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057fc:	f807 4b01 	strb.w	r4, [r7], #1
 8005800:	f7fb f8dc 	bl	80009bc <__aeabi_dcmplt>
 8005804:	2800      	cmp	r0, #0
 8005806:	d173      	bne.n	80058f0 <_dtoa_r+0x638>
 8005808:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800580c:	2000      	movs	r0, #0
 800580e:	4911      	ldr	r1, [pc, #68]	; (8005854 <_dtoa_r+0x59c>)
 8005810:	f7fa fcaa 	bl	8000168 <__aeabi_dsub>
 8005814:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005818:	f7fb f8d0 	bl	80009bc <__aeabi_dcmplt>
 800581c:	2800      	cmp	r0, #0
 800581e:	f040 80b6 	bne.w	800598e <_dtoa_r+0x6d6>
 8005822:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005824:	429f      	cmp	r7, r3
 8005826:	f43f af7a 	beq.w	800571e <_dtoa_r+0x466>
 800582a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800582e:	2200      	movs	r2, #0
 8005830:	4b09      	ldr	r3, [pc, #36]	; (8005858 <_dtoa_r+0x5a0>)
 8005832:	f7fa fe51 	bl	80004d8 <__aeabi_dmul>
 8005836:	2200      	movs	r2, #0
 8005838:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800583c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005840:	4b05      	ldr	r3, [pc, #20]	; (8005858 <_dtoa_r+0x5a0>)
 8005842:	f7fa fe49 	bl	80004d8 <__aeabi_dmul>
 8005846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800584a:	e7c3      	b.n	80057d4 <_dtoa_r+0x51c>
 800584c:	08008198 	.word	0x08008198
 8005850:	08008170 	.word	0x08008170
 8005854:	3ff00000 	.word	0x3ff00000
 8005858:	40240000 	.word	0x40240000
 800585c:	401c0000 	.word	0x401c0000
 8005860:	40140000 	.word	0x40140000
 8005864:	3fe00000 	.word	0x3fe00000
 8005868:	4630      	mov	r0, r6
 800586a:	4639      	mov	r1, r7
 800586c:	f7fa fe34 	bl	80004d8 <__aeabi_dmul>
 8005870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005872:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005876:	9c03      	ldr	r4, [sp, #12]
 8005878:	9314      	str	r3, [sp, #80]	; 0x50
 800587a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800587e:	f7fb f8db 	bl	8000a38 <__aeabi_d2iz>
 8005882:	9015      	str	r0, [sp, #84]	; 0x54
 8005884:	f7fa fdbe 	bl	8000404 <__aeabi_i2d>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005890:	f7fa fc6a 	bl	8000168 <__aeabi_dsub>
 8005894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005896:	4606      	mov	r6, r0
 8005898:	3330      	adds	r3, #48	; 0x30
 800589a:	f804 3b01 	strb.w	r3, [r4], #1
 800589e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058a0:	460f      	mov	r7, r1
 80058a2:	429c      	cmp	r4, r3
 80058a4:	f04f 0200 	mov.w	r2, #0
 80058a8:	d124      	bne.n	80058f4 <_dtoa_r+0x63c>
 80058aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80058ae:	4baf      	ldr	r3, [pc, #700]	; (8005b6c <_dtoa_r+0x8b4>)
 80058b0:	f7fa fc5c 	bl	800016c <__adddf3>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4630      	mov	r0, r6
 80058ba:	4639      	mov	r1, r7
 80058bc:	f7fb f89c 	bl	80009f8 <__aeabi_dcmpgt>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d163      	bne.n	800598c <_dtoa_r+0x6d4>
 80058c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058c8:	2000      	movs	r0, #0
 80058ca:	49a8      	ldr	r1, [pc, #672]	; (8005b6c <_dtoa_r+0x8b4>)
 80058cc:	f7fa fc4c 	bl	8000168 <__aeabi_dsub>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4630      	mov	r0, r6
 80058d6:	4639      	mov	r1, r7
 80058d8:	f7fb f870 	bl	80009bc <__aeabi_dcmplt>
 80058dc:	2800      	cmp	r0, #0
 80058de:	f43f af1e 	beq.w	800571e <_dtoa_r+0x466>
 80058e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80058e4:	1e7b      	subs	r3, r7, #1
 80058e6:	9314      	str	r3, [sp, #80]	; 0x50
 80058e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80058ec:	2b30      	cmp	r3, #48	; 0x30
 80058ee:	d0f8      	beq.n	80058e2 <_dtoa_r+0x62a>
 80058f0:	46c3      	mov	fp, r8
 80058f2:	e03b      	b.n	800596c <_dtoa_r+0x6b4>
 80058f4:	4b9e      	ldr	r3, [pc, #632]	; (8005b70 <_dtoa_r+0x8b8>)
 80058f6:	f7fa fdef 	bl	80004d8 <__aeabi_dmul>
 80058fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058fe:	e7bc      	b.n	800587a <_dtoa_r+0x5c2>
 8005900:	9f03      	ldr	r7, [sp, #12]
 8005902:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005906:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800590a:	4640      	mov	r0, r8
 800590c:	4649      	mov	r1, r9
 800590e:	f7fa ff0d 	bl	800072c <__aeabi_ddiv>
 8005912:	f7fb f891 	bl	8000a38 <__aeabi_d2iz>
 8005916:	4604      	mov	r4, r0
 8005918:	f7fa fd74 	bl	8000404 <__aeabi_i2d>
 800591c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005920:	f7fa fdda 	bl	80004d8 <__aeabi_dmul>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4640      	mov	r0, r8
 800592a:	4649      	mov	r1, r9
 800592c:	f7fa fc1c 	bl	8000168 <__aeabi_dsub>
 8005930:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005934:	f807 6b01 	strb.w	r6, [r7], #1
 8005938:	9e03      	ldr	r6, [sp, #12]
 800593a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800593e:	1bbe      	subs	r6, r7, r6
 8005940:	45b4      	cmp	ip, r6
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	d136      	bne.n	80059b6 <_dtoa_r+0x6fe>
 8005948:	f7fa fc10 	bl	800016c <__adddf3>
 800594c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005950:	4680      	mov	r8, r0
 8005952:	4689      	mov	r9, r1
 8005954:	f7fb f850 	bl	80009f8 <__aeabi_dcmpgt>
 8005958:	bb58      	cbnz	r0, 80059b2 <_dtoa_r+0x6fa>
 800595a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800595e:	4640      	mov	r0, r8
 8005960:	4649      	mov	r1, r9
 8005962:	f7fb f821 	bl	80009a8 <__aeabi_dcmpeq>
 8005966:	b108      	cbz	r0, 800596c <_dtoa_r+0x6b4>
 8005968:	07e3      	lsls	r3, r4, #31
 800596a:	d422      	bmi.n	80059b2 <_dtoa_r+0x6fa>
 800596c:	4651      	mov	r1, sl
 800596e:	4628      	mov	r0, r5
 8005970:	f000 fb0e 	bl	8005f90 <_Bfree>
 8005974:	2300      	movs	r3, #0
 8005976:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005978:	703b      	strb	r3, [r7, #0]
 800597a:	f10b 0301 	add.w	r3, fp, #1
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005982:	2b00      	cmp	r3, #0
 8005984:	f43f ace6 	beq.w	8005354 <_dtoa_r+0x9c>
 8005988:	601f      	str	r7, [r3, #0]
 800598a:	e4e3      	b.n	8005354 <_dtoa_r+0x9c>
 800598c:	4627      	mov	r7, r4
 800598e:	463b      	mov	r3, r7
 8005990:	461f      	mov	r7, r3
 8005992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005996:	2a39      	cmp	r2, #57	; 0x39
 8005998:	d107      	bne.n	80059aa <_dtoa_r+0x6f2>
 800599a:	9a03      	ldr	r2, [sp, #12]
 800599c:	429a      	cmp	r2, r3
 800599e:	d1f7      	bne.n	8005990 <_dtoa_r+0x6d8>
 80059a0:	2230      	movs	r2, #48	; 0x30
 80059a2:	9903      	ldr	r1, [sp, #12]
 80059a4:	f108 0801 	add.w	r8, r8, #1
 80059a8:	700a      	strb	r2, [r1, #0]
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	3201      	adds	r2, #1
 80059ae:	701a      	strb	r2, [r3, #0]
 80059b0:	e79e      	b.n	80058f0 <_dtoa_r+0x638>
 80059b2:	46d8      	mov	r8, fp
 80059b4:	e7eb      	b.n	800598e <_dtoa_r+0x6d6>
 80059b6:	2200      	movs	r2, #0
 80059b8:	4b6d      	ldr	r3, [pc, #436]	; (8005b70 <_dtoa_r+0x8b8>)
 80059ba:	f7fa fd8d 	bl	80004d8 <__aeabi_dmul>
 80059be:	2200      	movs	r2, #0
 80059c0:	2300      	movs	r3, #0
 80059c2:	4680      	mov	r8, r0
 80059c4:	4689      	mov	r9, r1
 80059c6:	f7fa ffef 	bl	80009a8 <__aeabi_dcmpeq>
 80059ca:	2800      	cmp	r0, #0
 80059cc:	d09b      	beq.n	8005906 <_dtoa_r+0x64e>
 80059ce:	e7cd      	b.n	800596c <_dtoa_r+0x6b4>
 80059d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059d2:	2a00      	cmp	r2, #0
 80059d4:	f000 80c4 	beq.w	8005b60 <_dtoa_r+0x8a8>
 80059d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80059da:	2a01      	cmp	r2, #1
 80059dc:	f300 80a8 	bgt.w	8005b30 <_dtoa_r+0x878>
 80059e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80059e2:	2a00      	cmp	r2, #0
 80059e4:	f000 80a0 	beq.w	8005b28 <_dtoa_r+0x870>
 80059e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059ec:	464f      	mov	r7, r9
 80059ee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80059f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f2:	2101      	movs	r1, #1
 80059f4:	441a      	add	r2, r3
 80059f6:	4628      	mov	r0, r5
 80059f8:	4499      	add	r9, r3
 80059fa:	9209      	str	r2, [sp, #36]	; 0x24
 80059fc:	f000 fb7e 	bl	80060fc <__i2b>
 8005a00:	4606      	mov	r6, r0
 8005a02:	b15f      	cbz	r7, 8005a1c <_dtoa_r+0x764>
 8005a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	dd08      	ble.n	8005a1c <_dtoa_r+0x764>
 8005a0a:	42bb      	cmp	r3, r7
 8005a0c:	bfa8      	it	ge
 8005a0e:	463b      	movge	r3, r7
 8005a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a12:	eba9 0903 	sub.w	r9, r9, r3
 8005a16:	1aff      	subs	r7, r7, r3
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a1e:	b1f3      	cbz	r3, 8005a5e <_dtoa_r+0x7a6>
 8005a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80a0 	beq.w	8005b68 <_dtoa_r+0x8b0>
 8005a28:	2c00      	cmp	r4, #0
 8005a2a:	dd10      	ble.n	8005a4e <_dtoa_r+0x796>
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	4622      	mov	r2, r4
 8005a30:	4628      	mov	r0, r5
 8005a32:	f000 fc21 	bl	8006278 <__pow5mult>
 8005a36:	4652      	mov	r2, sl
 8005a38:	4601      	mov	r1, r0
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f000 fb73 	bl	8006128 <__multiply>
 8005a42:	4680      	mov	r8, r0
 8005a44:	4651      	mov	r1, sl
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 faa2 	bl	8005f90 <_Bfree>
 8005a4c:	46c2      	mov	sl, r8
 8005a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a50:	1b1a      	subs	r2, r3, r4
 8005a52:	d004      	beq.n	8005a5e <_dtoa_r+0x7a6>
 8005a54:	4651      	mov	r1, sl
 8005a56:	4628      	mov	r0, r5
 8005a58:	f000 fc0e 	bl	8006278 <__pow5mult>
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	2101      	movs	r1, #1
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 fb4b 	bl	80060fc <__i2b>
 8005a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a68:	4604      	mov	r4, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f340 8082 	ble.w	8005b74 <_dtoa_r+0x8bc>
 8005a70:	461a      	mov	r2, r3
 8005a72:	4601      	mov	r1, r0
 8005a74:	4628      	mov	r0, r5
 8005a76:	f000 fbff 	bl	8006278 <__pow5mult>
 8005a7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	dd7b      	ble.n	8005b7a <_dtoa_r+0x8c2>
 8005a82:	f04f 0800 	mov.w	r8, #0
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a8c:	6918      	ldr	r0, [r3, #16]
 8005a8e:	f000 fae7 	bl	8006060 <__hi0bits>
 8005a92:	f1c0 0020 	rsb	r0, r0, #32
 8005a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a98:	4418      	add	r0, r3
 8005a9a:	f010 001f 	ands.w	r0, r0, #31
 8005a9e:	f000 8092 	beq.w	8005bc6 <_dtoa_r+0x90e>
 8005aa2:	f1c0 0320 	rsb	r3, r0, #32
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	f340 8085 	ble.w	8005bb6 <_dtoa_r+0x8fe>
 8005aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aae:	f1c0 001c 	rsb	r0, r0, #28
 8005ab2:	4403      	add	r3, r0
 8005ab4:	4481      	add	r9, r0
 8005ab6:	4407      	add	r7, r0
 8005ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aba:	f1b9 0f00 	cmp.w	r9, #0
 8005abe:	dd05      	ble.n	8005acc <_dtoa_r+0x814>
 8005ac0:	4651      	mov	r1, sl
 8005ac2:	464a      	mov	r2, r9
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 fc31 	bl	800632c <__lshift>
 8005aca:	4682      	mov	sl, r0
 8005acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	dd05      	ble.n	8005ade <_dtoa_r+0x826>
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 fc28 	bl	800632c <__lshift>
 8005adc:	4604      	mov	r4, r0
 8005ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d072      	beq.n	8005bca <_dtoa_r+0x912>
 8005ae4:	4621      	mov	r1, r4
 8005ae6:	4650      	mov	r0, sl
 8005ae8:	f000 fc8c 	bl	8006404 <__mcmp>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	da6c      	bge.n	8005bca <_dtoa_r+0x912>
 8005af0:	2300      	movs	r3, #0
 8005af2:	4651      	mov	r1, sl
 8005af4:	220a      	movs	r2, #10
 8005af6:	4628      	mov	r0, r5
 8005af8:	f000 fa6c 	bl	8005fd4 <__multadd>
 8005afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005afe:	4682      	mov	sl, r0
 8005b00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 81ac 	beq.w	8005e62 <_dtoa_r+0xbaa>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	220a      	movs	r2, #10
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 fa5f 	bl	8005fd4 <__multadd>
 8005b16:	9b06      	ldr	r3, [sp, #24]
 8005b18:	4606      	mov	r6, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f300 8093 	bgt.w	8005c46 <_dtoa_r+0x98e>
 8005b20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	dc59      	bgt.n	8005bda <_dtoa_r+0x922>
 8005b26:	e08e      	b.n	8005c46 <_dtoa_r+0x98e>
 8005b28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005b2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b2e:	e75d      	b.n	80059ec <_dtoa_r+0x734>
 8005b30:	9b08      	ldr	r3, [sp, #32]
 8005b32:	1e5c      	subs	r4, r3, #1
 8005b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b36:	42a3      	cmp	r3, r4
 8005b38:	bfbf      	itttt	lt
 8005b3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b3c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005b3e:	1ae3      	sublt	r3, r4, r3
 8005b40:	18d2      	addlt	r2, r2, r3
 8005b42:	bfa8      	it	ge
 8005b44:	1b1c      	subge	r4, r3, r4
 8005b46:	9b08      	ldr	r3, [sp, #32]
 8005b48:	bfbe      	ittt	lt
 8005b4a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005b4c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005b4e:	2400      	movlt	r4, #0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bfb5      	itete	lt
 8005b54:	eba9 0703 	sublt.w	r7, r9, r3
 8005b58:	464f      	movge	r7, r9
 8005b5a:	2300      	movlt	r3, #0
 8005b5c:	9b08      	ldrge	r3, [sp, #32]
 8005b5e:	e747      	b.n	80059f0 <_dtoa_r+0x738>
 8005b60:	464f      	mov	r7, r9
 8005b62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005b66:	e74c      	b.n	8005a02 <_dtoa_r+0x74a>
 8005b68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b6a:	e773      	b.n	8005a54 <_dtoa_r+0x79c>
 8005b6c:	3fe00000 	.word	0x3fe00000
 8005b70:	40240000 	.word	0x40240000
 8005b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	dc18      	bgt.n	8005bac <_dtoa_r+0x8f4>
 8005b7a:	9b04      	ldr	r3, [sp, #16]
 8005b7c:	b9b3      	cbnz	r3, 8005bac <_dtoa_r+0x8f4>
 8005b7e:	9b05      	ldr	r3, [sp, #20]
 8005b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b84:	b993      	cbnz	r3, 8005bac <_dtoa_r+0x8f4>
 8005b86:	9b05      	ldr	r3, [sp, #20]
 8005b88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b8c:	0d1b      	lsrs	r3, r3, #20
 8005b8e:	051b      	lsls	r3, r3, #20
 8005b90:	b17b      	cbz	r3, 8005bb2 <_dtoa_r+0x8fa>
 8005b92:	f04f 0801 	mov.w	r8, #1
 8005b96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b98:	f109 0901 	add.w	r9, r9, #1
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f47f af6f 	bne.w	8005a86 <_dtoa_r+0x7ce>
 8005ba8:	2001      	movs	r0, #1
 8005baa:	e774      	b.n	8005a96 <_dtoa_r+0x7de>
 8005bac:	f04f 0800 	mov.w	r8, #0
 8005bb0:	e7f6      	b.n	8005ba0 <_dtoa_r+0x8e8>
 8005bb2:	4698      	mov	r8, r3
 8005bb4:	e7f4      	b.n	8005ba0 <_dtoa_r+0x8e8>
 8005bb6:	d080      	beq.n	8005aba <_dtoa_r+0x802>
 8005bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bba:	331c      	adds	r3, #28
 8005bbc:	441a      	add	r2, r3
 8005bbe:	4499      	add	r9, r3
 8005bc0:	441f      	add	r7, r3
 8005bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc4:	e779      	b.n	8005aba <_dtoa_r+0x802>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	e7f6      	b.n	8005bb8 <_dtoa_r+0x900>
 8005bca:	9b08      	ldr	r3, [sp, #32]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dc34      	bgt.n	8005c3a <_dtoa_r+0x982>
 8005bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	dd31      	ble.n	8005c3a <_dtoa_r+0x982>
 8005bd6:	9b08      	ldr	r3, [sp, #32]
 8005bd8:	9306      	str	r3, [sp, #24]
 8005bda:	9b06      	ldr	r3, [sp, #24]
 8005bdc:	b963      	cbnz	r3, 8005bf8 <_dtoa_r+0x940>
 8005bde:	4621      	mov	r1, r4
 8005be0:	2205      	movs	r2, #5
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f9f6 	bl	8005fd4 <__multadd>
 8005be8:	4601      	mov	r1, r0
 8005bea:	4604      	mov	r4, r0
 8005bec:	4650      	mov	r0, sl
 8005bee:	f000 fc09 	bl	8006404 <__mcmp>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	f73f adbf 	bgt.w	8005776 <_dtoa_r+0x4be>
 8005bf8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005bfa:	9f03      	ldr	r7, [sp, #12]
 8005bfc:	ea6f 0b03 	mvn.w	fp, r3
 8005c00:	f04f 0800 	mov.w	r8, #0
 8005c04:	4621      	mov	r1, r4
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 f9c2 	bl	8005f90 <_Bfree>
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	f43f aead 	beq.w	800596c <_dtoa_r+0x6b4>
 8005c12:	f1b8 0f00 	cmp.w	r8, #0
 8005c16:	d005      	beq.n	8005c24 <_dtoa_r+0x96c>
 8005c18:	45b0      	cmp	r8, r6
 8005c1a:	d003      	beq.n	8005c24 <_dtoa_r+0x96c>
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 f9b6 	bl	8005f90 <_Bfree>
 8005c24:	4631      	mov	r1, r6
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f9b2 	bl	8005f90 <_Bfree>
 8005c2c:	e69e      	b.n	800596c <_dtoa_r+0x6b4>
 8005c2e:	2400      	movs	r4, #0
 8005c30:	4626      	mov	r6, r4
 8005c32:	e7e1      	b.n	8005bf8 <_dtoa_r+0x940>
 8005c34:	46c3      	mov	fp, r8
 8005c36:	4626      	mov	r6, r4
 8005c38:	e59d      	b.n	8005776 <_dtoa_r+0x4be>
 8005c3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 80c8 	beq.w	8005dd2 <_dtoa_r+0xb1a>
 8005c42:	9b08      	ldr	r3, [sp, #32]
 8005c44:	9306      	str	r3, [sp, #24]
 8005c46:	2f00      	cmp	r7, #0
 8005c48:	dd05      	ble.n	8005c56 <_dtoa_r+0x99e>
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	463a      	mov	r2, r7
 8005c4e:	4628      	mov	r0, r5
 8005c50:	f000 fb6c 	bl	800632c <__lshift>
 8005c54:	4606      	mov	r6, r0
 8005c56:	f1b8 0f00 	cmp.w	r8, #0
 8005c5a:	d05b      	beq.n	8005d14 <_dtoa_r+0xa5c>
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	6871      	ldr	r1, [r6, #4]
 8005c60:	f000 f956 	bl	8005f10 <_Balloc>
 8005c64:	4607      	mov	r7, r0
 8005c66:	b928      	cbnz	r0, 8005c74 <_dtoa_r+0x9bc>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005c6e:	4b81      	ldr	r3, [pc, #516]	; (8005e74 <_dtoa_r+0xbbc>)
 8005c70:	f7ff bb36 	b.w	80052e0 <_dtoa_r+0x28>
 8005c74:	6932      	ldr	r2, [r6, #16]
 8005c76:	f106 010c 	add.w	r1, r6, #12
 8005c7a:	3202      	adds	r2, #2
 8005c7c:	0092      	lsls	r2, r2, #2
 8005c7e:	300c      	adds	r0, #12
 8005c80:	f000 feda 	bl	8006a38 <memcpy>
 8005c84:	2201      	movs	r2, #1
 8005c86:	4639      	mov	r1, r7
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 fb4f 	bl	800632c <__lshift>
 8005c8e:	46b0      	mov	r8, r6
 8005c90:	4606      	mov	r6, r0
 8005c92:	9b03      	ldr	r3, [sp, #12]
 8005c94:	9a03      	ldr	r2, [sp, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	9308      	str	r3, [sp, #32]
 8005c9a:	9b06      	ldr	r3, [sp, #24]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ca0:	9b04      	ldr	r3, [sp, #16]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ca8:	9b08      	ldr	r3, [sp, #32]
 8005caa:	4621      	mov	r1, r4
 8005cac:	3b01      	subs	r3, #1
 8005cae:	4650      	mov	r0, sl
 8005cb0:	9304      	str	r3, [sp, #16]
 8005cb2:	f7ff fa76 	bl	80051a2 <quorem>
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	9006      	str	r0, [sp, #24]
 8005cba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005cbe:	4650      	mov	r0, sl
 8005cc0:	f000 fba0 	bl	8006404 <__mcmp>
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	9009      	str	r0, [sp, #36]	; 0x24
 8005cc8:	4621      	mov	r1, r4
 8005cca:	4628      	mov	r0, r5
 8005ccc:	f000 fbb6 	bl	800643c <__mdiff>
 8005cd0:	68c2      	ldr	r2, [r0, #12]
 8005cd2:	4607      	mov	r7, r0
 8005cd4:	bb02      	cbnz	r2, 8005d18 <_dtoa_r+0xa60>
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	4650      	mov	r0, sl
 8005cda:	f000 fb93 	bl	8006404 <__mcmp>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	920c      	str	r2, [sp, #48]	; 0x30
 8005ce6:	f000 f953 	bl	8005f90 <_Bfree>
 8005cea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cee:	9f08      	ldr	r7, [sp, #32]
 8005cf0:	ea43 0102 	orr.w	r1, r3, r2
 8005cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cf6:	4319      	orrs	r1, r3
 8005cf8:	d110      	bne.n	8005d1c <_dtoa_r+0xa64>
 8005cfa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cfe:	d029      	beq.n	8005d54 <_dtoa_r+0xa9c>
 8005d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	dd02      	ble.n	8005d0c <_dtoa_r+0xa54>
 8005d06:	9b06      	ldr	r3, [sp, #24]
 8005d08:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d0c:	9b04      	ldr	r3, [sp, #16]
 8005d0e:	f883 9000 	strb.w	r9, [r3]
 8005d12:	e777      	b.n	8005c04 <_dtoa_r+0x94c>
 8005d14:	4630      	mov	r0, r6
 8005d16:	e7ba      	b.n	8005c8e <_dtoa_r+0x9d6>
 8005d18:	2201      	movs	r2, #1
 8005d1a:	e7e1      	b.n	8005ce0 <_dtoa_r+0xa28>
 8005d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	db04      	blt.n	8005d2c <_dtoa_r+0xa74>
 8005d22:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005d24:	430b      	orrs	r3, r1
 8005d26:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d28:	430b      	orrs	r3, r1
 8005d2a:	d120      	bne.n	8005d6e <_dtoa_r+0xab6>
 8005d2c:	2a00      	cmp	r2, #0
 8005d2e:	dded      	ble.n	8005d0c <_dtoa_r+0xa54>
 8005d30:	4651      	mov	r1, sl
 8005d32:	2201      	movs	r2, #1
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 faf9 	bl	800632c <__lshift>
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	4682      	mov	sl, r0
 8005d3e:	f000 fb61 	bl	8006404 <__mcmp>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	dc03      	bgt.n	8005d4e <_dtoa_r+0xa96>
 8005d46:	d1e1      	bne.n	8005d0c <_dtoa_r+0xa54>
 8005d48:	f019 0f01 	tst.w	r9, #1
 8005d4c:	d0de      	beq.n	8005d0c <_dtoa_r+0xa54>
 8005d4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d52:	d1d8      	bne.n	8005d06 <_dtoa_r+0xa4e>
 8005d54:	2339      	movs	r3, #57	; 0x39
 8005d56:	9a04      	ldr	r2, [sp, #16]
 8005d58:	7013      	strb	r3, [r2, #0]
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	461f      	mov	r7, r3
 8005d5e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	2a39      	cmp	r2, #57	; 0x39
 8005d66:	d06b      	beq.n	8005e40 <_dtoa_r+0xb88>
 8005d68:	3201      	adds	r2, #1
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	e74a      	b.n	8005c04 <_dtoa_r+0x94c>
 8005d6e:	2a00      	cmp	r2, #0
 8005d70:	dd07      	ble.n	8005d82 <_dtoa_r+0xaca>
 8005d72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d76:	d0ed      	beq.n	8005d54 <_dtoa_r+0xa9c>
 8005d78:	9a04      	ldr	r2, [sp, #16]
 8005d7a:	f109 0301 	add.w	r3, r9, #1
 8005d7e:	7013      	strb	r3, [r2, #0]
 8005d80:	e740      	b.n	8005c04 <_dtoa_r+0x94c>
 8005d82:	9b08      	ldr	r3, [sp, #32]
 8005d84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d86:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d042      	beq.n	8005e14 <_dtoa_r+0xb5c>
 8005d8e:	4651      	mov	r1, sl
 8005d90:	2300      	movs	r3, #0
 8005d92:	220a      	movs	r2, #10
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 f91d 	bl	8005fd4 <__multadd>
 8005d9a:	45b0      	cmp	r8, r6
 8005d9c:	4682      	mov	sl, r0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	f04f 020a 	mov.w	r2, #10
 8005da6:	4641      	mov	r1, r8
 8005da8:	4628      	mov	r0, r5
 8005daa:	d107      	bne.n	8005dbc <_dtoa_r+0xb04>
 8005dac:	f000 f912 	bl	8005fd4 <__multadd>
 8005db0:	4680      	mov	r8, r0
 8005db2:	4606      	mov	r6, r0
 8005db4:	9b08      	ldr	r3, [sp, #32]
 8005db6:	3301      	adds	r3, #1
 8005db8:	9308      	str	r3, [sp, #32]
 8005dba:	e775      	b.n	8005ca8 <_dtoa_r+0x9f0>
 8005dbc:	f000 f90a 	bl	8005fd4 <__multadd>
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4680      	mov	r8, r0
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	220a      	movs	r2, #10
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 f903 	bl	8005fd4 <__multadd>
 8005dce:	4606      	mov	r6, r0
 8005dd0:	e7f0      	b.n	8005db4 <_dtoa_r+0xafc>
 8005dd2:	9b08      	ldr	r3, [sp, #32]
 8005dd4:	9306      	str	r3, [sp, #24]
 8005dd6:	9f03      	ldr	r7, [sp, #12]
 8005dd8:	4621      	mov	r1, r4
 8005dda:	4650      	mov	r0, sl
 8005ddc:	f7ff f9e1 	bl	80051a2 <quorem>
 8005de0:	9b03      	ldr	r3, [sp, #12]
 8005de2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005de6:	f807 9b01 	strb.w	r9, [r7], #1
 8005dea:	1afa      	subs	r2, r7, r3
 8005dec:	9b06      	ldr	r3, [sp, #24]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	dd07      	ble.n	8005e02 <_dtoa_r+0xb4a>
 8005df2:	4651      	mov	r1, sl
 8005df4:	2300      	movs	r3, #0
 8005df6:	220a      	movs	r2, #10
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f000 f8eb 	bl	8005fd4 <__multadd>
 8005dfe:	4682      	mov	sl, r0
 8005e00:	e7ea      	b.n	8005dd8 <_dtoa_r+0xb20>
 8005e02:	9b06      	ldr	r3, [sp, #24]
 8005e04:	f04f 0800 	mov.w	r8, #0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	bfcc      	ite	gt
 8005e0c:	461f      	movgt	r7, r3
 8005e0e:	2701      	movle	r7, #1
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	441f      	add	r7, r3
 8005e14:	4651      	mov	r1, sl
 8005e16:	2201      	movs	r2, #1
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 fa87 	bl	800632c <__lshift>
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4682      	mov	sl, r0
 8005e22:	f000 faef 	bl	8006404 <__mcmp>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	dc97      	bgt.n	8005d5a <_dtoa_r+0xaa2>
 8005e2a:	d102      	bne.n	8005e32 <_dtoa_r+0xb7a>
 8005e2c:	f019 0f01 	tst.w	r9, #1
 8005e30:	d193      	bne.n	8005d5a <_dtoa_r+0xaa2>
 8005e32:	463b      	mov	r3, r7
 8005e34:	461f      	mov	r7, r3
 8005e36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e3a:	2a30      	cmp	r2, #48	; 0x30
 8005e3c:	d0fa      	beq.n	8005e34 <_dtoa_r+0xb7c>
 8005e3e:	e6e1      	b.n	8005c04 <_dtoa_r+0x94c>
 8005e40:	9a03      	ldr	r2, [sp, #12]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d18a      	bne.n	8005d5c <_dtoa_r+0xaa4>
 8005e46:	2331      	movs	r3, #49	; 0x31
 8005e48:	f10b 0b01 	add.w	fp, fp, #1
 8005e4c:	e797      	b.n	8005d7e <_dtoa_r+0xac6>
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <_dtoa_r+0xbc0>)
 8005e50:	f7ff ba9f 	b.w	8005392 <_dtoa_r+0xda>
 8005e54:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	f47f aa77 	bne.w	800534a <_dtoa_r+0x92>
 8005e5c:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <_dtoa_r+0xbc4>)
 8005e5e:	f7ff ba98 	b.w	8005392 <_dtoa_r+0xda>
 8005e62:	9b06      	ldr	r3, [sp, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dcb6      	bgt.n	8005dd6 <_dtoa_r+0xb1e>
 8005e68:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	f73f aeb5 	bgt.w	8005bda <_dtoa_r+0x922>
 8005e70:	e7b1      	b.n	8005dd6 <_dtoa_r+0xb1e>
 8005e72:	bf00      	nop
 8005e74:	08008106 	.word	0x08008106
 8005e78:	08008066 	.word	0x08008066
 8005e7c:	0800808a 	.word	0x0800808a

08005e80 <_free_r>:
 8005e80:	b538      	push	{r3, r4, r5, lr}
 8005e82:	4605      	mov	r5, r0
 8005e84:	2900      	cmp	r1, #0
 8005e86:	d040      	beq.n	8005f0a <_free_r+0x8a>
 8005e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e8c:	1f0c      	subs	r4, r1, #4
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bfb8      	it	lt
 8005e92:	18e4      	addlt	r4, r4, r3
 8005e94:	f7fe fb58 	bl	8004548 <__malloc_lock>
 8005e98:	4a1c      	ldr	r2, [pc, #112]	; (8005f0c <_free_r+0x8c>)
 8005e9a:	6813      	ldr	r3, [r2, #0]
 8005e9c:	b933      	cbnz	r3, 8005eac <_free_r+0x2c>
 8005e9e:	6063      	str	r3, [r4, #4]
 8005ea0:	6014      	str	r4, [r2, #0]
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ea8:	f7fe bb54 	b.w	8004554 <__malloc_unlock>
 8005eac:	42a3      	cmp	r3, r4
 8005eae:	d908      	bls.n	8005ec2 <_free_r+0x42>
 8005eb0:	6820      	ldr	r0, [r4, #0]
 8005eb2:	1821      	adds	r1, r4, r0
 8005eb4:	428b      	cmp	r3, r1
 8005eb6:	bf01      	itttt	eq
 8005eb8:	6819      	ldreq	r1, [r3, #0]
 8005eba:	685b      	ldreq	r3, [r3, #4]
 8005ebc:	1809      	addeq	r1, r1, r0
 8005ebe:	6021      	streq	r1, [r4, #0]
 8005ec0:	e7ed      	b.n	8005e9e <_free_r+0x1e>
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	b10b      	cbz	r3, 8005ecc <_free_r+0x4c>
 8005ec8:	42a3      	cmp	r3, r4
 8005eca:	d9fa      	bls.n	8005ec2 <_free_r+0x42>
 8005ecc:	6811      	ldr	r1, [r2, #0]
 8005ece:	1850      	adds	r0, r2, r1
 8005ed0:	42a0      	cmp	r0, r4
 8005ed2:	d10b      	bne.n	8005eec <_free_r+0x6c>
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	4401      	add	r1, r0
 8005ed8:	1850      	adds	r0, r2, r1
 8005eda:	4283      	cmp	r3, r0
 8005edc:	6011      	str	r1, [r2, #0]
 8005ede:	d1e0      	bne.n	8005ea2 <_free_r+0x22>
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4408      	add	r0, r1
 8005ee6:	6010      	str	r0, [r2, #0]
 8005ee8:	6053      	str	r3, [r2, #4]
 8005eea:	e7da      	b.n	8005ea2 <_free_r+0x22>
 8005eec:	d902      	bls.n	8005ef4 <_free_r+0x74>
 8005eee:	230c      	movs	r3, #12
 8005ef0:	602b      	str	r3, [r5, #0]
 8005ef2:	e7d6      	b.n	8005ea2 <_free_r+0x22>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	1821      	adds	r1, r4, r0
 8005ef8:	428b      	cmp	r3, r1
 8005efa:	bf01      	itttt	eq
 8005efc:	6819      	ldreq	r1, [r3, #0]
 8005efe:	685b      	ldreq	r3, [r3, #4]
 8005f00:	1809      	addeq	r1, r1, r0
 8005f02:	6021      	streq	r1, [r4, #0]
 8005f04:	6063      	str	r3, [r4, #4]
 8005f06:	6054      	str	r4, [r2, #4]
 8005f08:	e7cb      	b.n	8005ea2 <_free_r+0x22>
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	200002ec 	.word	0x200002ec

08005f10 <_Balloc>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	69c6      	ldr	r6, [r0, #28]
 8005f14:	4604      	mov	r4, r0
 8005f16:	460d      	mov	r5, r1
 8005f18:	b976      	cbnz	r6, 8005f38 <_Balloc+0x28>
 8005f1a:	2010      	movs	r0, #16
 8005f1c:	f7fe fa64 	bl	80043e8 <malloc>
 8005f20:	4602      	mov	r2, r0
 8005f22:	61e0      	str	r0, [r4, #28]
 8005f24:	b920      	cbnz	r0, 8005f30 <_Balloc+0x20>
 8005f26:	216b      	movs	r1, #107	; 0x6b
 8005f28:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <_Balloc+0x78>)
 8005f2a:	4818      	ldr	r0, [pc, #96]	; (8005f8c <_Balloc+0x7c>)
 8005f2c:	f000 fd92 	bl	8006a54 <__assert_func>
 8005f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f34:	6006      	str	r6, [r0, #0]
 8005f36:	60c6      	str	r6, [r0, #12]
 8005f38:	69e6      	ldr	r6, [r4, #28]
 8005f3a:	68f3      	ldr	r3, [r6, #12]
 8005f3c:	b183      	cbz	r3, 8005f60 <_Balloc+0x50>
 8005f3e:	69e3      	ldr	r3, [r4, #28]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f46:	b9b8      	cbnz	r0, 8005f78 <_Balloc+0x68>
 8005f48:	2101      	movs	r1, #1
 8005f4a:	fa01 f605 	lsl.w	r6, r1, r5
 8005f4e:	1d72      	adds	r2, r6, #5
 8005f50:	4620      	mov	r0, r4
 8005f52:	0092      	lsls	r2, r2, #2
 8005f54:	f000 fd9c 	bl	8006a90 <_calloc_r>
 8005f58:	b160      	cbz	r0, 8005f74 <_Balloc+0x64>
 8005f5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f5e:	e00e      	b.n	8005f7e <_Balloc+0x6e>
 8005f60:	2221      	movs	r2, #33	; 0x21
 8005f62:	2104      	movs	r1, #4
 8005f64:	4620      	mov	r0, r4
 8005f66:	f000 fd93 	bl	8006a90 <_calloc_r>
 8005f6a:	69e3      	ldr	r3, [r4, #28]
 8005f6c:	60f0      	str	r0, [r6, #12]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e4      	bne.n	8005f3e <_Balloc+0x2e>
 8005f74:	2000      	movs	r0, #0
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	6802      	ldr	r2, [r0, #0]
 8005f7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f84:	e7f7      	b.n	8005f76 <_Balloc+0x66>
 8005f86:	bf00      	nop
 8005f88:	08008097 	.word	0x08008097
 8005f8c:	08008117 	.word	0x08008117

08005f90 <_Bfree>:
 8005f90:	b570      	push	{r4, r5, r6, lr}
 8005f92:	69c6      	ldr	r6, [r0, #28]
 8005f94:	4605      	mov	r5, r0
 8005f96:	460c      	mov	r4, r1
 8005f98:	b976      	cbnz	r6, 8005fb8 <_Bfree+0x28>
 8005f9a:	2010      	movs	r0, #16
 8005f9c:	f7fe fa24 	bl	80043e8 <malloc>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	61e8      	str	r0, [r5, #28]
 8005fa4:	b920      	cbnz	r0, 8005fb0 <_Bfree+0x20>
 8005fa6:	218f      	movs	r1, #143	; 0x8f
 8005fa8:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <_Bfree+0x3c>)
 8005faa:	4809      	ldr	r0, [pc, #36]	; (8005fd0 <_Bfree+0x40>)
 8005fac:	f000 fd52 	bl	8006a54 <__assert_func>
 8005fb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fb4:	6006      	str	r6, [r0, #0]
 8005fb6:	60c6      	str	r6, [r0, #12]
 8005fb8:	b13c      	cbz	r4, 8005fca <_Bfree+0x3a>
 8005fba:	69eb      	ldr	r3, [r5, #28]
 8005fbc:	6862      	ldr	r2, [r4, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fc4:	6021      	str	r1, [r4, #0]
 8005fc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fca:	bd70      	pop	{r4, r5, r6, pc}
 8005fcc:	08008097 	.word	0x08008097
 8005fd0:	08008117 	.word	0x08008117

08005fd4 <__multadd>:
 8005fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd8:	4607      	mov	r7, r0
 8005fda:	460c      	mov	r4, r1
 8005fdc:	461e      	mov	r6, r3
 8005fde:	2000      	movs	r0, #0
 8005fe0:	690d      	ldr	r5, [r1, #16]
 8005fe2:	f101 0c14 	add.w	ip, r1, #20
 8005fe6:	f8dc 3000 	ldr.w	r3, [ip]
 8005fea:	3001      	adds	r0, #1
 8005fec:	b299      	uxth	r1, r3
 8005fee:	fb02 6101 	mla	r1, r2, r1, r6
 8005ff2:	0c1e      	lsrs	r6, r3, #16
 8005ff4:	0c0b      	lsrs	r3, r1, #16
 8005ff6:	fb02 3306 	mla	r3, r2, r6, r3
 8005ffa:	b289      	uxth	r1, r1
 8005ffc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006000:	4285      	cmp	r5, r0
 8006002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006006:	f84c 1b04 	str.w	r1, [ip], #4
 800600a:	dcec      	bgt.n	8005fe6 <__multadd+0x12>
 800600c:	b30e      	cbz	r6, 8006052 <__multadd+0x7e>
 800600e:	68a3      	ldr	r3, [r4, #8]
 8006010:	42ab      	cmp	r3, r5
 8006012:	dc19      	bgt.n	8006048 <__multadd+0x74>
 8006014:	6861      	ldr	r1, [r4, #4]
 8006016:	4638      	mov	r0, r7
 8006018:	3101      	adds	r1, #1
 800601a:	f7ff ff79 	bl	8005f10 <_Balloc>
 800601e:	4680      	mov	r8, r0
 8006020:	b928      	cbnz	r0, 800602e <__multadd+0x5a>
 8006022:	4602      	mov	r2, r0
 8006024:	21ba      	movs	r1, #186	; 0xba
 8006026:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <__multadd+0x84>)
 8006028:	480c      	ldr	r0, [pc, #48]	; (800605c <__multadd+0x88>)
 800602a:	f000 fd13 	bl	8006a54 <__assert_func>
 800602e:	6922      	ldr	r2, [r4, #16]
 8006030:	f104 010c 	add.w	r1, r4, #12
 8006034:	3202      	adds	r2, #2
 8006036:	0092      	lsls	r2, r2, #2
 8006038:	300c      	adds	r0, #12
 800603a:	f000 fcfd 	bl	8006a38 <memcpy>
 800603e:	4621      	mov	r1, r4
 8006040:	4638      	mov	r0, r7
 8006042:	f7ff ffa5 	bl	8005f90 <_Bfree>
 8006046:	4644      	mov	r4, r8
 8006048:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800604c:	3501      	adds	r5, #1
 800604e:	615e      	str	r6, [r3, #20]
 8006050:	6125      	str	r5, [r4, #16]
 8006052:	4620      	mov	r0, r4
 8006054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006058:	08008106 	.word	0x08008106
 800605c:	08008117 	.word	0x08008117

08006060 <__hi0bits>:
 8006060:	0c02      	lsrs	r2, r0, #16
 8006062:	0412      	lsls	r2, r2, #16
 8006064:	4603      	mov	r3, r0
 8006066:	b9ca      	cbnz	r2, 800609c <__hi0bits+0x3c>
 8006068:	0403      	lsls	r3, r0, #16
 800606a:	2010      	movs	r0, #16
 800606c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006070:	bf04      	itt	eq
 8006072:	021b      	lsleq	r3, r3, #8
 8006074:	3008      	addeq	r0, #8
 8006076:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800607a:	bf04      	itt	eq
 800607c:	011b      	lsleq	r3, r3, #4
 800607e:	3004      	addeq	r0, #4
 8006080:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006084:	bf04      	itt	eq
 8006086:	009b      	lsleq	r3, r3, #2
 8006088:	3002      	addeq	r0, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	db05      	blt.n	800609a <__hi0bits+0x3a>
 800608e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006092:	f100 0001 	add.w	r0, r0, #1
 8006096:	bf08      	it	eq
 8006098:	2020      	moveq	r0, #32
 800609a:	4770      	bx	lr
 800609c:	2000      	movs	r0, #0
 800609e:	e7e5      	b.n	800606c <__hi0bits+0xc>

080060a0 <__lo0bits>:
 80060a0:	6803      	ldr	r3, [r0, #0]
 80060a2:	4602      	mov	r2, r0
 80060a4:	f013 0007 	ands.w	r0, r3, #7
 80060a8:	d00b      	beq.n	80060c2 <__lo0bits+0x22>
 80060aa:	07d9      	lsls	r1, r3, #31
 80060ac:	d421      	bmi.n	80060f2 <__lo0bits+0x52>
 80060ae:	0798      	lsls	r0, r3, #30
 80060b0:	bf49      	itett	mi
 80060b2:	085b      	lsrmi	r3, r3, #1
 80060b4:	089b      	lsrpl	r3, r3, #2
 80060b6:	2001      	movmi	r0, #1
 80060b8:	6013      	strmi	r3, [r2, #0]
 80060ba:	bf5c      	itt	pl
 80060bc:	2002      	movpl	r0, #2
 80060be:	6013      	strpl	r3, [r2, #0]
 80060c0:	4770      	bx	lr
 80060c2:	b299      	uxth	r1, r3
 80060c4:	b909      	cbnz	r1, 80060ca <__lo0bits+0x2a>
 80060c6:	2010      	movs	r0, #16
 80060c8:	0c1b      	lsrs	r3, r3, #16
 80060ca:	b2d9      	uxtb	r1, r3
 80060cc:	b909      	cbnz	r1, 80060d2 <__lo0bits+0x32>
 80060ce:	3008      	adds	r0, #8
 80060d0:	0a1b      	lsrs	r3, r3, #8
 80060d2:	0719      	lsls	r1, r3, #28
 80060d4:	bf04      	itt	eq
 80060d6:	091b      	lsreq	r3, r3, #4
 80060d8:	3004      	addeq	r0, #4
 80060da:	0799      	lsls	r1, r3, #30
 80060dc:	bf04      	itt	eq
 80060de:	089b      	lsreq	r3, r3, #2
 80060e0:	3002      	addeq	r0, #2
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	d403      	bmi.n	80060ee <__lo0bits+0x4e>
 80060e6:	085b      	lsrs	r3, r3, #1
 80060e8:	f100 0001 	add.w	r0, r0, #1
 80060ec:	d003      	beq.n	80060f6 <__lo0bits+0x56>
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	4770      	bx	lr
 80060f2:	2000      	movs	r0, #0
 80060f4:	4770      	bx	lr
 80060f6:	2020      	movs	r0, #32
 80060f8:	4770      	bx	lr
	...

080060fc <__i2b>:
 80060fc:	b510      	push	{r4, lr}
 80060fe:	460c      	mov	r4, r1
 8006100:	2101      	movs	r1, #1
 8006102:	f7ff ff05 	bl	8005f10 <_Balloc>
 8006106:	4602      	mov	r2, r0
 8006108:	b928      	cbnz	r0, 8006116 <__i2b+0x1a>
 800610a:	f240 1145 	movw	r1, #325	; 0x145
 800610e:	4b04      	ldr	r3, [pc, #16]	; (8006120 <__i2b+0x24>)
 8006110:	4804      	ldr	r0, [pc, #16]	; (8006124 <__i2b+0x28>)
 8006112:	f000 fc9f 	bl	8006a54 <__assert_func>
 8006116:	2301      	movs	r3, #1
 8006118:	6144      	str	r4, [r0, #20]
 800611a:	6103      	str	r3, [r0, #16]
 800611c:	bd10      	pop	{r4, pc}
 800611e:	bf00      	nop
 8006120:	08008106 	.word	0x08008106
 8006124:	08008117 	.word	0x08008117

08006128 <__multiply>:
 8006128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612c:	4691      	mov	r9, r2
 800612e:	690a      	ldr	r2, [r1, #16]
 8006130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006134:	460c      	mov	r4, r1
 8006136:	429a      	cmp	r2, r3
 8006138:	bfbe      	ittt	lt
 800613a:	460b      	movlt	r3, r1
 800613c:	464c      	movlt	r4, r9
 800613e:	4699      	movlt	r9, r3
 8006140:	6927      	ldr	r7, [r4, #16]
 8006142:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006146:	68a3      	ldr	r3, [r4, #8]
 8006148:	6861      	ldr	r1, [r4, #4]
 800614a:	eb07 060a 	add.w	r6, r7, sl
 800614e:	42b3      	cmp	r3, r6
 8006150:	b085      	sub	sp, #20
 8006152:	bfb8      	it	lt
 8006154:	3101      	addlt	r1, #1
 8006156:	f7ff fedb 	bl	8005f10 <_Balloc>
 800615a:	b930      	cbnz	r0, 800616a <__multiply+0x42>
 800615c:	4602      	mov	r2, r0
 800615e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006162:	4b43      	ldr	r3, [pc, #268]	; (8006270 <__multiply+0x148>)
 8006164:	4843      	ldr	r0, [pc, #268]	; (8006274 <__multiply+0x14c>)
 8006166:	f000 fc75 	bl	8006a54 <__assert_func>
 800616a:	f100 0514 	add.w	r5, r0, #20
 800616e:	462b      	mov	r3, r5
 8006170:	2200      	movs	r2, #0
 8006172:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006176:	4543      	cmp	r3, r8
 8006178:	d321      	bcc.n	80061be <__multiply+0x96>
 800617a:	f104 0314 	add.w	r3, r4, #20
 800617e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006182:	f109 0314 	add.w	r3, r9, #20
 8006186:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800618a:	9202      	str	r2, [sp, #8]
 800618c:	1b3a      	subs	r2, r7, r4
 800618e:	3a15      	subs	r2, #21
 8006190:	f022 0203 	bic.w	r2, r2, #3
 8006194:	3204      	adds	r2, #4
 8006196:	f104 0115 	add.w	r1, r4, #21
 800619a:	428f      	cmp	r7, r1
 800619c:	bf38      	it	cc
 800619e:	2204      	movcc	r2, #4
 80061a0:	9201      	str	r2, [sp, #4]
 80061a2:	9a02      	ldr	r2, [sp, #8]
 80061a4:	9303      	str	r3, [sp, #12]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d80c      	bhi.n	80061c4 <__multiply+0x9c>
 80061aa:	2e00      	cmp	r6, #0
 80061ac:	dd03      	ble.n	80061b6 <__multiply+0x8e>
 80061ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d05a      	beq.n	800626c <__multiply+0x144>
 80061b6:	6106      	str	r6, [r0, #16]
 80061b8:	b005      	add	sp, #20
 80061ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061be:	f843 2b04 	str.w	r2, [r3], #4
 80061c2:	e7d8      	b.n	8006176 <__multiply+0x4e>
 80061c4:	f8b3 a000 	ldrh.w	sl, [r3]
 80061c8:	f1ba 0f00 	cmp.w	sl, #0
 80061cc:	d023      	beq.n	8006216 <__multiply+0xee>
 80061ce:	46a9      	mov	r9, r5
 80061d0:	f04f 0c00 	mov.w	ip, #0
 80061d4:	f104 0e14 	add.w	lr, r4, #20
 80061d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80061dc:	f8d9 1000 	ldr.w	r1, [r9]
 80061e0:	fa1f fb82 	uxth.w	fp, r2
 80061e4:	b289      	uxth	r1, r1
 80061e6:	fb0a 110b 	mla	r1, sl, fp, r1
 80061ea:	4461      	add	r1, ip
 80061ec:	f8d9 c000 	ldr.w	ip, [r9]
 80061f0:	0c12      	lsrs	r2, r2, #16
 80061f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80061f6:	fb0a c202 	mla	r2, sl, r2, ip
 80061fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80061fe:	b289      	uxth	r1, r1
 8006200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006204:	4577      	cmp	r7, lr
 8006206:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800620a:	f849 1b04 	str.w	r1, [r9], #4
 800620e:	d8e3      	bhi.n	80061d8 <__multiply+0xb0>
 8006210:	9a01      	ldr	r2, [sp, #4]
 8006212:	f845 c002 	str.w	ip, [r5, r2]
 8006216:	9a03      	ldr	r2, [sp, #12]
 8006218:	3304      	adds	r3, #4
 800621a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800621e:	f1b9 0f00 	cmp.w	r9, #0
 8006222:	d021      	beq.n	8006268 <__multiply+0x140>
 8006224:	46ae      	mov	lr, r5
 8006226:	f04f 0a00 	mov.w	sl, #0
 800622a:	6829      	ldr	r1, [r5, #0]
 800622c:	f104 0c14 	add.w	ip, r4, #20
 8006230:	f8bc b000 	ldrh.w	fp, [ip]
 8006234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006238:	b289      	uxth	r1, r1
 800623a:	fb09 220b 	mla	r2, r9, fp, r2
 800623e:	4452      	add	r2, sl
 8006240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006244:	f84e 1b04 	str.w	r1, [lr], #4
 8006248:	f85c 1b04 	ldr.w	r1, [ip], #4
 800624c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006250:	f8be 1000 	ldrh.w	r1, [lr]
 8006254:	4567      	cmp	r7, ip
 8006256:	fb09 110a 	mla	r1, r9, sl, r1
 800625a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800625e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006262:	d8e5      	bhi.n	8006230 <__multiply+0x108>
 8006264:	9a01      	ldr	r2, [sp, #4]
 8006266:	50a9      	str	r1, [r5, r2]
 8006268:	3504      	adds	r5, #4
 800626a:	e79a      	b.n	80061a2 <__multiply+0x7a>
 800626c:	3e01      	subs	r6, #1
 800626e:	e79c      	b.n	80061aa <__multiply+0x82>
 8006270:	08008106 	.word	0x08008106
 8006274:	08008117 	.word	0x08008117

08006278 <__pow5mult>:
 8006278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800627c:	4615      	mov	r5, r2
 800627e:	f012 0203 	ands.w	r2, r2, #3
 8006282:	4606      	mov	r6, r0
 8006284:	460f      	mov	r7, r1
 8006286:	d007      	beq.n	8006298 <__pow5mult+0x20>
 8006288:	4c25      	ldr	r4, [pc, #148]	; (8006320 <__pow5mult+0xa8>)
 800628a:	3a01      	subs	r2, #1
 800628c:	2300      	movs	r3, #0
 800628e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006292:	f7ff fe9f 	bl	8005fd4 <__multadd>
 8006296:	4607      	mov	r7, r0
 8006298:	10ad      	asrs	r5, r5, #2
 800629a:	d03d      	beq.n	8006318 <__pow5mult+0xa0>
 800629c:	69f4      	ldr	r4, [r6, #28]
 800629e:	b97c      	cbnz	r4, 80062c0 <__pow5mult+0x48>
 80062a0:	2010      	movs	r0, #16
 80062a2:	f7fe f8a1 	bl	80043e8 <malloc>
 80062a6:	4602      	mov	r2, r0
 80062a8:	61f0      	str	r0, [r6, #28]
 80062aa:	b928      	cbnz	r0, 80062b8 <__pow5mult+0x40>
 80062ac:	f240 11b3 	movw	r1, #435	; 0x1b3
 80062b0:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <__pow5mult+0xac>)
 80062b2:	481d      	ldr	r0, [pc, #116]	; (8006328 <__pow5mult+0xb0>)
 80062b4:	f000 fbce 	bl	8006a54 <__assert_func>
 80062b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062bc:	6004      	str	r4, [r0, #0]
 80062be:	60c4      	str	r4, [r0, #12]
 80062c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80062c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062c8:	b94c      	cbnz	r4, 80062de <__pow5mult+0x66>
 80062ca:	f240 2171 	movw	r1, #625	; 0x271
 80062ce:	4630      	mov	r0, r6
 80062d0:	f7ff ff14 	bl	80060fc <__i2b>
 80062d4:	2300      	movs	r3, #0
 80062d6:	4604      	mov	r4, r0
 80062d8:	f8c8 0008 	str.w	r0, [r8, #8]
 80062dc:	6003      	str	r3, [r0, #0]
 80062de:	f04f 0900 	mov.w	r9, #0
 80062e2:	07eb      	lsls	r3, r5, #31
 80062e4:	d50a      	bpl.n	80062fc <__pow5mult+0x84>
 80062e6:	4639      	mov	r1, r7
 80062e8:	4622      	mov	r2, r4
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff ff1c 	bl	8006128 <__multiply>
 80062f0:	4680      	mov	r8, r0
 80062f2:	4639      	mov	r1, r7
 80062f4:	4630      	mov	r0, r6
 80062f6:	f7ff fe4b 	bl	8005f90 <_Bfree>
 80062fa:	4647      	mov	r7, r8
 80062fc:	106d      	asrs	r5, r5, #1
 80062fe:	d00b      	beq.n	8006318 <__pow5mult+0xa0>
 8006300:	6820      	ldr	r0, [r4, #0]
 8006302:	b938      	cbnz	r0, 8006314 <__pow5mult+0x9c>
 8006304:	4622      	mov	r2, r4
 8006306:	4621      	mov	r1, r4
 8006308:	4630      	mov	r0, r6
 800630a:	f7ff ff0d 	bl	8006128 <__multiply>
 800630e:	6020      	str	r0, [r4, #0]
 8006310:	f8c0 9000 	str.w	r9, [r0]
 8006314:	4604      	mov	r4, r0
 8006316:	e7e4      	b.n	80062e2 <__pow5mult+0x6a>
 8006318:	4638      	mov	r0, r7
 800631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631e:	bf00      	nop
 8006320:	08008260 	.word	0x08008260
 8006324:	08008097 	.word	0x08008097
 8006328:	08008117 	.word	0x08008117

0800632c <__lshift>:
 800632c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006330:	460c      	mov	r4, r1
 8006332:	4607      	mov	r7, r0
 8006334:	4691      	mov	r9, r2
 8006336:	6923      	ldr	r3, [r4, #16]
 8006338:	6849      	ldr	r1, [r1, #4]
 800633a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800633e:	68a3      	ldr	r3, [r4, #8]
 8006340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006344:	f108 0601 	add.w	r6, r8, #1
 8006348:	42b3      	cmp	r3, r6
 800634a:	db0b      	blt.n	8006364 <__lshift+0x38>
 800634c:	4638      	mov	r0, r7
 800634e:	f7ff fddf 	bl	8005f10 <_Balloc>
 8006352:	4605      	mov	r5, r0
 8006354:	b948      	cbnz	r0, 800636a <__lshift+0x3e>
 8006356:	4602      	mov	r2, r0
 8006358:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800635c:	4b27      	ldr	r3, [pc, #156]	; (80063fc <__lshift+0xd0>)
 800635e:	4828      	ldr	r0, [pc, #160]	; (8006400 <__lshift+0xd4>)
 8006360:	f000 fb78 	bl	8006a54 <__assert_func>
 8006364:	3101      	adds	r1, #1
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	e7ee      	b.n	8006348 <__lshift+0x1c>
 800636a:	2300      	movs	r3, #0
 800636c:	f100 0114 	add.w	r1, r0, #20
 8006370:	f100 0210 	add.w	r2, r0, #16
 8006374:	4618      	mov	r0, r3
 8006376:	4553      	cmp	r3, sl
 8006378:	db33      	blt.n	80063e2 <__lshift+0xb6>
 800637a:	6920      	ldr	r0, [r4, #16]
 800637c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006380:	f104 0314 	add.w	r3, r4, #20
 8006384:	f019 091f 	ands.w	r9, r9, #31
 8006388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800638c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006390:	d02b      	beq.n	80063ea <__lshift+0xbe>
 8006392:	468a      	mov	sl, r1
 8006394:	2200      	movs	r2, #0
 8006396:	f1c9 0e20 	rsb	lr, r9, #32
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	fa00 f009 	lsl.w	r0, r0, r9
 80063a0:	4310      	orrs	r0, r2
 80063a2:	f84a 0b04 	str.w	r0, [sl], #4
 80063a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063aa:	459c      	cmp	ip, r3
 80063ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80063b0:	d8f3      	bhi.n	800639a <__lshift+0x6e>
 80063b2:	ebac 0304 	sub.w	r3, ip, r4
 80063b6:	3b15      	subs	r3, #21
 80063b8:	f023 0303 	bic.w	r3, r3, #3
 80063bc:	3304      	adds	r3, #4
 80063be:	f104 0015 	add.w	r0, r4, #21
 80063c2:	4584      	cmp	ip, r0
 80063c4:	bf38      	it	cc
 80063c6:	2304      	movcc	r3, #4
 80063c8:	50ca      	str	r2, [r1, r3]
 80063ca:	b10a      	cbz	r2, 80063d0 <__lshift+0xa4>
 80063cc:	f108 0602 	add.w	r6, r8, #2
 80063d0:	3e01      	subs	r6, #1
 80063d2:	4638      	mov	r0, r7
 80063d4:	4621      	mov	r1, r4
 80063d6:	612e      	str	r6, [r5, #16]
 80063d8:	f7ff fdda 	bl	8005f90 <_Bfree>
 80063dc:	4628      	mov	r0, r5
 80063de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80063e6:	3301      	adds	r3, #1
 80063e8:	e7c5      	b.n	8006376 <__lshift+0x4a>
 80063ea:	3904      	subs	r1, #4
 80063ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f0:	459c      	cmp	ip, r3
 80063f2:	f841 2f04 	str.w	r2, [r1, #4]!
 80063f6:	d8f9      	bhi.n	80063ec <__lshift+0xc0>
 80063f8:	e7ea      	b.n	80063d0 <__lshift+0xa4>
 80063fa:	bf00      	nop
 80063fc:	08008106 	.word	0x08008106
 8006400:	08008117 	.word	0x08008117

08006404 <__mcmp>:
 8006404:	4603      	mov	r3, r0
 8006406:	690a      	ldr	r2, [r1, #16]
 8006408:	6900      	ldr	r0, [r0, #16]
 800640a:	b530      	push	{r4, r5, lr}
 800640c:	1a80      	subs	r0, r0, r2
 800640e:	d10d      	bne.n	800642c <__mcmp+0x28>
 8006410:	3314      	adds	r3, #20
 8006412:	3114      	adds	r1, #20
 8006414:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006418:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800641c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006420:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006424:	4295      	cmp	r5, r2
 8006426:	d002      	beq.n	800642e <__mcmp+0x2a>
 8006428:	d304      	bcc.n	8006434 <__mcmp+0x30>
 800642a:	2001      	movs	r0, #1
 800642c:	bd30      	pop	{r4, r5, pc}
 800642e:	42a3      	cmp	r3, r4
 8006430:	d3f4      	bcc.n	800641c <__mcmp+0x18>
 8006432:	e7fb      	b.n	800642c <__mcmp+0x28>
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	e7f8      	b.n	800642c <__mcmp+0x28>
	...

0800643c <__mdiff>:
 800643c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	460d      	mov	r5, r1
 8006442:	4607      	mov	r7, r0
 8006444:	4611      	mov	r1, r2
 8006446:	4628      	mov	r0, r5
 8006448:	4614      	mov	r4, r2
 800644a:	f7ff ffdb 	bl	8006404 <__mcmp>
 800644e:	1e06      	subs	r6, r0, #0
 8006450:	d111      	bne.n	8006476 <__mdiff+0x3a>
 8006452:	4631      	mov	r1, r6
 8006454:	4638      	mov	r0, r7
 8006456:	f7ff fd5b 	bl	8005f10 <_Balloc>
 800645a:	4602      	mov	r2, r0
 800645c:	b928      	cbnz	r0, 800646a <__mdiff+0x2e>
 800645e:	f240 2137 	movw	r1, #567	; 0x237
 8006462:	4b3a      	ldr	r3, [pc, #232]	; (800654c <__mdiff+0x110>)
 8006464:	483a      	ldr	r0, [pc, #232]	; (8006550 <__mdiff+0x114>)
 8006466:	f000 faf5 	bl	8006a54 <__assert_func>
 800646a:	2301      	movs	r3, #1
 800646c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006470:	4610      	mov	r0, r2
 8006472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	bfa4      	itt	ge
 8006478:	4623      	movge	r3, r4
 800647a:	462c      	movge	r4, r5
 800647c:	4638      	mov	r0, r7
 800647e:	6861      	ldr	r1, [r4, #4]
 8006480:	bfa6      	itte	ge
 8006482:	461d      	movge	r5, r3
 8006484:	2600      	movge	r6, #0
 8006486:	2601      	movlt	r6, #1
 8006488:	f7ff fd42 	bl	8005f10 <_Balloc>
 800648c:	4602      	mov	r2, r0
 800648e:	b918      	cbnz	r0, 8006498 <__mdiff+0x5c>
 8006490:	f240 2145 	movw	r1, #581	; 0x245
 8006494:	4b2d      	ldr	r3, [pc, #180]	; (800654c <__mdiff+0x110>)
 8006496:	e7e5      	b.n	8006464 <__mdiff+0x28>
 8006498:	f102 0814 	add.w	r8, r2, #20
 800649c:	46c2      	mov	sl, r8
 800649e:	f04f 0c00 	mov.w	ip, #0
 80064a2:	6927      	ldr	r7, [r4, #16]
 80064a4:	60c6      	str	r6, [r0, #12]
 80064a6:	692e      	ldr	r6, [r5, #16]
 80064a8:	f104 0014 	add.w	r0, r4, #20
 80064ac:	f105 0914 	add.w	r9, r5, #20
 80064b0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80064b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064b8:	3410      	adds	r4, #16
 80064ba:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80064be:	f859 3b04 	ldr.w	r3, [r9], #4
 80064c2:	fa1f f18b 	uxth.w	r1, fp
 80064c6:	4461      	add	r1, ip
 80064c8:	fa1f fc83 	uxth.w	ip, r3
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	eba1 010c 	sub.w	r1, r1, ip
 80064d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80064da:	b289      	uxth	r1, r1
 80064dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80064e0:	454e      	cmp	r6, r9
 80064e2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80064e6:	f84a 1b04 	str.w	r1, [sl], #4
 80064ea:	d8e6      	bhi.n	80064ba <__mdiff+0x7e>
 80064ec:	1b73      	subs	r3, r6, r5
 80064ee:	3b15      	subs	r3, #21
 80064f0:	f023 0303 	bic.w	r3, r3, #3
 80064f4:	3515      	adds	r5, #21
 80064f6:	3304      	adds	r3, #4
 80064f8:	42ae      	cmp	r6, r5
 80064fa:	bf38      	it	cc
 80064fc:	2304      	movcc	r3, #4
 80064fe:	4418      	add	r0, r3
 8006500:	4443      	add	r3, r8
 8006502:	461e      	mov	r6, r3
 8006504:	4605      	mov	r5, r0
 8006506:	4575      	cmp	r5, lr
 8006508:	d30e      	bcc.n	8006528 <__mdiff+0xec>
 800650a:	f10e 0103 	add.w	r1, lr, #3
 800650e:	1a09      	subs	r1, r1, r0
 8006510:	f021 0103 	bic.w	r1, r1, #3
 8006514:	3803      	subs	r0, #3
 8006516:	4586      	cmp	lr, r0
 8006518:	bf38      	it	cc
 800651a:	2100      	movcc	r1, #0
 800651c:	440b      	add	r3, r1
 800651e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006522:	b189      	cbz	r1, 8006548 <__mdiff+0x10c>
 8006524:	6117      	str	r7, [r2, #16]
 8006526:	e7a3      	b.n	8006470 <__mdiff+0x34>
 8006528:	f855 8b04 	ldr.w	r8, [r5], #4
 800652c:	fa1f f188 	uxth.w	r1, r8
 8006530:	4461      	add	r1, ip
 8006532:	140c      	asrs	r4, r1, #16
 8006534:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006538:	b289      	uxth	r1, r1
 800653a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800653e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006542:	f846 1b04 	str.w	r1, [r6], #4
 8006546:	e7de      	b.n	8006506 <__mdiff+0xca>
 8006548:	3f01      	subs	r7, #1
 800654a:	e7e8      	b.n	800651e <__mdiff+0xe2>
 800654c:	08008106 	.word	0x08008106
 8006550:	08008117 	.word	0x08008117

08006554 <__d2b>:
 8006554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006556:	2101      	movs	r1, #1
 8006558:	4617      	mov	r7, r2
 800655a:	461c      	mov	r4, r3
 800655c:	9e08      	ldr	r6, [sp, #32]
 800655e:	f7ff fcd7 	bl	8005f10 <_Balloc>
 8006562:	4605      	mov	r5, r0
 8006564:	b930      	cbnz	r0, 8006574 <__d2b+0x20>
 8006566:	4602      	mov	r2, r0
 8006568:	f240 310f 	movw	r1, #783	; 0x30f
 800656c:	4b22      	ldr	r3, [pc, #136]	; (80065f8 <__d2b+0xa4>)
 800656e:	4823      	ldr	r0, [pc, #140]	; (80065fc <__d2b+0xa8>)
 8006570:	f000 fa70 	bl	8006a54 <__assert_func>
 8006574:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006578:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800657c:	bb24      	cbnz	r4, 80065c8 <__d2b+0x74>
 800657e:	2f00      	cmp	r7, #0
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	d026      	beq.n	80065d2 <__d2b+0x7e>
 8006584:	4668      	mov	r0, sp
 8006586:	9700      	str	r7, [sp, #0]
 8006588:	f7ff fd8a 	bl	80060a0 <__lo0bits>
 800658c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006590:	b1e8      	cbz	r0, 80065ce <__d2b+0x7a>
 8006592:	f1c0 0320 	rsb	r3, r0, #32
 8006596:	fa02 f303 	lsl.w	r3, r2, r3
 800659a:	430b      	orrs	r3, r1
 800659c:	40c2      	lsrs	r2, r0
 800659e:	616b      	str	r3, [r5, #20]
 80065a0:	9201      	str	r2, [sp, #4]
 80065a2:	9b01      	ldr	r3, [sp, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bf14      	ite	ne
 80065a8:	2102      	movne	r1, #2
 80065aa:	2101      	moveq	r1, #1
 80065ac:	61ab      	str	r3, [r5, #24]
 80065ae:	6129      	str	r1, [r5, #16]
 80065b0:	b1bc      	cbz	r4, 80065e2 <__d2b+0x8e>
 80065b2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80065b6:	4404      	add	r4, r0
 80065b8:	6034      	str	r4, [r6, #0]
 80065ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c0:	6018      	str	r0, [r3, #0]
 80065c2:	4628      	mov	r0, r5
 80065c4:	b003      	add	sp, #12
 80065c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065cc:	e7d7      	b.n	800657e <__d2b+0x2a>
 80065ce:	6169      	str	r1, [r5, #20]
 80065d0:	e7e7      	b.n	80065a2 <__d2b+0x4e>
 80065d2:	a801      	add	r0, sp, #4
 80065d4:	f7ff fd64 	bl	80060a0 <__lo0bits>
 80065d8:	9b01      	ldr	r3, [sp, #4]
 80065da:	2101      	movs	r1, #1
 80065dc:	616b      	str	r3, [r5, #20]
 80065de:	3020      	adds	r0, #32
 80065e0:	e7e5      	b.n	80065ae <__d2b+0x5a>
 80065e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065e6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80065ea:	6030      	str	r0, [r6, #0]
 80065ec:	6918      	ldr	r0, [r3, #16]
 80065ee:	f7ff fd37 	bl	8006060 <__hi0bits>
 80065f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80065f6:	e7e2      	b.n	80065be <__d2b+0x6a>
 80065f8:	08008106 	.word	0x08008106
 80065fc:	08008117 	.word	0x08008117

08006600 <__ssputs_r>:
 8006600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006604:	461f      	mov	r7, r3
 8006606:	688e      	ldr	r6, [r1, #8]
 8006608:	4682      	mov	sl, r0
 800660a:	42be      	cmp	r6, r7
 800660c:	460c      	mov	r4, r1
 800660e:	4690      	mov	r8, r2
 8006610:	680b      	ldr	r3, [r1, #0]
 8006612:	d82c      	bhi.n	800666e <__ssputs_r+0x6e>
 8006614:	898a      	ldrh	r2, [r1, #12]
 8006616:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800661a:	d026      	beq.n	800666a <__ssputs_r+0x6a>
 800661c:	6965      	ldr	r5, [r4, #20]
 800661e:	6909      	ldr	r1, [r1, #16]
 8006620:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006624:	eba3 0901 	sub.w	r9, r3, r1
 8006628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800662c:	1c7b      	adds	r3, r7, #1
 800662e:	444b      	add	r3, r9
 8006630:	106d      	asrs	r5, r5, #1
 8006632:	429d      	cmp	r5, r3
 8006634:	bf38      	it	cc
 8006636:	461d      	movcc	r5, r3
 8006638:	0553      	lsls	r3, r2, #21
 800663a:	d527      	bpl.n	800668c <__ssputs_r+0x8c>
 800663c:	4629      	mov	r1, r5
 800663e:	f7fd ff03 	bl	8004448 <_malloc_r>
 8006642:	4606      	mov	r6, r0
 8006644:	b360      	cbz	r0, 80066a0 <__ssputs_r+0xa0>
 8006646:	464a      	mov	r2, r9
 8006648:	6921      	ldr	r1, [r4, #16]
 800664a:	f000 f9f5 	bl	8006a38 <memcpy>
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	6126      	str	r6, [r4, #16]
 800665c:	444e      	add	r6, r9
 800665e:	6026      	str	r6, [r4, #0]
 8006660:	463e      	mov	r6, r7
 8006662:	6165      	str	r5, [r4, #20]
 8006664:	eba5 0509 	sub.w	r5, r5, r9
 8006668:	60a5      	str	r5, [r4, #8]
 800666a:	42be      	cmp	r6, r7
 800666c:	d900      	bls.n	8006670 <__ssputs_r+0x70>
 800666e:	463e      	mov	r6, r7
 8006670:	4632      	mov	r2, r6
 8006672:	4641      	mov	r1, r8
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	f000 f9c5 	bl	8006a04 <memmove>
 800667a:	2000      	movs	r0, #0
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	1b9b      	subs	r3, r3, r6
 8006680:	60a3      	str	r3, [r4, #8]
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	4433      	add	r3, r6
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668c:	462a      	mov	r2, r5
 800668e:	f000 fa25 	bl	8006adc <_realloc_r>
 8006692:	4606      	mov	r6, r0
 8006694:	2800      	cmp	r0, #0
 8006696:	d1e0      	bne.n	800665a <__ssputs_r+0x5a>
 8006698:	4650      	mov	r0, sl
 800669a:	6921      	ldr	r1, [r4, #16]
 800669c:	f7ff fbf0 	bl	8005e80 <_free_r>
 80066a0:	230c      	movs	r3, #12
 80066a2:	f8ca 3000 	str.w	r3, [sl]
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	f04f 30ff 	mov.w	r0, #4294967295
 80066ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b0:	81a3      	strh	r3, [r4, #12]
 80066b2:	e7e9      	b.n	8006688 <__ssputs_r+0x88>

080066b4 <_svfiprintf_r>:
 80066b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	4698      	mov	r8, r3
 80066ba:	898b      	ldrh	r3, [r1, #12]
 80066bc:	4607      	mov	r7, r0
 80066be:	061b      	lsls	r3, r3, #24
 80066c0:	460d      	mov	r5, r1
 80066c2:	4614      	mov	r4, r2
 80066c4:	b09d      	sub	sp, #116	; 0x74
 80066c6:	d50e      	bpl.n	80066e6 <_svfiprintf_r+0x32>
 80066c8:	690b      	ldr	r3, [r1, #16]
 80066ca:	b963      	cbnz	r3, 80066e6 <_svfiprintf_r+0x32>
 80066cc:	2140      	movs	r1, #64	; 0x40
 80066ce:	f7fd febb 	bl	8004448 <_malloc_r>
 80066d2:	6028      	str	r0, [r5, #0]
 80066d4:	6128      	str	r0, [r5, #16]
 80066d6:	b920      	cbnz	r0, 80066e2 <_svfiprintf_r+0x2e>
 80066d8:	230c      	movs	r3, #12
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	e0d0      	b.n	8006884 <_svfiprintf_r+0x1d0>
 80066e2:	2340      	movs	r3, #64	; 0x40
 80066e4:	616b      	str	r3, [r5, #20]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ea:	2320      	movs	r3, #32
 80066ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066f0:	2330      	movs	r3, #48	; 0x30
 80066f2:	f04f 0901 	mov.w	r9, #1
 80066f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80066fa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800689c <_svfiprintf_r+0x1e8>
 80066fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006702:	4623      	mov	r3, r4
 8006704:	469a      	mov	sl, r3
 8006706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800670a:	b10a      	cbz	r2, 8006710 <_svfiprintf_r+0x5c>
 800670c:	2a25      	cmp	r2, #37	; 0x25
 800670e:	d1f9      	bne.n	8006704 <_svfiprintf_r+0x50>
 8006710:	ebba 0b04 	subs.w	fp, sl, r4
 8006714:	d00b      	beq.n	800672e <_svfiprintf_r+0x7a>
 8006716:	465b      	mov	r3, fp
 8006718:	4622      	mov	r2, r4
 800671a:	4629      	mov	r1, r5
 800671c:	4638      	mov	r0, r7
 800671e:	f7ff ff6f 	bl	8006600 <__ssputs_r>
 8006722:	3001      	adds	r0, #1
 8006724:	f000 80a9 	beq.w	800687a <_svfiprintf_r+0x1c6>
 8006728:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800672a:	445a      	add	r2, fp
 800672c:	9209      	str	r2, [sp, #36]	; 0x24
 800672e:	f89a 3000 	ldrb.w	r3, [sl]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80a1 	beq.w	800687a <_svfiprintf_r+0x1c6>
 8006738:	2300      	movs	r3, #0
 800673a:	f04f 32ff 	mov.w	r2, #4294967295
 800673e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006742:	f10a 0a01 	add.w	sl, sl, #1
 8006746:	9304      	str	r3, [sp, #16]
 8006748:	9307      	str	r3, [sp, #28]
 800674a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800674e:	931a      	str	r3, [sp, #104]	; 0x68
 8006750:	4654      	mov	r4, sl
 8006752:	2205      	movs	r2, #5
 8006754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006758:	4850      	ldr	r0, [pc, #320]	; (800689c <_svfiprintf_r+0x1e8>)
 800675a:	f7fe fd14 	bl	8005186 <memchr>
 800675e:	9a04      	ldr	r2, [sp, #16]
 8006760:	b9d8      	cbnz	r0, 800679a <_svfiprintf_r+0xe6>
 8006762:	06d0      	lsls	r0, r2, #27
 8006764:	bf44      	itt	mi
 8006766:	2320      	movmi	r3, #32
 8006768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800676c:	0711      	lsls	r1, r2, #28
 800676e:	bf44      	itt	mi
 8006770:	232b      	movmi	r3, #43	; 0x2b
 8006772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006776:	f89a 3000 	ldrb.w	r3, [sl]
 800677a:	2b2a      	cmp	r3, #42	; 0x2a
 800677c:	d015      	beq.n	80067aa <_svfiprintf_r+0xf6>
 800677e:	4654      	mov	r4, sl
 8006780:	2000      	movs	r0, #0
 8006782:	f04f 0c0a 	mov.w	ip, #10
 8006786:	9a07      	ldr	r2, [sp, #28]
 8006788:	4621      	mov	r1, r4
 800678a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800678e:	3b30      	subs	r3, #48	; 0x30
 8006790:	2b09      	cmp	r3, #9
 8006792:	d94d      	bls.n	8006830 <_svfiprintf_r+0x17c>
 8006794:	b1b0      	cbz	r0, 80067c4 <_svfiprintf_r+0x110>
 8006796:	9207      	str	r2, [sp, #28]
 8006798:	e014      	b.n	80067c4 <_svfiprintf_r+0x110>
 800679a:	eba0 0308 	sub.w	r3, r0, r8
 800679e:	fa09 f303 	lsl.w	r3, r9, r3
 80067a2:	4313      	orrs	r3, r2
 80067a4:	46a2      	mov	sl, r4
 80067a6:	9304      	str	r3, [sp, #16]
 80067a8:	e7d2      	b.n	8006750 <_svfiprintf_r+0x9c>
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	1d19      	adds	r1, r3, #4
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	9103      	str	r1, [sp, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	bfbb      	ittet	lt
 80067b6:	425b      	neglt	r3, r3
 80067b8:	f042 0202 	orrlt.w	r2, r2, #2
 80067bc:	9307      	strge	r3, [sp, #28]
 80067be:	9307      	strlt	r3, [sp, #28]
 80067c0:	bfb8      	it	lt
 80067c2:	9204      	strlt	r2, [sp, #16]
 80067c4:	7823      	ldrb	r3, [r4, #0]
 80067c6:	2b2e      	cmp	r3, #46	; 0x2e
 80067c8:	d10c      	bne.n	80067e4 <_svfiprintf_r+0x130>
 80067ca:	7863      	ldrb	r3, [r4, #1]
 80067cc:	2b2a      	cmp	r3, #42	; 0x2a
 80067ce:	d134      	bne.n	800683a <_svfiprintf_r+0x186>
 80067d0:	9b03      	ldr	r3, [sp, #12]
 80067d2:	3402      	adds	r4, #2
 80067d4:	1d1a      	adds	r2, r3, #4
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	9203      	str	r2, [sp, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	bfb8      	it	lt
 80067de:	f04f 33ff 	movlt.w	r3, #4294967295
 80067e2:	9305      	str	r3, [sp, #20]
 80067e4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80068a0 <_svfiprintf_r+0x1ec>
 80067e8:	2203      	movs	r2, #3
 80067ea:	4650      	mov	r0, sl
 80067ec:	7821      	ldrb	r1, [r4, #0]
 80067ee:	f7fe fcca 	bl	8005186 <memchr>
 80067f2:	b138      	cbz	r0, 8006804 <_svfiprintf_r+0x150>
 80067f4:	2240      	movs	r2, #64	; 0x40
 80067f6:	9b04      	ldr	r3, [sp, #16]
 80067f8:	eba0 000a 	sub.w	r0, r0, sl
 80067fc:	4082      	lsls	r2, r0
 80067fe:	4313      	orrs	r3, r2
 8006800:	3401      	adds	r4, #1
 8006802:	9304      	str	r3, [sp, #16]
 8006804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006808:	2206      	movs	r2, #6
 800680a:	4826      	ldr	r0, [pc, #152]	; (80068a4 <_svfiprintf_r+0x1f0>)
 800680c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006810:	f7fe fcb9 	bl	8005186 <memchr>
 8006814:	2800      	cmp	r0, #0
 8006816:	d038      	beq.n	800688a <_svfiprintf_r+0x1d6>
 8006818:	4b23      	ldr	r3, [pc, #140]	; (80068a8 <_svfiprintf_r+0x1f4>)
 800681a:	bb1b      	cbnz	r3, 8006864 <_svfiprintf_r+0x1b0>
 800681c:	9b03      	ldr	r3, [sp, #12]
 800681e:	3307      	adds	r3, #7
 8006820:	f023 0307 	bic.w	r3, r3, #7
 8006824:	3308      	adds	r3, #8
 8006826:	9303      	str	r3, [sp, #12]
 8006828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800682a:	4433      	add	r3, r6
 800682c:	9309      	str	r3, [sp, #36]	; 0x24
 800682e:	e768      	b.n	8006702 <_svfiprintf_r+0x4e>
 8006830:	460c      	mov	r4, r1
 8006832:	2001      	movs	r0, #1
 8006834:	fb0c 3202 	mla	r2, ip, r2, r3
 8006838:	e7a6      	b.n	8006788 <_svfiprintf_r+0xd4>
 800683a:	2300      	movs	r3, #0
 800683c:	f04f 0c0a 	mov.w	ip, #10
 8006840:	4619      	mov	r1, r3
 8006842:	3401      	adds	r4, #1
 8006844:	9305      	str	r3, [sp, #20]
 8006846:	4620      	mov	r0, r4
 8006848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800684c:	3a30      	subs	r2, #48	; 0x30
 800684e:	2a09      	cmp	r2, #9
 8006850:	d903      	bls.n	800685a <_svfiprintf_r+0x1a6>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d0c6      	beq.n	80067e4 <_svfiprintf_r+0x130>
 8006856:	9105      	str	r1, [sp, #20]
 8006858:	e7c4      	b.n	80067e4 <_svfiprintf_r+0x130>
 800685a:	4604      	mov	r4, r0
 800685c:	2301      	movs	r3, #1
 800685e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006862:	e7f0      	b.n	8006846 <_svfiprintf_r+0x192>
 8006864:	ab03      	add	r3, sp, #12
 8006866:	9300      	str	r3, [sp, #0]
 8006868:	462a      	mov	r2, r5
 800686a:	4638      	mov	r0, r7
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <_svfiprintf_r+0x1f8>)
 800686e:	a904      	add	r1, sp, #16
 8006870:	f7fd ff12 	bl	8004698 <_printf_float>
 8006874:	1c42      	adds	r2, r0, #1
 8006876:	4606      	mov	r6, r0
 8006878:	d1d6      	bne.n	8006828 <_svfiprintf_r+0x174>
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	065b      	lsls	r3, r3, #25
 800687e:	f53f af2d 	bmi.w	80066dc <_svfiprintf_r+0x28>
 8006882:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006884:	b01d      	add	sp, #116	; 0x74
 8006886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688a:	ab03      	add	r3, sp, #12
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	462a      	mov	r2, r5
 8006890:	4638      	mov	r0, r7
 8006892:	4b06      	ldr	r3, [pc, #24]	; (80068ac <_svfiprintf_r+0x1f8>)
 8006894:	a904      	add	r1, sp, #16
 8006896:	f7fe f99f 	bl	8004bd8 <_printf_i>
 800689a:	e7eb      	b.n	8006874 <_svfiprintf_r+0x1c0>
 800689c:	0800826c 	.word	0x0800826c
 80068a0:	08008272 	.word	0x08008272
 80068a4:	08008276 	.word	0x08008276
 80068a8:	08004699 	.word	0x08004699
 80068ac:	08006601 	.word	0x08006601

080068b0 <__sflush_r>:
 80068b0:	898a      	ldrh	r2, [r1, #12]
 80068b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b4:	4605      	mov	r5, r0
 80068b6:	0710      	lsls	r0, r2, #28
 80068b8:	460c      	mov	r4, r1
 80068ba:	d457      	bmi.n	800696c <__sflush_r+0xbc>
 80068bc:	684b      	ldr	r3, [r1, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dc04      	bgt.n	80068cc <__sflush_r+0x1c>
 80068c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dc01      	bgt.n	80068cc <__sflush_r+0x1c>
 80068c8:	2000      	movs	r0, #0
 80068ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d0fa      	beq.n	80068c8 <__sflush_r+0x18>
 80068d2:	2300      	movs	r3, #0
 80068d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068d8:	682f      	ldr	r7, [r5, #0]
 80068da:	6a21      	ldr	r1, [r4, #32]
 80068dc:	602b      	str	r3, [r5, #0]
 80068de:	d032      	beq.n	8006946 <__sflush_r+0x96>
 80068e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	075a      	lsls	r2, r3, #29
 80068e6:	d505      	bpl.n	80068f4 <__sflush_r+0x44>
 80068e8:	6863      	ldr	r3, [r4, #4]
 80068ea:	1ac0      	subs	r0, r0, r3
 80068ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068ee:	b10b      	cbz	r3, 80068f4 <__sflush_r+0x44>
 80068f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068f2:	1ac0      	subs	r0, r0, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	4602      	mov	r2, r0
 80068f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068fa:	4628      	mov	r0, r5
 80068fc:	6a21      	ldr	r1, [r4, #32]
 80068fe:	47b0      	blx	r6
 8006900:	1c43      	adds	r3, r0, #1
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	d106      	bne.n	8006914 <__sflush_r+0x64>
 8006906:	6829      	ldr	r1, [r5, #0]
 8006908:	291d      	cmp	r1, #29
 800690a:	d82b      	bhi.n	8006964 <__sflush_r+0xb4>
 800690c:	4a28      	ldr	r2, [pc, #160]	; (80069b0 <__sflush_r+0x100>)
 800690e:	410a      	asrs	r2, r1
 8006910:	07d6      	lsls	r6, r2, #31
 8006912:	d427      	bmi.n	8006964 <__sflush_r+0xb4>
 8006914:	2200      	movs	r2, #0
 8006916:	6062      	str	r2, [r4, #4]
 8006918:	6922      	ldr	r2, [r4, #16]
 800691a:	04d9      	lsls	r1, r3, #19
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	d504      	bpl.n	800692a <__sflush_r+0x7a>
 8006920:	1c42      	adds	r2, r0, #1
 8006922:	d101      	bne.n	8006928 <__sflush_r+0x78>
 8006924:	682b      	ldr	r3, [r5, #0]
 8006926:	b903      	cbnz	r3, 800692a <__sflush_r+0x7a>
 8006928:	6560      	str	r0, [r4, #84]	; 0x54
 800692a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800692c:	602f      	str	r7, [r5, #0]
 800692e:	2900      	cmp	r1, #0
 8006930:	d0ca      	beq.n	80068c8 <__sflush_r+0x18>
 8006932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006936:	4299      	cmp	r1, r3
 8006938:	d002      	beq.n	8006940 <__sflush_r+0x90>
 800693a:	4628      	mov	r0, r5
 800693c:	f7ff faa0 	bl	8005e80 <_free_r>
 8006940:	2000      	movs	r0, #0
 8006942:	6360      	str	r0, [r4, #52]	; 0x34
 8006944:	e7c1      	b.n	80068ca <__sflush_r+0x1a>
 8006946:	2301      	movs	r3, #1
 8006948:	4628      	mov	r0, r5
 800694a:	47b0      	blx	r6
 800694c:	1c41      	adds	r1, r0, #1
 800694e:	d1c8      	bne.n	80068e2 <__sflush_r+0x32>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0c5      	beq.n	80068e2 <__sflush_r+0x32>
 8006956:	2b1d      	cmp	r3, #29
 8006958:	d001      	beq.n	800695e <__sflush_r+0xae>
 800695a:	2b16      	cmp	r3, #22
 800695c:	d101      	bne.n	8006962 <__sflush_r+0xb2>
 800695e:	602f      	str	r7, [r5, #0]
 8006960:	e7b2      	b.n	80068c8 <__sflush_r+0x18>
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006968:	81a3      	strh	r3, [r4, #12]
 800696a:	e7ae      	b.n	80068ca <__sflush_r+0x1a>
 800696c:	690f      	ldr	r7, [r1, #16]
 800696e:	2f00      	cmp	r7, #0
 8006970:	d0aa      	beq.n	80068c8 <__sflush_r+0x18>
 8006972:	0793      	lsls	r3, r2, #30
 8006974:	bf18      	it	ne
 8006976:	2300      	movne	r3, #0
 8006978:	680e      	ldr	r6, [r1, #0]
 800697a:	bf08      	it	eq
 800697c:	694b      	ldreq	r3, [r1, #20]
 800697e:	1bf6      	subs	r6, r6, r7
 8006980:	600f      	str	r7, [r1, #0]
 8006982:	608b      	str	r3, [r1, #8]
 8006984:	2e00      	cmp	r6, #0
 8006986:	dd9f      	ble.n	80068c8 <__sflush_r+0x18>
 8006988:	4633      	mov	r3, r6
 800698a:	463a      	mov	r2, r7
 800698c:	4628      	mov	r0, r5
 800698e:	6a21      	ldr	r1, [r4, #32]
 8006990:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006994:	47e0      	blx	ip
 8006996:	2800      	cmp	r0, #0
 8006998:	dc06      	bgt.n	80069a8 <__sflush_r+0xf8>
 800699a:	89a3      	ldrh	r3, [r4, #12]
 800699c:	f04f 30ff 	mov.w	r0, #4294967295
 80069a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069a4:	81a3      	strh	r3, [r4, #12]
 80069a6:	e790      	b.n	80068ca <__sflush_r+0x1a>
 80069a8:	4407      	add	r7, r0
 80069aa:	1a36      	subs	r6, r6, r0
 80069ac:	e7ea      	b.n	8006984 <__sflush_r+0xd4>
 80069ae:	bf00      	nop
 80069b0:	dfbffffe 	.word	0xdfbffffe

080069b4 <_fflush_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	690b      	ldr	r3, [r1, #16]
 80069b8:	4605      	mov	r5, r0
 80069ba:	460c      	mov	r4, r1
 80069bc:	b913      	cbnz	r3, 80069c4 <_fflush_r+0x10>
 80069be:	2500      	movs	r5, #0
 80069c0:	4628      	mov	r0, r5
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	b118      	cbz	r0, 80069ce <_fflush_r+0x1a>
 80069c6:	6a03      	ldr	r3, [r0, #32]
 80069c8:	b90b      	cbnz	r3, 80069ce <_fflush_r+0x1a>
 80069ca:	f7fe fab3 	bl	8004f34 <__sinit>
 80069ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d0f3      	beq.n	80069be <_fflush_r+0xa>
 80069d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069d8:	07d0      	lsls	r0, r2, #31
 80069da:	d404      	bmi.n	80069e6 <_fflush_r+0x32>
 80069dc:	0599      	lsls	r1, r3, #22
 80069de:	d402      	bmi.n	80069e6 <_fflush_r+0x32>
 80069e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069e2:	f7fe fbce 	bl	8005182 <__retarget_lock_acquire_recursive>
 80069e6:	4628      	mov	r0, r5
 80069e8:	4621      	mov	r1, r4
 80069ea:	f7ff ff61 	bl	80068b0 <__sflush_r>
 80069ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069f0:	4605      	mov	r5, r0
 80069f2:	07da      	lsls	r2, r3, #31
 80069f4:	d4e4      	bmi.n	80069c0 <_fflush_r+0xc>
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	059b      	lsls	r3, r3, #22
 80069fa:	d4e1      	bmi.n	80069c0 <_fflush_r+0xc>
 80069fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069fe:	f7fe fbc1 	bl	8005184 <__retarget_lock_release_recursive>
 8006a02:	e7dd      	b.n	80069c0 <_fflush_r+0xc>

08006a04 <memmove>:
 8006a04:	4288      	cmp	r0, r1
 8006a06:	b510      	push	{r4, lr}
 8006a08:	eb01 0402 	add.w	r4, r1, r2
 8006a0c:	d902      	bls.n	8006a14 <memmove+0x10>
 8006a0e:	4284      	cmp	r4, r0
 8006a10:	4623      	mov	r3, r4
 8006a12:	d807      	bhi.n	8006a24 <memmove+0x20>
 8006a14:	1e43      	subs	r3, r0, #1
 8006a16:	42a1      	cmp	r1, r4
 8006a18:	d008      	beq.n	8006a2c <memmove+0x28>
 8006a1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a22:	e7f8      	b.n	8006a16 <memmove+0x12>
 8006a24:	4601      	mov	r1, r0
 8006a26:	4402      	add	r2, r0
 8006a28:	428a      	cmp	r2, r1
 8006a2a:	d100      	bne.n	8006a2e <memmove+0x2a>
 8006a2c:	bd10      	pop	{r4, pc}
 8006a2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a36:	e7f7      	b.n	8006a28 <memmove+0x24>

08006a38 <memcpy>:
 8006a38:	440a      	add	r2, r1
 8006a3a:	4291      	cmp	r1, r2
 8006a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a40:	d100      	bne.n	8006a44 <memcpy+0xc>
 8006a42:	4770      	bx	lr
 8006a44:	b510      	push	{r4, lr}
 8006a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a4a:	4291      	cmp	r1, r2
 8006a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a50:	d1f9      	bne.n	8006a46 <memcpy+0xe>
 8006a52:	bd10      	pop	{r4, pc}

08006a54 <__assert_func>:
 8006a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a56:	4614      	mov	r4, r2
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <__assert_func+0x2c>)
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68d8      	ldr	r0, [r3, #12]
 8006a62:	b14c      	cbz	r4, 8006a78 <__assert_func+0x24>
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <__assert_func+0x30>)
 8006a66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a6a:	9100      	str	r1, [sp, #0]
 8006a6c:	462b      	mov	r3, r5
 8006a6e:	4906      	ldr	r1, [pc, #24]	; (8006a88 <__assert_func+0x34>)
 8006a70:	f000 f870 	bl	8006b54 <fiprintf>
 8006a74:	f000 f880 	bl	8006b78 <abort>
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <__assert_func+0x38>)
 8006a7a:	461c      	mov	r4, r3
 8006a7c:	e7f3      	b.n	8006a66 <__assert_func+0x12>
 8006a7e:	bf00      	nop
 8006a80:	20000078 	.word	0x20000078
 8006a84:	08008287 	.word	0x08008287
 8006a88:	08008294 	.word	0x08008294
 8006a8c:	080082c2 	.word	0x080082c2

08006a90 <_calloc_r>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	fba1 5402 	umull	r5, r4, r1, r2
 8006a96:	b934      	cbnz	r4, 8006aa6 <_calloc_r+0x16>
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7fd fcd5 	bl	8004448 <_malloc_r>
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	b928      	cbnz	r0, 8006aae <_calloc_r+0x1e>
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	bd70      	pop	{r4, r5, r6, pc}
 8006aa6:	220c      	movs	r2, #12
 8006aa8:	2600      	movs	r6, #0
 8006aaa:	6002      	str	r2, [r0, #0]
 8006aac:	e7f9      	b.n	8006aa2 <_calloc_r+0x12>
 8006aae:	462a      	mov	r2, r5
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	f7fe fad8 	bl	8005066 <memset>
 8006ab6:	e7f4      	b.n	8006aa2 <_calloc_r+0x12>

08006ab8 <__ascii_mbtowc>:
 8006ab8:	b082      	sub	sp, #8
 8006aba:	b901      	cbnz	r1, 8006abe <__ascii_mbtowc+0x6>
 8006abc:	a901      	add	r1, sp, #4
 8006abe:	b142      	cbz	r2, 8006ad2 <__ascii_mbtowc+0x1a>
 8006ac0:	b14b      	cbz	r3, 8006ad6 <__ascii_mbtowc+0x1e>
 8006ac2:	7813      	ldrb	r3, [r2, #0]
 8006ac4:	600b      	str	r3, [r1, #0]
 8006ac6:	7812      	ldrb	r2, [r2, #0]
 8006ac8:	1e10      	subs	r0, r2, #0
 8006aca:	bf18      	it	ne
 8006acc:	2001      	movne	r0, #1
 8006ace:	b002      	add	sp, #8
 8006ad0:	4770      	bx	lr
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	e7fb      	b.n	8006ace <__ascii_mbtowc+0x16>
 8006ad6:	f06f 0001 	mvn.w	r0, #1
 8006ada:	e7f8      	b.n	8006ace <__ascii_mbtowc+0x16>

08006adc <_realloc_r>:
 8006adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	4614      	mov	r4, r2
 8006ae4:	460e      	mov	r6, r1
 8006ae6:	b921      	cbnz	r1, 8006af2 <_realloc_r+0x16>
 8006ae8:	4611      	mov	r1, r2
 8006aea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aee:	f7fd bcab 	b.w	8004448 <_malloc_r>
 8006af2:	b92a      	cbnz	r2, 8006b00 <_realloc_r+0x24>
 8006af4:	f7ff f9c4 	bl	8005e80 <_free_r>
 8006af8:	4625      	mov	r5, r4
 8006afa:	4628      	mov	r0, r5
 8006afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b00:	f000 f841 	bl	8006b86 <_malloc_usable_size_r>
 8006b04:	4284      	cmp	r4, r0
 8006b06:	4607      	mov	r7, r0
 8006b08:	d802      	bhi.n	8006b10 <_realloc_r+0x34>
 8006b0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006b0e:	d812      	bhi.n	8006b36 <_realloc_r+0x5a>
 8006b10:	4621      	mov	r1, r4
 8006b12:	4640      	mov	r0, r8
 8006b14:	f7fd fc98 	bl	8004448 <_malloc_r>
 8006b18:	4605      	mov	r5, r0
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	d0ed      	beq.n	8006afa <_realloc_r+0x1e>
 8006b1e:	42bc      	cmp	r4, r7
 8006b20:	4622      	mov	r2, r4
 8006b22:	4631      	mov	r1, r6
 8006b24:	bf28      	it	cs
 8006b26:	463a      	movcs	r2, r7
 8006b28:	f7ff ff86 	bl	8006a38 <memcpy>
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4640      	mov	r0, r8
 8006b30:	f7ff f9a6 	bl	8005e80 <_free_r>
 8006b34:	e7e1      	b.n	8006afa <_realloc_r+0x1e>
 8006b36:	4635      	mov	r5, r6
 8006b38:	e7df      	b.n	8006afa <_realloc_r+0x1e>

08006b3a <__ascii_wctomb>:
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	b141      	cbz	r1, 8006b52 <__ascii_wctomb+0x18>
 8006b40:	2aff      	cmp	r2, #255	; 0xff
 8006b42:	d904      	bls.n	8006b4e <__ascii_wctomb+0x14>
 8006b44:	228a      	movs	r2, #138	; 0x8a
 8006b46:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	4770      	bx	lr
 8006b4e:	2001      	movs	r0, #1
 8006b50:	700a      	strb	r2, [r1, #0]
 8006b52:	4770      	bx	lr

08006b54 <fiprintf>:
 8006b54:	b40e      	push	{r1, r2, r3}
 8006b56:	b503      	push	{r0, r1, lr}
 8006b58:	4601      	mov	r1, r0
 8006b5a:	ab03      	add	r3, sp, #12
 8006b5c:	4805      	ldr	r0, [pc, #20]	; (8006b74 <fiprintf+0x20>)
 8006b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b62:	6800      	ldr	r0, [r0, #0]
 8006b64:	9301      	str	r3, [sp, #4]
 8006b66:	f000 f83d 	bl	8006be4 <_vfiprintf_r>
 8006b6a:	b002      	add	sp, #8
 8006b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b70:	b003      	add	sp, #12
 8006b72:	4770      	bx	lr
 8006b74:	20000078 	.word	0x20000078

08006b78 <abort>:
 8006b78:	2006      	movs	r0, #6
 8006b7a:	b508      	push	{r3, lr}
 8006b7c:	f000 fa0a 	bl	8006f94 <raise>
 8006b80:	2001      	movs	r0, #1
 8006b82:	f7fa ffbc 	bl	8001afe <_exit>

08006b86 <_malloc_usable_size_r>:
 8006b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8a:	1f18      	subs	r0, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	bfbc      	itt	lt
 8006b90:	580b      	ldrlt	r3, [r1, r0]
 8006b92:	18c0      	addlt	r0, r0, r3
 8006b94:	4770      	bx	lr

08006b96 <__sfputc_r>:
 8006b96:	6893      	ldr	r3, [r2, #8]
 8006b98:	b410      	push	{r4}
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	6093      	str	r3, [r2, #8]
 8006ba0:	da07      	bge.n	8006bb2 <__sfputc_r+0x1c>
 8006ba2:	6994      	ldr	r4, [r2, #24]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	db01      	blt.n	8006bac <__sfputc_r+0x16>
 8006ba8:	290a      	cmp	r1, #10
 8006baa:	d102      	bne.n	8006bb2 <__sfputc_r+0x1c>
 8006bac:	bc10      	pop	{r4}
 8006bae:	f000 b933 	b.w	8006e18 <__swbuf_r>
 8006bb2:	6813      	ldr	r3, [r2, #0]
 8006bb4:	1c58      	adds	r0, r3, #1
 8006bb6:	6010      	str	r0, [r2, #0]
 8006bb8:	7019      	strb	r1, [r3, #0]
 8006bba:	4608      	mov	r0, r1
 8006bbc:	bc10      	pop	{r4}
 8006bbe:	4770      	bx	lr

08006bc0 <__sfputs_r>:
 8006bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	460f      	mov	r7, r1
 8006bc6:	4614      	mov	r4, r2
 8006bc8:	18d5      	adds	r5, r2, r3
 8006bca:	42ac      	cmp	r4, r5
 8006bcc:	d101      	bne.n	8006bd2 <__sfputs_r+0x12>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e007      	b.n	8006be2 <__sfputs_r+0x22>
 8006bd2:	463a      	mov	r2, r7
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bda:	f7ff ffdc 	bl	8006b96 <__sfputc_r>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d1f3      	bne.n	8006bca <__sfputs_r+0xa>
 8006be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006be4 <_vfiprintf_r>:
 8006be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	460d      	mov	r5, r1
 8006bea:	4614      	mov	r4, r2
 8006bec:	4698      	mov	r8, r3
 8006bee:	4606      	mov	r6, r0
 8006bf0:	b09d      	sub	sp, #116	; 0x74
 8006bf2:	b118      	cbz	r0, 8006bfc <_vfiprintf_r+0x18>
 8006bf4:	6a03      	ldr	r3, [r0, #32]
 8006bf6:	b90b      	cbnz	r3, 8006bfc <_vfiprintf_r+0x18>
 8006bf8:	f7fe f99c 	bl	8004f34 <__sinit>
 8006bfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bfe:	07d9      	lsls	r1, r3, #31
 8006c00:	d405      	bmi.n	8006c0e <_vfiprintf_r+0x2a>
 8006c02:	89ab      	ldrh	r3, [r5, #12]
 8006c04:	059a      	lsls	r2, r3, #22
 8006c06:	d402      	bmi.n	8006c0e <_vfiprintf_r+0x2a>
 8006c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c0a:	f7fe faba 	bl	8005182 <__retarget_lock_acquire_recursive>
 8006c0e:	89ab      	ldrh	r3, [r5, #12]
 8006c10:	071b      	lsls	r3, r3, #28
 8006c12:	d501      	bpl.n	8006c18 <_vfiprintf_r+0x34>
 8006c14:	692b      	ldr	r3, [r5, #16]
 8006c16:	b99b      	cbnz	r3, 8006c40 <_vfiprintf_r+0x5c>
 8006c18:	4629      	mov	r1, r5
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f000 f93a 	bl	8006e94 <__swsetup_r>
 8006c20:	b170      	cbz	r0, 8006c40 <_vfiprintf_r+0x5c>
 8006c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c24:	07dc      	lsls	r4, r3, #31
 8006c26:	d504      	bpl.n	8006c32 <_vfiprintf_r+0x4e>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	b01d      	add	sp, #116	; 0x74
 8006c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c32:	89ab      	ldrh	r3, [r5, #12]
 8006c34:	0598      	lsls	r0, r3, #22
 8006c36:	d4f7      	bmi.n	8006c28 <_vfiprintf_r+0x44>
 8006c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c3a:	f7fe faa3 	bl	8005184 <__retarget_lock_release_recursive>
 8006c3e:	e7f3      	b.n	8006c28 <_vfiprintf_r+0x44>
 8006c40:	2300      	movs	r3, #0
 8006c42:	9309      	str	r3, [sp, #36]	; 0x24
 8006c44:	2320      	movs	r3, #32
 8006c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c4a:	2330      	movs	r3, #48	; 0x30
 8006c4c:	f04f 0901 	mov.w	r9, #1
 8006c50:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c54:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006e04 <_vfiprintf_r+0x220>
 8006c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c5c:	4623      	mov	r3, r4
 8006c5e:	469a      	mov	sl, r3
 8006c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c64:	b10a      	cbz	r2, 8006c6a <_vfiprintf_r+0x86>
 8006c66:	2a25      	cmp	r2, #37	; 0x25
 8006c68:	d1f9      	bne.n	8006c5e <_vfiprintf_r+0x7a>
 8006c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8006c6e:	d00b      	beq.n	8006c88 <_vfiprintf_r+0xa4>
 8006c70:	465b      	mov	r3, fp
 8006c72:	4622      	mov	r2, r4
 8006c74:	4629      	mov	r1, r5
 8006c76:	4630      	mov	r0, r6
 8006c78:	f7ff ffa2 	bl	8006bc0 <__sfputs_r>
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f000 80a9 	beq.w	8006dd4 <_vfiprintf_r+0x1f0>
 8006c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c84:	445a      	add	r2, fp
 8006c86:	9209      	str	r2, [sp, #36]	; 0x24
 8006c88:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80a1 	beq.w	8006dd4 <_vfiprintf_r+0x1f0>
 8006c92:	2300      	movs	r3, #0
 8006c94:	f04f 32ff 	mov.w	r2, #4294967295
 8006c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9c:	f10a 0a01 	add.w	sl, sl, #1
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	9307      	str	r3, [sp, #28]
 8006ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ca8:	931a      	str	r3, [sp, #104]	; 0x68
 8006caa:	4654      	mov	r4, sl
 8006cac:	2205      	movs	r2, #5
 8006cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb2:	4854      	ldr	r0, [pc, #336]	; (8006e04 <_vfiprintf_r+0x220>)
 8006cb4:	f7fe fa67 	bl	8005186 <memchr>
 8006cb8:	9a04      	ldr	r2, [sp, #16]
 8006cba:	b9d8      	cbnz	r0, 8006cf4 <_vfiprintf_r+0x110>
 8006cbc:	06d1      	lsls	r1, r2, #27
 8006cbe:	bf44      	itt	mi
 8006cc0:	2320      	movmi	r3, #32
 8006cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cc6:	0713      	lsls	r3, r2, #28
 8006cc8:	bf44      	itt	mi
 8006cca:	232b      	movmi	r3, #43	; 0x2b
 8006ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd6:	d015      	beq.n	8006d04 <_vfiprintf_r+0x120>
 8006cd8:	4654      	mov	r4, sl
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f04f 0c0a 	mov.w	ip, #10
 8006ce0:	9a07      	ldr	r2, [sp, #28]
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce8:	3b30      	subs	r3, #48	; 0x30
 8006cea:	2b09      	cmp	r3, #9
 8006cec:	d94d      	bls.n	8006d8a <_vfiprintf_r+0x1a6>
 8006cee:	b1b0      	cbz	r0, 8006d1e <_vfiprintf_r+0x13a>
 8006cf0:	9207      	str	r2, [sp, #28]
 8006cf2:	e014      	b.n	8006d1e <_vfiprintf_r+0x13a>
 8006cf4:	eba0 0308 	sub.w	r3, r0, r8
 8006cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	46a2      	mov	sl, r4
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	e7d2      	b.n	8006caa <_vfiprintf_r+0xc6>
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	1d19      	adds	r1, r3, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	9103      	str	r1, [sp, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bfbb      	ittet	lt
 8006d10:	425b      	neglt	r3, r3
 8006d12:	f042 0202 	orrlt.w	r2, r2, #2
 8006d16:	9307      	strge	r3, [sp, #28]
 8006d18:	9307      	strlt	r3, [sp, #28]
 8006d1a:	bfb8      	it	lt
 8006d1c:	9204      	strlt	r2, [sp, #16]
 8006d1e:	7823      	ldrb	r3, [r4, #0]
 8006d20:	2b2e      	cmp	r3, #46	; 0x2e
 8006d22:	d10c      	bne.n	8006d3e <_vfiprintf_r+0x15a>
 8006d24:	7863      	ldrb	r3, [r4, #1]
 8006d26:	2b2a      	cmp	r3, #42	; 0x2a
 8006d28:	d134      	bne.n	8006d94 <_vfiprintf_r+0x1b0>
 8006d2a:	9b03      	ldr	r3, [sp, #12]
 8006d2c:	3402      	adds	r4, #2
 8006d2e:	1d1a      	adds	r2, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	9203      	str	r2, [sp, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfb8      	it	lt
 8006d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d3c:	9305      	str	r3, [sp, #20]
 8006d3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e08 <_vfiprintf_r+0x224>
 8006d42:	2203      	movs	r2, #3
 8006d44:	4650      	mov	r0, sl
 8006d46:	7821      	ldrb	r1, [r4, #0]
 8006d48:	f7fe fa1d 	bl	8005186 <memchr>
 8006d4c:	b138      	cbz	r0, 8006d5e <_vfiprintf_r+0x17a>
 8006d4e:	2240      	movs	r2, #64	; 0x40
 8006d50:	9b04      	ldr	r3, [sp, #16]
 8006d52:	eba0 000a 	sub.w	r0, r0, sl
 8006d56:	4082      	lsls	r2, r0
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	9304      	str	r3, [sp, #16]
 8006d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d62:	2206      	movs	r2, #6
 8006d64:	4829      	ldr	r0, [pc, #164]	; (8006e0c <_vfiprintf_r+0x228>)
 8006d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d6a:	f7fe fa0c 	bl	8005186 <memchr>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d03f      	beq.n	8006df2 <_vfiprintf_r+0x20e>
 8006d72:	4b27      	ldr	r3, [pc, #156]	; (8006e10 <_vfiprintf_r+0x22c>)
 8006d74:	bb1b      	cbnz	r3, 8006dbe <_vfiprintf_r+0x1da>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	3307      	adds	r3, #7
 8006d7a:	f023 0307 	bic.w	r3, r3, #7
 8006d7e:	3308      	adds	r3, #8
 8006d80:	9303      	str	r3, [sp, #12]
 8006d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d84:	443b      	add	r3, r7
 8006d86:	9309      	str	r3, [sp, #36]	; 0x24
 8006d88:	e768      	b.n	8006c5c <_vfiprintf_r+0x78>
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d92:	e7a6      	b.n	8006ce2 <_vfiprintf_r+0xfe>
 8006d94:	2300      	movs	r3, #0
 8006d96:	f04f 0c0a 	mov.w	ip, #10
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	3401      	adds	r4, #1
 8006d9e:	9305      	str	r3, [sp, #20]
 8006da0:	4620      	mov	r0, r4
 8006da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da6:	3a30      	subs	r2, #48	; 0x30
 8006da8:	2a09      	cmp	r2, #9
 8006daa:	d903      	bls.n	8006db4 <_vfiprintf_r+0x1d0>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0c6      	beq.n	8006d3e <_vfiprintf_r+0x15a>
 8006db0:	9105      	str	r1, [sp, #20]
 8006db2:	e7c4      	b.n	8006d3e <_vfiprintf_r+0x15a>
 8006db4:	4604      	mov	r4, r0
 8006db6:	2301      	movs	r3, #1
 8006db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dbc:	e7f0      	b.n	8006da0 <_vfiprintf_r+0x1bc>
 8006dbe:	ab03      	add	r3, sp, #12
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	462a      	mov	r2, r5
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <_vfiprintf_r+0x230>)
 8006dc8:	a904      	add	r1, sp, #16
 8006dca:	f7fd fc65 	bl	8004698 <_printf_float>
 8006dce:	4607      	mov	r7, r0
 8006dd0:	1c78      	adds	r0, r7, #1
 8006dd2:	d1d6      	bne.n	8006d82 <_vfiprintf_r+0x19e>
 8006dd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dd6:	07d9      	lsls	r1, r3, #31
 8006dd8:	d405      	bmi.n	8006de6 <_vfiprintf_r+0x202>
 8006dda:	89ab      	ldrh	r3, [r5, #12]
 8006ddc:	059a      	lsls	r2, r3, #22
 8006dde:	d402      	bmi.n	8006de6 <_vfiprintf_r+0x202>
 8006de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006de2:	f7fe f9cf 	bl	8005184 <__retarget_lock_release_recursive>
 8006de6:	89ab      	ldrh	r3, [r5, #12]
 8006de8:	065b      	lsls	r3, r3, #25
 8006dea:	f53f af1d 	bmi.w	8006c28 <_vfiprintf_r+0x44>
 8006dee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006df0:	e71c      	b.n	8006c2c <_vfiprintf_r+0x48>
 8006df2:	ab03      	add	r3, sp, #12
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	462a      	mov	r2, r5
 8006df8:	4630      	mov	r0, r6
 8006dfa:	4b06      	ldr	r3, [pc, #24]	; (8006e14 <_vfiprintf_r+0x230>)
 8006dfc:	a904      	add	r1, sp, #16
 8006dfe:	f7fd feeb 	bl	8004bd8 <_printf_i>
 8006e02:	e7e4      	b.n	8006dce <_vfiprintf_r+0x1ea>
 8006e04:	0800826c 	.word	0x0800826c
 8006e08:	08008272 	.word	0x08008272
 8006e0c:	08008276 	.word	0x08008276
 8006e10:	08004699 	.word	0x08004699
 8006e14:	08006bc1 	.word	0x08006bc1

08006e18 <__swbuf_r>:
 8006e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1a:	460e      	mov	r6, r1
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	4605      	mov	r5, r0
 8006e20:	b118      	cbz	r0, 8006e2a <__swbuf_r+0x12>
 8006e22:	6a03      	ldr	r3, [r0, #32]
 8006e24:	b90b      	cbnz	r3, 8006e2a <__swbuf_r+0x12>
 8006e26:	f7fe f885 	bl	8004f34 <__sinit>
 8006e2a:	69a3      	ldr	r3, [r4, #24]
 8006e2c:	60a3      	str	r3, [r4, #8]
 8006e2e:	89a3      	ldrh	r3, [r4, #12]
 8006e30:	071a      	lsls	r2, r3, #28
 8006e32:	d525      	bpl.n	8006e80 <__swbuf_r+0x68>
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	b31b      	cbz	r3, 8006e80 <__swbuf_r+0x68>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	6922      	ldr	r2, [r4, #16]
 8006e3c:	b2f6      	uxtb	r6, r6
 8006e3e:	1a98      	subs	r0, r3, r2
 8006e40:	6963      	ldr	r3, [r4, #20]
 8006e42:	4637      	mov	r7, r6
 8006e44:	4283      	cmp	r3, r0
 8006e46:	dc04      	bgt.n	8006e52 <__swbuf_r+0x3a>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f7ff fdb2 	bl	80069b4 <_fflush_r>
 8006e50:	b9e0      	cbnz	r0, 8006e8c <__swbuf_r+0x74>
 8006e52:	68a3      	ldr	r3, [r4, #8]
 8006e54:	3b01      	subs	r3, #1
 8006e56:	60a3      	str	r3, [r4, #8]
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	701e      	strb	r6, [r3, #0]
 8006e60:	6962      	ldr	r2, [r4, #20]
 8006e62:	1c43      	adds	r3, r0, #1
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d004      	beq.n	8006e72 <__swbuf_r+0x5a>
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	07db      	lsls	r3, r3, #31
 8006e6c:	d506      	bpl.n	8006e7c <__swbuf_r+0x64>
 8006e6e:	2e0a      	cmp	r6, #10
 8006e70:	d104      	bne.n	8006e7c <__swbuf_r+0x64>
 8006e72:	4621      	mov	r1, r4
 8006e74:	4628      	mov	r0, r5
 8006e76:	f7ff fd9d 	bl	80069b4 <_fflush_r>
 8006e7a:	b938      	cbnz	r0, 8006e8c <__swbuf_r+0x74>
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e80:	4621      	mov	r1, r4
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 f806 	bl	8006e94 <__swsetup_r>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d0d5      	beq.n	8006e38 <__swbuf_r+0x20>
 8006e8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006e90:	e7f4      	b.n	8006e7c <__swbuf_r+0x64>
	...

08006e94 <__swsetup_r>:
 8006e94:	b538      	push	{r3, r4, r5, lr}
 8006e96:	4b2a      	ldr	r3, [pc, #168]	; (8006f40 <__swsetup_r+0xac>)
 8006e98:	4605      	mov	r5, r0
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	460c      	mov	r4, r1
 8006e9e:	b118      	cbz	r0, 8006ea8 <__swsetup_r+0x14>
 8006ea0:	6a03      	ldr	r3, [r0, #32]
 8006ea2:	b90b      	cbnz	r3, 8006ea8 <__swsetup_r+0x14>
 8006ea4:	f7fe f846 	bl	8004f34 <__sinit>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006eae:	0718      	lsls	r0, r3, #28
 8006eb0:	d422      	bmi.n	8006ef8 <__swsetup_r+0x64>
 8006eb2:	06d9      	lsls	r1, r3, #27
 8006eb4:	d407      	bmi.n	8006ec6 <__swsetup_r+0x32>
 8006eb6:	2309      	movs	r3, #9
 8006eb8:	602b      	str	r3, [r5, #0]
 8006eba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	e034      	b.n	8006f30 <__swsetup_r+0x9c>
 8006ec6:	0758      	lsls	r0, r3, #29
 8006ec8:	d512      	bpl.n	8006ef0 <__swsetup_r+0x5c>
 8006eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ecc:	b141      	cbz	r1, 8006ee0 <__swsetup_r+0x4c>
 8006ece:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ed2:	4299      	cmp	r1, r3
 8006ed4:	d002      	beq.n	8006edc <__swsetup_r+0x48>
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f7fe ffd2 	bl	8005e80 <_free_r>
 8006edc:	2300      	movs	r3, #0
 8006ede:	6363      	str	r3, [r4, #52]	; 0x34
 8006ee0:	89a3      	ldrh	r3, [r4, #12]
 8006ee2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ee6:	81a3      	strh	r3, [r4, #12]
 8006ee8:	2300      	movs	r3, #0
 8006eea:	6063      	str	r3, [r4, #4]
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	6023      	str	r3, [r4, #0]
 8006ef0:	89a3      	ldrh	r3, [r4, #12]
 8006ef2:	f043 0308 	orr.w	r3, r3, #8
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	6923      	ldr	r3, [r4, #16]
 8006efa:	b94b      	cbnz	r3, 8006f10 <__swsetup_r+0x7c>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f06:	d003      	beq.n	8006f10 <__swsetup_r+0x7c>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 f883 	bl	8007016 <__smakebuf_r>
 8006f10:	89a0      	ldrh	r0, [r4, #12]
 8006f12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f16:	f010 0301 	ands.w	r3, r0, #1
 8006f1a:	d00a      	beq.n	8006f32 <__swsetup_r+0x9e>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60a3      	str	r3, [r4, #8]
 8006f20:	6963      	ldr	r3, [r4, #20]
 8006f22:	425b      	negs	r3, r3
 8006f24:	61a3      	str	r3, [r4, #24]
 8006f26:	6923      	ldr	r3, [r4, #16]
 8006f28:	b943      	cbnz	r3, 8006f3c <__swsetup_r+0xa8>
 8006f2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f2e:	d1c4      	bne.n	8006eba <__swsetup_r+0x26>
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	0781      	lsls	r1, r0, #30
 8006f34:	bf58      	it	pl
 8006f36:	6963      	ldrpl	r3, [r4, #20]
 8006f38:	60a3      	str	r3, [r4, #8]
 8006f3a:	e7f4      	b.n	8006f26 <__swsetup_r+0x92>
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	e7f7      	b.n	8006f30 <__swsetup_r+0x9c>
 8006f40:	20000078 	.word	0x20000078

08006f44 <_raise_r>:
 8006f44:	291f      	cmp	r1, #31
 8006f46:	b538      	push	{r3, r4, r5, lr}
 8006f48:	4604      	mov	r4, r0
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	d904      	bls.n	8006f58 <_raise_r+0x14>
 8006f4e:	2316      	movs	r3, #22
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	f04f 30ff 	mov.w	r0, #4294967295
 8006f56:	bd38      	pop	{r3, r4, r5, pc}
 8006f58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f5a:	b112      	cbz	r2, 8006f62 <_raise_r+0x1e>
 8006f5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f60:	b94b      	cbnz	r3, 8006f76 <_raise_r+0x32>
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 f830 	bl	8006fc8 <_getpid_r>
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4601      	mov	r1, r0
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f72:	f000 b817 	b.w	8006fa4 <_kill_r>
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d00a      	beq.n	8006f90 <_raise_r+0x4c>
 8006f7a:	1c59      	adds	r1, r3, #1
 8006f7c:	d103      	bne.n	8006f86 <_raise_r+0x42>
 8006f7e:	2316      	movs	r3, #22
 8006f80:	6003      	str	r3, [r0, #0]
 8006f82:	2001      	movs	r0, #1
 8006f84:	e7e7      	b.n	8006f56 <_raise_r+0x12>
 8006f86:	2400      	movs	r4, #0
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f8e:	4798      	blx	r3
 8006f90:	2000      	movs	r0, #0
 8006f92:	e7e0      	b.n	8006f56 <_raise_r+0x12>

08006f94 <raise>:
 8006f94:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <raise+0xc>)
 8006f96:	4601      	mov	r1, r0
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	f7ff bfd3 	b.w	8006f44 <_raise_r>
 8006f9e:	bf00      	nop
 8006fa0:	20000078 	.word	0x20000078

08006fa4 <_kill_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	4d06      	ldr	r5, [pc, #24]	; (8006fc4 <_kill_r+0x20>)
 8006faa:	4604      	mov	r4, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	602b      	str	r3, [r5, #0]
 8006fb2:	f7fa fd94 	bl	8001ade <_kill>
 8006fb6:	1c43      	adds	r3, r0, #1
 8006fb8:	d102      	bne.n	8006fc0 <_kill_r+0x1c>
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	b103      	cbz	r3, 8006fc0 <_kill_r+0x1c>
 8006fbe:	6023      	str	r3, [r4, #0]
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}
 8006fc2:	bf00      	nop
 8006fc4:	20000430 	.word	0x20000430

08006fc8 <_getpid_r>:
 8006fc8:	f7fa bd82 	b.w	8001ad0 <_getpid>

08006fcc <__swhatbuf_r>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	460c      	mov	r4, r1
 8006fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd4:	4615      	mov	r5, r2
 8006fd6:	2900      	cmp	r1, #0
 8006fd8:	461e      	mov	r6, r3
 8006fda:	b096      	sub	sp, #88	; 0x58
 8006fdc:	da0c      	bge.n	8006ff8 <__swhatbuf_r+0x2c>
 8006fde:	89a3      	ldrh	r3, [r4, #12]
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006fe6:	bf0c      	ite	eq
 8006fe8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006fec:	2340      	movne	r3, #64	; 0x40
 8006fee:	2000      	movs	r0, #0
 8006ff0:	6031      	str	r1, [r6, #0]
 8006ff2:	602b      	str	r3, [r5, #0]
 8006ff4:	b016      	add	sp, #88	; 0x58
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	466a      	mov	r2, sp
 8006ffa:	f000 f849 	bl	8007090 <_fstat_r>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	dbed      	blt.n	8006fde <__swhatbuf_r+0x12>
 8007002:	9901      	ldr	r1, [sp, #4]
 8007004:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007008:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800700c:	4259      	negs	r1, r3
 800700e:	4159      	adcs	r1, r3
 8007010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007014:	e7eb      	b.n	8006fee <__swhatbuf_r+0x22>

08007016 <__smakebuf_r>:
 8007016:	898b      	ldrh	r3, [r1, #12]
 8007018:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800701a:	079d      	lsls	r5, r3, #30
 800701c:	4606      	mov	r6, r0
 800701e:	460c      	mov	r4, r1
 8007020:	d507      	bpl.n	8007032 <__smakebuf_r+0x1c>
 8007022:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	6123      	str	r3, [r4, #16]
 800702a:	2301      	movs	r3, #1
 800702c:	6163      	str	r3, [r4, #20]
 800702e:	b002      	add	sp, #8
 8007030:	bd70      	pop	{r4, r5, r6, pc}
 8007032:	466a      	mov	r2, sp
 8007034:	ab01      	add	r3, sp, #4
 8007036:	f7ff ffc9 	bl	8006fcc <__swhatbuf_r>
 800703a:	9900      	ldr	r1, [sp, #0]
 800703c:	4605      	mov	r5, r0
 800703e:	4630      	mov	r0, r6
 8007040:	f7fd fa02 	bl	8004448 <_malloc_r>
 8007044:	b948      	cbnz	r0, 800705a <__smakebuf_r+0x44>
 8007046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800704a:	059a      	lsls	r2, r3, #22
 800704c:	d4ef      	bmi.n	800702e <__smakebuf_r+0x18>
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	f043 0302 	orr.w	r3, r3, #2
 8007056:	81a3      	strh	r3, [r4, #12]
 8007058:	e7e3      	b.n	8007022 <__smakebuf_r+0xc>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	6020      	str	r0, [r4, #0]
 800705e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	9b00      	ldr	r3, [sp, #0]
 8007066:	6120      	str	r0, [r4, #16]
 8007068:	6163      	str	r3, [r4, #20]
 800706a:	9b01      	ldr	r3, [sp, #4]
 800706c:	b15b      	cbz	r3, 8007086 <__smakebuf_r+0x70>
 800706e:	4630      	mov	r0, r6
 8007070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007074:	f000 f81e 	bl	80070b4 <_isatty_r>
 8007078:	b128      	cbz	r0, 8007086 <__smakebuf_r+0x70>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f023 0303 	bic.w	r3, r3, #3
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	81a3      	strh	r3, [r4, #12]
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	431d      	orrs	r5, r3
 800708a:	81a5      	strh	r5, [r4, #12]
 800708c:	e7cf      	b.n	800702e <__smakebuf_r+0x18>
	...

08007090 <_fstat_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	2300      	movs	r3, #0
 8007094:	4d06      	ldr	r5, [pc, #24]	; (80070b0 <_fstat_r+0x20>)
 8007096:	4604      	mov	r4, r0
 8007098:	4608      	mov	r0, r1
 800709a:	4611      	mov	r1, r2
 800709c:	602b      	str	r3, [r5, #0]
 800709e:	f7fa fd7c 	bl	8001b9a <_fstat>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	d102      	bne.n	80070ac <_fstat_r+0x1c>
 80070a6:	682b      	ldr	r3, [r5, #0]
 80070a8:	b103      	cbz	r3, 80070ac <_fstat_r+0x1c>
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	bd38      	pop	{r3, r4, r5, pc}
 80070ae:	bf00      	nop
 80070b0:	20000430 	.word	0x20000430

080070b4 <_isatty_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	2300      	movs	r3, #0
 80070b8:	4d05      	ldr	r5, [pc, #20]	; (80070d0 <_isatty_r+0x1c>)
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	602b      	str	r3, [r5, #0]
 80070c0:	f7fa fd7a 	bl	8001bb8 <_isatty>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d102      	bne.n	80070ce <_isatty_r+0x1a>
 80070c8:	682b      	ldr	r3, [r5, #0]
 80070ca:	b103      	cbz	r3, 80070ce <_isatty_r+0x1a>
 80070cc:	6023      	str	r3, [r4, #0]
 80070ce:	bd38      	pop	{r3, r4, r5, pc}
 80070d0:	20000430 	.word	0x20000430

080070d4 <pow>:
 80070d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d8:	4614      	mov	r4, r2
 80070da:	461d      	mov	r5, r3
 80070dc:	4680      	mov	r8, r0
 80070de:	4689      	mov	r9, r1
 80070e0:	f000 f866 	bl	80071b0 <__ieee754_pow>
 80070e4:	4622      	mov	r2, r4
 80070e6:	4606      	mov	r6, r0
 80070e8:	460f      	mov	r7, r1
 80070ea:	462b      	mov	r3, r5
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7f9 fc8c 	bl	8000a0c <__aeabi_dcmpun>
 80070f4:	bbc8      	cbnz	r0, 800716a <pow+0x96>
 80070f6:	2200      	movs	r2, #0
 80070f8:	2300      	movs	r3, #0
 80070fa:	4640      	mov	r0, r8
 80070fc:	4649      	mov	r1, r9
 80070fe:	f7f9 fc53 	bl	80009a8 <__aeabi_dcmpeq>
 8007102:	b1b8      	cbz	r0, 8007134 <pow+0x60>
 8007104:	2200      	movs	r2, #0
 8007106:	2300      	movs	r3, #0
 8007108:	4620      	mov	r0, r4
 800710a:	4629      	mov	r1, r5
 800710c:	f7f9 fc4c 	bl	80009a8 <__aeabi_dcmpeq>
 8007110:	2800      	cmp	r0, #0
 8007112:	d141      	bne.n	8007198 <pow+0xc4>
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f000 f844 	bl	80071a4 <finite>
 800711c:	b328      	cbz	r0, 800716a <pow+0x96>
 800711e:	2200      	movs	r2, #0
 8007120:	2300      	movs	r3, #0
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f7f9 fc49 	bl	80009bc <__aeabi_dcmplt>
 800712a:	b1f0      	cbz	r0, 800716a <pow+0x96>
 800712c:	f7fd fffe 	bl	800512c <__errno>
 8007130:	2322      	movs	r3, #34	; 0x22
 8007132:	e019      	b.n	8007168 <pow+0x94>
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	f000 f834 	bl	80071a4 <finite>
 800713c:	b9c8      	cbnz	r0, 8007172 <pow+0x9e>
 800713e:	4640      	mov	r0, r8
 8007140:	4649      	mov	r1, r9
 8007142:	f000 f82f 	bl	80071a4 <finite>
 8007146:	b1a0      	cbz	r0, 8007172 <pow+0x9e>
 8007148:	4620      	mov	r0, r4
 800714a:	4629      	mov	r1, r5
 800714c:	f000 f82a 	bl	80071a4 <finite>
 8007150:	b178      	cbz	r0, 8007172 <pow+0x9e>
 8007152:	4632      	mov	r2, r6
 8007154:	463b      	mov	r3, r7
 8007156:	4630      	mov	r0, r6
 8007158:	4639      	mov	r1, r7
 800715a:	f7f9 fc57 	bl	8000a0c <__aeabi_dcmpun>
 800715e:	2800      	cmp	r0, #0
 8007160:	d0e4      	beq.n	800712c <pow+0x58>
 8007162:	f7fd ffe3 	bl	800512c <__errno>
 8007166:	2321      	movs	r3, #33	; 0x21
 8007168:	6003      	str	r3, [r0, #0]
 800716a:	4630      	mov	r0, r6
 800716c:	4639      	mov	r1, r7
 800716e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007172:	2200      	movs	r2, #0
 8007174:	2300      	movs	r3, #0
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 fc15 	bl	80009a8 <__aeabi_dcmpeq>
 800717e:	2800      	cmp	r0, #0
 8007180:	d0f3      	beq.n	800716a <pow+0x96>
 8007182:	4640      	mov	r0, r8
 8007184:	4649      	mov	r1, r9
 8007186:	f000 f80d 	bl	80071a4 <finite>
 800718a:	2800      	cmp	r0, #0
 800718c:	d0ed      	beq.n	800716a <pow+0x96>
 800718e:	4620      	mov	r0, r4
 8007190:	4629      	mov	r1, r5
 8007192:	f000 f807 	bl	80071a4 <finite>
 8007196:	e7c8      	b.n	800712a <pow+0x56>
 8007198:	2600      	movs	r6, #0
 800719a:	4f01      	ldr	r7, [pc, #4]	; (80071a0 <pow+0xcc>)
 800719c:	e7e5      	b.n	800716a <pow+0x96>
 800719e:	bf00      	nop
 80071a0:	3ff00000 	.word	0x3ff00000

080071a4 <finite>:
 80071a4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80071a8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80071ac:	0fc0      	lsrs	r0, r0, #31
 80071ae:	4770      	bx	lr

080071b0 <__ieee754_pow>:
 80071b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b4:	b093      	sub	sp, #76	; 0x4c
 80071b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071ba:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 80071be:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80071c2:	4689      	mov	r9, r1
 80071c4:	ea56 0102 	orrs.w	r1, r6, r2
 80071c8:	4680      	mov	r8, r0
 80071ca:	d111      	bne.n	80071f0 <__ieee754_pow+0x40>
 80071cc:	1803      	adds	r3, r0, r0
 80071ce:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 80071d2:	4152      	adcs	r2, r2
 80071d4:	4299      	cmp	r1, r3
 80071d6:	4b82      	ldr	r3, [pc, #520]	; (80073e0 <__ieee754_pow+0x230>)
 80071d8:	4193      	sbcs	r3, r2
 80071da:	f080 84ba 	bcs.w	8007b52 <__ieee754_pow+0x9a2>
 80071de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071e2:	4640      	mov	r0, r8
 80071e4:	4649      	mov	r1, r9
 80071e6:	f7f8 ffc1 	bl	800016c <__adddf3>
 80071ea:	4683      	mov	fp, r0
 80071ec:	468c      	mov	ip, r1
 80071ee:	e06f      	b.n	80072d0 <__ieee754_pow+0x120>
 80071f0:	4b7c      	ldr	r3, [pc, #496]	; (80073e4 <__ieee754_pow+0x234>)
 80071f2:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 80071f6:	429c      	cmp	r4, r3
 80071f8:	464d      	mov	r5, r9
 80071fa:	4682      	mov	sl, r0
 80071fc:	dc06      	bgt.n	800720c <__ieee754_pow+0x5c>
 80071fe:	d101      	bne.n	8007204 <__ieee754_pow+0x54>
 8007200:	2800      	cmp	r0, #0
 8007202:	d1ec      	bne.n	80071de <__ieee754_pow+0x2e>
 8007204:	429e      	cmp	r6, r3
 8007206:	dc01      	bgt.n	800720c <__ieee754_pow+0x5c>
 8007208:	d10f      	bne.n	800722a <__ieee754_pow+0x7a>
 800720a:	b172      	cbz	r2, 800722a <__ieee754_pow+0x7a>
 800720c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007210:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8007214:	ea55 050a 	orrs.w	r5, r5, sl
 8007218:	d1e1      	bne.n	80071de <__ieee754_pow+0x2e>
 800721a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800721e:	18db      	adds	r3, r3, r3
 8007220:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8007224:	4152      	adcs	r2, r2
 8007226:	429d      	cmp	r5, r3
 8007228:	e7d5      	b.n	80071d6 <__ieee754_pow+0x26>
 800722a:	2d00      	cmp	r5, #0
 800722c:	da39      	bge.n	80072a2 <__ieee754_pow+0xf2>
 800722e:	4b6e      	ldr	r3, [pc, #440]	; (80073e8 <__ieee754_pow+0x238>)
 8007230:	429e      	cmp	r6, r3
 8007232:	dc52      	bgt.n	80072da <__ieee754_pow+0x12a>
 8007234:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007238:	429e      	cmp	r6, r3
 800723a:	f340 849d 	ble.w	8007b78 <__ieee754_pow+0x9c8>
 800723e:	1533      	asrs	r3, r6, #20
 8007240:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007244:	2b14      	cmp	r3, #20
 8007246:	dd0f      	ble.n	8007268 <__ieee754_pow+0xb8>
 8007248:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800724c:	fa22 f103 	lsr.w	r1, r2, r3
 8007250:	fa01 f303 	lsl.w	r3, r1, r3
 8007254:	4293      	cmp	r3, r2
 8007256:	f040 848f 	bne.w	8007b78 <__ieee754_pow+0x9c8>
 800725a:	f001 0101 	and.w	r1, r1, #1
 800725e:	f1c1 0302 	rsb	r3, r1, #2
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	b182      	cbz	r2, 8007288 <__ieee754_pow+0xd8>
 8007266:	e05d      	b.n	8007324 <__ieee754_pow+0x174>
 8007268:	2a00      	cmp	r2, #0
 800726a:	d159      	bne.n	8007320 <__ieee754_pow+0x170>
 800726c:	f1c3 0314 	rsb	r3, r3, #20
 8007270:	fa46 f103 	asr.w	r1, r6, r3
 8007274:	fa01 f303 	lsl.w	r3, r1, r3
 8007278:	42b3      	cmp	r3, r6
 800727a:	f040 847a 	bne.w	8007b72 <__ieee754_pow+0x9c2>
 800727e:	f001 0101 	and.w	r1, r1, #1
 8007282:	f1c1 0302 	rsb	r3, r1, #2
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	4b58      	ldr	r3, [pc, #352]	; (80073ec <__ieee754_pow+0x23c>)
 800728a:	429e      	cmp	r6, r3
 800728c:	d132      	bne.n	80072f4 <__ieee754_pow+0x144>
 800728e:	2f00      	cmp	r7, #0
 8007290:	f280 846b 	bge.w	8007b6a <__ieee754_pow+0x9ba>
 8007294:	4642      	mov	r2, r8
 8007296:	464b      	mov	r3, r9
 8007298:	2000      	movs	r0, #0
 800729a:	4954      	ldr	r1, [pc, #336]	; (80073ec <__ieee754_pow+0x23c>)
 800729c:	f7f9 fa46 	bl	800072c <__aeabi_ddiv>
 80072a0:	e7a3      	b.n	80071ea <__ieee754_pow+0x3a>
 80072a2:	2300      	movs	r3, #0
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	2a00      	cmp	r2, #0
 80072a8:	d13c      	bne.n	8007324 <__ieee754_pow+0x174>
 80072aa:	4b4e      	ldr	r3, [pc, #312]	; (80073e4 <__ieee754_pow+0x234>)
 80072ac:	429e      	cmp	r6, r3
 80072ae:	d1eb      	bne.n	8007288 <__ieee754_pow+0xd8>
 80072b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80072b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80072b8:	ea53 030a 	orrs.w	r3, r3, sl
 80072bc:	f000 8449 	beq.w	8007b52 <__ieee754_pow+0x9a2>
 80072c0:	4b4b      	ldr	r3, [pc, #300]	; (80073f0 <__ieee754_pow+0x240>)
 80072c2:	429c      	cmp	r4, r3
 80072c4:	dd0b      	ble.n	80072de <__ieee754_pow+0x12e>
 80072c6:	2f00      	cmp	r7, #0
 80072c8:	f2c0 8449 	blt.w	8007b5e <__ieee754_pow+0x9ae>
 80072cc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80072d0:	4658      	mov	r0, fp
 80072d2:	4661      	mov	r1, ip
 80072d4:	b013      	add	sp, #76	; 0x4c
 80072d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072da:	2302      	movs	r3, #2
 80072dc:	e7e2      	b.n	80072a4 <__ieee754_pow+0xf4>
 80072de:	2f00      	cmp	r7, #0
 80072e0:	f04f 0b00 	mov.w	fp, #0
 80072e4:	f04f 0c00 	mov.w	ip, #0
 80072e8:	daf2      	bge.n	80072d0 <__ieee754_pow+0x120>
 80072ea:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80072ee:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80072f2:	e7ed      	b.n	80072d0 <__ieee754_pow+0x120>
 80072f4:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80072f8:	d106      	bne.n	8007308 <__ieee754_pow+0x158>
 80072fa:	4642      	mov	r2, r8
 80072fc:	464b      	mov	r3, r9
 80072fe:	4640      	mov	r0, r8
 8007300:	4649      	mov	r1, r9
 8007302:	f7f9 f8e9 	bl	80004d8 <__aeabi_dmul>
 8007306:	e770      	b.n	80071ea <__ieee754_pow+0x3a>
 8007308:	4b3a      	ldr	r3, [pc, #232]	; (80073f4 <__ieee754_pow+0x244>)
 800730a:	429f      	cmp	r7, r3
 800730c:	d10a      	bne.n	8007324 <__ieee754_pow+0x174>
 800730e:	2d00      	cmp	r5, #0
 8007310:	db08      	blt.n	8007324 <__ieee754_pow+0x174>
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	b013      	add	sp, #76	; 0x4c
 8007318:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	f000 bd0a 	b.w	8007d34 <__ieee754_sqrt>
 8007320:	2300      	movs	r3, #0
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	4640      	mov	r0, r8
 8007326:	4649      	mov	r1, r9
 8007328:	f000 fc58 	bl	8007bdc <fabs>
 800732c:	4683      	mov	fp, r0
 800732e:	468c      	mov	ip, r1
 8007330:	f1ba 0f00 	cmp.w	sl, #0
 8007334:	d128      	bne.n	8007388 <__ieee754_pow+0x1d8>
 8007336:	b124      	cbz	r4, 8007342 <__ieee754_pow+0x192>
 8007338:	4b2c      	ldr	r3, [pc, #176]	; (80073ec <__ieee754_pow+0x23c>)
 800733a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800733e:	429a      	cmp	r2, r3
 8007340:	d122      	bne.n	8007388 <__ieee754_pow+0x1d8>
 8007342:	2f00      	cmp	r7, #0
 8007344:	da07      	bge.n	8007356 <__ieee754_pow+0x1a6>
 8007346:	465a      	mov	r2, fp
 8007348:	4663      	mov	r3, ip
 800734a:	2000      	movs	r0, #0
 800734c:	4927      	ldr	r1, [pc, #156]	; (80073ec <__ieee754_pow+0x23c>)
 800734e:	f7f9 f9ed 	bl	800072c <__aeabi_ddiv>
 8007352:	4683      	mov	fp, r0
 8007354:	468c      	mov	ip, r1
 8007356:	2d00      	cmp	r5, #0
 8007358:	daba      	bge.n	80072d0 <__ieee754_pow+0x120>
 800735a:	9b00      	ldr	r3, [sp, #0]
 800735c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007360:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007364:	431c      	orrs	r4, r3
 8007366:	d108      	bne.n	800737a <__ieee754_pow+0x1ca>
 8007368:	465a      	mov	r2, fp
 800736a:	4663      	mov	r3, ip
 800736c:	4658      	mov	r0, fp
 800736e:	4661      	mov	r1, ip
 8007370:	f7f8 fefa 	bl	8000168 <__aeabi_dsub>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	e790      	b.n	800729c <__ieee754_pow+0xec>
 800737a:	9b00      	ldr	r3, [sp, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d1a7      	bne.n	80072d0 <__ieee754_pow+0x120>
 8007380:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8007384:	469c      	mov	ip, r3
 8007386:	e7a3      	b.n	80072d0 <__ieee754_pow+0x120>
 8007388:	0feb      	lsrs	r3, r5, #31
 800738a:	3b01      	subs	r3, #1
 800738c:	930c      	str	r3, [sp, #48]	; 0x30
 800738e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007390:	9b00      	ldr	r3, [sp, #0]
 8007392:	4313      	orrs	r3, r2
 8007394:	d104      	bne.n	80073a0 <__ieee754_pow+0x1f0>
 8007396:	4642      	mov	r2, r8
 8007398:	464b      	mov	r3, r9
 800739a:	4640      	mov	r0, r8
 800739c:	4649      	mov	r1, r9
 800739e:	e7e7      	b.n	8007370 <__ieee754_pow+0x1c0>
 80073a0:	4b15      	ldr	r3, [pc, #84]	; (80073f8 <__ieee754_pow+0x248>)
 80073a2:	429e      	cmp	r6, r3
 80073a4:	f340 80f6 	ble.w	8007594 <__ieee754_pow+0x3e4>
 80073a8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80073ac:	429e      	cmp	r6, r3
 80073ae:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <__ieee754_pow+0x240>)
 80073b0:	dd09      	ble.n	80073c6 <__ieee754_pow+0x216>
 80073b2:	429c      	cmp	r4, r3
 80073b4:	dc0c      	bgt.n	80073d0 <__ieee754_pow+0x220>
 80073b6:	2f00      	cmp	r7, #0
 80073b8:	da0c      	bge.n	80073d4 <__ieee754_pow+0x224>
 80073ba:	2000      	movs	r0, #0
 80073bc:	b013      	add	sp, #76	; 0x4c
 80073be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c2:	f000 bcb2 	b.w	8007d2a <__math_oflow>
 80073c6:	429c      	cmp	r4, r3
 80073c8:	dbf5      	blt.n	80073b6 <__ieee754_pow+0x206>
 80073ca:	4b08      	ldr	r3, [pc, #32]	; (80073ec <__ieee754_pow+0x23c>)
 80073cc:	429c      	cmp	r4, r3
 80073ce:	dd15      	ble.n	80073fc <__ieee754_pow+0x24c>
 80073d0:	2f00      	cmp	r7, #0
 80073d2:	dcf2      	bgt.n	80073ba <__ieee754_pow+0x20a>
 80073d4:	2000      	movs	r0, #0
 80073d6:	b013      	add	sp, #76	; 0x4c
 80073d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	f000 bca0 	b.w	8007d20 <__math_uflow>
 80073e0:	fff00000 	.word	0xfff00000
 80073e4:	7ff00000 	.word	0x7ff00000
 80073e8:	433fffff 	.word	0x433fffff
 80073ec:	3ff00000 	.word	0x3ff00000
 80073f0:	3fefffff 	.word	0x3fefffff
 80073f4:	3fe00000 	.word	0x3fe00000
 80073f8:	41e00000 	.word	0x41e00000
 80073fc:	4661      	mov	r1, ip
 80073fe:	2200      	movs	r2, #0
 8007400:	4658      	mov	r0, fp
 8007402:	4b5f      	ldr	r3, [pc, #380]	; (8007580 <__ieee754_pow+0x3d0>)
 8007404:	f7f8 feb0 	bl	8000168 <__aeabi_dsub>
 8007408:	a355      	add	r3, pc, #340	; (adr r3, 8007560 <__ieee754_pow+0x3b0>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	f7f9 f861 	bl	80004d8 <__aeabi_dmul>
 8007416:	a354      	add	r3, pc, #336	; (adr r3, 8007568 <__ieee754_pow+0x3b8>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	4606      	mov	r6, r0
 800741e:	460f      	mov	r7, r1
 8007420:	4620      	mov	r0, r4
 8007422:	4629      	mov	r1, r5
 8007424:	f7f9 f858 	bl	80004d8 <__aeabi_dmul>
 8007428:	2200      	movs	r2, #0
 800742a:	4682      	mov	sl, r0
 800742c:	468b      	mov	fp, r1
 800742e:	4620      	mov	r0, r4
 8007430:	4629      	mov	r1, r5
 8007432:	4b54      	ldr	r3, [pc, #336]	; (8007584 <__ieee754_pow+0x3d4>)
 8007434:	f7f9 f850 	bl	80004d8 <__aeabi_dmul>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	a14c      	add	r1, pc, #304	; (adr r1, 8007570 <__ieee754_pow+0x3c0>)
 800743e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007442:	f7f8 fe91 	bl	8000168 <__aeabi_dsub>
 8007446:	4622      	mov	r2, r4
 8007448:	462b      	mov	r3, r5
 800744a:	f7f9 f845 	bl	80004d8 <__aeabi_dmul>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	2000      	movs	r0, #0
 8007454:	494c      	ldr	r1, [pc, #304]	; (8007588 <__ieee754_pow+0x3d8>)
 8007456:	f7f8 fe87 	bl	8000168 <__aeabi_dsub>
 800745a:	4622      	mov	r2, r4
 800745c:	462b      	mov	r3, r5
 800745e:	4680      	mov	r8, r0
 8007460:	4689      	mov	r9, r1
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	f7f9 f837 	bl	80004d8 <__aeabi_dmul>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4640      	mov	r0, r8
 8007470:	4649      	mov	r1, r9
 8007472:	f7f9 f831 	bl	80004d8 <__aeabi_dmul>
 8007476:	a340      	add	r3, pc, #256	; (adr r3, 8007578 <__ieee754_pow+0x3c8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f7f9 f82c 	bl	80004d8 <__aeabi_dmul>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4650      	mov	r0, sl
 8007486:	4659      	mov	r1, fp
 8007488:	f7f8 fe6e 	bl	8000168 <__aeabi_dsub>
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f8 fe68 	bl	800016c <__adddf3>
 800749c:	2000      	movs	r0, #0
 800749e:	4632      	mov	r2, r6
 80074a0:	463b      	mov	r3, r7
 80074a2:	4682      	mov	sl, r0
 80074a4:	468b      	mov	fp, r1
 80074a6:	f7f8 fe5f 	bl	8000168 <__aeabi_dsub>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4620      	mov	r0, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	f7f8 fe59 	bl	8000168 <__aeabi_dsub>
 80074b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074ba:	9b00      	ldr	r3, [sp, #0]
 80074bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074be:	3b01      	subs	r3, #1
 80074c0:	4313      	orrs	r3, r2
 80074c2:	f04f 0600 	mov.w	r6, #0
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	bf0c      	ite	eq
 80074cc:	4b2f      	ldreq	r3, [pc, #188]	; (800758c <__ieee754_pow+0x3dc>)
 80074ce:	4b2c      	ldrne	r3, [pc, #176]	; (8007580 <__ieee754_pow+0x3d0>)
 80074d0:	4604      	mov	r4, r0
 80074d2:	460d      	mov	r5, r1
 80074d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d8:	e9cd 2300 	strd	r2, r3, [sp]
 80074dc:	4632      	mov	r2, r6
 80074de:	463b      	mov	r3, r7
 80074e0:	f7f8 fe42 	bl	8000168 <__aeabi_dsub>
 80074e4:	4652      	mov	r2, sl
 80074e6:	465b      	mov	r3, fp
 80074e8:	f7f8 fff6 	bl	80004d8 <__aeabi_dmul>
 80074ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074f0:	4680      	mov	r8, r0
 80074f2:	4689      	mov	r9, r1
 80074f4:	4620      	mov	r0, r4
 80074f6:	4629      	mov	r1, r5
 80074f8:	f7f8 ffee 	bl	80004d8 <__aeabi_dmul>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4640      	mov	r0, r8
 8007502:	4649      	mov	r1, r9
 8007504:	f7f8 fe32 	bl	800016c <__adddf3>
 8007508:	4632      	mov	r2, r6
 800750a:	463b      	mov	r3, r7
 800750c:	4680      	mov	r8, r0
 800750e:	4689      	mov	r9, r1
 8007510:	4650      	mov	r0, sl
 8007512:	4659      	mov	r1, fp
 8007514:	f7f8 ffe0 	bl	80004d8 <__aeabi_dmul>
 8007518:	4604      	mov	r4, r0
 800751a:	460d      	mov	r5, r1
 800751c:	460b      	mov	r3, r1
 800751e:	4602      	mov	r2, r0
 8007520:	4649      	mov	r1, r9
 8007522:	4640      	mov	r0, r8
 8007524:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007528:	f7f8 fe20 	bl	800016c <__adddf3>
 800752c:	4b18      	ldr	r3, [pc, #96]	; (8007590 <__ieee754_pow+0x3e0>)
 800752e:	4682      	mov	sl, r0
 8007530:	4299      	cmp	r1, r3
 8007532:	460f      	mov	r7, r1
 8007534:	460e      	mov	r6, r1
 8007536:	f340 82e7 	ble.w	8007b08 <__ieee754_pow+0x958>
 800753a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800753e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007542:	4303      	orrs	r3, r0
 8007544:	f000 81e2 	beq.w	800790c <__ieee754_pow+0x75c>
 8007548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800754c:	2200      	movs	r2, #0
 800754e:	2300      	movs	r3, #0
 8007550:	f7f9 fa34 	bl	80009bc <__aeabi_dcmplt>
 8007554:	3800      	subs	r0, #0
 8007556:	bf18      	it	ne
 8007558:	2001      	movne	r0, #1
 800755a:	e72f      	b.n	80073bc <__ieee754_pow+0x20c>
 800755c:	f3af 8000 	nop.w
 8007560:	60000000 	.word	0x60000000
 8007564:	3ff71547 	.word	0x3ff71547
 8007568:	f85ddf44 	.word	0xf85ddf44
 800756c:	3e54ae0b 	.word	0x3e54ae0b
 8007570:	55555555 	.word	0x55555555
 8007574:	3fd55555 	.word	0x3fd55555
 8007578:	652b82fe 	.word	0x652b82fe
 800757c:	3ff71547 	.word	0x3ff71547
 8007580:	3ff00000 	.word	0x3ff00000
 8007584:	3fd00000 	.word	0x3fd00000
 8007588:	3fe00000 	.word	0x3fe00000
 800758c:	bff00000 	.word	0xbff00000
 8007590:	408fffff 	.word	0x408fffff
 8007594:	4bd4      	ldr	r3, [pc, #848]	; (80078e8 <__ieee754_pow+0x738>)
 8007596:	2200      	movs	r2, #0
 8007598:	402b      	ands	r3, r5
 800759a:	b943      	cbnz	r3, 80075ae <__ieee754_pow+0x3fe>
 800759c:	4658      	mov	r0, fp
 800759e:	4661      	mov	r1, ip
 80075a0:	4bd2      	ldr	r3, [pc, #840]	; (80078ec <__ieee754_pow+0x73c>)
 80075a2:	f7f8 ff99 	bl	80004d8 <__aeabi_dmul>
 80075a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80075aa:	4683      	mov	fp, r0
 80075ac:	460c      	mov	r4, r1
 80075ae:	1523      	asrs	r3, r4, #20
 80075b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80075b4:	4413      	add	r3, r2
 80075b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80075b8:	4bcd      	ldr	r3, [pc, #820]	; (80078f0 <__ieee754_pow+0x740>)
 80075ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80075be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80075c2:	429c      	cmp	r4, r3
 80075c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80075c8:	dd08      	ble.n	80075dc <__ieee754_pow+0x42c>
 80075ca:	4bca      	ldr	r3, [pc, #808]	; (80078f4 <__ieee754_pow+0x744>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	f340 8164 	ble.w	800789a <__ieee754_pow+0x6ea>
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80075d8:	3301      	adds	r3, #1
 80075da:	930b      	str	r3, [sp, #44]	; 0x2c
 80075dc:	2600      	movs	r6, #0
 80075de:	00f3      	lsls	r3, r6, #3
 80075e0:	930d      	str	r3, [sp, #52]	; 0x34
 80075e2:	4bc5      	ldr	r3, [pc, #788]	; (80078f8 <__ieee754_pow+0x748>)
 80075e4:	4658      	mov	r0, fp
 80075e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80075ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80075ee:	4629      	mov	r1, r5
 80075f0:	461a      	mov	r2, r3
 80075f2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80075f6:	4623      	mov	r3, r4
 80075f8:	f7f8 fdb6 	bl	8000168 <__aeabi_dsub>
 80075fc:	46da      	mov	sl, fp
 80075fe:	462b      	mov	r3, r5
 8007600:	4652      	mov	r2, sl
 8007602:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007606:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800760a:	f7f8 fdaf 	bl	800016c <__adddf3>
 800760e:	4602      	mov	r2, r0
 8007610:	460b      	mov	r3, r1
 8007612:	2000      	movs	r0, #0
 8007614:	49b9      	ldr	r1, [pc, #740]	; (80078fc <__ieee754_pow+0x74c>)
 8007616:	f7f9 f889 	bl	800072c <__aeabi_ddiv>
 800761a:	4602      	mov	r2, r0
 800761c:	460b      	mov	r3, r1
 800761e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007622:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007626:	f7f8 ff57 	bl	80004d8 <__aeabi_dmul>
 800762a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800762e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007632:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007636:	2300      	movs	r3, #0
 8007638:	2200      	movs	r2, #0
 800763a:	46ab      	mov	fp, r5
 800763c:	106d      	asrs	r5, r5, #1
 800763e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007642:	9304      	str	r3, [sp, #16]
 8007644:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007648:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800764c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007650:	4640      	mov	r0, r8
 8007652:	4649      	mov	r1, r9
 8007654:	4614      	mov	r4, r2
 8007656:	461d      	mov	r5, r3
 8007658:	f7f8 ff3e 	bl	80004d8 <__aeabi_dmul>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007664:	f7f8 fd80 	bl	8000168 <__aeabi_dsub>
 8007668:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800766c:	4606      	mov	r6, r0
 800766e:	460f      	mov	r7, r1
 8007670:	4620      	mov	r0, r4
 8007672:	4629      	mov	r1, r5
 8007674:	f7f8 fd78 	bl	8000168 <__aeabi_dsub>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4650      	mov	r0, sl
 800767e:	4659      	mov	r1, fp
 8007680:	f7f8 fd72 	bl	8000168 <__aeabi_dsub>
 8007684:	4642      	mov	r2, r8
 8007686:	464b      	mov	r3, r9
 8007688:	f7f8 ff26 	bl	80004d8 <__aeabi_dmul>
 800768c:	4602      	mov	r2, r0
 800768e:	460b      	mov	r3, r1
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f8 fd68 	bl	8000168 <__aeabi_dsub>
 8007698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800769c:	f7f8 ff1c 	bl	80004d8 <__aeabi_dmul>
 80076a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076a4:	4682      	mov	sl, r0
 80076a6:	468b      	mov	fp, r1
 80076a8:	4610      	mov	r0, r2
 80076aa:	4619      	mov	r1, r3
 80076ac:	f7f8 ff14 	bl	80004d8 <__aeabi_dmul>
 80076b0:	a37b      	add	r3, pc, #492	; (adr r3, 80078a0 <__ieee754_pow+0x6f0>)
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	4604      	mov	r4, r0
 80076b8:	460d      	mov	r5, r1
 80076ba:	f7f8 ff0d 	bl	80004d8 <__aeabi_dmul>
 80076be:	a37a      	add	r3, pc, #488	; (adr r3, 80078a8 <__ieee754_pow+0x6f8>)
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	f7f8 fd52 	bl	800016c <__adddf3>
 80076c8:	4622      	mov	r2, r4
 80076ca:	462b      	mov	r3, r5
 80076cc:	f7f8 ff04 	bl	80004d8 <__aeabi_dmul>
 80076d0:	a377      	add	r3, pc, #476	; (adr r3, 80078b0 <__ieee754_pow+0x700>)
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f7f8 fd49 	bl	800016c <__adddf3>
 80076da:	4622      	mov	r2, r4
 80076dc:	462b      	mov	r3, r5
 80076de:	f7f8 fefb 	bl	80004d8 <__aeabi_dmul>
 80076e2:	a375      	add	r3, pc, #468	; (adr r3, 80078b8 <__ieee754_pow+0x708>)
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f7f8 fd40 	bl	800016c <__adddf3>
 80076ec:	4622      	mov	r2, r4
 80076ee:	462b      	mov	r3, r5
 80076f0:	f7f8 fef2 	bl	80004d8 <__aeabi_dmul>
 80076f4:	a372      	add	r3, pc, #456	; (adr r3, 80078c0 <__ieee754_pow+0x710>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f7f8 fd37 	bl	800016c <__adddf3>
 80076fe:	4622      	mov	r2, r4
 8007700:	462b      	mov	r3, r5
 8007702:	f7f8 fee9 	bl	80004d8 <__aeabi_dmul>
 8007706:	a370      	add	r3, pc, #448	; (adr r3, 80078c8 <__ieee754_pow+0x718>)
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	f7f8 fd2e 	bl	800016c <__adddf3>
 8007710:	4622      	mov	r2, r4
 8007712:	4606      	mov	r6, r0
 8007714:	460f      	mov	r7, r1
 8007716:	462b      	mov	r3, r5
 8007718:	4620      	mov	r0, r4
 800771a:	4629      	mov	r1, r5
 800771c:	f7f8 fedc 	bl	80004d8 <__aeabi_dmul>
 8007720:	4602      	mov	r2, r0
 8007722:	460b      	mov	r3, r1
 8007724:	4630      	mov	r0, r6
 8007726:	4639      	mov	r1, r7
 8007728:	f7f8 fed6 	bl	80004d8 <__aeabi_dmul>
 800772c:	4604      	mov	r4, r0
 800772e:	460d      	mov	r5, r1
 8007730:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007734:	4642      	mov	r2, r8
 8007736:	464b      	mov	r3, r9
 8007738:	f7f8 fd18 	bl	800016c <__adddf3>
 800773c:	4652      	mov	r2, sl
 800773e:	465b      	mov	r3, fp
 8007740:	f7f8 feca 	bl	80004d8 <__aeabi_dmul>
 8007744:	4622      	mov	r2, r4
 8007746:	462b      	mov	r3, r5
 8007748:	f7f8 fd10 	bl	800016c <__adddf3>
 800774c:	4642      	mov	r2, r8
 800774e:	4606      	mov	r6, r0
 8007750:	460f      	mov	r7, r1
 8007752:	464b      	mov	r3, r9
 8007754:	4640      	mov	r0, r8
 8007756:	4649      	mov	r1, r9
 8007758:	f7f8 febe 	bl	80004d8 <__aeabi_dmul>
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007764:	2200      	movs	r2, #0
 8007766:	4b66      	ldr	r3, [pc, #408]	; (8007900 <__ieee754_pow+0x750>)
 8007768:	f7f8 fd00 	bl	800016c <__adddf3>
 800776c:	4632      	mov	r2, r6
 800776e:	463b      	mov	r3, r7
 8007770:	f7f8 fcfc 	bl	800016c <__adddf3>
 8007774:	2400      	movs	r4, #0
 8007776:	460d      	mov	r5, r1
 8007778:	4622      	mov	r2, r4
 800777a:	460b      	mov	r3, r1
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 feaa 	bl	80004d8 <__aeabi_dmul>
 8007784:	2200      	movs	r2, #0
 8007786:	4680      	mov	r8, r0
 8007788:	4689      	mov	r9, r1
 800778a:	4620      	mov	r0, r4
 800778c:	4629      	mov	r1, r5
 800778e:	4b5c      	ldr	r3, [pc, #368]	; (8007900 <__ieee754_pow+0x750>)
 8007790:	f7f8 fcea 	bl	8000168 <__aeabi_dsub>
 8007794:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007798:	f7f8 fce6 	bl	8000168 <__aeabi_dsub>
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	4630      	mov	r0, r6
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f8 fce0 	bl	8000168 <__aeabi_dsub>
 80077a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077ac:	f7f8 fe94 	bl	80004d8 <__aeabi_dmul>
 80077b0:	4622      	mov	r2, r4
 80077b2:	4606      	mov	r6, r0
 80077b4:	460f      	mov	r7, r1
 80077b6:	462b      	mov	r3, r5
 80077b8:	4650      	mov	r0, sl
 80077ba:	4659      	mov	r1, fp
 80077bc:	f7f8 fe8c 	bl	80004d8 <__aeabi_dmul>
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4630      	mov	r0, r6
 80077c6:	4639      	mov	r1, r7
 80077c8:	f7f8 fcd0 	bl	800016c <__adddf3>
 80077cc:	2400      	movs	r4, #0
 80077ce:	4606      	mov	r6, r0
 80077d0:	460f      	mov	r7, r1
 80077d2:	4602      	mov	r2, r0
 80077d4:	460b      	mov	r3, r1
 80077d6:	4640      	mov	r0, r8
 80077d8:	4649      	mov	r1, r9
 80077da:	f7f8 fcc7 	bl	800016c <__adddf3>
 80077de:	a33c      	add	r3, pc, #240	; (adr r3, 80078d0 <__ieee754_pow+0x720>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	4620      	mov	r0, r4
 80077e6:	460d      	mov	r5, r1
 80077e8:	f7f8 fe76 	bl	80004d8 <__aeabi_dmul>
 80077ec:	4642      	mov	r2, r8
 80077ee:	464b      	mov	r3, r9
 80077f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80077f4:	4620      	mov	r0, r4
 80077f6:	4629      	mov	r1, r5
 80077f8:	f7f8 fcb6 	bl	8000168 <__aeabi_dsub>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f8 fcb0 	bl	8000168 <__aeabi_dsub>
 8007808:	a333      	add	r3, pc, #204	; (adr r3, 80078d8 <__ieee754_pow+0x728>)
 800780a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780e:	f7f8 fe63 	bl	80004d8 <__aeabi_dmul>
 8007812:	a333      	add	r3, pc, #204	; (adr r3, 80078e0 <__ieee754_pow+0x730>)
 8007814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007818:	4606      	mov	r6, r0
 800781a:	460f      	mov	r7, r1
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f8 fe5a 	bl	80004d8 <__aeabi_dmul>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4630      	mov	r0, r6
 800782a:	4639      	mov	r1, r7
 800782c:	f7f8 fc9e 	bl	800016c <__adddf3>
 8007830:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007832:	4b34      	ldr	r3, [pc, #208]	; (8007904 <__ieee754_pow+0x754>)
 8007834:	4413      	add	r3, r2
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 fc97 	bl	800016c <__adddf3>
 800783e:	4680      	mov	r8, r0
 8007840:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007842:	4689      	mov	r9, r1
 8007844:	f7f8 fdde 	bl	8000404 <__aeabi_i2d>
 8007848:	4604      	mov	r4, r0
 800784a:	460d      	mov	r5, r1
 800784c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007852:	4b2d      	ldr	r3, [pc, #180]	; (8007908 <__ieee754_pow+0x758>)
 8007854:	4413      	add	r3, r2
 8007856:	e9d3 6700 	ldrd	r6, r7, [r3]
 800785a:	4642      	mov	r2, r8
 800785c:	464b      	mov	r3, r9
 800785e:	f7f8 fc85 	bl	800016c <__adddf3>
 8007862:	4632      	mov	r2, r6
 8007864:	463b      	mov	r3, r7
 8007866:	f7f8 fc81 	bl	800016c <__adddf3>
 800786a:	4622      	mov	r2, r4
 800786c:	462b      	mov	r3, r5
 800786e:	f7f8 fc7d 	bl	800016c <__adddf3>
 8007872:	2000      	movs	r0, #0
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	4682      	mov	sl, r0
 800787a:	468b      	mov	fp, r1
 800787c:	f7f8 fc74 	bl	8000168 <__aeabi_dsub>
 8007880:	4632      	mov	r2, r6
 8007882:	463b      	mov	r3, r7
 8007884:	f7f8 fc70 	bl	8000168 <__aeabi_dsub>
 8007888:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800788c:	f7f8 fc6c 	bl	8000168 <__aeabi_dsub>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4640      	mov	r0, r8
 8007896:	4649      	mov	r1, r9
 8007898:	e60b      	b.n	80074b2 <__ieee754_pow+0x302>
 800789a:	2601      	movs	r6, #1
 800789c:	e69f      	b.n	80075de <__ieee754_pow+0x42e>
 800789e:	bf00      	nop
 80078a0:	4a454eef 	.word	0x4a454eef
 80078a4:	3fca7e28 	.word	0x3fca7e28
 80078a8:	93c9db65 	.word	0x93c9db65
 80078ac:	3fcd864a 	.word	0x3fcd864a
 80078b0:	a91d4101 	.word	0xa91d4101
 80078b4:	3fd17460 	.word	0x3fd17460
 80078b8:	518f264d 	.word	0x518f264d
 80078bc:	3fd55555 	.word	0x3fd55555
 80078c0:	db6fabff 	.word	0xdb6fabff
 80078c4:	3fdb6db6 	.word	0x3fdb6db6
 80078c8:	33333303 	.word	0x33333303
 80078cc:	3fe33333 	.word	0x3fe33333
 80078d0:	e0000000 	.word	0xe0000000
 80078d4:	3feec709 	.word	0x3feec709
 80078d8:	dc3a03fd 	.word	0xdc3a03fd
 80078dc:	3feec709 	.word	0x3feec709
 80078e0:	145b01f5 	.word	0x145b01f5
 80078e4:	be3e2fe0 	.word	0xbe3e2fe0
 80078e8:	7ff00000 	.word	0x7ff00000
 80078ec:	43400000 	.word	0x43400000
 80078f0:	0003988e 	.word	0x0003988e
 80078f4:	000bb679 	.word	0x000bb679
 80078f8:	080083c8 	.word	0x080083c8
 80078fc:	3ff00000 	.word	0x3ff00000
 8007900:	40080000 	.word	0x40080000
 8007904:	080083e8 	.word	0x080083e8
 8007908:	080083d8 	.word	0x080083d8
 800790c:	a39c      	add	r3, pc, #624	; (adr r3, 8007b80 <__ieee754_pow+0x9d0>)
 800790e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007912:	4640      	mov	r0, r8
 8007914:	4649      	mov	r1, r9
 8007916:	f7f8 fc29 	bl	800016c <__adddf3>
 800791a:	4622      	mov	r2, r4
 800791c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007920:	462b      	mov	r3, r5
 8007922:	4650      	mov	r0, sl
 8007924:	4639      	mov	r1, r7
 8007926:	f7f8 fc1f 	bl	8000168 <__aeabi_dsub>
 800792a:	4602      	mov	r2, r0
 800792c:	460b      	mov	r3, r1
 800792e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007932:	f7f9 f861 	bl	80009f8 <__aeabi_dcmpgt>
 8007936:	2800      	cmp	r0, #0
 8007938:	f47f ae06 	bne.w	8007548 <__ieee754_pow+0x398>
 800793c:	4aa2      	ldr	r2, [pc, #648]	; (8007bc8 <__ieee754_pow+0xa18>)
 800793e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007942:	4293      	cmp	r3, r2
 8007944:	f340 8100 	ble.w	8007b48 <__ieee754_pow+0x998>
 8007948:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800794c:	151b      	asrs	r3, r3, #20
 800794e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007952:	fa4a fa03 	asr.w	sl, sl, r3
 8007956:	44b2      	add	sl, r6
 8007958:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800795c:	489b      	ldr	r0, [pc, #620]	; (8007bcc <__ieee754_pow+0xa1c>)
 800795e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007962:	4108      	asrs	r0, r1
 8007964:	ea00 030a 	and.w	r3, r0, sl
 8007968:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800796c:	f1c1 0114 	rsb	r1, r1, #20
 8007970:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007974:	fa4a fa01 	asr.w	sl, sl, r1
 8007978:	2e00      	cmp	r6, #0
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	4620      	mov	r0, r4
 8007980:	4629      	mov	r1, r5
 8007982:	bfb8      	it	lt
 8007984:	f1ca 0a00 	rsblt	sl, sl, #0
 8007988:	f7f8 fbee 	bl	8000168 <__aeabi_dsub>
 800798c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007994:	2400      	movs	r4, #0
 8007996:	4642      	mov	r2, r8
 8007998:	464b      	mov	r3, r9
 800799a:	f7f8 fbe7 	bl	800016c <__adddf3>
 800799e:	a37a      	add	r3, pc, #488	; (adr r3, 8007b88 <__ieee754_pow+0x9d8>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	4620      	mov	r0, r4
 80079a6:	460d      	mov	r5, r1
 80079a8:	f7f8 fd96 	bl	80004d8 <__aeabi_dmul>
 80079ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079b0:	4606      	mov	r6, r0
 80079b2:	460f      	mov	r7, r1
 80079b4:	4620      	mov	r0, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	f7f8 fbd6 	bl	8000168 <__aeabi_dsub>
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4640      	mov	r0, r8
 80079c2:	4649      	mov	r1, r9
 80079c4:	f7f8 fbd0 	bl	8000168 <__aeabi_dsub>
 80079c8:	a371      	add	r3, pc, #452	; (adr r3, 8007b90 <__ieee754_pow+0x9e0>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fd83 	bl	80004d8 <__aeabi_dmul>
 80079d2:	a371      	add	r3, pc, #452	; (adr r3, 8007b98 <__ieee754_pow+0x9e8>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	4680      	mov	r8, r0
 80079da:	4689      	mov	r9, r1
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	f7f8 fd7a 	bl	80004d8 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4640      	mov	r0, r8
 80079ea:	4649      	mov	r1, r9
 80079ec:	f7f8 fbbe 	bl	800016c <__adddf3>
 80079f0:	4604      	mov	r4, r0
 80079f2:	460d      	mov	r5, r1
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7f8 fbb6 	bl	800016c <__adddf3>
 8007a00:	4632      	mov	r2, r6
 8007a02:	463b      	mov	r3, r7
 8007a04:	4680      	mov	r8, r0
 8007a06:	4689      	mov	r9, r1
 8007a08:	f7f8 fbae 	bl	8000168 <__aeabi_dsub>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	460b      	mov	r3, r1
 8007a10:	4620      	mov	r0, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	f7f8 fba8 	bl	8000168 <__aeabi_dsub>
 8007a18:	4642      	mov	r2, r8
 8007a1a:	4606      	mov	r6, r0
 8007a1c:	460f      	mov	r7, r1
 8007a1e:	464b      	mov	r3, r9
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	f7f8 fd58 	bl	80004d8 <__aeabi_dmul>
 8007a28:	a35d      	add	r3, pc, #372	; (adr r3, 8007ba0 <__ieee754_pow+0x9f0>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	4604      	mov	r4, r0
 8007a30:	460d      	mov	r5, r1
 8007a32:	f7f8 fd51 	bl	80004d8 <__aeabi_dmul>
 8007a36:	a35c      	add	r3, pc, #368	; (adr r3, 8007ba8 <__ieee754_pow+0x9f8>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	f7f8 fb94 	bl	8000168 <__aeabi_dsub>
 8007a40:	4622      	mov	r2, r4
 8007a42:	462b      	mov	r3, r5
 8007a44:	f7f8 fd48 	bl	80004d8 <__aeabi_dmul>
 8007a48:	a359      	add	r3, pc, #356	; (adr r3, 8007bb0 <__ieee754_pow+0xa00>)
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	f7f8 fb8d 	bl	800016c <__adddf3>
 8007a52:	4622      	mov	r2, r4
 8007a54:	462b      	mov	r3, r5
 8007a56:	f7f8 fd3f 	bl	80004d8 <__aeabi_dmul>
 8007a5a:	a357      	add	r3, pc, #348	; (adr r3, 8007bb8 <__ieee754_pow+0xa08>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	f7f8 fb82 	bl	8000168 <__aeabi_dsub>
 8007a64:	4622      	mov	r2, r4
 8007a66:	462b      	mov	r3, r5
 8007a68:	f7f8 fd36 	bl	80004d8 <__aeabi_dmul>
 8007a6c:	a354      	add	r3, pc, #336	; (adr r3, 8007bc0 <__ieee754_pow+0xa10>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 fb7b 	bl	800016c <__adddf3>
 8007a76:	4622      	mov	r2, r4
 8007a78:	462b      	mov	r3, r5
 8007a7a:	f7f8 fd2d 	bl	80004d8 <__aeabi_dmul>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	460b      	mov	r3, r1
 8007a82:	4640      	mov	r0, r8
 8007a84:	4649      	mov	r1, r9
 8007a86:	f7f8 fb6f 	bl	8000168 <__aeabi_dsub>
 8007a8a:	4604      	mov	r4, r0
 8007a8c:	460d      	mov	r5, r1
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4640      	mov	r0, r8
 8007a94:	4649      	mov	r1, r9
 8007a96:	f7f8 fd1f 	bl	80004d8 <__aeabi_dmul>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007aa4:	4620      	mov	r0, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	f7f8 fb5e 	bl	8000168 <__aeabi_dsub>
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab4:	f7f8 fe3a 	bl	800072c <__aeabi_ddiv>
 8007ab8:	4632      	mov	r2, r6
 8007aba:	4604      	mov	r4, r0
 8007abc:	460d      	mov	r5, r1
 8007abe:	463b      	mov	r3, r7
 8007ac0:	4640      	mov	r0, r8
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	f7f8 fd08 	bl	80004d8 <__aeabi_dmul>
 8007ac8:	4632      	mov	r2, r6
 8007aca:	463b      	mov	r3, r7
 8007acc:	f7f8 fb4e 	bl	800016c <__adddf3>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	f7f8 fb46 	bl	8000168 <__aeabi_dsub>
 8007adc:	4642      	mov	r2, r8
 8007ade:	464b      	mov	r3, r9
 8007ae0:	f7f8 fb42 	bl	8000168 <__aeabi_dsub>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	2000      	movs	r0, #0
 8007aea:	4939      	ldr	r1, [pc, #228]	; (8007bd0 <__ieee754_pow+0xa20>)
 8007aec:	f7f8 fb3c 	bl	8000168 <__aeabi_dsub>
 8007af0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007af4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007af8:	da29      	bge.n	8007b4e <__ieee754_pow+0x99e>
 8007afa:	4652      	mov	r2, sl
 8007afc:	f000 f874 	bl	8007be8 <scalbn>
 8007b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b04:	f7ff bbfd 	b.w	8007302 <__ieee754_pow+0x152>
 8007b08:	4b32      	ldr	r3, [pc, #200]	; (8007bd4 <__ieee754_pow+0xa24>)
 8007b0a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8007b0e:	429f      	cmp	r7, r3
 8007b10:	f77f af14 	ble.w	800793c <__ieee754_pow+0x78c>
 8007b14:	4b30      	ldr	r3, [pc, #192]	; (8007bd8 <__ieee754_pow+0xa28>)
 8007b16:	440b      	add	r3, r1
 8007b18:	4303      	orrs	r3, r0
 8007b1a:	d009      	beq.n	8007b30 <__ieee754_pow+0x980>
 8007b1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b20:	2200      	movs	r2, #0
 8007b22:	2300      	movs	r3, #0
 8007b24:	f7f8 ff4a 	bl	80009bc <__aeabi_dcmplt>
 8007b28:	3800      	subs	r0, #0
 8007b2a:	bf18      	it	ne
 8007b2c:	2001      	movne	r0, #1
 8007b2e:	e452      	b.n	80073d6 <__ieee754_pow+0x226>
 8007b30:	4622      	mov	r2, r4
 8007b32:	462b      	mov	r3, r5
 8007b34:	f7f8 fb18 	bl	8000168 <__aeabi_dsub>
 8007b38:	4642      	mov	r2, r8
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	f7f8 ff52 	bl	80009e4 <__aeabi_dcmpge>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f43f aefb 	beq.w	800793c <__ieee754_pow+0x78c>
 8007b46:	e7e9      	b.n	8007b1c <__ieee754_pow+0x96c>
 8007b48:	f04f 0a00 	mov.w	sl, #0
 8007b4c:	e720      	b.n	8007990 <__ieee754_pow+0x7e0>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	e7d6      	b.n	8007b00 <__ieee754_pow+0x950>
 8007b52:	f04f 0b00 	mov.w	fp, #0
 8007b56:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007bd0 <__ieee754_pow+0xa20>
 8007b5a:	f7ff bbb9 	b.w	80072d0 <__ieee754_pow+0x120>
 8007b5e:	f04f 0b00 	mov.w	fp, #0
 8007b62:	f04f 0c00 	mov.w	ip, #0
 8007b66:	f7ff bbb3 	b.w	80072d0 <__ieee754_pow+0x120>
 8007b6a:	4640      	mov	r0, r8
 8007b6c:	4649      	mov	r1, r9
 8007b6e:	f7ff bb3c 	b.w	80071ea <__ieee754_pow+0x3a>
 8007b72:	9200      	str	r2, [sp, #0]
 8007b74:	f7ff bb88 	b.w	8007288 <__ieee754_pow+0xd8>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f7ff bb72 	b.w	8007262 <__ieee754_pow+0xb2>
 8007b7e:	bf00      	nop
 8007b80:	652b82fe 	.word	0x652b82fe
 8007b84:	3c971547 	.word	0x3c971547
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	3fe62e43 	.word	0x3fe62e43
 8007b90:	fefa39ef 	.word	0xfefa39ef
 8007b94:	3fe62e42 	.word	0x3fe62e42
 8007b98:	0ca86c39 	.word	0x0ca86c39
 8007b9c:	be205c61 	.word	0xbe205c61
 8007ba0:	72bea4d0 	.word	0x72bea4d0
 8007ba4:	3e663769 	.word	0x3e663769
 8007ba8:	c5d26bf1 	.word	0xc5d26bf1
 8007bac:	3ebbbd41 	.word	0x3ebbbd41
 8007bb0:	af25de2c 	.word	0xaf25de2c
 8007bb4:	3f11566a 	.word	0x3f11566a
 8007bb8:	16bebd93 	.word	0x16bebd93
 8007bbc:	3f66c16c 	.word	0x3f66c16c
 8007bc0:	5555553e 	.word	0x5555553e
 8007bc4:	3fc55555 	.word	0x3fc55555
 8007bc8:	3fe00000 	.word	0x3fe00000
 8007bcc:	fff00000 	.word	0xfff00000
 8007bd0:	3ff00000 	.word	0x3ff00000
 8007bd4:	4090cbff 	.word	0x4090cbff
 8007bd8:	3f6f3400 	.word	0x3f6f3400

08007bdc <fabs>:
 8007bdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007be0:	4619      	mov	r1, r3
 8007be2:	4770      	bx	lr
 8007be4:	0000      	movs	r0, r0
	...

08007be8 <scalbn>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	4616      	mov	r6, r2
 8007bec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	460d      	mov	r5, r1
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	b992      	cbnz	r2, 8007c1e <scalbn+0x36>
 8007bf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007bfc:	4303      	orrs	r3, r0
 8007bfe:	d03c      	beq.n	8007c7a <scalbn+0x92>
 8007c00:	4b31      	ldr	r3, [pc, #196]	; (8007cc8 <scalbn+0xe0>)
 8007c02:	2200      	movs	r2, #0
 8007c04:	f7f8 fc68 	bl	80004d8 <__aeabi_dmul>
 8007c08:	4b30      	ldr	r3, [pc, #192]	; (8007ccc <scalbn+0xe4>)
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	429e      	cmp	r6, r3
 8007c0e:	460d      	mov	r5, r1
 8007c10:	da0f      	bge.n	8007c32 <scalbn+0x4a>
 8007c12:	a329      	add	r3, pc, #164	; (adr r3, 8007cb8 <scalbn+0xd0>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	f7f8 fc5e 	bl	80004d8 <__aeabi_dmul>
 8007c1c:	e006      	b.n	8007c2c <scalbn+0x44>
 8007c1e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007c22:	42ba      	cmp	r2, r7
 8007c24:	d109      	bne.n	8007c3a <scalbn+0x52>
 8007c26:	4602      	mov	r2, r0
 8007c28:	f7f8 faa0 	bl	800016c <__adddf3>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	e023      	b.n	8007c7a <scalbn+0x92>
 8007c32:	460b      	mov	r3, r1
 8007c34:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c38:	3a36      	subs	r2, #54	; 0x36
 8007c3a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8007c3e:	428e      	cmp	r6, r1
 8007c40:	dd0e      	ble.n	8007c60 <scalbn+0x78>
 8007c42:	a31f      	add	r3, pc, #124	; (adr r3, 8007cc0 <scalbn+0xd8>)
 8007c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c48:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007c4c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007c50:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007c54:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007c58:	481d      	ldr	r0, [pc, #116]	; (8007cd0 <scalbn+0xe8>)
 8007c5a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8007c5e:	e7db      	b.n	8007c18 <scalbn+0x30>
 8007c60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007c64:	4432      	add	r2, r6
 8007c66:	428a      	cmp	r2, r1
 8007c68:	dceb      	bgt.n	8007c42 <scalbn+0x5a>
 8007c6a:	2a00      	cmp	r2, #0
 8007c6c:	dd08      	ble.n	8007c80 <scalbn+0x98>
 8007c6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007c72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007c76:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	4629      	mov	r1, r5
 8007c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c80:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007c84:	da0c      	bge.n	8007ca0 <scalbn+0xb8>
 8007c86:	a30c      	add	r3, pc, #48	; (adr r3, 8007cb8 <scalbn+0xd0>)
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8007c90:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8007c94:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8007c98:	480e      	ldr	r0, [pc, #56]	; (8007cd4 <scalbn+0xec>)
 8007c9a:	f041 011f 	orr.w	r1, r1, #31
 8007c9e:	e7bb      	b.n	8007c18 <scalbn+0x30>
 8007ca0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ca4:	3236      	adds	r2, #54	; 0x36
 8007ca6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007caa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <scalbn+0xf0>)
 8007cb6:	e7af      	b.n	8007c18 <scalbn+0x30>
 8007cb8:	c2f8f359 	.word	0xc2f8f359
 8007cbc:	01a56e1f 	.word	0x01a56e1f
 8007cc0:	8800759c 	.word	0x8800759c
 8007cc4:	7e37e43c 	.word	0x7e37e43c
 8007cc8:	43500000 	.word	0x43500000
 8007ccc:	ffff3cb0 	.word	0xffff3cb0
 8007cd0:	8800759c 	.word	0x8800759c
 8007cd4:	c2f8f359 	.word	0xc2f8f359
 8007cd8:	3c900000 	.word	0x3c900000

08007cdc <with_errno>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	4604      	mov	r4, r0
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	4616      	mov	r6, r2
 8007ce4:	f7fd fa22 	bl	800512c <__errno>
 8007ce8:	4629      	mov	r1, r5
 8007cea:	6006      	str	r6, [r0, #0]
 8007cec:	4620      	mov	r0, r4
 8007cee:	bd70      	pop	{r4, r5, r6, pc}

08007cf0 <xflow>:
 8007cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cf2:	4615      	mov	r5, r2
 8007cf4:	461c      	mov	r4, r3
 8007cf6:	b180      	cbz	r0, 8007d1a <xflow+0x2a>
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8007d02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d06:	4628      	mov	r0, r5
 8007d08:	4621      	mov	r1, r4
 8007d0a:	f7f8 fbe5 	bl	80004d8 <__aeabi_dmul>
 8007d0e:	2222      	movs	r2, #34	; 0x22
 8007d10:	b003      	add	sp, #12
 8007d12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d16:	f7ff bfe1 	b.w	8007cdc <with_errno>
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	e7ee      	b.n	8007cfe <xflow+0xe>

08007d20 <__math_uflow>:
 8007d20:	2200      	movs	r2, #0
 8007d22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d26:	f7ff bfe3 	b.w	8007cf0 <xflow>

08007d2a <__math_oflow>:
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007d30:	f7ff bfde 	b.w	8007cf0 <xflow>

08007d34 <__ieee754_sqrt>:
 8007d34:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007ed8 <__ieee754_sqrt+0x1a4>
 8007d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007d40:	460b      	mov	r3, r1
 8007d42:	4606      	mov	r6, r0
 8007d44:	460d      	mov	r5, r1
 8007d46:	460a      	mov	r2, r1
 8007d48:	4604      	mov	r4, r0
 8007d4a:	d10e      	bne.n	8007d6a <__ieee754_sqrt+0x36>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	f7f8 fbc3 	bl	80004d8 <__aeabi_dmul>
 8007d52:	4602      	mov	r2, r0
 8007d54:	460b      	mov	r3, r1
 8007d56:	4630      	mov	r0, r6
 8007d58:	4629      	mov	r1, r5
 8007d5a:	f7f8 fa07 	bl	800016c <__adddf3>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460d      	mov	r5, r1
 8007d62:	4630      	mov	r0, r6
 8007d64:	4629      	mov	r1, r5
 8007d66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	2900      	cmp	r1, #0
 8007d6c:	dc0d      	bgt.n	8007d8a <__ieee754_sqrt+0x56>
 8007d6e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007d72:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007d76:	d0f4      	beq.n	8007d62 <__ieee754_sqrt+0x2e>
 8007d78:	b139      	cbz	r1, 8007d8a <__ieee754_sqrt+0x56>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	f7f8 f9f4 	bl	8000168 <__aeabi_dsub>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	f7f8 fcd2 	bl	800072c <__aeabi_ddiv>
 8007d88:	e7e9      	b.n	8007d5e <__ieee754_sqrt+0x2a>
 8007d8a:	1512      	asrs	r2, r2, #20
 8007d8c:	f000 8089 	beq.w	8007ea2 <__ieee754_sqrt+0x16e>
 8007d90:	2500      	movs	r5, #0
 8007d92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d96:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d9e:	07d2      	lsls	r2, r2, #31
 8007da0:	bf5c      	itt	pl
 8007da2:	005b      	lslpl	r3, r3, #1
 8007da4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007da8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007dac:	bf58      	it	pl
 8007dae:	0064      	lslpl	r4, r4, #1
 8007db0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007db4:	0062      	lsls	r2, r4, #1
 8007db6:	2016      	movs	r0, #22
 8007db8:	4629      	mov	r1, r5
 8007dba:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 8007dbe:	1076      	asrs	r6, r6, #1
 8007dc0:	190f      	adds	r7, r1, r4
 8007dc2:	429f      	cmp	r7, r3
 8007dc4:	bfde      	ittt	le
 8007dc6:	1bdb      	suble	r3, r3, r7
 8007dc8:	1939      	addle	r1, r7, r4
 8007dca:	192d      	addle	r5, r5, r4
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	3801      	subs	r0, #1
 8007dd0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007dd4:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007dd8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007ddc:	d1f0      	bne.n	8007dc0 <__ieee754_sqrt+0x8c>
 8007dde:	4604      	mov	r4, r0
 8007de0:	2720      	movs	r7, #32
 8007de2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007de6:	428b      	cmp	r3, r1
 8007de8:	eb0c 0e00 	add.w	lr, ip, r0
 8007dec:	dc02      	bgt.n	8007df4 <__ieee754_sqrt+0xc0>
 8007dee:	d113      	bne.n	8007e18 <__ieee754_sqrt+0xe4>
 8007df0:	4596      	cmp	lr, r2
 8007df2:	d811      	bhi.n	8007e18 <__ieee754_sqrt+0xe4>
 8007df4:	f1be 0f00 	cmp.w	lr, #0
 8007df8:	eb0e 000c 	add.w	r0, lr, ip
 8007dfc:	da56      	bge.n	8007eac <__ieee754_sqrt+0x178>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	db54      	blt.n	8007eac <__ieee754_sqrt+0x178>
 8007e02:	f101 0801 	add.w	r8, r1, #1
 8007e06:	1a5b      	subs	r3, r3, r1
 8007e08:	4641      	mov	r1, r8
 8007e0a:	4596      	cmp	lr, r2
 8007e0c:	bf88      	it	hi
 8007e0e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007e12:	eba2 020e 	sub.w	r2, r2, lr
 8007e16:	4464      	add	r4, ip
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	3f01      	subs	r7, #1
 8007e1c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007e20:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007e24:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007e28:	d1dd      	bne.n	8007de6 <__ieee754_sqrt+0xb2>
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	d01b      	beq.n	8007e66 <__ieee754_sqrt+0x132>
 8007e2e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007edc <__ieee754_sqrt+0x1a8>
 8007e32:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007ee0 <__ieee754_sqrt+0x1ac>
 8007e36:	e9da 0100 	ldrd	r0, r1, [sl]
 8007e3a:	e9db 2300 	ldrd	r2, r3, [fp]
 8007e3e:	f7f8 f993 	bl	8000168 <__aeabi_dsub>
 8007e42:	e9da 8900 	ldrd	r8, r9, [sl]
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fdbf 	bl	80009d0 <__aeabi_dcmple>
 8007e52:	b140      	cbz	r0, 8007e66 <__ieee754_sqrt+0x132>
 8007e54:	e9da 0100 	ldrd	r0, r1, [sl]
 8007e58:	e9db 2300 	ldrd	r2, r3, [fp]
 8007e5c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007e60:	d126      	bne.n	8007eb0 <__ieee754_sqrt+0x17c>
 8007e62:	463c      	mov	r4, r7
 8007e64:	3501      	adds	r5, #1
 8007e66:	106b      	asrs	r3, r5, #1
 8007e68:	0864      	lsrs	r4, r4, #1
 8007e6a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007e6e:	07ea      	lsls	r2, r5, #31
 8007e70:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007e74:	bf48      	it	mi
 8007e76:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8007e80:	e76d      	b.n	8007d5e <__ieee754_sqrt+0x2a>
 8007e82:	0ae3      	lsrs	r3, r4, #11
 8007e84:	3915      	subs	r1, #21
 8007e86:	0564      	lsls	r4, r4, #21
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d0fa      	beq.n	8007e82 <__ieee754_sqrt+0x14e>
 8007e8c:	02d8      	lsls	r0, r3, #11
 8007e8e:	d50a      	bpl.n	8007ea6 <__ieee754_sqrt+0x172>
 8007e90:	f1c2 0020 	rsb	r0, r2, #32
 8007e94:	fa24 f000 	lsr.w	r0, r4, r0
 8007e98:	1e55      	subs	r5, r2, #1
 8007e9a:	4094      	lsls	r4, r2
 8007e9c:	4303      	orrs	r3, r0
 8007e9e:	1b4a      	subs	r2, r1, r5
 8007ea0:	e776      	b.n	8007d90 <__ieee754_sqrt+0x5c>
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	e7f0      	b.n	8007e88 <__ieee754_sqrt+0x154>
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	3201      	adds	r2, #1
 8007eaa:	e7ef      	b.n	8007e8c <__ieee754_sqrt+0x158>
 8007eac:	4688      	mov	r8, r1
 8007eae:	e7aa      	b.n	8007e06 <__ieee754_sqrt+0xd2>
 8007eb0:	f7f8 f95c 	bl	800016c <__adddf3>
 8007eb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fd7c 	bl	80009bc <__aeabi_dcmplt>
 8007ec4:	b120      	cbz	r0, 8007ed0 <__ieee754_sqrt+0x19c>
 8007ec6:	1ca1      	adds	r1, r4, #2
 8007ec8:	bf08      	it	eq
 8007eca:	3501      	addeq	r5, #1
 8007ecc:	3402      	adds	r4, #2
 8007ece:	e7ca      	b.n	8007e66 <__ieee754_sqrt+0x132>
 8007ed0:	3401      	adds	r4, #1
 8007ed2:	f024 0401 	bic.w	r4, r4, #1
 8007ed6:	e7c6      	b.n	8007e66 <__ieee754_sqrt+0x132>
 8007ed8:	7ff00000 	.word	0x7ff00000
 8007edc:	200001e8 	.word	0x200001e8
 8007ee0:	200001f0 	.word	0x200001f0

08007ee4 <_init>:
 8007ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ee6:	bf00      	nop
 8007ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eea:	bc08      	pop	{r3}
 8007eec:	469e      	mov	lr, r3
 8007eee:	4770      	bx	lr

08007ef0 <_fini>:
 8007ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef2:	bf00      	nop
 8007ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ef6:	bc08      	pop	{r3}
 8007ef8:	469e      	mov	lr, r3
 8007efa:	4770      	bx	lr
